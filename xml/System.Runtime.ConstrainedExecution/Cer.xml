<Type Name="Cer" FullName="System.Runtime.ConstrainedExecution.Cer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="23cdbbda92dc12a56457f1d88e9fa3cae6c7ff8a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725609" /></Metadata><TypeSignature Language="C#" Value="public enum Cer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Cer extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ConstrainedExecution.Cer" />
  <TypeSignature Language="VB.NET" Value="Public Enum Cer" />
  <TypeSignature Language="C++ CLI" Value="public enum class Cer" />
  <TypeSignature Language="F#" Value="type Cer = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8763a-101">제약이 있는 실행 영역에서 호출될 때의 메서드 동작을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-101">Specifies a method's behavior when called within a constrained execution region.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8763a-102"><xref:System.Runtime.ConstrainedExecution.Cer> 열거형 메서드, 형식 또는 어셈블리 제약이 있는 실행 지역 (CER) 내에서 동작을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-102">The <xref:System.Runtime.ConstrainedExecution.Cer> enumeration specifies the behavior of a method, type, or assembly within a constrained execution region (CER).</span></span> <span data-ttu-id="8763a-103">엔터티는 성공 나타내기 위해 세 가지 사용 가능한 값 중 하나를 사용 cer를 알지 또는 명확한 성공 또는 실패를 보고 하는 일을 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-103">Use one of the three available values to indicate that the entity will succeed, has no knowledge of a CER, or might (deterministically) be able to report success or failure.</span></span>  
  
 <span data-ttu-id="8763a-104">CER에서는 코드 영역을 실행 하는 중단 없이 중단 된 스레드 메모리 부족 예외 또는 스택 오버플로 같은 비동기 예외가 발생 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-104">A CER provides guarantees that the region of code will execute uninterrupted even if an asynchronous exception such as an aborted thread out-of-memory exception, or stack overflow is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8763a-105">다음 코드 예제에서는 <xref:System.Runtime.ConstrainedExecution.Cer> 열거형 메서드에 대 한 제약이 있는 실행 지역을 지정 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="8763a-105">The following code example demonstrates the use of the <xref:System.Runtime.ConstrainedExecution.Cer> enumeration when specifying a constrained execution region for a method.</span></span> <span data-ttu-id="8763a-106">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-106">This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.</span></span>  
  
 [!code-csharp[System.Runtime.ConstrainedExecution#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/cs/program.cs#3)]
 [!code-vb[System.Runtime.ConstrainedExecution#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions" />
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)" />
    <related type="Article" href="https://msdn.microsoft.com/library/99354547-39c1-4b0b-8553-938e8f8d1808"><span data-ttu-id="8763a-107">제약이 있는 실행 지역</span><span class="sxs-lookup"><span data-stu-id="8763a-107">Constrained Execution Regions</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cf624c1f-c160-46a1-bb2b-213587688da7"><span data-ttu-id="8763a-108">안전성 모범 사례</span><span class="sxs-lookup"><span data-stu-id="8763a-108">Reliability Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="MayFail">
      <MemberSignature Language="C#" Value="MayFail" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer MayFail = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberSignature Language="VB.NET" Value="MayFail" />
      <MemberSignature Language="C++ CLI" Value="MayFail" />
      <MemberSignature Language="F#" Value="MayFail = 1" Usage="System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="8763a-109">예외 조건이 발생하면 메서드가 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-109">In the face of exceptional conditions, the method might fail.</span></span> <span data-ttu-id="8763a-110">이 경우 해당 메서드는 성공 또는 실패 여부를 호출 메서드에 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-110">In this case, the method will report back to the calling method whether it succeeded or failed.</span></span> <span data-ttu-id="8763a-111">메서드에서 반환 값을 보고할 수 있도록 하려면 메서드 본문을 포함하는 CER가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-111">The method must have a CER around the method body to ensure that it can report the return value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="8763a-112">메서드, 형식 또는 어셈블리에 CER 개념이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-112">The method, type, or assembly has no concept of a CER.</span></span> <span data-ttu-id="8763a-113">CER 보장의 장점을 활용하지 못합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-113">It does not take advantage of CER guarantees.</span></span> <span data-ttu-id="8763a-114">이것은 다음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-114">This implies the following:</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="8763a-115">예외 조건이 발생할 때 메서드가 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-115">In the face of exceptional conditions the method might fail.</span></span>  
  
-   <span data-ttu-id="8763a-116">메서드가 실패 했음을 보고 하지 않을 수도 (비 결정적인 임).</span><span class="sxs-lookup"><span data-stu-id="8763a-116">The method might or might not report that it failed (it is non-deterministic).</span></span>  
  
-   <span data-ttu-id="8763a-117">메서드 (즉, 가장 가능성이 높은 시나리오) 염두에서에 Cer을 사용 하 여 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-117">The method is not written with CERs in mind (which is the most likely scenario).</span></span>  
  
 <span data-ttu-id="8763a-118">로 암시적으로 표시 된 메서드, 형식 또는 어셈블리에 성공 하려면 명시적으로 표시 되지 않으면, `Cer.None`합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-118">If a method, type, or assembly is not explicitly marked to succeed, it is implicitly marked as `Cer.None`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="Success" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer Success = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberSignature Language="VB.NET" Value="Success" />
      <MemberSignature Language="C++ CLI" Value="Success" />
      <MemberSignature Language="F#" Value="Success = 2" Usage="System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="8763a-119">예외 조건이 발생해도 메서드가 성공합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-119">In the face of exceptional conditions, the method is guaranteed to succeed.</span></span> <span data-ttu-id="8763a-120">CER가 아닌 영역에서 메서드가 호출되는 경우라도 CER에서 이 메서드를 포함하도록 구성해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-120">You should always construct a CER around the method that is called, even when it is called from within a non-CER region.</span></span> <span data-ttu-id="8763a-121">메서드가 의도한 작업을 수행하는 경우 작업에 성공합니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-121">A method is successful if it accomplishes what is intended.</span></span> <span data-ttu-id="8763a-122">예를 들어, <see cref="P:System.Collections.ArrayList.Count" />를 <c>ReliabilityContractAttribute(Cer.Success)</c>로 표시하면 이 속성은 CER에서 실행될 때 항상 <see cref="T:System.Collections.ArrayList" />에 있는 요소의 개수를 반환하며 내부 필드를 결정되지 않은 상태로 두지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8763a-122">For example, marking <see cref="P:System.Collections.ArrayList.Count" /> with <c>ReliabilityContractAttribute(Cer.Success)</c> implies that when it is run under a CER, it always returns a count of the number of elements in the <see cref="T:System.Collections.ArrayList" /> and it can never leave the internal fields in an undetermined state.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>