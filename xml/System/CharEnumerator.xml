<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15fed2bc4ae4f1e50f04644340cef5d301112f0d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58687426" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="debc3-101"><see cref="T:System.String" /> 개체의 반복 및 개별 문자 읽기를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="debc3-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-103">A <xref:System.CharEnumerator> 의 참조 된 문자에 대 한 읽기 전용 액세스를 제공 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="debc3-104">예를 들어를 `foreach` 컬렉션의 요소를 반복 하는 Microsoft Visual Basic 및 C# 프로그래밍 언어의 문은 검색을 <xref:System.CharEnumerator> 에서 <xref:System.String> 개체는 문자에 대 한 반복 하려면 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="debc3-105">합니다 `CharEnumerator` 클래스에는 개별 16 비트 열거 <xref:System.Char> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="debc3-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="debc3-106">제자 (즉, 하나 이상의 combiding 문자 뒤에 문자)를 고려 하지 않습니다 (즉, 밖의 문자 유니코드 Basic Multilingual Plane) 쌍을 단일 문자로 서로게이트입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="debc3-107">이러한 종류의 문자를 하나의 단위로 처리 하는 열거자를 사용 합니다 <xref:System.Globalization.StringInfo> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="debc3-108">에 대 한 없는 공용 생성자가 <xref:System.CharEnumerator>입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="debc3-109">대신, 호출을 <xref:System.String> 개체의 <xref:System.String.GetEnumerator%2A> 메서드를 <xref:System.CharEnumerator> 문자열을 참조 하도록 초기화 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="debc3-110">A <xref:System.CharEnumerator> 문자열의 문자에 대 한 내부 인덱스 유지 관리는 <xref:System.CharEnumerator> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="debc3-111">인덱스의 상태가 유효 하 고 문자열에서 문자 위치 논리적으로 첫 번째 문자 앞 또는 마지막 문자 뒤 참조 하는 경우에 잘못 된 문자열 내에서 문자를 참조 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="debc3-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="debc3-112">인덱스 첫 문자를 논리적으로 앞으로 초기화 되 고 반복이 완료 되 면 마지막 문자 뒤 위치로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="debc3-113">인덱스는 유효한 문자에 액세스 하려고 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="debc3-114"><xref:System.CharEnumerator.MoveNext%2A> 메서드 인덱스를 하나 증가 시킴을 첫 번째 및 이후의 문자에 액세스 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="debc3-115"><xref:System.CharEnumerator.Reset%2A> 메서드를 첫 번째 문자 앞으로 논리적으로 인덱스를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="debc3-116"><xref:System.CharEnumerator.Current%2A> 속성 인덱스에서 현재 참조 하는 문자를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="debc3-117">합니다 <xref:System.CharEnumerator.Clone%2A> 메서드의 복사본을 만듭니다는 <xref:System.CharEnumerator>합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="debc3-118">여러 독립 된 인스턴스 <xref:System.CharEnumerator> 하나 이상의 스레드에서 액세스할 수의 단일 인스턴스로 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="debc3-119">지원 하기 위해이 클래스는 구현 된 <xref:System.Collections.IEnumerator> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="debc3-120">열거자의 사용과 관련 된 자세한 내용은 참조는 <xref:System.Collections.IEnumerator> 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="debc3-121">다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="debc3-122">인스턴스화할를 <xref:System.CharEnumerator> 호출 하 여 개체를 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 이동 1 자에서 다음을 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="debc3-123">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있는지 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우) 다음 예제와 같이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="debc3-124">현재 <see cref="T:System.CharEnumerator" /> 개체의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="debc3-125">현재 <see cref="T:System.Object" /> 개체의 복사본인 <see cref="T:System.CharEnumerator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-126">반환 값이 인스턴스의 복사본 인 <xref:System.CharEnumerator> 및 해당 현재 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="debc3-127">반복 하는 동안 상태를 저장 하는 데 유용를 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="debc3-128">예를 들어 응용 프로그램에 사용의 원래 인스턴스 <xref:System.CharEnumerator> 의 각 문자를 반복 하는 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="debc3-129">일부 고유 문자 발생 하면 응용 프로그램 처리를 중지 하 고 호출 된 <xref:System.CharEnumerator.Clone%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="debc3-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="debc3-130">이렇게 하면 실제로 <xref:System.CharEnumerator> 개체의 인덱스를 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="debc3-131">응용 프로그램의 다른 부분으로 이동 하는 복제를 사용 하 여 `String` 일부 보조 처리를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="debc3-132">이 탐색의 부작용은 복제본에 있는 처리가 중지 위치 추적 하지 않게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="debc3-133">그러나 보조 처리가 완료 되 면 응용 프로그램은 복제본을 삭제 하 고 원래를 사용 하 여 <xref:System.CharEnumerator> 작업을 다시 시작 하는 인스턴스는 <xref:System.String> 원래 처리가 중지 되는 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="debc3-134">지원 하기 위해이 메서드는 구현 된 <xref:System.ICloneable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="debc3-135">이 <see cref="T:System.CharEnumerator" /> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="debc3-136">이 <see cref="T:System.CharEnumerator" /> 개체에서 현재 참조하는 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-137">합니다 <xref:System.CharEnumerator> 클래스는 열거 된 문자열을 내부 인덱스를 유지 관리 및 <xref:System.CharEnumerator.Current%2A> 속성 인덱스에서 현재 참조 되는 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="debc3-138">인덱스가 유효 하는 경우에이 속성을 호출 해야 그렇지 않으면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="debc3-139">인덱스는 항상 빈 문자열에 대 한 유효한 ("").</span><span class="sxs-lookup"><span data-stu-id="debc3-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="debc3-140">또한 인덱스는 유효 기간이 합니다 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 또는 <xref:System.CharEnumerator.Reset%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="debc3-141">이러한 방법 중 하나를 호출한 다음 호출을 <xref:System.CharEnumerator.MoveNext%2A> 열거형된 문자열의 첫 번째 문자 인덱스를 조정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="debc3-142">인덱스가 유효 때마다 합니다 <xref:System.CharEnumerator.MoveNext%2A> 메서드가 반환 되는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="debc3-143"><xref:System.CharEnumerator.Current%2A> 연속으로 호출 하 고 인덱스를 이동 하지 않습니다 <xref:System.CharEnumerator.Current%2A> 될 때까지 동일한 문자를 반환 <xref:System.CharEnumerator.MoveNext%2A>를 <xref:System.CharEnumerator.Reset%2A>, 또는 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="debc3-144">다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="debc3-145">인스턴스화할를 <xref:System.CharEnumerator> 호출 하 여 개체를 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 이동 1 자에서 다음을 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="debc3-146">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있는지 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우) 다음 예제와 같이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="debc3-147">인덱스가 유효하지 않는 경우. 즉, 인덱스가 열거형 문자열의 첫 번째 문자 앞이나 마지막 문자 뒤의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="debc3-148"><see cref="T:System.CharEnumerator" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-149"><xref:System.CharEnumerator.Dispose%2A> 사용을 마치면 <xref:System.CharEnumerator>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="debc3-150"><xref:System.CharEnumerator.Dispose%2A> 메서드를 사용하면 <xref:System.CharEnumerator>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="debc3-151">호출한 후 <xref:System.CharEnumerator.Dispose%2A>에 대 한 모든 참조를 해제 해야 합니다 <xref:System.CharEnumerator> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.CharEnumerator> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="debc3-152">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="debc3-153"><xref:System.CharEnumerator.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.CharEnumerator>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="debc3-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="debc3-154">이렇게 하지 않으면 가비지 컬렉션이 <xref:System.CharEnumerator> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="debc3-155">현재 <see cref="T:System.CharEnumerator" /> 개체의 내부 인덱스를 열거된 문자열의 다음 문자로 증가시킵니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns><span data-ttu-id="debc3-156">인덱스가 성공적으로 증가하고 열거형 문자 내에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-156"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-157">합니다 <xref:System.CharEnumerator> 클래스는 열거 된 문자열을 내부 인덱스를 유지 관리 및 <xref:System.CharEnumerator.MoveNext%2A> 메서드 인덱스를 하나 증가 시킴 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="debc3-158">호출 <xref:System.CharEnumerator.MoveNext%2A> 호출한 후 <xref:System.String.GetEnumerator%2A> 또는 <xref:System.CharEnumerator.Reset%2A> 열거형된 문자열의 첫 번째 문자를 현재 문자 위치를 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="debc3-159">반환 값은 확인 `true` 현재 문자 위치가 유효한 지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="debc3-160">인덱스 열거 된 문자열의 마지막 문자를 넘어가는 이미 인덱스 변경 되지 않습니다 및 `false` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="debc3-161">열거 된 문자열이 비어 있으면 알 수 있습니다 ("")의 상태를 <xref:System.CharEnumerator> 항상 유효 하지.</span><span class="sxs-lookup"><span data-stu-id="debc3-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="debc3-162">때문에 대 한 내부 인덱스는 <xref:System.CharEnumerator> 처음 열거 된 문자열의 첫 번째 문자 앞 이며 따라서 유효 하지 않은 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="debc3-163"><xref:System.CharEnumerator.MoveNext%2A> 또한 잘못 된 열거형된 문자열의 마지막 (존재 하지 않는) 문자 뒤 인덱스를 논리적으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="debc3-164">다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="debc3-165">인스턴스화할를 <xref:System.CharEnumerator> 호출 하 여 개체를 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 이동 1 자에서 다음을 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="debc3-166">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있는지 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우) 다음 예제와 같이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="debc3-167">인덱스를 논리적으로 열거형 문자열의 첫째 문자 앞으로 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-167">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-168">합니다 <xref:System.CharEnumerator> 클래스는 열거 된 문자열을 내부 인덱스를 유지 관리 및 <xref:System.CharEnumerator.Reset%2A> 메서드는 인덱스를 잘못 된 상태를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="debc3-169">이 <see cref="T:System.CharEnumerator" /> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="debc3-170">이 멤버에 대한 설명은 <see cref="P:System.Collections.IEnumerator.Current" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="debc3-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="debc3-171">이 <see cref="T:System.CharEnumerator" /> 개체에서 현재 참조하는 boxing된 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="debc3-172">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="debc3-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="debc3-173"><xref:System.CharEnumerator> 인스턴스가 <xref:System.Collections.IEnumerator> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="debc3-174">열거가 시작되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-174">Enumeration has not started.</span></span>  
  
<span data-ttu-id="debc3-175">또는</span><span class="sxs-lookup"><span data-stu-id="debc3-175">-or-</span></span> 
<span data-ttu-id="debc3-176">열거형이 끝났습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-176">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="debc3-177"><see cref="T:System.CharEnumerator" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="debc3-178">완료 했으면 IDisposable.Dispose 호출를 사용 하 여는 <xref:System.CharEnumerator> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="debc3-179">메서드는 <xref:System.CharEnumerator> 클래스를 사용할 수 없는 상태에서입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="debc3-180">를 호출한 후에 대 한 모든 참조를 해제 해야 합니다 <xref:System.CharEnumerator> 가비지 수집기에서 메모리를 회수할 수 있도록 클래스는 <xref:System.CharEnumerator> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="debc3-181">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="debc3-182">에 대 한 마지막 참조를 해제 하기 전에 항상 IDisposable.Dispose를 호출 합니다 <xref:System.CharEnumerator> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="debc3-183">이렇게 하지 않으면 가비지 컬렉션이 <xref:System.CharEnumerator> 개체의 <xref:System.Object.Finalize> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="debc3-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>