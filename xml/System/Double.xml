<Type Name="Double" FullName="System.Double">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3341113ad2f5877991385e44636466bbbe74d1fc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57931391" /></Metadata><TypeSignature Language="C#" Value="public struct Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IConvertible, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Double" />
  <TypeSignature Language="VB.NET" Value="Public Structure Double&#xA;Implements IComparable, IComparable(Of Double), IConvertible, IEquatable(Of Double), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type double = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="63892-101">배정밀도 부동 소수점 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-101">Represents a double-precision floating-point number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-102">합니다 <xref:System.Double> 값 형식은 음수 1.79769313486232e308부터 양수 또는 음수 0, 뿐만 아니라 양수 1.79769313486232e308 범위의 값을 사용 하 여 배정밀도 64 비트 숫자를 나타냅니다 <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, 및 (not-a-number<xref:System.Double.NaN>).</span><span class="sxs-lookup"><span data-stu-id="63892-102">The <xref:System.Double> value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, and not a number (<xref:System.Double.NaN>).</span></span> <span data-ttu-id="63892-103">(예: 행성 또는 은하계 간 거리) 매우 큰 수 또는 매우 작은 (킬로그램에서 물질의 분자 mass)와 종종 는지 않습니다 (예: 지구 까지의 거리 다른 태양계), 정확한 값을 나타내는 것은 <xref:System.Double> 형식은 IEC 60559: 1989 (IEEE 754) 이진 부동 소수점 연산에 대 한 표준 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-103">It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system), The <xref:System.Double> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="63892-104">이 항목은 다음 섹션으로 구성되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-104">This topic consists of the following sections:</span></span>  
  
-   [<span data-ttu-id="63892-105">부동 소수점 표현 및 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-105">Floating-point representation and precision</span></span>](#Precision)  
  
-   [<span data-ttu-id="63892-106">같음에 대 한 테스트</span><span class="sxs-lookup"><span data-stu-id="63892-106">Testing for equality</span></span>](#Equality)  
  
-   [<span data-ttu-id="63892-107">부동 소수점 값 및 예외</span><span class="sxs-lookup"><span data-stu-id="63892-107">Floating-point values and exceptions</span></span>](#Exceptions)  
  
-   [<span data-ttu-id="63892-108">형식 변환 및 Double 구조체</span><span class="sxs-lookup"><span data-stu-id="63892-108">Type conversions and the Double structure</span></span>](#Conversions)  
  
-   [<span data-ttu-id="63892-109">부동 소수점 기능</span><span class="sxs-lookup"><span data-stu-id="63892-109">Floating-point functionality</span></span>](#Functionality)  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a><span data-ttu-id="63892-110">부동 소수점 표현 및 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-110">Floating-Point Representation and Precision</span></span>  
 <span data-ttu-id="63892-111"><xref:System.Double> 데이터 형식은 다음 표에 나와 있는 것 처럼 이진 형식으로 64 비트 배정밀도 부동 소수점 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-111">The <xref:System.Double> data type stores double-precision floating-point values in a 64-bit binary format, as shown in the following table:</span></span>  
  
|<span data-ttu-id="63892-112">파트</span><span class="sxs-lookup"><span data-stu-id="63892-112">Part</span></span>|<span data-ttu-id="63892-113">비트</span><span class="sxs-lookup"><span data-stu-id="63892-113">Bits</span></span>|  
|----------|----------|  
|<span data-ttu-id="63892-114">기호나 유효 숫자 또는 수</span><span class="sxs-lookup"><span data-stu-id="63892-114">Significand or mantissa</span></span>|<span data-ttu-id="63892-115">0-51</span><span class="sxs-lookup"><span data-stu-id="63892-115">0-51</span></span>|  
|<span data-ttu-id="63892-116">지 수</span><span class="sxs-lookup"><span data-stu-id="63892-116">Exponent</span></span>|<span data-ttu-id="63892-117">52-62</span><span class="sxs-lookup"><span data-stu-id="63892-117">52-62</span></span>|  
|<span data-ttu-id="63892-118">로그인 (0 = 1 양수, 음수 =)</span><span class="sxs-lookup"><span data-stu-id="63892-118">Sign (0 = Positive, 1 = Negative)</span></span>|<span data-ttu-id="63892-119">63</span><span class="sxs-lookup"><span data-stu-id="63892-119">63</span></span>|  
  
 <span data-ttu-id="63892-120">소수 일부 소수 자릿수 값을 정확 하 게 표현할 수 없는 경우와 마찬가지로 (1/3 같은 또는 <xref:System.Math.PI?displayProperty=nameWithType>), 이진 분수 일부 소수 자릿수 값을 나타내는 수.</span><span class="sxs-lookup"><span data-stu-id="63892-120">Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=nameWithType>), binary fractions are unable to represent some fractional values.</span></span> <span data-ttu-id="63892-121">예를 들어, 1/10, 소수 부분으로.1에서 정확 하 게 표현 되는 패턴 "0011" 반복으로 무한대로 사용 하 여 이진 소수로.001100110011으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-121">For example, 1/10, which is represented precisely by .1 as a decimal fraction, is represented by .001100110011 as a binary fraction, with the pattern "0011" repeating to infinity.</span></span> <span data-ttu-id="63892-122">이 경우 부동 소수점 값에는 표시 되는 개수는 정확 하지 않은 표현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-122">In this case, the floating-point value provides an imprecise representation of the number that it represents.</span></span> <span data-ttu-id="63892-123">추가 수치 연산은 원래 부동 소수점 값을 자주 수행 정밀도 부족 증가 하는 경향이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-123">Performing additional mathematical operations on the original floating-point value often tends to increase its lack of precision.</span></span> <span data-ttu-id="63892-124">예를 들어,.1에서 10을 곱한 결과 비교 하 고.1을.1 9 번에 추가할 것을 볼는 또한 8 더 많은 작업 관련에 있기 때문 경우 덜 정확한 결과 생성 했습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-124">For example, if we compare the result of multiplying .1 by 10 and adding .1 to .1 nine times, we see that addition, because it has involved eight more operations, has produced the less precise result.</span></span> <span data-ttu-id="63892-125">이 차이로 인해는 두 개의 표시 하는 경우에 그렇습니다 <xref:System.Double> "R"을 사용 하 여 값 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md)는 필요한 지 자릿수 17 자리를 모두 표시 하는 경우는 <xref:System.Double> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-125">Note that this disparity is apparent only if we display the two <xref:System.Double> values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md), which if necessary displays all 17 digits of precision supported by the <xref:System.Double> type.</span></span>  
  
 [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
 [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
 <span data-ttu-id="63892-126">일부 숫자는 소수 이진 값으로 정확히 나타낼 수 없는, 때문에 대략적인 실수 부동 소수점 숫자에 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-126">Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</span></span>  
  
 <span data-ttu-id="63892-127">모든 부동 소수점 숫자에는 또한 제한 된 수의 유효 자릿수도 부동 소수점 값을 근사치 실수를 계산 하는 얼마나 정확한 지를 결정 하는 경우</span><span class="sxs-lookup"><span data-stu-id="63892-127">All floating-point numbers also have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</span></span>   <span data-ttu-id="63892-128"><xref:System.Double> 값에 최대 15 개의 10 진수 자리의 정밀도 내부적으로 최대 17 자리가 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-128">A <xref:System.Double> value has up to 15 decimal digits of precision, although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="63892-129">즉, 부동 소수점 연산 부동 변경 하려면 전체 자릿수를 없는 경우도 점 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-129">This means that some floating-point operations may lack the precision to change a floating point value.</span></span> <span data-ttu-id="63892-130">다음 예제에서 이에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-130">The following example provides an illustration.</span></span> <span data-ttu-id="63892-131">매우 큰 부동 소수점 값을 정의 하 고 추가한 다음 제품의 <xref:System.Double.Epsilon?displayProperty=nameWithType> 및 1, 000 조 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-131">It defines a very large floating-point value, and then adds the product of <xref:System.Double.Epsilon?displayProperty=nameWithType> and one quadrillion to it.</span></span> <span data-ttu-id="63892-132">그러나 제품에는 원래 부동 소수점 값을 수정 하려면 너무 작습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-132">The product, however, is too small to modify the original floating-point value.</span></span> <span data-ttu-id="63892-133">반면 제품의 최대 유효 자릿수는 10 최하위 해당 숫자는 1/1000 초<sup>-309</sup>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-133">Its least significant digit is thousandths, whereas the most significant digit in the product is 10<sup>-309</sup>.</span></span>  
  
 [!code-csharp[System.Double.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation2.cs#4)]
 [!code-vb[System.Double.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation2.vb#4)]  
  
 <span data-ttu-id="63892-134">제한 된 정밀도 부동 소수점 숫자의 몇 가지 결과가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-134">The limited precision of a floating-point number has several consequences:</span></span>  
  
-   <span data-ttu-id="63892-135">특정 전체 자릿수에서 동일 하 게 나타나는 두 부동 소수점 숫자 수 비교 하 여 같지 최소 유효 자릿수가 다르므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-135">Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</span></span> <span data-ttu-id="63892-136">다음 예제에서는 일련의 숫자를 더한 하 고 해당 합계는 예상 되는 전체를 사용 하 여 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-136">In the following example, a series of numbers are added together, and their total is compared with their expected total.</span></span> <span data-ttu-id="63892-137">마찬가지로 호출 될 것으로 나타나지만 두 값을 `Equals` 메서드 않은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-137">Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.</span></span>  
  
     [!code-csharp[System.Double.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Double.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist3.vb#6)]  
  
     <span data-ttu-id="63892-138">형식 항목을 변경 하는 경우는 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> 에서 문을 `{0}` 및 `{1}` 하 `{0:R}` 및 `{1:R}` 두 유효 자릿수가 모두 표시 하려면 <xref:System.Double> 값 라는 사실은 의심할 두 값이 같지 않은지 때문에 또한 작업 중 전체 자릿수의 손실입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-138">If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two <xref:System.Double> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</span></span> <span data-ttu-id="63892-139">이 경우 호출 하 여 문제를 해결할 수 있습니다 합니다 <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> 반올림할 메서드는 <xref:System.Double> 비교를 수행 하기 전에 원하는 정밀도 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-139">In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> method to round the <xref:System.Double> values to the desired precision before performing the comparison.</span></span>  
  
-   <span data-ttu-id="63892-140">부동 소수점 숫자를 사용 하는 수치 또는 비교 작업을 생성 하지 동일한 결과 10 진수를 사용 하는 경우 이진 부동 소수점 숫자는 10 진수과 같지 않을 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-140">A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</span></span> <span data-ttu-id="63892-141">앞의 예제는이.1 시간을 추가 하 고.1에서 10을 곱한 결과 표시 하 여 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-141">A previous example illustrated this by displaying the result of multiplying .1 by 10 and adding .1 times.</span></span>  
  
     <span data-ttu-id="63892-142">소수 자릿수 값을 사용 하 여 숫자 작업의 정확도 중요 한 경우 사용할 수는 <xref:System.Decimal> 대신 <xref:System.Double> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-142">When accuracy in numeric operations with fractional values is important, you can use the <xref:System.Decimal> rather than the <xref:System.Double> type.</span></span> <span data-ttu-id="63892-143">때 범위를 벗어난 정수 값을 사용 하 여 숫자 작업의 정확도 <xref:System.Int64> 또는 <xref:System.UInt64> 사용 하 여 형식을 반드시는 <xref:System.Numerics.BigInteger> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-143">When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.</span></span>  
  
-   <span data-ttu-id="63892-144">값에 부동 소수점 숫자가 포함 된 경우 라운드트립되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-144">A value might not round-trip if a floating-point number is involved.</span></span> <span data-ttu-id="63892-145">작업이 다른 폼에는 원래 부동 소수점 숫자를 변환, 역 작업이 변환 된 폼 부동 소수점 숫자로 다시 변환 및 최종 부동 소수점 숫자가 원래 같지 않은 경우 값을 라운드트립 하 라고 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-145">A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is not equal to the original floating-point number.</span></span> <span data-ttu-id="63892-146">하나 이상의 최소 유효 자릿수가 손실 되거나 변환에서 변경 때문에 대 한 왕복은 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-146">The round trip might fail because one or more least significant digits are lost or changed in a conversion.</span></span> <span data-ttu-id="63892-147">다음 예제에서는 세 가지 <xref:System.Double> 값을 문자열로 변환 되 고 파일에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-147">In the following example, three <xref:System.Double> values are converted to strings and saved in a file.</span></span> <span data-ttu-id="63892-148">하지만 결과 같이, 값을 동일 하 게 표시 하는 경우에 복원 된 값을 원래 값과 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-148">As the output shows, however, even though the values appear to be identical, the restored values are not equal to the original values.</span></span>  
  
     [!code-csharp[System.Double.Structure#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist4.cs#7)]
     [!code-vb[System.Double.Structure#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist4.vb#7)]  
  
     <span data-ttu-id="63892-149">이 경우에 값은 성공적으로 라운드트립 "G17"를 사용 하 여 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 의 전체 자릿수를 유지 하기 위해 <xref:System.Double> 다음 예제와 같이 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-149">In this case, the values can be successfully round-tripped by using the "G17" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to preserve the full precision of <xref:System.Double> values, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist5.cs#8)]
     [!code-vb[System.Double.Structure#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist5.vb#8)]  

   > [!IMPORTANT]
   >  <span data-ttu-id="63892-150">와 함께 사용할 경우는 <xref:System.Double> 값, 일부 경우에 "R" 서식 지정자는 원래 값을 성공적으로 라운드트립 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-150">When used with a <xref:System.Double> value, the "R" format specifier in some cases fails to successfully round-trip the original value.</span></span> <span data-ttu-id="63892-151">되도록 <xref:System.Double> "G17" 형식 지정자를 사용 하는 값 성공적으로 라운드트립 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-151">To ensure that <xref:System.Double> values successfully round-trip, use the "G17" format specifier.</span></span>

-   <span data-ttu-id="63892-152"><xref:System.Single> 값에 보다 적은 전체 자릿수가 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-152"><xref:System.Single> values have less precision than <xref:System.Double> values.</span></span> <span data-ttu-id="63892-153">A <xref:System.Single> 겉보기 해당 하는 변환 된 값 <xref:System.Double> 종종와 같지 않습니다는 <xref:System.Double> 값 정밀도에 차이가 있기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-153">A <xref:System.Single> value that is converted to a seemingly equivalent <xref:System.Double> often does not equal the <xref:System.Double> value because of differences in precision.</span></span> <span data-ttu-id="63892-154">다음 예제에서는 동일한 나누기 작업의 결과에 할당 되는 <xref:System.Double> 및 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-154">In the following example, the result of identical division operations is assigned to a <xref:System.Double> and a <xref:System.Single> value.</span></span> <span data-ttu-id="63892-155">후 합니다 <xref:System.Single> 값으로 캐스팅 됩니다는 <xref:System.Double>, 두 값의 비교는 서로 다른 지 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-155">After the <xref:System.Single> value is cast to a <xref:System.Double>, a comparison of the two values shows that they are unequal.</span></span>  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     <span data-ttu-id="63892-156">이 문제를 방지 하려면 하나를 사용 합니다 <xref:System.Double> 대신를 <xref:System.Single> 데이터 형식 또는 사용 하 여는 <xref:System.Math.Round%2A> 메서드 값이 모두 동일한 전체 자릿수를 갖도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-156">To avoid this problem, use either the <xref:System.Double> in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.</span></span>  
  
 <span data-ttu-id="63892-157">또한 사용 하 여 산술 연산 및 할당 작업의 결과 <xref:System.Double> 값이 다른 약간 플랫폼에서의 정밀도 손실로 인해는 <xref:System.Double> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-157">In addition, the result of arithmetic and assignment operations with <xref:System.Double> values may differ slightly by platform because of the loss of precision of the <xref:System.Double> type.</span></span> <span data-ttu-id="63892-158">예를 들어, 리터럴을 할당 하는 결과 <xref:System.Double> 값 32 비트 및 64 비트 버전의.NET Framework에서 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-158">For example, the result of assigning a literal <xref:System.Double> value may differ in the 32-bit and 64-bit versions of the .NET Framework.</span></span> <span data-ttu-id="63892-159">다음 예제에서는이 때 그 차이 리터럴 값-4.42330604244772 e-값인-4.42330604244772 e 변수와 305-305에 할당 된는 <xref:System.Double> 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-159">The following example illustrates this difference when the literal value -4.42330604244772E-305 and a variable whose value is -4.42330604244772E-305 are assigned to a <xref:System.Double> variable.</span></span> <span data-ttu-id="63892-160">결과 <xref:System.Double.Parse%28System.String%29> 메서드가 경우 정밀도 손실에서 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-160">Note that the result of the <xref:System.Double.Parse%28System.String%29> method in this case does not suffer from a loss of precision.</span></span>  
  
 [!code-csharp[System.Double.Class.Precision#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.class.precision/cs/precision1.cs#1)]
 [!code-vb[System.Double.Class.Precision#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.class.precision/vb/precision1.vb#1)]  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a><span data-ttu-id="63892-161">같음에 대 한 테스트</span><span class="sxs-lookup"><span data-stu-id="63892-161">Testing for Equality</span></span>  
 <span data-ttu-id="63892-162">값이 같고 간주 되기 위해 두 <xref:System.Double> 값에 동일한 값을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-162">To be considered equal, two <xref:System.Double> values must represent identical values.</span></span> <span data-ttu-id="63892-163">그러나 정밀도 값 차이로 인해 또는 하나 또는 두 값에 따라 정밀도 손실 때문에 종종 동일한 것으로 예상 되는 부동 소수점 값 판명 최소 유효 자릿수가에 차이가 있으므로 동일 하지 않은 것입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-163">However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal because of differences in their least significant digits.</span></span> <span data-ttu-id="63892-164">결과적으로, 호출을 <xref:System.Double.Equals%2A> 두 값이 같은지를 확인 하는 메서드 또는 호출을 <xref:System.Double.CompareTo%2A> 간 관계를 결정 하는 방법 <xref:System.Double> 값에는 종종 예기치 않은 결과가 발생할 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-164">As a result, calls to the <xref:System.Double.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Double.CompareTo%2A> method to determine the relationship between two <xref:System.Double> values, often yield unexpected results.</span></span> <span data-ttu-id="63892-165">이 다음 예제에서 분명 한 두 개 보이는 같아야 <xref:System.Double> 낮으므로 첫 번째 15 자리의 전체 자릿수를 두 번째는 17 같지 않은 것으로 판명 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-165">This is evident in the following example, where two apparently equal <xref:System.Double> values turn out to be unequal because the first has 15 digits of precision, while the second has 17.</span></span>  
  
 [!code-csharp[System.Double.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Double.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison1.vb#9)]  
  
 <span data-ttu-id="63892-166">계산 된 값을 서로 다른 코드 경로 따르는 및 종종 서로 다른 방식으로 조작 하는 같지 않은 것으로 입증 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-166">Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</span></span> <span data-ttu-id="63892-167">다음 예제에서는 하나의 <xref:System.Double> 값, 값을 제곱 하 고 원래 값을 복원 하기 위해 제곱근 계산 되는 다음입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-167">In the following example, one <xref:System.Double> value is squared, and then the square root is calculated to restore the original value.</span></span> <span data-ttu-id="63892-168">두 번째 <xref:System.Double> 3.51으로 곱하고 원래 값을 복원 하는 3.51 나눈 결과의 제곱근 전에 제곱 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-168">A second <xref:System.Double> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</span></span> <span data-ttu-id="63892-169">두 값을 동일 하 게 표시 되지만 호출 된 <xref:System.Double.Equals%28System.Double%29> 메서드는 서로 다른 지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-169">Although the two values appear to be identical, a call to the <xref:System.Double.Equals%28System.Double%29> method indicates that they are not equal.</span></span> <span data-ttu-id="63892-170">두 번째 값.0000000000001 임을 보여주고 "R" 표준 서식 문자열을 사용 하 여 각 Double 값의 모든 유효 자릿수가 표시 하는 결과 문자열을 반환 하도록 첫 번째 미만입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-170">Using the "R" standard format string to return a result string that displays all the significant digits of each Double value shows that the second value is .0000000000001 less than the first.</span></span>  
  
 [!code-csharp[System.Double.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Double.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison2.vb#10)]  
  
 <span data-ttu-id="63892-171">비교의 결과 영향을 줄 가능성이 높은 정밀도 손실 인 경우에 호출 하는 다음 방법 중 하나 채택할 수 있습니다 합니다 <xref:System.Double.Equals%2A> 또는 <xref:System.Double.CompareTo%2A> 메서드:</span><span class="sxs-lookup"><span data-stu-id="63892-171">In cases where a loss of precision is likely to affect the result of a comparison, you can adopt any of the following alternatives to calling the <xref:System.Double.Equals%2A> or <xref:System.Double.CompareTo%2A> method:</span></span>  
  
-   <span data-ttu-id="63892-172">호출 된 <xref:System.Math.Round%2A?displayProperty=nameWithType> 값이 모두 동일한 전체 자릿수를 갖도록 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-172">Call the <xref:System.Math.Round%2A?displayProperty=nameWithType> method to ensure that both values have the same precision.</span></span> <span data-ttu-id="63892-173">다음 예제에서는 두 소수 자릿수 값이 같으면 되도록이 방법을 사용 하려면 앞의 예제를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-173">The following example modifies a previous example to use this approach so that two fractional values are equivalent.</span></span>  
  
     [!code-csharp[System.Double.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Double.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison3.vb#11)]  
  
     <span data-ttu-id="63892-174">Note, 그러나 자릿수 문제 중간점 값이 반올림에 계속 적용 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-174">Note, though, that the problem of precision still applies to rounding of midpoint values.</span></span> <span data-ttu-id="63892-175">자세한 내용은 <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-175">For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="63892-176">대략적인 같음 테스트를 일치 하는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-176">Test for approximate equality rather than equality.</span></span> <span data-ttu-id="63892-177">이렇게 하려면 절대 중 하나를 정의 하는 크기는 두 값 수 다르지만 여전히 같아야 또는 더 작은 값을 더 큰 값에서 분기 수는 상대 크기를 정의 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-177">This requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="63892-178"><xref:System.Double.Epsilon?displayProperty=nameWithType> 두 거리에 대 한 절대 수단으로 사용 하는 경우도 <xref:System.Double> 값 일치 여부를 테스트 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="63892-178"><xref:System.Double.Epsilon?displayProperty=nameWithType> is sometimes used as an absolute measure of the distance between two <xref:System.Double> values when testing for equality.</span></span>  <span data-ttu-id="63892-179">그러나 <xref:System.Double.Epsilon?displayProperty=nameWithType> 를 추가 하거나에서 뺄 수 있는 가장 작은 가능한 값을 측정 한 <xref:System.Double> 값이 0 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-179">However, <xref:System.Double.Epsilon?displayProperty=nameWithType> measures the smallest possible value that can be added to, or subtracted from, a <xref:System.Double> whose value is zero.</span></span> <span data-ttu-id="63892-180">대부분의 양수 및 음수 <xref:System.Double> 값, 값 <xref:System.Double.Epsilon?displayProperty=nameWithType> 검색할 하기에 너무 작습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-180">For most positive and negative <xref:System.Double> values, the value of <xref:System.Double.Epsilon?displayProperty=nameWithType> is too small to be detected.</span></span> <span data-ttu-id="63892-181">따라서 크기가 0 인 값을 제외 하 고 바람직하지 않습니다 같은지 여부를 테스트에 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-181">Therefore, except for values that are zero, we do not recommend its use in tests for equality.</span></span>  
  
     <span data-ttu-id="63892-182">다음 예제에서는 후자의 방법을 사용 하 여 정의 `IsApproximatelyEqual` 두 값 간의 상대적 차이 테스트 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-182">The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values.</span></span> <span data-ttu-id="63892-183">에 대 한 호출의 결과 또한 대조 합니다 `IsApproximatelyEqual` 메서드 및 <xref:System.Double.Equals%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-183">It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
     [!code-csharp[System.Double.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Double.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a><span data-ttu-id="63892-184">부동 소수점 값 및 예외</span><span class="sxs-lookup"><span data-stu-id="63892-184">Floating-Point Values and Exceptions</span></span>  
 <span data-ttu-id="63892-185">정수 계열 형식의 경우 0으로 오버플로 또는 나누기와 같은 잘못 된 작업의 경우에서 예외를 throw, 작업과 달리 부동 소수점 값을 사용 하 여 작업 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-185">Unlike operations with integral types, which throw exceptions in cases of overflow or illegal operations such as division by zero, operations with floating-point values do not throw exceptions.</span></span> <span data-ttu-id="63892-186">대신 예외 상황 부동 소수점 연산의 결과 0, 양의 무한대, 음의 무한대 또는 (nan 숫자가) 숫자가 아님:</span><span class="sxs-lookup"><span data-stu-id="63892-186">Instead, in exceptional situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</span></span>  
  
-   <span data-ttu-id="63892-187">부동 소수점 연산의 결과가 너무 작아서 대상 형식에 대 한 인 경우 결과 0입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-187">If the result of a floating-point operation is too small for the destination format, the result is zero.</span></span> <span data-ttu-id="63892-188">다음 예제와 같이 두 가지 매우 작은 수를 곱할 때 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-188">This can occur when two very small numbers are multiplied, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Double.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional1.vb#1)]  
  
-   <span data-ttu-id="63892-189">작업의 결과 대상 형식의 범위를 초과 하는 부동 소수점 연산 결과의 크기가 <xref:System.Double.PositiveInfinity> 또는 <xref:System.Double.NegativeInfinity>, 결과의 부호에 적합 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-189">If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>, as appropriate for the sign of the result.</span></span> <span data-ttu-id="63892-190">오버플로 하는 작업의 결과 <xref:System.Double.MaxValue?displayProperty=nameWithType> 은 <xref:System.Double.PositiveInfinity>, 및를 오버플로 하는 작업의 결과 <xref:System.Double.MinValue?displayProperty=nameWithType> 는 <xref:System.Double.NegativeInfinity>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-190">The result of an operation that overflows <xref:System.Double.MaxValue?displayProperty=nameWithType> is <xref:System.Double.PositiveInfinity>, and the result of an operation that overflows <xref:System.Double.MinValue?displayProperty=nameWithType> is <xref:System.Double.NegativeInfinity>, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Double.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional2.vb#2)]  
  
     <span data-ttu-id="63892-191"><xref:System.Double.PositiveInfinity> 또한 양의 피제수를 사용 하 여 0으로 나누기에서 결과 및 <xref:System.Double.NegativeInfinity> 음수 피제수를 사용 하 여 0으로 나누기에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-191"><xref:System.Double.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Double.NegativeInfinity> results from a division by zero with a negative dividend.</span></span>  
  
-   <span data-ttu-id="63892-192">작업의 결과 부동 소수점 연산 올바르지 않으면 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-192">If a floating-point operation is invalid, the result of the operation is <xref:System.Double.NaN>.</span></span> <span data-ttu-id="63892-193">예를 들어 <xref:System.Double.NaN> 는 다음 작업에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-193">For example, <xref:System.Double.NaN> results from the following operations:</span></span>  
  
    -   <span data-ttu-id="63892-194">0 피제수를 사용 하 여 0으로 나누었습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-194">Division by zero with a dividend of zero.</span></span> <span data-ttu-id="63892-195">참고에서 결과 0으로 나누기의 경우 다른 <xref:System.Double.PositiveInfinity> 또는 <xref:System.Double.NegativeInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-195">Note that other cases of division by zero result in either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>.</span></span>  
  
-   <span data-ttu-id="63892-196">잘못 된 입력을 사용 하 여 모든 부동 소수점 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-196">Any floating-point operation with an invalid input.</span></span> <span data-ttu-id="63892-197">예를 들어 호출를 <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> 음수 값을 가진 메서드가 반환 <xref:System.Double.NaN>호출와 마찬가지로는 <xref:System.Math.Acos%2A?displayProperty=nameWithType> 개 이하의 보다 크면 음수 1 하는 값을 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-197">For example, calling the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method with a negative value returns <xref:System.Double.NaN>, as does calling the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method with a value that is greater than one or less than negative one.</span></span>  
  
-   <span data-ttu-id="63892-198">값이 인수를 사용 하 여 모든 작업 <xref:System.Double.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-198">Any operation with an argument whose value is <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
<a name="Conversions"></a>   
## <a name="type-conversions-and-the-double-structure"></a><span data-ttu-id="63892-199">형식 변환 및 Double 구조체</span><span class="sxs-lookup"><span data-stu-id="63892-199">Type conversions and the Double structure</span></span>  
 <span data-ttu-id="63892-200"><xref:System.Double> 구조는 모든 명시적 또는 암시적 변환 연산자를 정의 하지 않습니다; 대신 변환 컴파일러에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-200">The <xref:System.Double> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</span></span>  
  
 <span data-ttu-id="63892-201">모든 기본 숫자 유형 값의 변환이 <xref:System.Double> 확대 변환 하 고 따라서 있고이 명시적 캐스트 연산자는 컴파일러에서 명시적으로 필요한 경우가 아니면 변환 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-201">The conversion of the value of any primitive numeric type to a <xref:System.Double> is a widening conversion and therefore does not require an explicit cast operator or call to a conversion method unless a compiler explicitly requires it.</span></span> <span data-ttu-id="63892-202">C# 컴파일러에서 변환에 대 한 캐스팅 연산자를 요구 하는 예를 들어 <xref:System.Decimal> 에 <xref:System.Double>반면 Visual Basic 컴파일러는 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-202">For example, the C# compiler requires a casting operator for conversions from <xref:System.Decimal> to <xref:System.Double>, while the Visual Basic compiler does not.</span></span> <span data-ttu-id="63892-203">다음 예제에서는 다른 기본 숫자 형식의 최소값 또는 최대값 값 변환 된 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-203">The following example converts the minimum or maximum value of other primitive numeric types to a <xref:System.Double>.</span></span>  
  
 [!code-csharp[System.Double.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert1.cs#20)]
 [!code-vb[System.Double.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert1.vb#20)]  
  
 <span data-ttu-id="63892-204">또한 합니다 <xref:System.Single> 값 <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 에 변환 <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>각각.</span><span class="sxs-lookup"><span data-stu-id="63892-204">In addition, the <xref:System.Single> values <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> covert to <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="63892-205">일부 숫자 형식의 값을 변환 된 <xref:System.Double> 값 정밀도 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-205">Note that the conversion of the value of some numeric types to a <xref:System.Double> value can involve a loss of precision.</span></span> <span data-ttu-id="63892-206">변환할 때 정밀도 손실 불가능 예제와 같이 <xref:System.Decimal>, <xref:System.Int64>를 <xref:System.Single>, 및 <xref:System.UInt64> 값을 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-206">As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Int64>, <xref:System.Single>, and <xref:System.UInt64> values to <xref:System.Double> values.</span></span>  
  
 <span data-ttu-id="63892-207">변환 된 <xref:System.Double> 값을 다른 기본 숫자 데이터 형식의 값은 축소 변환 하며 캐스트 연산자 (C#에서), (Visual Basic의 경우)의 변환 메서드 호출이 나를 <xref:System.Convert> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-207">The conversion of a <xref:System.Double> value to a value of any other primitive numeric data type is a narrowing conversion and requires a cast operator (in C#), a conversion method (in Visual Basic), or a call to a <xref:System.Convert> method.</span></span> <span data-ttu-id="63892-208">대상 형식에 의해 정의 된 대상 데이터 형식의 범위를 벗어나는 값 `MinValue` 고 `MaxValue` 속성을 다음 표에 나와 있는 것 처럼 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-208">Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.</span></span>  
  
|<span data-ttu-id="63892-209">대상 형식</span><span class="sxs-lookup"><span data-stu-id="63892-209">Target type</span></span>|<span data-ttu-id="63892-210">결과</span><span class="sxs-lookup"><span data-stu-id="63892-210">Result</span></span>|  
|-----------------|------------|  
|<span data-ttu-id="63892-211">모든 정수 형식</span><span class="sxs-lookup"><span data-stu-id="63892-211">Any integral type</span></span>|<span data-ttu-id="63892-212"><xref:System.OverflowException> 변환 확인 된 컨텍스트에서 발생 하는 경우는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-212">An <xref:System.OverflowException> exception if the conversion occurs in a checked context.</span></span><br /><br /> <span data-ttu-id="63892-213">변환이 변환 작업은 성공 하지만 값이 오버플로되면 (C#의 기본값), unchecked 컨텍스트에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-213">If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="63892-214"><xref:System.OverflowException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-214">An <xref:System.OverflowException> exception.</span></span>|  
|<xref:System.Single>|<span data-ttu-id="63892-215"><xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 음수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-215"><xref:System.Single.NegativeInfinity?displayProperty=nameWithType> for negative values.</span></span><br /><br /> <span data-ttu-id="63892-216"><xref:System.Single.PositiveInfinity?displayProperty=nameWithType> 양수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-216"><xref:System.Single.PositiveInfinity?displayProperty=nameWithType> for positive values.</span></span>|  
  
 <span data-ttu-id="63892-217">또한 <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> throw는 <xref:System.OverflowException> checked 컨텍스트에서 있지만 unchecked 컨텍스트에서 정수로 변환 하는 경우 이러한 값 오버플로 정수로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-217">In addition, <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</span></span> <span data-ttu-id="63892-218">로 변환을 <xref:System.Decimal>, 항상 throw는 <xref:System.OverflowException>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-218">For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="63892-219">로 변환을 <xref:System.Single>를 변환할 <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, 각각.</span><span class="sxs-lookup"><span data-stu-id="63892-219">For conversions to <xref:System.Single>, they convert to <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="63892-220">정밀도 손실 변환에서 발생할 수 있는 참고를 <xref:System.Double> 값을 다른 숫자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-220">Note that a loss of precision may result from converting a <xref:System.Double> value to another numeric type.</span></span> <span data-ttu-id="63892-221">비정 변환의 경우 <xref:System.Double> 값을 예제의 출력에서 볼 수 있듯이 소수 손실 되는 경우는 <xref:System.Double> 값은 반올림 됩니다 (예: Visual Basic) 또는 (예: C#) 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="63892-221">In the case of converting non-integral <xref:System.Double> values, as the output from the example shows, the fractional component is lost when the <xref:System.Double> value is either rounded (as in Visual Basic) or truncated (as in C#).</span></span> <span data-ttu-id="63892-222">로 변환을 <xref:System.Decimal> 하 고 <xref:System.Single> 값을는 <xref:System.Double> 값이 정확한 표시 대상 데이터 형식에 없을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-222">For conversions to <xref:System.Decimal> and <xref:System.Single> values, the <xref:System.Double> value may not have a precise representation in the target data type.</span></span>  
  
 <span data-ttu-id="63892-223">다음 예제에서는 다양 한 변환 <xref:System.Double> 값을 다른 여러 숫자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-223">The following example converts a number of <xref:System.Double> values to several other numeric types.</span></span> <span data-ttu-id="63892-224">Visual Basic (기본값) 및 C#의 checked 컨텍스트에서 변환이 발생할 (때문에 합니다 [체크](~/docs/csharp/language-reference/keywords/checked.md) 키워드).</span><span class="sxs-lookup"><span data-stu-id="63892-224">The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](~/docs/csharp/language-reference/keywords/checked.md) keyword).</span></span> <span data-ttu-id="63892-225">예제의 출력에서 선택 된 변환에 대 한 결과 보여 줍니다. unchecked 컨텍스트.</span><span class="sxs-lookup"><span data-stu-id="63892-225">The output from the example shows the result for conversions in both a checked an unchecked context.</span></span> <span data-ttu-id="63892-226">사용 하 여 컴파일하면 Visual Basic에서는 unchecked 컨텍스트에서 변환을 수행할 수 있습니다 합니다 `/removeintchecks+` 컴파일러 스위치 및 C# 주석는 `checked` 문입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-226">You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.</span></span>  
  
 [!code-csharp[System.Double.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert2.cs#21)]
 [!code-vb[System.Double.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert2.vb#21)]  
  
 <span data-ttu-id="63892-227">숫자 형식 변환에 대 한 자세한 내용은 참조 하세요. [.NET Framework의 형식 변환](~/docs/standard/base-types/type-conversion.md) 하 고 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-227">For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md) and [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md).</span></span>  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a><span data-ttu-id="63892-228">부동 소수점 기능</span><span class="sxs-lookup"><span data-stu-id="63892-228">Floating-Point Functionality</span></span>  
 <span data-ttu-id="63892-229"><xref:System.Double> 구조 및 관련된 형식은 다음 영역에서 작업을 수행 하는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-229">The <xref:System.Double> structure and related types provide methods to perform operations in the following areas:</span></span>  
  
-   <span data-ttu-id="63892-230">**값 비교**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-230">**Comparison of values**.</span></span> <span data-ttu-id="63892-231">호출할 수 있습니다 합니다 <xref:System.Double.Equals%2A> 두 여부를 확인 하는 방법 <xref:System.Double> 값이 같으면 또는 <xref:System.Double.CompareTo%2A> 두 값 간의 관계를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-231">You can call the <xref:System.Double.Equals%2A> method to determine whether two <xref:System.Double> values are equal, or the <xref:System.Double.CompareTo%2A> method to determine the relationship between two values.</span></span>  
  
     <span data-ttu-id="63892-232"><xref:System.Double> 구조는 또한 비교 연산자의 전체 집합을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-232">The <xref:System.Double> structure also supports a complete set of comparison operators.</span></span> <span data-ttu-id="63892-233">예를 들어 같음 또는 같지 않음을 테스트할 수도 있고 하나의 값 보다 크거나 같은 다른 인지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-233">For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another.</span></span> <span data-ttu-id="63892-234">피연산자 중 하나는 숫자 이외의 형식인 경우는 <xref:System.Double>를 변환할를 <xref:System.Double> 비교를 수행 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-234">If one of the operands is a numeric type other than a <xref:System.Double>, it is converted to a <xref:System.Double> before performing the comparison.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="63892-235">전체 자릿수의 차이로 인해 두 <xref:System.Double> 간주 해야 하는 값 수 그런데 같지 않은 것 비교의 결과 영향을 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-235">Because of differences in precision, two <xref:System.Double> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</span></span> <span data-ttu-id="63892-236">참조 된 [같은지 테스트](#Equality) 두 개를 비교 하는 방법에 대 한 자세한 내용은 섹션 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-236">See the [Testing for Equality](#Equality) section for more information about comparing two <xref:System.Double> values.</span></span>  
  
     <span data-ttu-id="63892-237">호출할 수도 있습니다는 <xref:System.Double.IsNaN%2A>, <xref:System.Double.IsInfinity%2A>를 <xref:System.Double.IsPositiveInfinity%2A>, 및 <xref:System.Double.IsNegativeInfinity%2A> 이러한 특수 한 값을 테스트 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-237">You can also call the <xref:System.Double.IsNaN%2A>, <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods to test for these special values.</span></span>  
  
-   <span data-ttu-id="63892-238">**수학 연산을**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-238">**Mathematical operations**.</span></span> <span data-ttu-id="63892-239">더하기, 빼기, 곱하기 및 나누기 등의 일반적인 산술 연산으로 언어 컴파일러 및 중간 언어 (CIL (공용) 지침을 대신 하 여 구현 됩니다 <xref:System.Double> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-239">Common arithmetic operations, such as addition, subtraction, multiplication, and division, are implemented by language compilers and Common Intermediate Language (CIL) instructions, rather than by <xref:System.Double> methods.</span></span> <span data-ttu-id="63892-240">수학 연산에서 피연산자 중 하나는 숫자 이외의 형식인 경우는 <xref:System.Double>를 변환할를 <xref:System.Double> 작업을 수행 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-240">If one of the operands in a mathematical operation is a numeric type other than a <xref:System.Double>, it is converted to a <xref:System.Double> before performing the operation.</span></span> <span data-ttu-id="63892-241">작업의 결과 이기도 한 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-241">The result of the operation is also a <xref:System.Double> value.</span></span>  
  
     <span data-ttu-id="63892-242">기타 수학 연산을 호출 하 여 수행할 수 있습니다 `static` (`Shared` Visual basic에서)의 메서드는 <xref:System.Math?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-242">Other mathematical operations can be performed by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="63892-243">연산에 대해 일반적으로 사용 하는 추가 메서드를 포함 하는 것 (같은 <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, 및 <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), 기 하 도형 (같은 <xref:System.Math.Cos%2A?displayProperty=nameWithType> 및 <xref:System.Math.Sin%2A?displayProperty=nameWithType>), 및 계산법 (같은 <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="63892-243">It includes additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, and <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=nameWithType> and <xref:System.Math.Sin%2A?displayProperty=nameWithType>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span></span>  
  
     <span data-ttu-id="63892-244">개별 비트를 조작할 수도 있습니다는 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-244">You can also manipulate the individual bits in a <xref:System.Double> value.</span></span> <span data-ttu-id="63892-245">합니다 <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> 메서드 유지는 <xref:System.Double> 값의 패턴은 64 비트 정수 비트입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-245">The <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> method preserves a <xref:System.Double> value's bit pattern in a 64-bit integer.</span></span> <span data-ttu-id="63892-246"><xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType> 메서드 바이트 배열에서 해당 비트 패턴을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-246">The <xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType> method returns its bit pattern in a byte array.</span></span>  
  
-   <span data-ttu-id="63892-247">**반올림**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-247">**Rounding**.</span></span> <span data-ttu-id="63892-248">반올림는 대개 기술로 서 부동 소수점 표현 및 전체 자릿수의 문제로 인해 발생 하는 값 사이의 차이의 영향을 줄이기 위한 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-248">Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</span></span> <span data-ttu-id="63892-249">반올림할 수를 <xref:System.Double> 를 호출 하 여 값을 <xref:System.Math.Round%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-249">You can round a <xref:System.Double> value by calling the <xref:System.Math.Round%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="63892-250">**서식 지정**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-250">**Formatting**.</span></span> <span data-ttu-id="63892-251">변환할 수 있습니다는 <xref:System.Double> 값을 호출 하 여 해당 문자열 표현 된 <xref:System.Double.ToString%2A> 메서드 또는 복합 서식 지정 기능을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-251">You can convert a <xref:System.Double> value to its string representation by calling the <xref:System.Double.ToString%2A> method or by using the composite formatting feature.</span></span> <span data-ttu-id="63892-252">형식 문자열에서 부동 소수점 값의 문자열 표현을 제어 하는 방법에 대 한 자세한 참조를 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md) 항목.</span><span class="sxs-lookup"><span data-stu-id="63892-252">For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md) topics.</span></span>  
  
-   <span data-ttu-id="63892-253">**문자열 구문 분석**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-253">**Parsing strings**.</span></span> <span data-ttu-id="63892-254">부동 소수점 값의 문자열 표현으로 변환할 수는 <xref:System.Double> 중 하나를 호출 하 여 값을 <xref:System.Double.Parse%2A> 또는 <xref:System.Double.TryParse%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-254">You can convert the string representation of a floating-point value to a <xref:System.Double> value by calling either the <xref:System.Double.Parse%2A> or <xref:System.Double.TryParse%2A> method.</span></span> <span data-ttu-id="63892-255">구문 분석 작업이 실패 하는 경우는 <xref:System.Double.Parse%2A> 메서드는 예외를 throw 하는 반면 합니다 <xref:System.Double.TryParse%2A> 메서드가 반환 되는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-255">If the parse operation fails, the <xref:System.Double.Parse%2A> method throws an exception, whereas the <xref:System.Double.TryParse%2A> method returns `false`.</span></span>  
  
-   <span data-ttu-id="63892-256">**형식 변환**합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-256">**Type conversion**.</span></span> <span data-ttu-id="63892-257"><xref:System.Double> 구조에 대 한 명시적 인터페이스 구현을 제공 합니다 <xref:System.IConvertible> 인터페이스를 두 표준.NET Framework 데이터 형식 간의 변환만 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-257">The <xref:System.Double> structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types.</span></span> <span data-ttu-id="63892-258">언어 컴파일러는 또한 다른 모든 표준 숫자 형식에 값의 암시적 변환이 지원 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-258">Language compilers also support the implicit conversion of values of all other standard numeric types to <xref:System.Double> values.</span></span> <span data-ttu-id="63892-259">모든 표준 숫자 유형 값의 변환 된 <xref:System.Double> 확대 변환 및 사용자에 캐스팅 연산자나 변환 메서드를 사용할 필요가 없습니다</span><span class="sxs-lookup"><span data-stu-id="63892-259">Conversion of a value of any standard numeric type to a <xref:System.Double> is a widening conversion and does not require the user of a casting operator or conversion method,</span></span>  
  
     <span data-ttu-id="63892-260">그러나 변환 <xref:System.Int64> 고 <xref:System.Single> 값 정밀도 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-260">However, conversion of <xref:System.Int64> and <xref:System.Single> values can involve a loss of precision.</span></span> <span data-ttu-id="63892-261">다음 표에서 이러한 각 형식에 대 한 전체 자릿수의 차이점을 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-261">The following table lists the differences in precision for each of these types:</span></span>  
  
    |<span data-ttu-id="63892-262">형식</span><span class="sxs-lookup"><span data-stu-id="63892-262">Type</span></span>|<span data-ttu-id="63892-263">최대 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-263">Maximum precision</span></span>|<span data-ttu-id="63892-264">내부적인 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-264">Internal precision</span></span>|  
    |----------|-----------------------|------------------------|  
    |<xref:System.Double>|<span data-ttu-id="63892-265">15</span><span class="sxs-lookup"><span data-stu-id="63892-265">15</span></span>|<span data-ttu-id="63892-266">17</span><span class="sxs-lookup"><span data-stu-id="63892-266">17</span></span>|  
    |<xref:System.Int64>|<span data-ttu-id="63892-267">10 진수는 19 자리</span><span class="sxs-lookup"><span data-stu-id="63892-267">19 decimal digits</span></span>|<span data-ttu-id="63892-268">10 진수는 19 자리</span><span class="sxs-lookup"><span data-stu-id="63892-268">19 decimal digits</span></span>|  
    |<xref:System.Single>|<span data-ttu-id="63892-269">소수 자릿수 7</span><span class="sxs-lookup"><span data-stu-id="63892-269">7 decimal digits</span></span>|<span data-ttu-id="63892-270">9 10 진수</span><span class="sxs-lookup"><span data-stu-id="63892-270">9 decimal digits</span></span>|  
  
     <span data-ttu-id="63892-271">전체 자릿수의 문제가 영향을 미치는 가장 자주 <xref:System.Single> 값으로 변환 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-271">The problem of precision most frequently affects <xref:System.Single> values that are converted to <xref:System.Double> values.</span></span> <span data-ttu-id="63892-272">다음 예제에서는 동일한 나누기 연산에 의해 발생 하는 두 값 같지 변환할 단 정밀도 부동 소수점 값 이므로 값 중 하나는 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-272">In the following example, two values produced by identical division operations are unequal because one of the values is a single-precision floating point value converted to a <xref:System.Double>.</span></span>  
  
     [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
     [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="63892-273">다음 코드 예제에서는 <xref:System.Double>:</span><span class="sxs-lookup"><span data-stu-id="63892-273">The following code example illustrates the use of <xref:System.Double>:</span></span>  
  
 [!code-cpp[Double Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#1)]
 [!code-csharp[Double Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#1)]
 [!code-vb[Double Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="63892-274">이 유형의 모든 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-274">All members of this type are thread safe.</span></span> <span data-ttu-id="63892-275">인스턴스 상태를 수정 하려면 표시 되는 멤버는 실제로 새 값을 사용 하 여 초기화 된 새 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-275">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="63892-276">으로 다른 형식을 사용 하 여이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는로 보호 되어야 스레드로부터 안전을 보장 하려면 잠금.</span><span class="sxs-lookup"><span data-stu-id="63892-276">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Single" />
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d"><span data-ttu-id="63892-277">샘플: .NET Framework 4 서식 유틸리티</span><span class="sxs-lookup"><span data-stu-id="63892-277">Sample: .NET Framework 4 Formatting Utility</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="63892-278">이 인스턴스를 지정된 개체나 <see cref="T:System.Double" /> 개체와 비교하고 이 인스턴스의 값이 지정된 개체나 <see cref="T:System.Double" /> 개체의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-278">Compares this instance to a specified object or <see cref="T:System.Double" /> object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or <see cref="T:System.Double" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(double value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : double -&gt; int&#xA;override this.CompareTo : double -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="63892-279">비교할 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-279">A double-precision floating-point number to compare.</span></span></param>
        <summary><span data-ttu-id="63892-280">이 인스턴스를 지정된 배정밀도 부동 소수점 숫자와 비교하고 이 인스턴스의 값이 지정된 배정밀도 부동 소수점 숫자 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-280">Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="63892-281">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-281">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="63892-282">반환 값</span><span class="sxs-lookup"><span data-stu-id="63892-282">Return Value</span></span> 
 </term><description> <span data-ttu-id="63892-283">설명</span><span class="sxs-lookup"><span data-stu-id="63892-283">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="63892-284">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="63892-284">Less than zero</span></span> 
 </term><description> <span data-ttu-id="63892-285">이 인스턴스는 <paramref name="value" />보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-285">This instance is less than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-286">또는</span><span class="sxs-lookup"><span data-stu-id="63892-286">-or-</span></span> 
<span data-ttu-id="63892-287">이 인스턴스는 Not-a-Number(<see cref="F:System.Double.NaN" />)이고 <paramref name="value" />는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-287">This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="63892-288">0</span><span class="sxs-lookup"><span data-stu-id="63892-288">Zero</span></span> 
 </term><description> <span data-ttu-id="63892-289">이 인스턴스는 <paramref name="value" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-289">This instance is equal to <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-290">또는</span><span class="sxs-lookup"><span data-stu-id="63892-290">-or-</span></span> 
<span data-ttu-id="63892-291">이 인스턴스와 <paramref name="value" />가 모두 Not-a-Number(<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-291">Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="63892-292">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="63892-292">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="63892-293">이 인스턴스는 <paramref name="value" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="63892-293">This instance is greater than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-294">또는</span><span class="sxs-lookup"><span data-stu-id="63892-294">-or-</span></span> 
<span data-ttu-id="63892-295">이 인스턴스는 숫자이고 <paramref name="value" />는 Not-a-Number(<see cref="F:System.Double.NaN" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-295">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-296">값으로 간주 될 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-296">Values must be identical to be considered equal.</span></span> <span data-ttu-id="63892-297">부동 소수점 값에 여러 개의 산술 연산을 의존 하는 경우에 특히 최하위 유효 자릿수를 제외 하 고 거의 동일 하 게 해당 값 및 정밀도 떨어질 수에 대 한 일반적인 것입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-297">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="63892-298">반환 값이로 인해는 <xref:System.Double.CompareTo%2A> 메서드 때때로 있습니다 점이 의외로 생각 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-298">Because of this, the return value of the <xref:System.Double.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="63892-299">예를 들어 곱하기 같은 값으로 나누기 뒤에 특정 값으로 원래 값을 생성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-299">For example, multiplication by a particular value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="63892-300">그러나 다음 예에서 계산 된 값으로 원래 값 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-300">In the following example, however, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="63892-301">"R"을 사용 하 여 두 값의 유효 자릿수가 모두 표시 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 최소 유효 자릿수가 해당 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-301">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="63892-302">이러한 비교를 처리에 대 한 내용은의 설명 섹션을 참조 합니다 <xref:System.Double.Equals%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-302">For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Double.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Double.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto2.vb#1)]  
  
 <span data-ttu-id="63892-303">이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.Double.CompareTo%2A?displayProperty=nameWithType> 메서드 변환할 필요가 없기 때문에 `value` 개체에 대 한 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="63892-303">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Double.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="63892-304">없지만 값인 개체 <xref:System.Double.NaN> 값이 다른 개체와 같으면 간주 되지 않습니다 <xref:System.Double.NaN> (자체 포함)을, 합니다 <xref:System.IComparable%601> 인터페이스에서는 `A.CompareTo(A)` 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-304">Note that, although an object whose value is <xref:System.Double.NaN> is not considered equal to another object whose value is <xref:System.Double.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="63892-305">확대 변환</span><span class="sxs-lookup"><span data-stu-id="63892-305">Widening Conversions</span></span>  
 <span data-ttu-id="63892-306">프로그래밍 언어에 따라 코딩할 수 있습니다는 <xref:System.Double.CompareTo%2A> 메서드 매개 변수 형식은 비트 수가 적은 보다 인스턴스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-306">Depending on your programming language, it might be possible to code a <xref:System.Double.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="63892-307">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수 인스턴스로 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-307">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="63892-308">예를 들어, 인스턴스 유형이 <xref:System.Double> 매개 변수 형식이 고 <xref:System.Int32>입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-308">For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="63892-309">Microsoft C# 컴파일러는 매개 변수의 값을 표시 하는 명령을 생성을 <xref:System.Double> 개체를 만든 다음 생성 된 <xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType> 인스턴스의 값과 확대 표현의 매개 변수를 비교 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-309">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a <xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="63892-310">해당 컴파일러에서 숫자 형식의 암시적 확대 변환은 수행 하는지 확인 하려면 프로그래밍 언어의 설명서를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-310">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="63892-311">자세한 내용은 참조는 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-311">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="63892-312">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="63892-312">Precision in Comparisons</span></span>  
 <span data-ttu-id="63892-313">문서화 된 전체 자릿수를 초과 하는 부동 소수점 숫자의 전체 자릿수 구현 및.NET Framework의 버전에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-313">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="63892-314">결과적으로 두 개의 특정 숫자 비교를 전체 자릿수 숫자의 내부 표현이 변경 될 수 있으므로.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-314">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-315">다음 코드 예제에서는 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.는 <xref:System.Double.CompareTo%2A> 여러 값 및 참조 형식에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-315">The following code example demonstrates generic and nongeneric versions of the <xref:System.Double.CompareTo%2A> method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="63892-316">비교할 개체 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-316">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="63892-317">이 인스턴스를 지정된 개체와 비교하고 이 인스턴스의 값이 지정된 개체의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-317">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="63892-318">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-318">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="63892-319">값</span><span class="sxs-lookup"><span data-stu-id="63892-319">Value</span></span> 
 </term><description> <span data-ttu-id="63892-320">설명</span><span class="sxs-lookup"><span data-stu-id="63892-320">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="63892-321">음의 정수</span><span class="sxs-lookup"><span data-stu-id="63892-321">A negative integer</span></span> 
 </term><description> <span data-ttu-id="63892-322">이 인스턴스는 <paramref name="value" />보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-322">This instance is less than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-323">또는</span><span class="sxs-lookup"><span data-stu-id="63892-323">-or-</span></span> 
<span data-ttu-id="63892-324">이 인스턴스는 Not-a-Number(<see cref="F:System.Double.NaN" />)이고 <paramref name="value" />는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-324">This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="63892-325">0</span><span class="sxs-lookup"><span data-stu-id="63892-325">Zero</span></span> 
 </term><description> <span data-ttu-id="63892-326">이 인스턴스는 <paramref name="value" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-326">This instance is equal to <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-327">또는</span><span class="sxs-lookup"><span data-stu-id="63892-327">-or-</span></span> 
<span data-ttu-id="63892-328">이 인스턴스와 <paramref name="value" />가 모두 <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-328">This instance and <paramref name="value" /> are both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /></span></span></description></item><item><term> <span data-ttu-id="63892-329">양의 정수</span><span class="sxs-lookup"><span data-stu-id="63892-329">A positive integer</span></span> 
 </term><description> <span data-ttu-id="63892-330">이 인스턴스는 <paramref name="value" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="63892-330">This instance is greater than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="63892-331">또는</span><span class="sxs-lookup"><span data-stu-id="63892-331">-or-</span></span> 
<span data-ttu-id="63892-332">이 인스턴스는 숫자이고 <paramref name="value" />는 Not-a-Number(<see cref="F:System.Double.NaN" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-332">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</span></span>  
  
<span data-ttu-id="63892-333">또는</span><span class="sxs-lookup"><span data-stu-id="63892-333">-or-</span></span> 
 <span data-ttu-id="63892-334"><paramref name="value" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-334"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-335">합니다 `value` 매개 변수 여야 합니다 `null` 인스턴스나 `Double`고, 그렇지 않으면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-335">The `value` parameter must be `null` or an instance of `Double`; otherwise, an exception is thrown.</span></span> <span data-ttu-id="63892-336">인스턴스에도 <xref:System.Double>, 해당 값에 관계 없이 보다 큰 것으로 간주 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-336">Any instance of <xref:System.Double>, regardless of its value, is considered greater than `null`.</span></span>  
  
 <span data-ttu-id="63892-337">값으로 간주 될 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-337">Values must be identical to be considered equal.</span></span> <span data-ttu-id="63892-338">부동 소수점 값에 여러 개의 산술 연산을 의존 하는 경우에 특히 최하위 유효 자릿수를 제외 하 고 거의 동일 하 게 해당 값 및 정밀도 떨어질 수에 대 한 일반적인 것입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-338">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="63892-339">반환 값이로 인해는 <xref:System.Double.CompareTo%2A> 메서드 때때로 있습니다 점이 의외로 생각 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-339">Because of this, the return value of the <xref:System.Double.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="63892-340">예를 들어 곱하기 같은 값으로 나누기 뒤에 특정 값으로 원래 값을 생성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-340">For example, multiplication by a particular value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="63892-341">그러나 다음 예에서 계산 된 값으로 원래 값 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-341">In the following example, however, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="63892-342">"R"을 사용 하 여 두 값의 유효 자릿수가 모두 표시 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 최소 유효 자릿수가 해당 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-342">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="63892-343">이러한 비교를 처리에 대 한 내용은의 설명 섹션을 참조 합니다 <xref:System.Double.Equals%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-343">For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Double.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Double.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto3.vb#2)]  
  
 <span data-ttu-id="63892-344">지원 하기 위해이 메서드는 구현 된 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-344">This method is implemented to support the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="63892-345">없지만 <xref:System.Double.NaN> 같은 다른 것으로 간주 되지 않습니다 <xref:System.Double.NaN> (자체 포함)을, 합니다 <xref:System.IComparable> 인터페이스에서는 `A.CompareTo(A)` 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-345">Note that, although a <xref:System.Double.NaN> is not considered to be equal to another <xref:System.Double.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="63892-346">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="63892-346">Precision in Comparisons</span></span>  
 <span data-ttu-id="63892-347">문서화 된 전체 자릿수를 초과 하는 부동 소수점 숫자의 전체 자릿수 구현 및.NET Framework의 버전에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-347">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="63892-348">결과적으로 두 개의 특정 숫자 비교를 전체 자릿수 숫자의 내부 표현이 변경 될 수 있으므로.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-348">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-349">다음 코드 예제는 사용 방법을 보여 줍니다 `CompareTo` 컨텍스트에서 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-349">The following code example illustrates the use of `CompareTo` in the context of `Double`.</span></span>  
  
 [!code-cpp[System.Double#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#16)]
 [!code-csharp[System.Double#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#16)]
 [!code-vb[System.Double#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="63892-350"><paramref name="value" />가 <see cref="T:System.Double" />가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="63892-350"><paramref name="value" /> is not a <see cref="T:System.Double" />.</span></span></exception>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 Epsilon = float64(4.94065645841247E-324)" />
      <MemberSignature Language="DocId" Value="F:System.Double.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Double  = 4.94065645841247E-324" />
      <MemberSignature Language="C++ CLI" Value="public: double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : double" Usage="System.double.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>4.94065645841247E-324</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-351">0보다 큰 양의 최소 <see cref="T:System.Double" /> 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-351">Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero.</span></span> <span data-ttu-id="63892-352">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-352">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-353">값을 <xref:System.Double.Epsilon> 속성은 가장 작은 양수를 반영 <xref:System.Double> 수치 연산 또는 비교에서 중요 한 값 때 값을 <xref:System.Double> 인스턴스가 0.</span><span class="sxs-lookup"><span data-stu-id="63892-353">The value of the <xref:System.Double.Epsilon> property reflects the smallest positive <xref:System.Double> value that is significant in numeric operations or comparisons when the value of the <xref:System.Double> instance is zero.</span></span> <span data-ttu-id="63892-354">예를 들어, 다음 코드와 0 및 <xref:System.Double.Epsilon> 반면 같지 않은 값으로 간주 됩니다 및 절반 값 <xref:System.Double.Epsilon> 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-354">For example, the following code shows that zero and <xref:System.Double.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Double.Epsilon> are considered to be equal.</span></span>  
  
 [!code-csharp[System.Double.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Double.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon.vb#5)]  
  
 <span data-ttu-id="63892-355">부동 보다 정확 하 게 기호를, 52 비트가 수 또는 significand, 및 11 비트 지 수 형식으로 구성 하는 지점입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-355">More precisely, the floating point format consists of a sign, a 52-bit mantissa or significand, and an 11-bit exponent.</span></span> <span data-ttu-id="63892-356">다음 예제와 같이 0의가 수 및-1022의 지수가 0에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-356">As the following example shows, zero has an exponent of -1022 and a mantissa of 0.</span></span> <span data-ttu-id="63892-357"><xref:System.Double.Epsilon> 에 1의가 수 및-1022의 지 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-357"><xref:System.Double.Epsilon> has an exponent of -1022 and a mantissa of 1.</span></span> <span data-ttu-id="63892-358">즉 <xref:System.Double.Epsilon> 는 가장 작은 양수 <xref:System.Double> 0 보다 큰 값 및 사용할 수 있는 최소값을 나타내고 가능한 가장 작은 증가값을 <xref:System.Double> 인 지 수는-1022입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-358">This means that <xref:System.Double.Epsilon> is the smallest positive <xref:System.Double> value greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Double> whose exponent is -1022.</span></span>  
  
 [!code-csharp[System.Double.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Double.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon1.vb#6)]  
  
 <span data-ttu-id="63892-359">그러나를 <xref:System.Double.Epsilon> 속성의 전체 자릿수의 일반 측정값이 아닌 합니다 <xref:System.Double> 형식에 적용 됩니다 <xref:System.Double> 값이 0 또는-1022의 지 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="63892-359">However, the <xref:System.Double.Epsilon> property is not a general measure of precision of the <xref:System.Double> type; it applies only to <xref:System.Double> instances that have a value of zero or an exponent of -1022.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63892-360">값을 <xref:System.Double.Epsilon> 속성 부동 소수점 산술 연산에서 반올림으로 인해 상대 오차의 상한을 나타내는 컴퓨터 엡실론 동일 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-360">The value of the <xref:System.Double.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="63892-361">이 상수의 값이 4.94065645841247 e-324입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-361">The value of this constant is 4.94065645841247e-324.</span></span>  
  
 <span data-ttu-id="63892-362">두 명백히 같은 부동 소수점 숫자 수 비교 하 여 같지 최소 유효 자릿수가에 차이가 있기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-362">Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</span></span> <span data-ttu-id="63892-363">예를 들어 C# 식 `(double)1/3 == (double)0.33333`를 비교 하지는 않습니다 동일한 나누기 연산의 왼쪽에서 오른쪽에 있는 상수는 지정 된 자릿수로 정확 하 게 하는 동안 최대 전체 자릿수에 있으므로.</span><span class="sxs-lookup"><span data-stu-id="63892-363">For example, the C# expression, `(double)1/3 == (double)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</span></span> <span data-ttu-id="63892-364">알고리즘의 값에 기반 하는 두 개의 부동 소수점 숫자 수 고려해 야 하는지 여부 같은 결정 하는 사용자 지정 알고리즘을 만드는 경우이 방법은 권장 되지 않습니다는 <xref:System.Double.Epsilon> 소수점에 대 한 차분 차수를 설정 하는 상수 두 값으로 간주 될입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-364">If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, we do not recommend that you base your algorithm on the value of the <xref:System.Double.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</span></span>  <span data-ttu-id="63892-365">(일반적으로 차이의 여백이 보다 많이 <xref:System.Double.Epsilon>.) 두 개의 배정밀도 부동 소수점 값을 비교 하는 방법에 대 한 내용은 <xref:System.Double> 고 <xref:System.Double.Equals%28System.Double%29>입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-365">(Typically, that margin of difference is many times greater than <xref:System.Double.Epsilon>.) For information about comparing two double-precision floating-point values, see <xref:System.Double> and <xref:System.Double.Equals%28System.Double%29>.</span></span>  
  
## <a name="platform-notes"></a><span data-ttu-id="63892-366">플랫폼 참고 사항</span><span class="sxs-lookup"><span data-stu-id="63892-366">Platform Notes</span></span>  
 <span data-ttu-id="63892-367">ARM 시스템에서는 값을 <xref:System.Double.Epsilon> 상수 감지 너무 작아서 이므로 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-367">On ARM systems, the value of the <xref:System.Double.Epsilon> constant is too small to be detected, so it equates to zero.</span></span> <span data-ttu-id="63892-368">2.2250738585072014 e는 대체 엡실론 값을 정의할 수 있습니다-308 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-368">You can define an alternative epsilon value that equals 2.2250738585072014E-308 instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="63892-369"><see cref="T:System.Double" />의 두 인스턴스가 같은 값을 표시하는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-369">Returns a value indicating whether two instances of <see cref="T:System.Double" /> represent the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (double obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float64 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(double obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : double -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="63892-370">이 인스턴스와 비교할 <see cref="T:System.Double" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-370">A <see cref="T:System.Double" /> object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="63892-371">이 인스턴스의 값과 지정된 <see cref="T:System.Double" /> 개체의 값이 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-371">Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</span></span></summary>
        <returns><span data-ttu-id="63892-372"><see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-372"><see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-373">이 메서드를 구현 하는 <xref:System.IEquatable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.Double.Equals%2A> 변환할 필요가 없기 때문에 `obj` 개체에 대 한 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="63892-373">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Double.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="63892-374">확대 변환</span><span class="sxs-lookup"><span data-stu-id="63892-374">Widening Conversions</span></span>  
 <span data-ttu-id="63892-375">프로그래밍 언어에 따라 코딩할 수 있습니다는 <xref:System.Double.Equals%2A> 메서드 매개 변수 형식은 비트 수가 적은 보다 인스턴스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-375">Depending on your programming language, it might be possible to code a <xref:System.Double.Equals%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="63892-376">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수 인스턴스로 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-376">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="63892-377">예를 들어, 인스턴스 유형이 <xref:System.Double> 매개 변수 형식이 고 <xref:System.Int32>입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-377">For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="63892-378">Microsoft C# 컴파일러는 매개 변수의 값을 표시 하는 명령을 생성을 <xref:System.Double> 개체를 만든 다음 생성 된 <xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType> 인스턴스의 값과 확대 표현의 매개 변수를 비교 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-378">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a <xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="63892-379">해당 컴파일러에서 숫자 형식의 암시적 확대 변환은 수행 하는지 확인 하려면 프로그래밍 언어의 설명서를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-379">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="63892-380">자세한 내용은 참조는 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-380">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="63892-381">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="63892-381">Precision in Comparisons</span></span>  
 <span data-ttu-id="63892-382"><xref:System.Double.Equals%2A> 값 같으면 두 값의 정밀도 차이 수 있기 때문에 메서드를 주의 해 서 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-382">The <xref:System.Double.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="63892-383">다음 예제에서는 보고 하는 <xref:System.Double> .333333 값 및 <xref:System.Double> 1 3으로 분할 하 여 반환 값이 다른 지.</span><span class="sxs-lookup"><span data-stu-id="63892-383">The following example reports that the <xref:System.Double> value .333333 and the <xref:System.Double> value returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Double.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#1)]
 [!code-vb[System.Double.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#1)]  
  
 <span data-ttu-id="63892-384">동일한 지 비교 하는 대신 하나 정의 하는 방법을 두 값 간의 차이의 허용 되는 상대 여백 (같은. 001%의 값 중 하나).</span><span class="sxs-lookup"><span data-stu-id="63892-384">Rather than comparing for equality, one technique involves defining an acceptable relative margin of difference between two values (such as .001% of one of the values).</span></span> <span data-ttu-id="63892-385">두 값 간의 차이의 절대값 보다 작거나 동일한 경우 차이점은 전체 자릿수의 차이가 있기 때문일 가능성이 않으며, 따라서 값과 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-385">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="63892-386">다음 예제에서는이 기술을 사용 하 여 33333과 1/3, 두 비교 <xref:System.Double> 같지 않은 것으로 이전 코드 예제에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-386">The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Double> values that the previous code example found to be unequal.</span></span> <span data-ttu-id="63892-387">이 경우 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-387">In this case, the values are equal.</span></span>  
  
 [!code-csharp[System.Double.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#2)]
 [!code-vb[System.Double.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#2)]  
  
> [!NOTE]
>  <span data-ttu-id="63892-388">때문에 <xref:System.Double.Epsilon> 최소 식을 정의 된 범위는 0에 가까운 양수 값의 비슷한 두 값 사이의 차이 보다 커야 <xref:System.Double.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-388">Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="63892-389">일반적으로 여러 번 보다 크면 <xref:System.Double.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-389">Typically, it is many times greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="63892-390">이 인해 사용 하지 않는 권장 <xref:System.Double.Epsilon> 비교할 때 <xref:System.Double> 같음에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-390">Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.</span></span>  
  
 <span data-ttu-id="63892-391">두 번째 방법은 일부 절대 값을 사용 하 여 두 부동 소수점 숫자의 차이 비교 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-391">A second technique involves comparing the difference between two floating-point numbers with some absolute value.</span></span> <span data-ttu-id="63892-392">차이를 절대 값 보다 작거나 같은 경우에 숫자 같습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-392">If the difference is less than or equal to that absolute value, the numbers are equal.</span></span> <span data-ttu-id="63892-393">클 경우 숫자 두 개체가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-393">If it is greater, the numbers are not equal.</span></span> <span data-ttu-id="63892-394">한 가지 대안은 절대 값을 임의로 선택 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-394">One alternative is to arbitrarily select an absolute value.</span></span> <span data-ttu-id="63892-395">하지만이 문제가 될 수 있습니다 차이점의 허용 되는 여백 크기에 따라 달라 지므로 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-395">This is problematic, however, because an acceptable margin of difference depends on the magnitude of the <xref:System.Double> values.</span></span> <span data-ttu-id="63892-396">두 번째 대안 부동 소수점 형식의 디자인 기능을 활용 합니다. 두 부동 소수점 값의 정수 표현 간의 차이점을 구분 하는 가능한 부동 소수점 값의 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-396">A second alternative takes advantage of a design feature of the floating-point format: The difference between the integer representation of two floating-point values indicates the number of possible floating-point values that separates them.</span></span> <span data-ttu-id="63892-397">예를 들어, 0.0 사이의 차이 및 <xref:System.Double.Epsilon> 있으므로 1 <xref:System.Double.Epsilon> 는 표현할 수 있는 가장 작은 값으로 작업할 때를 <xref:System.Double> 값이 0 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-397">For example, the difference between 0.0 and <xref:System.Double.Epsilon> is 1, because <xref:System.Double.Epsilon> is the smallest representable value when working with a <xref:System.Double> whose value is zero.</span></span> <span data-ttu-id="63892-398">다음 예제에서는이 기술을 사용 하 여 두 가지 33333과 1/3 비교 <xref:System.Double> 값을 사용 하 여 이전 코드 예제는 <xref:System.Double.Equals%28System.Double%29> 메서드 같지를 찾을 수 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-398">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Double.Equals%28System.Double%29> method found to be unequal.</span></span> <span data-ttu-id="63892-399">예제를 사용 하는 참고를 <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> 배정밀도 부동 소수점 값을 정수 표현으로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-399">Note that the example uses the <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> method to convert a double-precision floating-point value to its integer representation.</span></span>  
  
 [!code-csharp[System.Double.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Double.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsabs1.vb#1)]  
  
 <span data-ttu-id="63892-400">문서화 된 전체 자릿수를 초과 하는 부동 소수점 숫자의 전체 자릿수 구현 및.NET Framework의 버전에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-400">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="63892-401">결과적으로 두 개의 특정 숫자 비교를 전체 자릿수 숫자의 내부 표현이 변경 될 수 있으므로.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-401">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
 <span data-ttu-id="63892-402">두 <xref:System.Double.NaN?displayProperty=nameWithType> 를 호출 하 여 값이 같은지 테스트 합니다 <xref:System.Double.Equals%2A> 메서드, 메서드가 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-402">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by calling the <xref:System.Double.Equals%2A> method, the method returns `true`.</span></span> <span data-ttu-id="63892-403">그러나 두 <xref:System.Double.NaN> 연산자를 반환 값을 같음 연산자를 사용 하 여 같은지 테스트할 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-403">However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`.</span></span> <span data-ttu-id="63892-404">확인 하려는 경우 여부를 값을 <xref:System.Double> (NaN), 숫자가 아닙니다. 대신 호출 하는 것을 <xref:System.Double.IsNaN%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-404">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="63892-405">컴파일러 오버 로드 확인 두 동작에는 명백한 차이점에 대 한 계정 수 <see cref="M:System.Double.Equals(System.Object)" /> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-405">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Double.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="63892-406">간에 암시적 변환이 발생 하는 경우는 <paramref name="obj" /> 인수 및 <see cref="T:System.Double" /> 정의 된 인수로 형식화 되지 않은 하 고는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출을 수행할 수 있습니다는 <see cref="M:System.Double.Equals(System.Double)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-406">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Double" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Double.Equals(System.Double)" /> method.</span></span> <span data-ttu-id="63892-407">호출이 고, 그렇지 합니다 <see cref="M:System.Double.Equals(System.Object)" /> 메서드를 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 아닙니다를 <see cref="T:System.Double" /> 값.</span><span class="sxs-lookup"><span data-stu-id="63892-407">Otherwise, they call the <see cref="M:System.Double.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Double" /> value.</span></span> <span data-ttu-id="63892-408">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-408">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="63892-409">제외 하 고 모든 기본 숫자 형식의 경우 <see cref="T:System.Decimal" /> C#에서 첫 번째 비교 반환 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Double.Equals(System.Double)" /> 메서드를 반면 두 번째 비교 반환 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Double.Equals(System.Object)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-409">In the case of all primitive numeric types except for <see cref="T:System.Decimal" /> and in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Double.Equals(System.Double)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Double.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="63892-410">[! 코드 csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [! 코드 vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="63892-410">[!code-csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Double.Equals(System.Object)" />
        <altmember cref="Overload:System.Double.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="63892-411">이 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-411">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="63892-412">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-412">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="63892-413"><see langword="true" />가 <paramref name="obj" />의 인스턴스이고 이 인스턴스의 값과 같으면 <see cref="T:System.Double" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-413"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-414"><xref:System.Double.Equals%2A> 값 같으면 두 값의 정밀도 차이 수 있기 때문에 메서드를 주의 해 서 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-414">The <xref:System.Double.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="63892-415">다음 예제를 보고 하는 합니다 <xref:System.Double> .3333 값 및 <xref:System.Double> 나누어 반환 1에서 3 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-415">The following example reports that the <xref:System.Double> value .3333 and the <xref:System.Double> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Double.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#3)]
 [!code-vb[System.Double.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#3)]  
  
 <span data-ttu-id="63892-416">호출에 대 한 대안에 대 한 합니다 <xref:System.Double.Equals%2A> 메서드를 설명서를 참조 하십시오는 <xref:System.Double.Equals%28System.Double%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-416">For alternatives to calling the <xref:System.Double.Equals%2A> method, see the documentation for the <xref:System.Double.Equals%28System.Double%29> overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63892-417">때문에 <xref:System.Double.Epsilon> 최소 식을 정의 된 범위는 0에 가까운 양수 값의 비슷한 두 값 사이의 차이 보다 커야 <xref:System.Double.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-417">Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="63892-418">일반적으로 여러 번 보다 크면 <xref:System.Double.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-418">Typically, it is many times greater than <xref:System.Double.Epsilon>.</span></span>  
  
 <span data-ttu-id="63892-419">문서화 된 전체 자릿수를 초과 하는 부동 소수점 숫자의 전체 자릿수 구현 및.NET Framework의 버전에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-419">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="63892-420">결과적으로 두 개의 특정 숫자 비교를 전체 자릿수 숫자의 내부 표현이 변경 될 수 있으므로.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-420">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
 <span data-ttu-id="63892-421">두 <xref:System.Double.NaN?displayProperty=nameWithType> 를 호출 하 여 값이 같은지 테스트 합니다 <xref:System.Double.Equals%2A> 메서드, 메서드가 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-421">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by calling the <xref:System.Double.Equals%2A> method, the method returns `true`.</span></span> <span data-ttu-id="63892-422">그러나 두 <xref:System.Double.NaN> 연산자를 반환 값을 같음 연산자를 사용 하 여 같은지 테스트할 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-422">However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`.</span></span> <span data-ttu-id="63892-423">확인 하려는 경우 여부를 값을 <xref:System.Double> (NaN), 숫자가 아닙니다. 대신 호출 하는 것을 <xref:System.Double.IsNaN%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-423">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="63892-424">컴파일러 오버 로드 확인 두 동작에는 명백한 차이점에 대 한 계정 수 <see cref="M:System.Double.Equals(System.Object)" /> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-424">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Double.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="63892-425">간에 암시적 변환이 발생 하는 경우는 <paramref name="obj" /> 인수 및 <see cref="T:System.Double" /> 정의 된 인수로 형식화 되지 않은 하 고는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출을 수행할 수 있습니다는 <see cref="M:System.Double.Equals(System.Double)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-425">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Double" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Double.Equals(System.Double)" /> method.</span></span> <span data-ttu-id="63892-426">호출이 고, 그렇지 합니다 <see cref="M:System.Double.Equals(System.Object)" /> 메서드를 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 아닙니다를 <see cref="T:System.Double" /> 값.</span><span class="sxs-lookup"><span data-stu-id="63892-426">Otherwise, they call the <see cref="M:System.Double.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Double" /> value.</span></span> <span data-ttu-id="63892-427">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-427">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="63892-428">제외 하 고 모든 기본 숫자 형식의 경우 <see cref="T:System.Decimal" /> C#에서 첫 번째 비교 반환 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Double.Equals(System.Double)" /> 메서드를 반면 두 번째 비교 반환 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Double.Equals(System.Object)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-428">In the case of all primitive numeric types except for <see cref="T:System.Decimal" /> and in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Double.Equals(System.Double)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Double.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="63892-429">[! 코드 csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [! 코드 vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="63892-429">[!code-csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Double.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="double.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="63892-430">이 인스턴스의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-430">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="63892-431">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-431">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="double.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="63892-432"><see cref="T:System.TypeCode" /> 값 형식에 대한 <see cref="T:System.Double" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-432">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="63892-433">열거형 상수인 <see cref="F:System.TypeCode.Double" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-433">The enumerated constant, <see cref="F:System.TypeCode.Double" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsFinite(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(double d);" />
      <MemberSignature Language="F#" Value="static member IsFinite : double -&gt; bool" Usage="System.double.IsFinite d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : double -&gt; bool" Usage="System.double.IsInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="63892-434">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-434">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="63892-435">지정된 숫자가 음의 무한대로 계산되는지 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-435">Returns a value indicating whether the specified number evaluates to negative or positive infinity</span></span></summary>
        <returns><span data-ttu-id="63892-436"><paramref name="d" />가 <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-436"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-437">부동 소수점 <xref:System.Double.PositiveInfinity> 또는 <xref:System.Double.NegativeInfinity> 오버플로 조건을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="63892-437">Floating-point operations return <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-438">다음 코드 예제에서는 <xref:System.Double.IsInfinity%2A>:</span><span class="sxs-lookup"><span data-stu-id="63892-438">The following code example illustrates the use of <xref:System.Double.IsInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#11)]
 [!code-csharp[System.Double#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#11)]
 [!code-vb[System.Double#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNaN(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(double d);" />
      <MemberSignature Language="F#" Value="static member IsNaN : double -&gt; bool" Usage="System.double.IsNaN d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="63892-439">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-439">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="63892-440">지정된 값이 숫자가 아닌지(<see cref="F:System.Double.NaN" />) 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-440">Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Double.NaN" />).</span></span></summary>
        <returns><span data-ttu-id="63892-441"><paramref name="d" />가 <see cref="F:System.Double.NaN" />으로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-441"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-442">부동 소수점 <xref:System.Double.NaN> 신호 연산의 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-442">Floating-point operations return <xref:System.Double.NaN> to signal that result of the operation is undefined.</span></span> <span data-ttu-id="63892-443">예를 들어, 0.0으로 0.0 나눈 결과 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-443">For example, dividing 0.0 by 0.0 results in <xref:System.Double.NaN>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="63892-444"><xref:System.Double.IsNaN%2A> 반환 `false` 경우는 <xref:System.Double> 값은 <xref:System.Double.PositiveInfinity> 또는 <xref:System.Double.NegativeInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-444"><xref:System.Double.IsNaN%2A> returns `false` if a <xref:System.Double> value is either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="63892-445">이러한 값을 테스트 하려면 사용 합니다 <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, 및 <xref:System.Double.IsNegativeInfinity%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-445">To test for these values, use the <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-446">다음 코드 예제에서는 <xref:System.Double.IsNaN%2A>:</span><span class="sxs-lookup"><span data-stu-id="63892-446">The following code example illustrates the use of <xref:System.Double.IsNaN%2A>:</span></span>  
  
 [!code-cpp[System.Double#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#8)]
 [!code-csharp[System.Double#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#8)]
 [!code-vb[System.Double#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Double.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegative(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(double d);" />
      <MemberSignature Language="F#" Value="static member IsNegative : double -&gt; bool" Usage="System.double.IsNegative d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegativeInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : double -&gt; bool" Usage="System.double.IsNegativeInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="63892-447">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-447">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="63892-448">지정된 숫자가 음의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-448">Returns a value indicating whether the specified number evaluates to negative infinity.</span></span></summary>
        <returns><span data-ttu-id="63892-449"><paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />으로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-449"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-450">부동 소수점 <xref:System.Double.NegativeInfinity> 오버플로 조건을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="63892-450">Floating-point operations return <xref:System.Double.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-451">다음 코드 예제에서는 <xref:System.Double.IsNegativeInfinity%2A>:</span><span class="sxs-lookup"><span data-stu-id="63892-451">The following code example illustrates the use of <xref:System.Double.IsNegativeInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#13)]
 [!code-csharp[System.Double#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#13)]
 [!code-vb[System.Double#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#13)]  
[!code-cpp[System.Double#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#4)]
[!code-csharp[System.Double#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#4)]
[!code-vb[System.Double#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#4)]  
[!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
[!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
[!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsNormal : double -&gt; bool" Usage="System.double.IsNormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsPositiveInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : double -&gt; bool" Usage="System.double.IsPositiveInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="63892-452">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-452">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="63892-453">지정된 숫자가 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-453">Returns a value indicating whether the specified number evaluates to positive infinity.</span></span></summary>
        <returns><span data-ttu-id="63892-454"><paramref name="d" />가 <see cref="F:System.Double.PositiveInfinity" />으로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-454"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-455">부동 소수점 <xref:System.Double.PositiveInfinity> 오버플로 조건을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="63892-455">Floating-point operations return <xref:System.Double.PositiveInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-456">다음 코드 예제에서는 <xref:System.Double.IsPositiveInfinity%2A>:</span><span class="sxs-lookup"><span data-stu-id="63892-456">The following code example illustrates the use of <xref:System.Double.IsPositiveInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#12)]
 [!code-csharp[System.Double#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#12)]
 [!code-vb[System.Double#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsSubnormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : double -&gt; bool" Usage="System.double.IsSubnormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const double MaxValue = 1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MaxValue = float64(1.79769313486232E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Double  = 1.79769313486232E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MaxValue = 1.79769313486232E+308;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : double" Usage="System.double.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>1.79769313486232E+308</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-457"><see cref="T:System.Double" />의 가능한 최대값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-457">Represents the largest possible value of a <see cref="T:System.Double" />.</span></span> <span data-ttu-id="63892-458">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-458">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-459">이 상수의 값은 양의 1.7976931348623157 e + 308입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-459">The value of this constant is positive 1.7976931348623157E+308.</span></span>  
  
 <span data-ttu-id="63892-460">초과 하는 작업의 결과 <xref:System.Double.MaxValue?displayProperty=nameWithType> 는 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-460">The result of an operation that exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType> is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="63892-461">다음 예에서 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 결과 초과 하는 경우 더하기, 곱하기 및 지 수 연산에서 결과 <xref:System.Double.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-461">In the following example, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> results from addition, multiplication, and exponentiation operations when the result exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Double.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Double.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="63892-462">다음 코드 예제에서는 <xref:System.Double.MaxValue>:</span><span class="sxs-lookup"><span data-stu-id="63892-462">The following code example illustrates the use of <xref:System.Double.MaxValue>:</span></span>  
  
 [!code-cpp[Double Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#2)]
 [!code-csharp[Double Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#2)]
 [!code-vb[Double Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const double MinValue = -1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MinValue = float64(-1.79769313486232E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Double  = -1.79769313486232E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MinValue = -1.79769313486232E+308;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : double" Usage="System.double.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-1.79769313486232E+308</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-463"><see cref="T:System.Double" />의 최소값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-463">Represents the smallest possible value of a <see cref="T:System.Double" />.</span></span> <span data-ttu-id="63892-464">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-464">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-465">이 상수의 값은 음수 1.7976931348623157 e + 308입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-465">The value of this constant is negative 1.7976931348623157E+308.</span></span>  
  
 <span data-ttu-id="63892-466">작업의 결과 보다 작은 <xref:System.Double.MinValue?displayProperty=nameWithType> 는 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-466">The result of an operation that is less than <xref:System.Double.MinValue?displayProperty=nameWithType> is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="63892-467">다음 예에서 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 결과가 빼기 및 곱하기 연산에서 결과 보다 작은 <xref:System.Double.MinValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-467">In the following example, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> results from subtraction and multiplication operations when the result is less than <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Double.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Double.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="63892-468">다음 코드 예제에서는 <xref:System.Double.MinValue>:</span><span class="sxs-lookup"><span data-stu-id="63892-468">The following code example illustrates the use of <xref:System.Double.MinValue>:</span></span>  
  
 [!code-cpp[Double Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#2)]
 [!code-csharp[Double Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#2)]
 [!code-vb[Double Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const double NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NaN = float64(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Double  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: double NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : double" Usage="System.double.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-469">숫자가 아닌 값을 나타냅니다(<see langword="NaN" />).</span><span class="sxs-lookup"><span data-stu-id="63892-469">Represents a value that is not a number (<see langword="NaN" />).</span></span> <span data-ttu-id="63892-470">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-470">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-471">메서드 또는 연산자 반환 <xref:System.Double.NaN> 경우 연산의 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-471">A method or operator returns <xref:System.Double.NaN> when the result of an operation is undefined.</span></span> <span data-ttu-id="63892-472">예를 들어 0으로 나눈 결과 <xref:System.Double.NaN>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-472">For example, the result of dividing zero by zero is <xref:System.Double.NaN>, as the following example shows.</span></span> <span data-ttu-id="63892-473">(하지만 반환 된 0이 아닌 숫자를 0으로 나눈 <xref:System.Double.PositiveInfinity> 또는 <xref:System.Double.NegativeInfinity>제 수의 부호에 따라 합니다.)</span><span class="sxs-lookup"><span data-stu-id="63892-473">(But note that dividing a non-zero number by zero returns either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>, depending on the sign of the divisor.)</span></span>  
  
 [!code-csharp[System.Double.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs#1)]
 [!code-vb[System.Double.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb#1)]  
  
 <span data-ttu-id="63892-474">사용 하 여 메서드를 호출 하는 또한을 <xref:System.Double.NaN> 값인지에 대 한 작업을 <xref:System.Double.NaN> 반환 값 <xref:System.Double.NaN>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-474">In addition, a method call with a <xref:System.Double.NaN> value or an operation on a <xref:System.Double.NaN> value returns <xref:System.Double.NaN>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Double.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs#2)]
 [!code-vb[System.Double.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb#2)]  
  
 <span data-ttu-id="63892-475">사용 된 <xref:System.Double.IsNaN%2A> 값 숫자 인지를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-475">Use the <xref:System.Double.IsNaN%2A> method to determine whether a value is not a number.</span></span> <span data-ttu-id="63892-476"><xref:System.Double.op_Equality%2A> 연산자는 두 개의 것으로 간주 <xref:System.Double.NaN> 값이 서로 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-476">The <xref:System.Double.op_Equality%2A> operator considers two <xref:System.Double.NaN> values to be unequal to one another.</span></span> <span data-ttu-id="63892-477">일반적으로 <xref:System.Double> 연산자를 사용 하 여 비교할 수 없습니다 <xref:System.Double.NaN?displayProperty=nameWithType> 상호 <xref:System.Double> 하지만 값 비교 메서드 (같은 <xref:System.Double.Equals%2A> 및 <xref:System.Double.CompareTo%2A>) 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-477">In general, <xref:System.Double> operators cannot be used to compare <xref:System.Double.NaN?displayProperty=nameWithType> with other <xref:System.Double> values, although comparison methods (such as <xref:System.Double.Equals%2A> and <xref:System.Double.CompareTo%2A>) can.</span></span> <span data-ttu-id="63892-478">다음 예제에서는 간의 동작 차이 보여 줍니다. <xref:System.Double> 비교 연산자와 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-478">The following example illustrates the difference in behavior between <xref:System.Double> comparison operators and methods.</span></span>  
  
 [!code-csharp[System.Double.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/double.nan4.cs#4)]
 [!code-vb[System.Double.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/double.nan4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="63892-479">다음 예제는 <xref:System.Double.NaN>의 사용 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-479">The following example illustrates the use of <xref:System.Double.NaN>:</span></span>  
  
 [!code-cpp[System.Double#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#7)]
 [!code-csharp[System.Double#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#7)]
 [!code-vb[System.Double#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNaN(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NegativeInfinity = float64(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Double  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : double" Usage="System.double.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-480">음의 무한대를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-480">Represents negative infinity.</span></span> <span data-ttu-id="63892-481">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-481">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-482">이 상수의 값은 음수를 0으로 나눈 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-482">The value of this constant is the result of dividing a negative number by zero.</span></span>  
  
 <span data-ttu-id="63892-483">작업의 결과이 상수가 반환 됩니다 보다 작은 <xref:System.Double.MinValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-483">This constant is returned when the result of an operation is less than <xref:System.Double.MinValue>.</span></span>  
  
 <span data-ttu-id="63892-484">사용 하 여 <xref:System.Double.IsNegativeInfinity%2A> 값 음의 무한대로 계산 되는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="63892-484">Use <xref:System.Double.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-485">다음 코드 예제에서는 <xref:System.Double.NegativeInfinity>:</span><span class="sxs-lookup"><span data-stu-id="63892-485">The following code example illustrates the use of <xref:System.Double.NegativeInfinity>:</span></span>  
  
 [!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
 [!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
 [!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Equality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : double * double -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-486">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-486">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-487">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-487">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-488">지정된 두 <see cref="T:System.Double" /> 값이 같은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-488">Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are equal.</span></span></summary>
        <returns><span data-ttu-id="63892-489"><paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-489"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-490">합니다 <xref:System.Double.op_Equality%2A> 메서드 정의 대 한 같음 연산자 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-490">The <xref:System.Double.op_Equality%2A> method defines the equality operator for <xref:System.Double> values.</span></span>  
  
 <span data-ttu-id="63892-491">두 <xref:System.Double.NaN?displayProperty=nameWithType> 값을 같음 연산자를 사용 하 여 같은지 테스트할 이면 결과 `false`두; <xref:System.Double.NaN?displayProperty=nameWithType> 값 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-491">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by using the equality operator, the result is `false`; two <xref:System.Double.NaN?displayProperty=nameWithType> values are not considered equal.</span></span> <span data-ttu-id="63892-492">확장 저장 프로시저를 호출 하 여 같은지 테스트 되는 경우는 <xref:System.Double.Equals%2A> 메서드를 결과 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-492">If they are tested for equality by calling the <xref:System.Double.Equals%2A> method, the result is `true`.</span></span>  <span data-ttu-id="63892-493">확인 하려는 경우 여부를 값을 <xref:System.Double> (NaN), 숫자가 아닙니다. 대신 호출 하는 것을 <xref:System.Double.IsNaN%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-493">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : double * double -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-494">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-494">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-495">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-495">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-496">지정된 <see cref="T:System.Double" /> 값이 지정된 다른 <see cref="T:System.Double" /> 값보다 큰지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-496">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="63892-497"><see langword="true" />이 <paramref name="left" />보다 크면 <paramref name="right" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-497"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-498">합니다 <xref:System.Double.op_GreaterThan%2A> 메서드 정의 큼 연산의-연산자에 대 한 보다 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-498">The <xref:System.Double.op_GreaterThan%2A> method defines the operation of the greater-than operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : double * double -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-499">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-499">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-500">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-500">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-501">지정된 <see cref="T:System.Double" /> 값이 지정된 다른 <see cref="T:System.Double" /> 값보다 크거나 같은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-501">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than or equal to another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="63892-502"><paramref name="left" />가 <paramref name="right" />보다 크거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-502"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-503">합니다 <xref:System.Double.op_GreaterThanOrEqual%2A> 크거나 같음 연산자에 대 한 작업을 정의 하는 메서드 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-503">The <xref:System.Double.op_GreaterThanOrEqual%2A> method defines the operation of the greater-than-or-equal operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Inequality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : double * double -&gt; bool" Usage="System.double.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-504">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-504">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-505">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-505">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-506">지정된 두 <see cref="T:System.Double" /> 값이 같지 않은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-506">Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are not equal.</span></span></summary>
        <returns><span data-ttu-id="63892-507"><paramref name="left" />과 <paramref name="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-507"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-508">합니다 <xref:System.Double.op_Inequality%2A> 메서드 정의 대 한 같지 않음 연산자 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-508">The <xref:System.Double.op_Inequality%2A> method defines the inequality operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : double * double -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-509">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-509">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-510">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-510">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-511">지정된 <see cref="T:System.Double" /> 값이 지정된 다른 <see cref="T:System.Double" /> 값보다 작은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-511">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="63892-512"><paramref name="left" />가 <paramref name="right" />보다 작으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-512"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-513">합니다 <xref:System.Double.op_LessThan%2A> 덜 작업을 정의 하는 메서드-에 대 한 연산자 보다 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-513">The <xref:System.Double.op_LessThan%2A> method defines the operation of the less-than operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : double * double -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="63892-514">비교할 첫 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-514">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="63892-515">비교할 두 번째 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-515">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="63892-516">지정된 <see cref="T:System.Double" /> 값이 지정된 다른 <see cref="T:System.Double" /> 값보다 작거나 같은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-516">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than or equal to another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="63892-517"><paramref name="left" />가 <paramref name="right" />보다 작거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-517"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-518">합니다 <xref:System.Double.op_LessThanOrEqual%2A> 작거나 같음 연산자의 작업을 정의 하는 메서드 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-518">The <xref:System.Double.op_LessThanOrEqual%2A> method defines the operation of the less-than-or-equal operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="63892-519">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-519">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span></summary>
        <altmember cref="Overload:System.Double.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; double" Usage="System.double.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-520">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-520">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="63892-521">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-521">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="63892-522"><paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-522">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-523">합니다 `s` 매개 변수는 현재 문화권의 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>를 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>, 또는 폼의 문자열:</span><span class="sxs-lookup"><span data-stu-id="63892-523">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>, or a string of the form:</span></span>  
  
 <span data-ttu-id="63892-524">[*ws*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="63892-524">[*ws*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="63892-525">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-525">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="63892-526">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-526">The following table describes each element.</span></span>  
  
|<span data-ttu-id="63892-527">요소</span><span class="sxs-lookup"><span data-stu-id="63892-527">Element</span></span>|<span data-ttu-id="63892-528">설명</span><span class="sxs-lookup"><span data-stu-id="63892-528">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-529">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-529">*ws*</span></span>|<span data-ttu-id="63892-530">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-530">A series of white-space characters.</span></span>|  
|<span data-ttu-id="63892-531">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-531">*sign*</span></span>|<span data-ttu-id="63892-532">음수 기호를 기호 (-) 또는 양수 부호 기호 (+).</span><span class="sxs-lookup"><span data-stu-id="63892-532">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="63892-533">선행 기호를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-533">Only a leading sign can be used.</span></span>|  
|<span data-ttu-id="63892-534">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-534">*integral-digits*</span></span>|<span data-ttu-id="63892-535">일련의 0에서 숫자의 정수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-535">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-536">실행 *정수 계열 숫자* 그룹 구분 기호 별로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-536">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="63892-537">예를 들어, 일부 문화권에서는 쉼표 (,) 개의 그룹을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-537">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="63892-538">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 합니다 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-538">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="63892-539">,</span><span class="sxs-lookup"><span data-stu-id="63892-539">,</span></span>|<span data-ttu-id="63892-540">문화권별 천 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-540">A culture-specific thousands separator symbol.</span></span>|  
|<span data-ttu-id="63892-541">.</span><span class="sxs-lookup"><span data-stu-id="63892-541">.</span></span>|<span data-ttu-id="63892-542">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-542">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="63892-543">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-543">*fractional-digits*</span></span>|<span data-ttu-id="63892-544">일련의 0에서 숫자의 소수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-544">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="63892-545">E</span><span class="sxs-lookup"><span data-stu-id="63892-545">E</span></span>|<span data-ttu-id="63892-546">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-546">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="63892-547">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-547">*exponential-digits*</span></span>|<span data-ttu-id="63892-548">일련의 0에서 지 수를 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-548">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="63892-549">`s` 매개 변수를 조합 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-549">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="63892-550">즉, 공백이 고 천 단위 구분 기호 허용 되는 예를 들어, 통화 기호는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-550">This means that white space and thousands separators are allowed, for example, while currency symbols are not.</span></span> <span data-ttu-id="63892-551">에 대 한 보다 세밀 하 게 제어 요소에서 허용 되는 스타일 `s` 구문 분석 작업이 성공 하기 위해 호출 합니다 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> 또는 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-551">For finer control over which style elements are permitted in `s` for the parse operation to succeed, call the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> or the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="63892-552">합니다 `s` 매개 변수에서 서식 지정 정보를 사용 하 여 해석 됩니다는 <xref:System.Globalization.NumberFormatInfo> 현재 스레드 문화권에 대 한 초기화 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-552">The `s` parameter is interpreted using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current thread culture.</span></span> <span data-ttu-id="63892-553">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="63892-553">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span> <span data-ttu-id="63892-554">다른 문화권의 서식 지정 정보를 사용 하 여 문자열 구문 분석을 호출 합니다 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 또는 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-554">To parse a string using the formatting information of some other culture, call the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> or <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="63892-555">일반적으로 전달 하는 경우는 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-555">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-556">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-556">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-557">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-557">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 <span data-ttu-id="63892-558">구분 기호에서 발견 되는 `s` 구문 분석 작업을 하 고 해당 통화 또는 10 진수 수 중에 매개 변수 및 그룹 구분 기호는 동일, 구문 분석 작업이 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-558">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-559">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-559">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-560">다음 예제에서는 <xref:System.Double.Parse%28System.String%29> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="63892-560">The following example illustrates the use of the <xref:System.Double.Parse%28System.String%29> method.</span></span>  
  
 [!code-cpp[Double Example#5](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#5)]
 [!code-csharp[Double Example#5](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#5)]
 [!code-vb[Double Example#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="63892-561"><paramref name="s" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="63892-561"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="63892-562"><paramref name="s" />가 유효한 형식의 숫자를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="63892-562"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="63892-563"><paramref name="s" />는 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-563"><paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="M:System.Double.TryParse(System.String,System.Double@)" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-564">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-564">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; double" Usage="System.double.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-565">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-565">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="63892-566"><paramref name="s" />에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-566">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="63892-567">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />의 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-567">A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <summary><span data-ttu-id="63892-568">지정된 스타일의 숫자에 대한 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-568">Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="63892-569"><paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-569">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-570">합니다 `style` 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 `s` 구문 분석 작업이 성공 하기 위해 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-570">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="63892-571">비트 플래그 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-571">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="63892-572">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-572">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="63892-573">합니다 `s` 매개 변수는 현재 문화권의 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>를 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-573">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="63892-574">값에 따라 `style`, 형태를 취할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-574">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="63892-575">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="63892-575">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="63892-576">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-576">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="63892-577">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-577">The following table describes each element.</span></span>  
  
|<span data-ttu-id="63892-578">요소</span><span class="sxs-lookup"><span data-stu-id="63892-578">Element</span></span>|<span data-ttu-id="63892-579">설명</span><span class="sxs-lookup"><span data-stu-id="63892-579">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-580">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-580">*ws*</span></span>|<span data-ttu-id="63892-581">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-581">A series of white-space characters.</span></span> <span data-ttu-id="63892-582">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함 합니다 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-582">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="63892-583">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-583">A culture-specific currency symbol.</span></span> <span data-ttu-id="63892-584">문자열에 해당 위치는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-584">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="63892-585">현재 문화권의 통화 기호에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-585">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-586">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-586">*sign*</span></span>|<span data-ttu-id="63892-587">음수 기호를 기호 (-) 또는 양수 부호 기호 (+).</span><span class="sxs-lookup"><span data-stu-id="63892-587">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="63892-588">부호의 시작 부분에 나타날 수 있습니다 `s` 경우 `style` 포함 합니다 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함를 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-588">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="63892-589">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-589">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-590">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-590">*integral-digits*</span></span>|<span data-ttu-id="63892-591">일련의 0에서 숫자의 정수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-591">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-592">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 합니다 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-592">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="63892-593">,</span><span class="sxs-lookup"><span data-stu-id="63892-593">,</span></span>|<span data-ttu-id="63892-594">Culture 별 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-594">A culture-specific group separator.</span></span> <span data-ttu-id="63892-595">현재 문화권의 그룹 구분 기호에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그</span><span class="sxs-lookup"><span data-stu-id="63892-595">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="63892-596">.</span><span class="sxs-lookup"><span data-stu-id="63892-596">.</span></span>|<span data-ttu-id="63892-597">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-597">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="63892-598">현재 문화권의 소수점 기호에 나타날 수 있습니다 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-598">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-599">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-599">*fractional-digits*</span></span>|<span data-ttu-id="63892-600">일련의 0에서 숫자의 소수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-600">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="63892-601">소수 자릿수에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-601">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-602">E</span><span class="sxs-lookup"><span data-stu-id="63892-602">E</span></span>|<span data-ttu-id="63892-603">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-603">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="63892-604">`s` 매개 변수는 경우 지 수 표기법으로 숫자를 나타낼 수 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그.</span><span class="sxs-lookup"><span data-stu-id="63892-604">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-605">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-605">*exponential-digits*</span></span>|<span data-ttu-id="63892-606">일련의 0에서 지 수를 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-606">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="63892-607">종료 NUL (U + 0000)에 임의 문자를 `s` 의 값에 관계 없이 구문 분석 작업에서 무시 되는 `style` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-607">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="63892-608">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-608">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="63892-609">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버가 있을 수 있지만 입력된 문자열에 나타날 수 필요가 없습니다 요소를 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-609">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="63892-610">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 나타날 수 있는 요소에 영향을 줄 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-610">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="63892-611">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="63892-611">NumberStyles value</span></span>|<span data-ttu-id="63892-612">허용 되는 요소 `s` 숫자 외에도</span><span class="sxs-lookup"><span data-stu-id="63892-612">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="63892-613">합니다 *정수 계열 숫자* 요소에만 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-613">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="63892-614">소수점 (*합니다.*) 및 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-614">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="63892-615">"E" 또는 "E" 문자를 지 수 표기법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-615">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="63892-616">자체적으로이 플래그는 폼의 값을 지원 *자릿수*E*자릿수*추가; 플래그 양수 또는 음수 기호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-616">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="63892-617">합니다 *ws* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-617">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="63892-618">합니다 *ws* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-618">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="63892-619">합니다 *sign* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-619">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="63892-620">합니다 *sign* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-620">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="63892-621">합니다 *기호* 형식의 숫자 값을 묶는 괄호는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-621">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="63892-622">1000 단위 구분 기호 (,) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-622">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="63892-623">통화 ($) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-623">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="63892-624">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-624">All elements.</span></span> <span data-ttu-id="63892-625">그러나 `s` 16 진수 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-625">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="63892-626">합니다 *ws* 시작과 끝 요소 `s`, *로그인* 맨 앞에 `s`, 및 소수점 (.).</span><span class="sxs-lookup"><span data-stu-id="63892-626">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="63892-627">`s` 매개 변수 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-627">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="63892-628">합니다 `ws`, `sign`, 천 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-628">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="63892-629">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-629">All elements.</span></span> <span data-ttu-id="63892-630">그러나 `s` 16 진수 숫자를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-630">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="63892-631">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 대 한 초기화 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-631">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="63892-632">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="63892-632">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span>  
  
 <span data-ttu-id="63892-633">일반적으로 전달 하는 경우는 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-633">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-634">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-634">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-635">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-635">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 <span data-ttu-id="63892-636">구분 기호에서 발견 되는 `s` 구문 분석 작업을 하 고 해당 통화 또는 10 진수 수 중에 매개 변수 및 그룹 구분 기호는 동일, 구문 분석 작업이 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-636">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-637">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-637">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-638">다음 예제에서는 합니다 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 의 문자열 표현을 구문 분석 방법 <xref:System.Double> EN-US 문화권을 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-638">The following example uses the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method to parse the string representations of <xref:System.Double> values using the en-US culture.</span></span>  
  
 [!code-csharp[System.Double.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse.cs#1)]
 [!code-vb[System.Double.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="63892-639"><paramref name="s" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-639"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="63892-640"><paramref name="s" />가 유효한 형식의 숫자를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="63892-640"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="63892-641"><paramref name="s" />는 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-641"><paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="63892-642"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="63892-642"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="63892-643">또는</span><span class="sxs-lookup"><span data-stu-id="63892-643">-or-</span></span> 
 <span data-ttu-id="63892-644"><paramref name="style" />에 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-644"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-645">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-645">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; double" Usage="System.double.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-646">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-646">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="63892-647"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-647">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="63892-648">지정된 문화권별 형식의 숫자에 대한 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-648">Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="63892-649"><paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-649">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-650">이 오버 로드 된 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 메서드는 다양 한 방법으로 서식을 지정할 수 있는 텍스트 변환 데 일반적으로 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-650">This overload of the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Double> value.</span></span> <span data-ttu-id="63892-651">예를 들어 숫자 값으로는 HTML 텍스트 상자에 사용자가 입력 된 텍스트를 변환할 사용 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-651">For example, it can be used to convert the text that is entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="63892-652">`s` 매개 변수를 조합 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-652">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="63892-653">`s` 매개 변수를 포함할 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 에 지정 된 문화권에 대 한 `provider`, 형식의 문자열을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-653">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`, or it can contain a string of the form:</span></span>  
  
 <span data-ttu-id="63892-654">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="63892-654">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="63892-655">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="63892-655">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="63892-656">"숫자" 용어를 포함 하는 요소는 0에서 9 까지의 숫자 문자의 일련의 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-656">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span>  
  
|<span data-ttu-id="63892-657">요소</span><span class="sxs-lookup"><span data-stu-id="63892-657">Element</span></span>|<span data-ttu-id="63892-658">설명</span><span class="sxs-lookup"><span data-stu-id="63892-658">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-659">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-659">*ws*</span></span>|<span data-ttu-id="63892-660">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-660">A series of white-space characters.</span></span>|  
|<span data-ttu-id="63892-661">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-661">*sign*</span></span>|<span data-ttu-id="63892-662">음수 기호를 기호 (-) 또는 양수 부호 기호 (+).</span><span class="sxs-lookup"><span data-stu-id="63892-662">A negative sign symbol (-) or a positive sign symbol (+).</span></span>|  
|<span data-ttu-id="63892-663">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-663">*integral-digits*</span></span>|<span data-ttu-id="63892-664">일련의 0에서 숫자의 정수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-664">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-665">실행 *정수 계열 숫자* 그룹 구분 기호 별로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-665">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="63892-666">예를 들어, 일부 문화권에서는 쉼표 (,) 개의 그룹을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-666">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="63892-667">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 합니다 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-667">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="63892-668">.</span><span class="sxs-lookup"><span data-stu-id="63892-668">.</span></span>|<span data-ttu-id="63892-669">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-669">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="63892-670">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-670">*fractional-digits*</span></span>|<span data-ttu-id="63892-671">일련의 0에서 숫자의 소수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-671">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="63892-672">E</span><span class="sxs-lookup"><span data-stu-id="63892-672">E</span></span>|<span data-ttu-id="63892-673">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-673">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="63892-674">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-674">*exponential-digits*</span></span>|<span data-ttu-id="63892-675">일련의 0에서 지 수를 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-675">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="63892-676">숫자 형식에 대 한 자세한 내용은 참조는 [형식](~/docs/standard/base-types/formatting-types.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-676">For more information about numeric formats, see the [Formatting Types](~/docs/standard/base-types/formatting-types.md) topic.</span></span>  
  
 <span data-ttu-id="63892-677">`provider` 매개 변수는는 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 형식의 해석에 사용 되는 문화권별 정보를 제공 하는 개체 `s`.</span><span class="sxs-lookup"><span data-stu-id="63892-677">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`.</span></span> <span data-ttu-id="63892-678">일반적으로 <xref:System.Globalization.NumberFormatInfo> 또는 <xref:System.Globalization.CultureInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-678">Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="63892-679">하는 경우 `provider` 됩니다 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 를 가져올 수 없으며 서식 지정 정보를 현재 시스템 문화권에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-679">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="63892-680">일반적으로 전달 하는 경우는 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-680">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-681">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-681">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-682">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-682">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 <span data-ttu-id="63892-683">구분 기호에서 발견 되는 `s` 구문 분석 작업을 하 고 해당 통화 또는 10 진수 수 중에 매개 변수 및 그룹 구분 기호는 동일, 구문 분석 작업이 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-683">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-684">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-684">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-685">다음 예제는 단추 클릭을 웹 폼의 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-685">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="63892-686">반환 된 배열을 사용 하 여는 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 속성을 사용자의 로캘을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-686">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="63892-687">그런 다음는 <xref:System.Globalization.CultureInfo> 해당 로캘에 해당 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-687">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="63892-688"><xref:System.Globalization.NumberFormatInfo> 는 속해 있는 개체 <xref:System.Globalization.CultureInfo> 개체를 전달 합니다를 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 에 사용자를 변환 하는 방법의 입력을 <xref:System.Double> 값.</span><span class="sxs-lookup"><span data-stu-id="63892-688">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[ParseMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#2)]
 [!code-vb[ParseMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="63892-689"><paramref name="s" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-689"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="63892-690"><paramref name="s" />가 유효한 형식의 숫자를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="63892-690"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="63892-691"><paramref name="s" />는 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-691"><paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-692">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-692">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Double" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-693">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-693">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="63892-694"><paramref name="s" />에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-694">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="63892-695">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-695">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="63892-696"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-696">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="63892-697">지정된 스타일 및 문화권별 형식의 숫자에 대한 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-697">Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="63892-698"><paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-698">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-699">합니다 `style` 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 `s` 구문 분석 작업이 성공 하기 위해 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-699">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="63892-700">비트 플래그 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-700">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="63892-701">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-701">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="63892-702">합니다 `s` 매개 변수를 포함할 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>를 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 에 지정 된 문화권에 대 한 `provider`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-702">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`.</span></span> <span data-ttu-id="63892-703">값에 따라 `style`, 형태를 취할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-703">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="63892-704">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="63892-704">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="63892-705">대괄호 ([및])는 선택 사항에 포함 하는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-705">Elements framed in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="63892-706">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-706">The following table describes each element.</span></span>  
  
|<span data-ttu-id="63892-707">요소</span><span class="sxs-lookup"><span data-stu-id="63892-707">Element</span></span>|<span data-ttu-id="63892-708">설명</span><span class="sxs-lookup"><span data-stu-id="63892-708">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-709">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-709">*ws*</span></span>|<span data-ttu-id="63892-710">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-710">A series of white-space characters.</span></span> <span data-ttu-id="63892-711">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함 합니다 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-711">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="63892-712">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-712">A culture-specific currency symbol.</span></span> <span data-ttu-id="63892-713">문자열에 해당 위치는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-713">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="63892-714">현재 문화권의 통화 기호에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-714">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-715">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-715">*sign*</span></span>|<span data-ttu-id="63892-716">음수 기호를 기호 (-) 또는 양수 부호 기호 (+).</span><span class="sxs-lookup"><span data-stu-id="63892-716">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="63892-717">부호의 시작 부분에 나타날 수 있습니다 `s` 경우 `style` 포함 합니다 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함를 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-717">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="63892-718">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-718">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-719">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-719">*integral-digits*</span></span>|<span data-ttu-id="63892-720">일련의 0에서 숫자의 정수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-720">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-721">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 합니다 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-721">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="63892-722">,</span><span class="sxs-lookup"><span data-stu-id="63892-722">,</span></span>|<span data-ttu-id="63892-723">Culture 별 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-723">A culture-specific group separator.</span></span> <span data-ttu-id="63892-724">현재 문화권의 그룹 구분 기호에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그</span><span class="sxs-lookup"><span data-stu-id="63892-724">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="63892-725">.</span><span class="sxs-lookup"><span data-stu-id="63892-725">.</span></span>|<span data-ttu-id="63892-726">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-726">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="63892-727">현재 문화권의 소수점 기호에 나타날 수 있습니다 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-727">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-728">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-728">*fractional-digits*</span></span>|<span data-ttu-id="63892-729">일련의 0에서 숫자의 소수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-729">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="63892-730">소수 자릿수에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-730">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-731">E</span><span class="sxs-lookup"><span data-stu-id="63892-731">E</span></span>|<span data-ttu-id="63892-732">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-732">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="63892-733">`s` 매개 변수는 경우 지 수 표기법으로 숫자를 나타낼 수 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그.</span><span class="sxs-lookup"><span data-stu-id="63892-733">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-734">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-734">*exponential-digits*</span></span>|<span data-ttu-id="63892-735">일련의 0에서 지 수를 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-735">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="63892-736">종료 NUL (U + 0000)에 임의 문자를 `s` 의 값에 관계 없이 구문 분석 작업에서 무시 되는 `style` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-736">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="63892-737">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-737">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="63892-738">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버가 있을 수 있지만 입력된 문자열에 나타날 수 필요가 없습니다 요소를 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-738">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="63892-739">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 나타날 수 있는 요소에 영향을 줄 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-739">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="63892-740">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="63892-740">NumberStyles value</span></span>|<span data-ttu-id="63892-741">허용 되는 요소 `s` 숫자 외에도</span><span class="sxs-lookup"><span data-stu-id="63892-741">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="63892-742">합니다 *정수 계열 숫자* 요소에만 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-742">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="63892-743">소수점 (*합니다.*) 및 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-743">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="63892-744">"E" 또는 "E" 문자를 지 수 표기법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-744">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="63892-745">자체적으로이 플래그는 폼의 값을 지원 *자릿수*E*자릿수*추가; 플래그 양수 또는 음수 기호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-745">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="63892-746">합니다 *ws* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-746">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="63892-747">합니다 *ws* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-747">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="63892-748">합니다 *sign* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-748">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="63892-749">합니다 *sign* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-749">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="63892-750">합니다 *기호* 형식의 숫자 값을 묶는 괄호는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-750">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="63892-751">1000 단위 구분 기호 (,) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-751">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="63892-752">통화 ($) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-752">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="63892-753">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-753">All elements.</span></span> <span data-ttu-id="63892-754">그러나 `s` 16 진수 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-754">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="63892-755">합니다 *ws* 시작과 끝 요소 `s`, *로그인* 맨 앞에 `s`, 및 소수점 (.).</span><span class="sxs-lookup"><span data-stu-id="63892-755">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="63892-756">`s` 매개 변수 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-756">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="63892-757">합니다 `ws`, `sign`, 천 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-757">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="63892-758">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-758">All elements.</span></span> <span data-ttu-id="63892-759">그러나 `s` 16 진수 숫자를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-759">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="63892-760">`provider` 매개 변수는는 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 형식의 해석에 사용 되는 문화권별 정보를 제공 하는 개체 `s`.</span><span class="sxs-lookup"><span data-stu-id="63892-760">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`.</span></span> <span data-ttu-id="63892-761">일반적으로 <xref:System.Globalization.NumberFormatInfo> 또는 <xref:System.Globalization.CultureInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-761">Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="63892-762">하는 경우 `provider` 됩니다 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 를 가져올 수 없으며 서식 지정 정보를 현재 시스템 문화권에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-762">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="63892-763">일반적으로 전달 하는 경우는 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-763">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-764">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-764">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-765">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-765">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 <span data-ttu-id="63892-766">구분 기호에서 발견 되는 `s` 구문 분석 작업을 하 고 해당 통화 또는 10 진수 수 중에 매개 변수 및 그룹 구분 기호는 동일, 구문 분석 작업이 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-766">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-767">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-767">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-768">다음 예제를 사용 합니다 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 온도 값의 문자열 표현을 여러 할당 메서드를 `Temperature` 개체.</span><span class="sxs-lookup"><span data-stu-id="63892-768">The following example illustrates the use of the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method to assign several string representations of temperature values to a `Temperature` object.</span></span>  
  
 [!code-csharp[System.Double.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse3.cs#2)]
 [!code-vb[System.Double.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="63892-769"><paramref name="s" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-769"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="63892-770"><paramref name="s" />가 숫자 값을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="63892-770"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="63892-771"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="63892-771"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="63892-772">또는</span><span class="sxs-lookup"><span data-stu-id="63892-772">-or-</span></span> 
 <span data-ttu-id="63892-773"><paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-773"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="63892-774"><paramref name="s" />는 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-774"><paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-775">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-775">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const double PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PositiveInfinity = float64(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Double  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : double" Usage="System.double.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="63892-776">양의 무한대를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-776">Represents positive infinity.</span></span> <span data-ttu-id="63892-777">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-777">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-778">이 상수의 값은 양수 값을 0으로 나눈 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-778">The value of this constant is the result of dividing a positive number by zero.</span></span>  
  
 <span data-ttu-id="63892-779">작업의 결과 보다 크면이 상수가 반환 됩니다 <xref:System.Double.MaxValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-779">This constant is returned when the result of an operation is greater than <xref:System.Double.MaxValue>.</span></span>  
  
 <span data-ttu-id="63892-780">사용 하 여 <xref:System.Double.IsPositiveInfinity%2A> 값이 양의 무한대로 계산 되는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="63892-780">Use <xref:System.Double.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-781">다음 코드 예제에서는 <xref:System.Double.PositiveInfinity>:</span><span class="sxs-lookup"><span data-stu-id="63892-781">The following code example illustrates the use of <xref:System.Double.PositiveInfinity>:</span></span>  
  
 [!code-cpp[System.Double#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#10)]
 [!code-csharp[System.Double#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#10)]
 [!code-vb[System.Double#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-782">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-782">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-783">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-783">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-784">현재 인스턴스의 값이 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-784"><see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-785">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-785">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-786"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-786">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-787">권장된 대안 호출 하는 것은 <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-787">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-788">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-788">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-789">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-789">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-790"><see cref="T:System.Byte" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-790">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-791">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-791">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-792"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-792">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-793">권장된 대안 호출 하는 것은 <xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-793">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-794">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-794">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-795">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-795">This conversion is not supported.</span></span> <span data-ttu-id="63892-796">이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-796">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="63892-797">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-797">This conversion is not supported.</span></span> <span data-ttu-id="63892-798">값이 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-798">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="63892-799">모든 경우</span><span class="sxs-lookup"><span data-stu-id="63892-799">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-800">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-800">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-801">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-801">This conversion is not supported.</span></span> <span data-ttu-id="63892-802">이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-802">Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></span></span></summary>
        <returns><span data-ttu-id="63892-803">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-803">This conversion is not supported.</span></span> <span data-ttu-id="63892-804">값이 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-804">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="63892-805">모든 경우</span><span class="sxs-lookup"><span data-stu-id="63892-805">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-806">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-806">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-807">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-807">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-808"><see cref="T:System.Decimal" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-808">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-809">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-809">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-810"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-810">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-811">권장된 대안 호출 하는 것은 <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-811">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-812">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-812">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-813">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-813">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-814">변경되지 않은 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-814">The value of the current instance, unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-815">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-815">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-816"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-816">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-817">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-817">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-818">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-818">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-819"><see cref="T:System.Int16" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-819">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-820">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-820">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-821"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-821">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-822">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-822">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-823">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-823">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-824">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-824">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-825"><see cref="T:System.Int32" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-825">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-826">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-826">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-827"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-827">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-828">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-828">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-829">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-829">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-830">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-830">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-831"><see cref="T:System.Int64" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-831">The value of the current instance, converted to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-832">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-832">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-833"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-833">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-834">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-834">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-835">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-835">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-836">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-836">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-837"><see cref="T:System.SByte" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-837">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-838">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-838">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-839"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-839">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-840">권장된 대안 호출 하는 것은 <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-840">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-841">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-841">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-842">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-842">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-843"><see cref="T:System.Single" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-843">The value of the current instance, converted to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-844">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-844">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-845"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-845">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-846">권장된 대안 호출 하는 것은 <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-846">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="63892-847">이 <see cref="T:System.Double" /> 값을 변환할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-847">The type to which to convert this <see cref="T:System.Double" /> value.</span></span></param>
        <param name="provider"><span data-ttu-id="63892-848">반환된 값의 형식에 대한 문화권별 정보를 제공하는 <see cref="T:System.IFormatProvider" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-848">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</span></span></param>
        <summary><span data-ttu-id="63892-849">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-849">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-850"><paramref name="type" />으로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-850">The value of the current instance, converted to <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-851">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-851">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-852"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-852">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-853">권장된 대안 호출 하는 것을 `static` (`Shared` Visual basic에서) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-853">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-854">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-854">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-855">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-855">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-856"><see cref="T:System.UInt16" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-856">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-857">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-857">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-858"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-858">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-859">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-859">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-860">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-860">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-861">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-861">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-862"><see cref="T:System.UInt32" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-862">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-863">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-863">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-864"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-864">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-865">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-865">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-866">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-866">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="63892-867">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="63892-867">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="63892-868"><see cref="T:System.UInt64" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-868">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-869">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="63892-869">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="63892-870"><xref:System.Double> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-870">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="63892-871">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="63892-871">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="63892-872">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-872">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="double.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="63892-873">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-873">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="63892-874">이 인스턴스 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-874">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-875">합니다 <xref:System.Double.ToString> 메서드 형식을 <xref:System.Double> 현재 문화권의 형식 ("G" 또는 일반) 기본 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-875">The <xref:System.Double.ToString> method formats a <xref:System.Double> value in the default ("G", or general) format of the current culture.</span></span> <span data-ttu-id="63892-876">다른 오버 로드를 사용 하 여 다른 형식으로, 전체 자릿수 또는 문화권을 지정 하려는 경우는 <xref:System.Double.ToString%2A> 메서드를 다음과 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-876">If you want to specify a different format, precision, or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="63892-877">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="63892-877">To use format</span></span>|<span data-ttu-id="63892-878">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="63892-878">For culture</span></span>|<span data-ttu-id="63892-879">오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-879">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="63892-880">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-880">Default ("G") format</span></span>|<span data-ttu-id="63892-881">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-881">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="63892-882">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-882">A specific format or precision</span></span>|<span data-ttu-id="63892-883">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-883">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
|<span data-ttu-id="63892-884">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-884">A specific format or precision</span></span>|<span data-ttu-id="63892-885">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-885">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="63892-886">반환 값이 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 폼의 문자열:</span><span class="sxs-lookup"><span data-stu-id="63892-886">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="63892-887">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="63892-887">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="63892-888">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="63892-888">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="63892-889">"숫자" 용어를 포함 하는 요소는 0에서 9 까지의 숫자 문자의 일련의 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-889">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="63892-890">다음 표에 나열 된 요소가 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-890">The elements listed in the following table are supported.</span></span>  
  
|<span data-ttu-id="63892-891">요소</span><span class="sxs-lookup"><span data-stu-id="63892-891">Element</span></span>|<span data-ttu-id="63892-892">설명</span><span class="sxs-lookup"><span data-stu-id="63892-892">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-893">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-893">*sign*</span></span>|<span data-ttu-id="63892-894">음수 기호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-894">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="63892-895">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-895">*integral-digits*</span></span>|<span data-ttu-id="63892-896">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-896">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="63892-897">정수 계열 숫자 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-897">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="63892-898">'*.*'</span><span class="sxs-lookup"><span data-stu-id="63892-898">'*.*'</span></span>|<span data-ttu-id="63892-899">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-899">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="63892-900">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-900">*fractional-digits*</span></span>|<span data-ttu-id="63892-901">일련의 숫자는 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-901">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="63892-902">'*e*'</span><span class="sxs-lookup"><span data-stu-id="63892-902">'*e*'</span></span>|<span data-ttu-id="63892-903">소문자 'e', 지 수 (과학적 표기법) 표기법을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-903">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="63892-904">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-904">*exponential-digits*</span></span>|<span data-ttu-id="63892-905">일련의 진수 지 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-905">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="63892-906">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-906">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="63892-907">다음 서식 항목에서 자세히 설명 되어 광범위 한 형식 지정 지원을 제공 하는.NET Framework:</span><span class="sxs-lookup"><span data-stu-id="63892-907">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="63892-908">숫자 서식 지정자에 대 한 자세한 내용은 참조 하세요. [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-908">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="63892-909">형식에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-909">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-910">다음 예제에서는 기본 <xref:System.Double.ToString?displayProperty=nameWithType> 의 숫자의 문자열 표현을 표시 하는 메서드 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-910">The following example uses the default <xref:System.Double.ToString?displayProperty=nameWithType> method to display the string representations of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Double.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Double.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#1)]  
  
 <span data-ttu-id="63892-911">다음 예제에서는 <xref:System.Double.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-911">The following example illustrates the use of <xref:System.Double.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Double#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#3)]
 [!code-csharp[System.Double#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#3)]
 [!code-vb[System.Double#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="63892-912">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="63892-912">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="double.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="63892-913">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-913">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="63892-914">지정된 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-914">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="63892-915">이 인스턴스의 값을 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-915">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-916">합니다 <xref:System.Double.ToString%28System.IFormatProvider%29> 메서드 형식을 <xref:System.Double> 지정된 된 문화권의 형식 ("G" 또는 일반) 기본 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-916">The <xref:System.Double.ToString%28System.IFormatProvider%29> method formats a <xref:System.Double> value in the default ("G", or general) format of a specified culture.</span></span> <span data-ttu-id="63892-917">다른 형식으로 또는 문화권을 지정 하려는 경우 사용 하 여 다른 오버 로드는 <xref:System.Double.ToString%2A> 메서드를 다음과 같이:</span><span class="sxs-lookup"><span data-stu-id="63892-917">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="63892-918">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="63892-918">To use format</span></span>|<span data-ttu-id="63892-919">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="63892-919">For culture</span></span>|<span data-ttu-id="63892-920">오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-920">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="63892-921">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-921">Default ("G") format</span></span>|<span data-ttu-id="63892-922">기본 (현재)</span><span class="sxs-lookup"><span data-stu-id="63892-922">Default (current)</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="63892-923">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-923">A specific format or precision</span></span>|<span data-ttu-id="63892-924">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-924">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
|<span data-ttu-id="63892-925">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-925">A specific format or precision</span></span>|<span data-ttu-id="63892-926">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-926">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="63892-927">반환 값이 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 폼의 문자열:</span><span class="sxs-lookup"><span data-stu-id="63892-927">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="63892-928">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="63892-928">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="63892-929">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="63892-929">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="63892-930">"숫자" 용어를 포함 하는 요소는 0에서 9 까지의 숫자 문자의 일련의 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-930">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="63892-931">다음 표에 나열 된 요소가 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-931">The elements listed in the following table are supported.</span></span>  
  
|<span data-ttu-id="63892-932">요소</span><span class="sxs-lookup"><span data-stu-id="63892-932">Element</span></span>|<span data-ttu-id="63892-933">설명</span><span class="sxs-lookup"><span data-stu-id="63892-933">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-934">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-934">*sign*</span></span>|<span data-ttu-id="63892-935">음수 기호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-935">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="63892-936">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-936">*integral-digits*</span></span>|<span data-ttu-id="63892-937">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-937">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="63892-938">정수 계열 숫자 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-938">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="63892-939">'*.*'</span><span class="sxs-lookup"><span data-stu-id="63892-939">'*.*'</span></span>|<span data-ttu-id="63892-940">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-940">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="63892-941">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-941">*fractional-digits*</span></span>|<span data-ttu-id="63892-942">일련의 숫자는 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-942">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="63892-943">'*e*'</span><span class="sxs-lookup"><span data-stu-id="63892-943">'*e*'</span></span>|<span data-ttu-id="63892-944">소문자 'e', 지 수 (과학적 표기법) 표기법을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-944">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="63892-945">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-945">*exponential-digits*</span></span>|<span data-ttu-id="63892-946">일련의 진수 지 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-946">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="63892-947">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-947">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="63892-948">이 인스턴스의 일반 숫자 서식 지정자 ("G")를 사용 하 여 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-948">This instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="63892-949">다음 서식 항목에서 자세히 설명 되어 광범위 한 형식 지정 지원을 제공 하는.NET Framework:</span><span class="sxs-lookup"><span data-stu-id="63892-949">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="63892-950">숫자 서식 지정자에 대 한 자세한 내용은 참조 하세요. [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-950">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="63892-951">형식에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-951">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="63892-952">`provider` 매개 변수는는 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 개체.</span><span class="sxs-lookup"><span data-stu-id="63892-952">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="63892-953">일반적으로 `provider` 되는 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-953">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="63892-954">`provider` 매개 변수는 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-954">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="63892-955">하는 경우 `provider` 됩니다 `null`, 반환 값을 사용 하 여 형식이 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-955">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-956">다음 예제에서는 두 개의 문자열 표현을 <xref:System.Double> 값을 사용 하 여 <xref:System.Globalization.CultureInfo> 몇 가지 다른 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-956">The following example displays the string representation of two <xref:System.Double> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 [!code-csharp[System.Double.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#2)]
 [!code-vb[System.Double.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#2)]  
  
 <span data-ttu-id="63892-957">다음 예제에서는의 사용을 보여 줍니다 <xref:System.Double.ToString%2A>해를 <xref:System.String> 및 <xref:System.IFormatProvider> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-957">The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.</span></span>  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="63892-958">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="63892-958">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="double.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="63892-959">숫자 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-959">A numeric format string.</span></span></param>
        <summary><span data-ttu-id="63892-960">지정된 형식을 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-960">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span></span></summary>
        <returns><span data-ttu-id="63892-961">이 인스턴스의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-961">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-962">합니다 <xref:System.Double.ToString%28System.String%29> 메서드 형식을 <xref:System.Double> 현재 문화권의 규칙을 사용 하 여 지정 된 형식의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-962">The <xref:System.Double.ToString%28System.String%29> method formats a <xref:System.Double> value in a specified format by using the conventions of the current culture.</span></span> <span data-ttu-id="63892-963">다른 형식으로 또는 문화권을 지정 하려는 경우 사용 하 여 다른 오버 로드는 <xref:System.Double.ToString%2A> 메서드를 다음과 같이:</span><span class="sxs-lookup"><span data-stu-id="63892-963">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="63892-964">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="63892-964">To use format</span></span>|<span data-ttu-id="63892-965">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="63892-965">For culture</span></span>|<span data-ttu-id="63892-966">오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-966">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="63892-967">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-967">Default ("G") format</span></span>|<span data-ttu-id="63892-968">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-968">Default (current) culture</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="63892-969">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-969">Default ("G") format</span></span>|<span data-ttu-id="63892-970">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-970">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="63892-971">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-971">A specific format or precision</span></span>|<span data-ttu-id="63892-972">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-972">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="63892-973">반환 값이 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>를 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 지정 된 대로 숫자의 문자열 표현을 `format`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-973">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.</span></span>  
  
 <span data-ttu-id="63892-974">`format` 매개 변수 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-974">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="63892-975">하는 경우 `format` 는 `null` 이거나 빈 문자열인 경우 반환 값은 일반 숫자 서식 지정자 ("G")를 사용 하 여 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-975">If `format` is `null` or an empty string, the return value is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="63892-976">다음 서식 항목에서 자세히 설명 되어 광범위 한 형식 지정 지원을 제공 하는.NET Framework:</span><span class="sxs-lookup"><span data-stu-id="63892-976">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="63892-977">숫자 서식 지정자에 대 한 자세한 내용은 참조 하세요. [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-977">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="63892-978">형식에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-978">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="63892-979">기본적으로 반환 값만 포함 15 자리의 전체 자릿수 내부적으로 최대 17 자리가 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-979">By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="63892-980">이 인스턴스의 값이 15 자리 보다 크면 <xref:System.Double.ToString%2A> 반환 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-980">If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="63892-981">자세한 정밀도 필요로 하는 경우 지정 `format` 항상 17 자리 전체 자릿수, 또는 "R"을 반환 하는 "G17" 형식 지정 반환 하는 15 자리 수만 할 수 있으면 해당 전체 자릿수 또는 17 자리 수를 나타낼 수 있는 경우 최대 전체 자릿수를 사용 하 여 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-981">If you require more precision, specify `format` with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-982">다음 예에서는 숫자 값을 정의 및 서식을 통화 값으로 "C" 표준 숫자 서식 문자열을 사용 하 여 및 소수 자릿수 세 자리로 숫자 값으로 "N" 표준 숫자 서식 문자열을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-982">The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</span></span> <span data-ttu-id="63892-983">결과 문자열은 EN-US 문화권의 규칙을 사용 하 여 서식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-983">The result strings are formatted by using the conventions of the en-US culture.</span></span> <span data-ttu-id="63892-984">숫자 형식 문자열에 대 한 자세한 내용은 참조 하세요. [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-984">For more information on numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
 [!code-csharp[System.Double.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString7.cs#7)]
 [!code-vb[System.Double.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString7.vb#7)]  
  
 <span data-ttu-id="63892-985">다음 예제에서는 여러 <xref:System.Double> 세 개의 사용자 지정 숫자 서식 문자열 함께 지원 되는 표준 숫자 서식 지정자를 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-985">The following example displays several <xref:System.Double> values using the supported standard numeric format specifiers together with three custom numeric format strings.</span></span> <span data-ttu-id="63892-986">채우는 방법을 보여 줍니다 이러한 사용자 지정 형식 문자열 중 하나는 <xref:System.Single> 값 앞에 오는 0을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-986">One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros.</span></span> <span data-ttu-id="63892-987">또한이 예제에서는 "R" 제외 하 고 각 표준 형식 지정자를 사용 하 여 전체 자릿수 지정자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-987">In addition, the example uses precision specifiers with each standard format specifier except for "R".</span></span> <span data-ttu-id="63892-988">전체 자릿수 지정자 범위는 0에서 3 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-988">The values of the precision specifiers range from 0 to 3.</span></span> <span data-ttu-id="63892-989">문자열을 숫자 값으로 변환 하려면이 예제에서는 EN-US 문화권의 서식 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-989">To convert the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-cpp[System.Double.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Double.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Double.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="63892-990"><paramref name="format" />이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-990"><paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="63892-991"><see langword="/platform:x64" /> 또는 <see langword="/platform:anycpu" /> 스위치를 사용하여 컴파일되고 64비트 시스템에서 실행되는 경우 "R" 표준 숫자 형식 문자열로 형식이 지정된 <see cref="T:System.Double" /> 값이 성공적으로 라운드트립되지 않는 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-991">In some cases, <see cref="T:System.Double" /> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <see langword="/platform:x64" /> or <see langword="/platform:anycpu" /> switches and run on 64-bit systems.</span></span> <span data-ttu-id="63892-992">이 문제를 해결하려면 "G17" 표준 숫자 형식 문자열을 사용하여 <see cref="T:System.Double" /> 값의 형식을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-992">To work around this problem, you can format <see cref="T:System.Double" /> values by using the "G17" standard numeric format string.</span></span> <span data-ttu-id="63892-993">다음 예제에서는 성공적으로 라운드트립되지 않는 <see cref="T:System.Double" /> 값에 "R" 형식 문자열을 사용하고 "G17" 형식 문자열도 사용하여 원래 값을 성공적으로 라운드트립합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-993">The following example uses the "R" format string with a <see cref="T:System.Double" /> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</span></span>  
  
<span data-ttu-id="63892-994">[! 코드 csharp[System.Double.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex2.cs#6)] [! 코드 vb[System.Double.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex2.vb#6)]</span><span class="sxs-lookup"><span data-stu-id="63892-994">[!code-csharp[System.Double.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex2.cs#6)] [!code-vb[System.Double.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex2.vb#6)]</span></span></para></block>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="63892-995">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="63892-995">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="63892-996">표준 숫자 형식 문자열</span><span class="sxs-lookup"><span data-stu-id="63892-996">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="63892-997">사용자 지정 숫자 형식 문자열</span><span class="sxs-lookup"><span data-stu-id="63892-997">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md"><span data-ttu-id="63892-998">방법: 숫자 앞에 0으로 채우기</span><span class="sxs-lookup"><span data-stu-id="63892-998">How to: Pad a Number with Leading Zeros</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="double.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="63892-999">숫자 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-999">A numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="63892-1000">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1000">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="63892-1001">지정된 형식 및 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1001">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="63892-1002"><paramref name="format" /> 및 <paramref name="provider" />로 지정된 이 인스턴스 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1002">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-1003">합니다 <xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29> 메서드 형식을 <xref:System.Double> 지정 된 형식으로 지정된 된 문화권의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1003">The <xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Double> value in a specified format of a specified culture.</span></span> <span data-ttu-id="63892-1004">다른 형식으로 또는 문화권을 지정 하려는 경우 사용 하 여 다른 오버 로드는 <xref:System.Double.ToString%2A> 메서드를 다음과 같이:</span><span class="sxs-lookup"><span data-stu-id="63892-1004">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="63892-1005">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="63892-1005">To use format</span></span>|<span data-ttu-id="63892-1006">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="63892-1006">For culture</span></span>|<span data-ttu-id="63892-1007">오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1007">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="63892-1008">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-1008">Default ("G") format</span></span>|<span data-ttu-id="63892-1009">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-1009">Default (current) culture</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="63892-1010">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="63892-1010">Default ("G") format</span></span>|<span data-ttu-id="63892-1011">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-1011">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="63892-1012">특정 형식 또는 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="63892-1012">A specific format or precision</span></span>|<span data-ttu-id="63892-1013">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="63892-1013">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
  
 <span data-ttu-id="63892-1014">반환 값이 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>를 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 지정 된 대로 숫자의 문자열 표현을 `format`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1014">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.</span></span>  
  
 <span data-ttu-id="63892-1015">`format` 매개 변수 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1015">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="63892-1016">하는 경우 `format` 는 `null` 이거나 빈 문자열인 경우 반환 값이이 인스턴스에 대 한 일반 숫자 서식 지정자 ("G")를 사용 하 여 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1016">If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="63892-1017">다음 서식 항목에서 자세히 설명 되어 광범위 한 형식 지정 지원을 제공 하는.NET Framework:</span><span class="sxs-lookup"><span data-stu-id="63892-1017">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="63892-1018">숫자 서식 지정자에 대 한 자세한 내용은 참조 하세요. [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1018">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="63892-1019">형식에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1019">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="63892-1020">`provider` 매개 변수는는 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 개체.</span><span class="sxs-lookup"><span data-stu-id="63892-1020">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="63892-1021">일반적으로 `provider` 되는 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1021">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="63892-1022">`provider` 매개 변수는 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1022">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="63892-1023">하는 경우 `provider` 됩니다 `null`, 반환 값을 사용 하 여 형식이 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1023">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="63892-1024">기본적으로 반환 값만 포함 15 자리의 전체 자릿수 내부적으로 최대 17 자리가 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1024">By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="63892-1025">이 인스턴스의 값이 15 자리 보다 크면 <xref:System.Double.ToString%2A> 반환 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1025">If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="63892-1026">자세한 정밀도 필요로 하는 경우 지정 `format` 항상 17 자리 전체 자릿수, 또는 "R"을 반환 하는 "G17" 형식 지정 반환 하는 15 자리 수만 할 수 있으면 해당 전체 자릿수 또는 17 자리 수를 나타낼 수 있는 경우 최대 전체 자릿수를 사용 하 여 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1026">If you require more precision, specify `format` with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-1027">다음 예제에서는 표시를 <xref:System.Double> 각 지원 되는 표준 숫자 서식 지정자를 사용 하 여 몇 가지 다른 문화권에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1027">The following example displays a <xref:System.Double> value using each of the supported standard numeric format specifiers for several different cultures.</span></span>  
  
 [!code-cpp[System.Double.ToString#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring1.cpp#4)]
 [!code-csharp[System.Double.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Double.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#4)]  
  
 <span data-ttu-id="63892-1028">다음 예제에서는의 사용을 보여 줍니다 <xref:System.Double.ToString%2A>해를 <xref:System.String> 및 <xref:System.IFormatProvider> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1028">The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.</span></span>  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="63892-1029"><see langword="/platform:x64" /> 또는 <see langword="/platform:anycpu" /> 스위치를 사용하여 컴파일되고 64비트 시스템에서 실행되는 경우 "R" 표준 숫자 형식 문자열로 형식이 지정된 <see cref="T:System.Double" /> 값이 성공적으로 라운드트립되지 않는 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1029">In some cases, <see cref="T:System.Double" /> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <see langword="/platform:x64" /> or <see langword="/platform:anycpu" /> switches and run on 64-bit systems.</span></span> <span data-ttu-id="63892-1030">이 문제를 해결하려면 "G17" 표준 숫자 형식 문자열을 사용하여 <see cref="T:System.Double" /> 값의 형식을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1030">To work around this problem, you can format <see cref="T:System.Double" /> values by using the "G17" standard numeric format string.</span></span> <span data-ttu-id="63892-1031">다음 예제에서는 성공적으로 라운드트립되지 않는 <see cref="T:System.Double" /> 값에 "R" 형식 문자열을 사용하고 "G17" 형식 문자열도 사용하여 원래 값을 성공적으로 라운드트립합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1031">The following example uses the "R" format string with a <see cref="T:System.Double" /> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</span></span>  
  
<span data-ttu-id="63892-1032">[! 코드 csharp[System.Double.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex1.cs#5)] [! 코드 vb[System.Double.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex1.vb#5)]</span><span class="sxs-lookup"><span data-stu-id="63892-1032">[!code-csharp[System.Double.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex1.cs#5)] [!code-vb[System.Double.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex1.vb#5)]</span></span></para></block>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="63892-1033">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="63892-1033">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="63892-1034">표준 숫자 형식 문자열</span><span class="sxs-lookup"><span data-stu-id="63892-1034">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="63892-1035">사용자 지정 숫자 형식 문자열</span><span class="sxs-lookup"><span data-stu-id="63892-1035">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md"><span data-ttu-id="63892-1036">방법: 숫자 앞에 0으로 채우기</span><span class="sxs-lookup"><span data-stu-id="63892-1036">How to: Pad a Number with Leading Zeros</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d"><span data-ttu-id="63892-1037">샘플: .NET Framework 4 서식 유틸리티</span><span class="sxs-lookup"><span data-stu-id="63892-1037">Sample: .NET Framework 4 Formatting Utility</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="double.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="63892-1038">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1038">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="63892-1039">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1039">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <altmember cref="Overload:System.Double.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-1040">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1040">A string containing a number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="63892-1041">이 메서드는 변환이 성공한 경우 <paramref name="s" /> 매개 변수의 배정밀도 부동 소수점 숫자를 반환하고 변환이 실패한 경우 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1041">When this method returns, contains the double-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="63892-1042"><paramref name="s" /> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나 올바른 형식의 숫자가 아니거나, <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타내는 경우 변환이 실패합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1042">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span> <span data-ttu-id="63892-1043">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <paramref name="result" />에 제공된 모든 값을 덮어쓰게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1043">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="63892-1044">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1044">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="63892-1045">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1045">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="63892-1046"><see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1046"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-1047">다른이 오버 로드는 <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> 메서드 구문 분석된 된 숫자 값을 반환 하는 대신 구문 분석 작업이 성공 했는지를 나타내는 부울 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1047">This overload differs from the <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="63892-1048">테스트 하기 위해 예외 처리를 사용할 필요가 한 <xref:System.FormatException> 이벤트에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1048">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="63892-1049">합니다 `s` 매개 변수는 현재 문화권의 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>를 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> (문자열 비교는 대/소문자 구분) 또는 폼의 문자열:</span><span class="sxs-lookup"><span data-stu-id="63892-1049">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> (the string comparison is case-sensitive), or a string of the form:</span></span>  
  
 <span data-ttu-id="63892-1050">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span><span class="sxs-lookup"><span data-stu-id="63892-1050">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="63892-1051">대괄호 안의 요소는 선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1051">Elements in square brackets are optional.</span></span> <span data-ttu-id="63892-1052">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1052">The following table describes each element.</span></span>  
  
|<span data-ttu-id="63892-1053">요소</span><span class="sxs-lookup"><span data-stu-id="63892-1053">Element</span></span>|<span data-ttu-id="63892-1054">설명</span><span class="sxs-lookup"><span data-stu-id="63892-1054">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-1055">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-1055">*ws*</span></span>|<span data-ttu-id="63892-1056">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1056">A series of white-space characters.</span></span>|  
|<span data-ttu-id="63892-1057">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-1057">*sign*</span></span>|<span data-ttu-id="63892-1058">음수 기호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1058">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="63892-1059">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1059">*integral-digits*</span></span>|<span data-ttu-id="63892-1060">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1060">A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-1061">정수 계열 숫자 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1061">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="63892-1062">*,*</span><span class="sxs-lookup"><span data-stu-id="63892-1062">*,*</span></span>|<span data-ttu-id="63892-1063">Culture 별 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1063">A culture-specific group separator symbol.</span></span>|  
|<span data-ttu-id="63892-1064">*.*</span><span class="sxs-lookup"><span data-stu-id="63892-1064">*.*</span></span>|<span data-ttu-id="63892-1065">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1065">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="63892-1066">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1066">*fractional-digits*</span></span>|<span data-ttu-id="63892-1067">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1067">A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="63892-1068">*E*</span><span class="sxs-lookup"><span data-stu-id="63892-1068">*E*</span></span>|<span data-ttu-id="63892-1069">대 / 소문자 구분 문자가 'e'를 지 수 (과학적 표기법) 표기법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1069">An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="63892-1070">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1070">*exponential-digits*</span></span>|<span data-ttu-id="63892-1071">일련의 0에서 9 지 수를 지정 하는 위치 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1071">A series of numeric characters ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="63892-1072">숫자 형식에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1072">For more information about numeric formats, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="63892-1073">`s` 매개 변수를 함께 사용 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1073">The `s` parameter is interpreted by using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="63892-1074">즉, 공백이 고 천 단위 구분 기호는 사용할 수 있지만 통화 기호는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1074">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="63892-1075">요소를 명시적으로 정의 하려면 (통화 기호, 1000 단위와 같은 구분 기호 및 공백을)에 나타날 수 있는 `s`를 사용 하 여를 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 메서드 오버 로드.</span><span class="sxs-lookup"><span data-stu-id="63892-1075">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="63892-1076">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 대 한 초기화 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1076">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="63892-1077">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="63892-1077">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="63892-1078">문자열 구문 분석 하는 문화권 지정 된 다른 서식 지정 정보를 사용 하 여, 사용 된 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1078">To parse a string using the formatting information of some other specified culture, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="63892-1079">일반적으로 전달 하는 경우는 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1079">Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-1080">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1080">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-1081">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1081">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs#3)]
 [!code-vb[System.Double.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb#3)]  
  
 <span data-ttu-id="63892-1082">구분 기호에서 발견 되는 `s` decimal 및 그룹 구분 기호 및 구문 분석 작업을 하는 동안 매개 변수는 동일한, 구문 분석 작업이 구분 기호는 그룹 구분 기호가 아니라는 소수 구분 기호로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1082">If a separator is encountered in the `s` parameter during a parse operation, and the decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-1083">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1083">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-1084">다음 예제에서는 합니다 <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> 숫자 값의 문자열 표현으로 변환할 방법이 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1084">The following example uses the <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> method to convert the string representations of numeric values to <xref:System.Double> values.</span></span> <span data-ttu-id="63892-1085">해당 EN-US가 현재 문화권이 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1085">It assumes that en-US is the current culture.</span></span>  
  
 [!code-csharp[System.Double.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse1a.cs#1)]
 [!code-vb[System.Double.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse1a.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-1086">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-1086">Parsing Numeric Strings in .NET</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d"><span data-ttu-id="63892-1087">샘플: .NET Framework 4 서식 유틸리티</span><span class="sxs-lookup"><span data-stu-id="63892-1087">Sample: .NET Framework 4 Formatting Utility</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="63892-1088">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1088">A string containing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="63892-1089"><see cref="T:System.Globalization.NumberStyles" />에 사용할 수 있는 형식을 나타내는 <paramref name="s" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1089">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />.</span></span> <span data-ttu-id="63892-1090">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1090">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="63892-1091"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 <see cref="T:System.IFormatProvider" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1091">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <param name="result"><span data-ttu-id="63892-1092">이 메서드는 변환이 성공한 경우 <paramref name="s" />에 포함된 숫자 값이나 기호의 배정밀도 부동 소수점 숫자를 반환하며 변환이 실패한 경우 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1092">When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="63892-1093"><paramref name="s" /> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나, <paramref name="style" />과 규격 형식이 아니거나, <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타내거나, <paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 열거형 상수의 유효한 조합이 아닌 경우 변환이 실패합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1093">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants.</span></span> <span data-ttu-id="63892-1094">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <paramref name="result" />에 제공된 모든 값을 덮어쓰게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1094">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="63892-1095">지정된 스타일 및 문화권별 형식의 숫자에 대한 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1095">Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="63892-1096">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1096">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="63892-1097"><see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1097"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63892-1098">합니다 <xref:System.Double.TryParse%2A> 메서드와 비슷합니다는 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 메서드와이 메서드가 변환에 실패 하면 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1098">The <xref:System.Double.TryParse%2A> method is like the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except this method does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="63892-1099">변환이 성공 하는 경우 반환 값은 `true` 하며 `result` 변환의 결과 매개 변수는 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1099">If the conversion succeeds, the return value is `true` and the `result` parameter is set to the outcome of the conversion.</span></span> <span data-ttu-id="63892-1100">변환에 실패 하는 경우 반환 값은 `false` 하며 `result` 매개 변수는 0으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1100">If the conversion fails, the return value is `false` and the `result` parameter is set to zero.</span></span> <span data-ttu-id="63892-1101">테스트 하기 위해 예외 처리를 사용할 필요가 없습니다이 <xref:System.FormatException> 이벤트에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1101">This eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="63892-1102">합니다 `style` 의 허용 되는 형식을 정의 하는 매개 변수는 `s` 구문 분석 작업이 성공 하기 위해 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1102">The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="63892-1103">비트 플래그 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1103">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="63892-1104">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1104">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 <span data-ttu-id="63892-1105">합니다 `s` 매개 변수를 포함할 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 하 여 지정 된 문화권 `provider`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1105">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture indicated by `provider`.</span></span> <span data-ttu-id="63892-1106">값에 따라 뿐만 `style`, `s` 매개 변수는 다음 요소가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1106">In addition, depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="63892-1107">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span><span class="sxs-lookup"><span data-stu-id="63892-1107">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="63892-1108">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1108">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="63892-1109">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1109">The following table describes each element.</span></span>  
  
|<span data-ttu-id="63892-1110">요소</span><span class="sxs-lookup"><span data-stu-id="63892-1110">Element</span></span>|<span data-ttu-id="63892-1111">설명</span><span class="sxs-lookup"><span data-stu-id="63892-1111">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="63892-1112">*ws*</span><span class="sxs-lookup"><span data-stu-id="63892-1112">*ws*</span></span>|<span data-ttu-id="63892-1113">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1113">Optional white space.</span></span> <span data-ttu-id="63892-1114">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1114">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="63892-1115">끝에 나타날 수 있습니다 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1115">It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="63892-1116">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1116">A culture-specific currency symbol.</span></span> <span data-ttu-id="63892-1117">문자열의 해당 위치에서 정의 됩니다는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 또는 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 의 속성을 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체를 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드의 `provider` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="63892-1117">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method of the `provider` parameter.</span></span> <span data-ttu-id="63892-1118">통화 기호에 나타날 수 있습니다 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1118">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1119">*sign*</span><span class="sxs-lookup"><span data-stu-id="63892-1119">*sign*</span></span>|<span data-ttu-id="63892-1120">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1120">An optional sign.</span></span> <span data-ttu-id="63892-1121">부호의 시작 부분에 나타날 수 있습니다 `s` 경우 `style` 포함 합니다 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함를 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1121">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="63892-1122">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1122">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1123">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1123">*integral-digits*</span></span>|<span data-ttu-id="63892-1124">일련의 0에서 숫자의 정수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1124">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="63892-1125">정수 계열 숫자 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1125">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="63892-1126">*,*</span><span class="sxs-lookup"><span data-stu-id="63892-1126">*,*</span></span>|<span data-ttu-id="63892-1127">문화권별 천 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1127">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="63892-1128">현재 문화권의 천 단위 구분 기호에 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1128">The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1129">*.*</span><span class="sxs-lookup"><span data-stu-id="63892-1129">*.*</span></span>|<span data-ttu-id="63892-1130">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1130">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="63892-1131">현재 문화권의 소수점 기호에 나타날 수 있습니다 `s` 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1131">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1132">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1132">*fractional-digits*</span></span>|<span data-ttu-id="63892-1133">일련의 0에서 숫자의 소수 부분을 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1133">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="63892-1134">소수 자릿수에 나타날 수 있습니다 `s` 하는 경우 `style` 포함 된 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1134">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1135">*e*</span><span class="sxs-lookup"><span data-stu-id="63892-1135">*e*</span></span>|<span data-ttu-id="63892-1136">E 또는 E 문자는 나타내는 `s` 지 수 표기법을 사용 하 여 숫자를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1136">The e or E character, which indicates that `s` can represent a number using exponential notation.</span></span> <span data-ttu-id="63892-1137">합니다 `s` 매개 변수 스타일을 포함 하는 경우 지 수 표기법으로 숫자를 나타낼 수는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1137">The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="63892-1138">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="63892-1138">*exponential-digits*</span></span>|<span data-ttu-id="63892-1139">일련의 0에서 지 수를 지정 하는 9 까지의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1139">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="63892-1140">종료 NUL (U + 0000)에 임의 문자를 `s` 의 값에 관계 없이 구문 분석 작업에서 무시 되는 `style` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1140">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="63892-1141">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1141">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="63892-1142">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버 수 있지만 입력된 문자열에 있이 필요가 없습니다 있는 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1142">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="63892-1143">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 나타날 수 있는 요소에 영향을 줄 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1143">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="63892-1144">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="63892-1144">NumberStyles value</span></span>|<span data-ttu-id="63892-1145">숫자 외에도 s에 허용 되는 요소</span><span class="sxs-lookup"><span data-stu-id="63892-1145">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="63892-1146">합니다 *정수 계열 숫자* 요소에만 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1146">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="63892-1147">*.*</span><span class="sxs-lookup"><span data-stu-id="63892-1147">The *.*</span></span> <span data-ttu-id="63892-1148">및 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1148">and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="63892-1149">`s` 매개 변수 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1149">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="63892-1150">자체적으로이 플래그는 폼 값을 지원 하며 *정수 자릿수*E*자리 지 수 백오프*추가; 플래그와 같은 요소를 사용 하 여 지 수 표기법에서 문자열을 구문 분석 하는 데 필요한 양수 또는 음수 기호를 소수점 기호</span><span class="sxs-lookup"><span data-stu-id="63892-1150">This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="63892-1151">합니다 *ws* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1151">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="63892-1152">합니다 *ws* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1152">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="63892-1153">합니다 *sign* 맨 앞에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1153">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="63892-1154">합니다 *sign* 의 끝에 있는 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1154">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="63892-1155">합니다 *기호* 형식의 숫자 값을 묶는 괄호는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1155">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="63892-1156">합니다 *,* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1156">The *,* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="63892-1157">합니다 *$* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1157">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="63892-1158">모두.</span><span class="sxs-lookup"><span data-stu-id="63892-1158">All.</span></span> <span data-ttu-id="63892-1159">`s` 매개 변수를 16 진수 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1159">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="63892-1160">*ws* 시작과 끝 요소 `s`, *로그인* 의 시작 부분 `s`, 및 *합니다.*</span><span class="sxs-lookup"><span data-stu-id="63892-1160">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.*</span></span> <span data-ttu-id="63892-1161">기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1161">symbol.</span></span> <span data-ttu-id="63892-1162">`s` 매개 변수 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1162">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="63892-1163">`ws`, `sign`, 천 단위 구분 기호 (*,),* 및 소수점 (*.*) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1163">The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="63892-1164">모든 스타일을 제외 하 고 `s` 16 진수 숫자를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1164">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="63892-1165">합니다 `provider` 매개 변수는를 <xref:System.IFormatProvider> 구현 같은 <xref:System.Globalization.NumberFormatInfo> 또는 <xref:System.Globalization.CultureInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1165">The `provider` parameter is a <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="63892-1166">`provider` 매개 변수 구문 분석에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1166">The `provider` parameter supplies culture-specific information used in parsing.</span></span> <span data-ttu-id="63892-1167">하는 경우 `provider` 됩니다 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 개체를 가져올 수 없습니다, 현재 문화권의 형식 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1167">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained, the format information for the current culture is used.</span></span>  
  
 <span data-ttu-id="63892-1168">경우 변환이 실패 합니다 `s` 매개 변수는 `null` 또는 숫자 값이 아닌,는 `provider` 매개 변수를 생성 하지 않습니다는 <xref:System.Globalization.NumberFormatInfo> 개체 또는 `style` 매개 변수에서 비트 플래그의 조합이 아닙니다.는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1168">The conversion fails if the `s` parameter is `null` or not a numeric value, the `provider` parameter does not yield a <xref:System.Globalization.NumberFormatInfo> object, or the `style` parameter is not a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span>  
  
 <span data-ttu-id="63892-1169">일반적으로 전달 하는 경우는 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열을 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 메서드를 원래 <xref:System.Double> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1169">Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="63892-1170">그러나 정밀도의 손실, 인해 값 아닐 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1170">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="63892-1171">또한의 문자열 표현을 구문 분석 하려고 <xref:System.Double.MinValue> 나 <xref:System.Double.MaxValue> throw는 <xref:System.OverflowException>다음 예제와 같이, 합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1171">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Double.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs#3)]
 [!code-vb[System.Double.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb#3)]  
  
 <span data-ttu-id="63892-1172">구분 기호에서 발견 되는 `s` 구문 분석 작업을 하 고 해당 통화 또는 10 진수 수 중에 매개 변수 및 그룹 구분 기호는 동일, 구문 분석 작업이 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1172">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="63892-1173">구분 기호에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>를 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1173">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63892-1174">다음 예제에서는 사용 된 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 특정 스타일 및 서식을 특정 문화권의 규칙을 사용 하는 숫자의 문자열 표현을 구문 분석 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1174">The following example demonstrates the use of the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</span></span>  
  
 [!code-csharp[System.Double.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Double.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/TryParse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="63892-1175"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1175"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="63892-1176">또는</span><span class="sxs-lookup"><span data-stu-id="63892-1176">-or-</span></span> 
 <span data-ttu-id="63892-1177"><paramref name="style" />에 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="63892-1177"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="63892-1178">.NET에서 숫자 문자열 구문 분석</span><span class="sxs-lookup"><span data-stu-id="63892-1178">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>