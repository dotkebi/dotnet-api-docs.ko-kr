<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2ecc782eb2870d7590501d83dafc6e4f3812393" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58741087" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0ff3e-101">비동기 작업의 상태를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-101">Represents the status of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff3e-102"><xref:System.IAsyncResult> 인터페이스는 비동기적으로 작동할 수 있는 메서드를 포함 하는 클래스로 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-102">The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously.</span></span> <span data-ttu-id="0ff3e-103">와 같은 비동기 작업을 시작 하는 메서드의 반환 형식인 것 <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>와 같은 비동기 작업을 끝내는 메서드에 전달 됩니다 <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-103">It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0ff3e-104"><xref:System.IAsyncResult> 개체를 호출한 메서드에 전달도 <xref:System.AsyncCallback> 비동기 작업이 완료 되 면 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-104"><xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.</span></span>  
  
 <span data-ttu-id="0ff3e-105">지 원하는 개체를 <xref:System.IAsyncResult> 인터페이스는 비동기 작업에 대 한 상태 정보를 저장 하 고 스레드는 작업이 완료 될 때 신호를 보낼 수 있도록 동기화 개체를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-105">An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ff3e-106"><xref:System.Runtime.Remoting.Messaging.AsyncResult> 클래스의 구현인 <xref:System.IAsyncResult> 에서 반환 하는 `BeginInvoke` 대리자를 사용 하 여 비동기로 메서드를 호출 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-106">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.</span></span>  
  
 <span data-ttu-id="0ff3e-107">에 대 한 자세한 설명은 하는 방법을 <xref:System.IAsyncResult> 내용은 인터페이스를 사용 합니다 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-107">For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ff3e-108">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> 가져올 속성은 <xref:System.Threading.WaitHandle>, 및 대리자에 대 한 비동기 호출 대기 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-108">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="0ff3e-109">비동기 호출이 완료되면 <xref:System.Threading.WaitHandle> 은 신호를 받으며 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출하여 대기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-109">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="0ff3e-110">이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-110">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="0ff3e-111">자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-111">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ff3e-112">비동기 작업을 한정하거나 정보를 포함하는 사용자 정의 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-112">Gets a user-defined object that qualifies or contains information about an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="0ff3e-113">비동기 작업을 한정하거나 정보를 포함하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-113">A user-defined object that qualifies or contains information about an asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff3e-114">이 속성은 비동기 작업을 시작 하는 메서드의 마지막 매개 변수는 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-114">This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ff3e-115">다음 코드 예제에서는 방법을 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> 속성 정보를 콜백 메서드로 전달 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-115">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="0ff3e-116">마지막 매개 변수는 `BeginInvoke` 메서드 호출이 될 콜백 메서드를 사용 하 여 출력 메시지의 형식을 지정 형식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-116">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="0ff3e-117">이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-117">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="0ff3e-118">콜백 예제 작동 하는 방법에 대 한 자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-118">For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ff3e-119">비동기 작업의 호출자가 작업의 시작 부분에 지정 하는 응용 프로그램 정의 개체를 가져올 수 있도록이 속성을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-119">Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="0ff3e-120">이 개체에 비동기 작업에 대 한 상태 정보를 전달할 수는 <see cref="T:System.AsyncCallback" /> 제공 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-120">This object can be used to pass state information for the asynchronous operation to an <see cref="T:System.AsyncCallback" /> that you provide.</span></span></para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ff3e-121">비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-121">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></summary>
        <value><span data-ttu-id="0ff3e-122">비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-122">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff3e-123">클라이언트 폴링 대신 완료 하기 위해 비동기 작업에 대 한 대기 허용 된 반환 값 <xref:System.IAsyncResult.IsCompleted%2A> 작업이 완료 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-123">The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes.</span></span> <span data-ttu-id="0ff3e-124">값을 반환 하는 데 사용할 수는 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A> 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-124">The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.</span></span>  
  
 <span data-ttu-id="0ff3e-125">공용 언어 런타임에서 제공 대기 가능 개체의 수와 같은 <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, 및 <xref:System.Threading.Mutex>, Win32 동기화 기본형을 미러 모두 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-125">The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ff3e-126">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.IAsyncResult.AsyncWaitHandle%2A> 가져올 속성은 <xref:System.Threading.WaitHandle>, 및 대리자에 대 한 비동기 호출 대기 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-126">The following example demonstrates how to use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="0ff3e-127">비동기 호출이 완료되면 <xref:System.Threading.WaitHandle> 은 신호를 받으며 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출하여 대기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-127">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="0ff3e-128">이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-128">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="0ff3e-129">자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-129">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ff3e-130">구현 하는 개체 <see cref="T:System.IAsyncResult" /> 만들 필요가 없습니다 합니다 <see cref="T:System.Threading.WaitHandle" /> 때까지 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 속성이 읽기.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-130">The object that implements <see cref="T:System.IAsyncResult" /> does not need to create the <see cref="T:System.Threading.WaitHandle" /> until the <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> property is read.</span></span> <span data-ttu-id="0ff3e-131">선택한 것을 <see cref="T:System.IAsyncResult" /> 구현자 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-131">It is the choice of the <see cref="T:System.IAsyncResult" /> implementer.</span></span> <span data-ttu-id="0ff3e-132">그러나 구현자를 만드는 경우 <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, 것은 신호 구현자의 책임을 <see cref="T:System.Threading.WaitHandle" /> 는 적절 한 시간 대기를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-132">However, if the implementer creates <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, it is the responsibility of the implementer to signal the <see cref="T:System.Threading.WaitHandle" /> that will terminate the wait at the appropriate time.</span></span> <span data-ttu-id="0ff3e-133">예를 들어 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 를 비동기적으로 호출 된 메서드가 반환 될 때 호출자를 대신 하 여 대기를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-133">For example, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> terminates the wait on behalf of the caller when an asynchronously invoked method returns.</span></span> <span data-ttu-id="0ff3e-134">일단 만들어지면 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 해야 활성 상태로 유지 하도록 사용자를 비동기 작업을 끝내는 메서드를 호출할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-134">Once created, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> should be kept alive until the user calls the method that concludes the asynchronous operation.</span></span> <span data-ttu-id="0ff3e-135">뒤의 개체가 당시 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 삭제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-135">At that time the object behind <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> can be discarded.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="0ff3e-136">작업이 완료 (폴링하는) 대기 하는 클라이언트에서 대기 하도록 동기화 개체를 가져오려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-136">Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="0ff3e-137">사용 하는 경우는 <see langword="BeginInvoke" /> 메서드의 대리자를 비동기적으로 메서드를 호출 하 여 결과에서 대기 핸들을 가져오는 <see cref="T:System.IAsyncResult" />를 사용 하 여 호출 하 여 완료 되는 즉시 대기 핸들을 종료 하는 것이 좋습니다는 <see cref="M:System.Threading.WaitHandle.Close" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-137">When you use the <see langword="BeginInvoke" /> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <see cref="T:System.IAsyncResult" />, we recommend that you close the wait handle as soon as you are finished using it, by calling the <see cref="M:System.Threading.WaitHandle.Close" /> method.</span></span> <span data-ttu-id="0ff3e-138">단순히 대기 핸들에 대 한 모든 참조를 해제 하면 가비지 수집 대기 핸들을 회수 하지만 삭제 가능한 개체는 명시적으로 닫히거나 삭제 하는 경우 가비지 수집 보다 효율적으로 작동 하는 경우 시스템 리소스가 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-138">If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span></span> <span data-ttu-id="0ff3e-139">자세한 내용은 <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-139">For more information, see the <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> property.</span></span>  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ff3e-140">비동기 작업이 동기적으로 완료되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-140">Gets a value that indicates whether the asynchronous operation completed synchronously.</span></span></summary>
        <value><span data-ttu-id="0ff3e-141">비동기 작업이 동기적으로 완료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-141"><see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff3e-142">호출이 동기적으로 완료에서 발견 되는 경우는 <xref:System.AsyncCallback> 비동기 작업을 시작 하는 스레드는 현재 스레드의 가능성이 높습니다 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-142">If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ff3e-143">대부분의 구현자는 <see cref="T:System.IAsyncResult" /> 인터페이스는이 속성을 사용 하지 않습니다 및 반환할지 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-143">Most implementers of the <see cref="T:System.IAsyncResult" /> interface will not use this property and should return <see langword="false" />.</span></span> <span data-ttu-id="0ff3e-144">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]를 사용 하 여 만든 작업을 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> 메서드는이 속성을 올바르게 구현 되지 않은 경우 완료 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-144">Beginning with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a task that is created with the <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> method will not complete if this property is not implemented correctly.</span></span> <span data-ttu-id="0ff3e-145">참조 [4.5의 응용 프로그램 호환성](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-145">See [Application Compatibility in 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="0ff3e-146">비동기 작업이 동기적으로 완료 하는 경우를 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-146">Use this property to determine if the asynchronous operation completed synchronously.</span></span> <span data-ttu-id="0ff3e-147">이 속성을 반환할 수 있습니다 예를 들어 <see langword="true" /> 비동기 I/O 작업의 I/O 요청이 작은 경우.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-147">For example, this property can return <see langword="true" /> for an asynchronous I/O operation if the I/O request was small.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0ff3e-148">비동기 작업이 완료되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-148">Gets a value that indicates whether the asynchronous operation has completed.</span></span></summary>
        <value><span data-ttu-id="0ff3e-149">작업이 끝나면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-149"><see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff3e-150">이 속성이 `true`를 안전 하 게 사용 하 여 비동기 작업에서 할당 한 리소스를 삭제할 것을 가정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-150">When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ff3e-151">다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.IAsyncResult.IsCompleted%2A> 의 속성을 <xref:System.IAsyncResult> 비동기 호출이 완료 되 면 검색할.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-151">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes.</span></span> <span data-ttu-id="0ff3e-152">비동기 호출을 사용 하 여이 예제의 경우 이루어집니다는 `BeginInvoke` 메서드의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-152">In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate.</span></span> <span data-ttu-id="0ff3e-153">사용할 수 있습니다는 <xref:System.IAsyncResult.IsCompleted%2A> 완료 하는 스레드에서 비동기 호출을 수행 하는 경우 서비스 사용자 인터페이스에 대 한 폴링 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-153">You might use the <xref:System.IAsyncResult.IsCompleted%2A> property to poll for completion when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="0ff3e-154">완료에 대해 폴링하면 비동기 호출이 <xref:System.Threading.ThreadPool> 스레드에서 실행되는 동안 호출 스레드가 계속 실행될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-154">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="0ff3e-155">이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-155">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="0ff3e-156">자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-156">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0ff3e-157">일반적으로 구현자가이 속성의 값으로 내부 테스트 전용 필드의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-157">Implementers will typically return the value of a private field or internal test as the value of this property.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="0ff3e-158">동기화 개체에서 대기 중) (반대로 작업 상태를 폴링하는 클라이언트 작업의 상태를 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0ff3e-158">Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>