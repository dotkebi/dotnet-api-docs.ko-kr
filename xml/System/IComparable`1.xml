<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5931aa26cc190dfe5da0d88c66d2c06eaa43d705" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58727330" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="cc42a-101">비교할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-101">The type of object to compare.</span></span></typeparam>
    <summary><span data-ttu-id="cc42a-102">인스턴스를 정렬하는 형식 고유의 비교 메서드를 만들기 위해 값 형식 또는 클래스에서 구현하는 일반화된 비교 메서드를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-102">Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc42a-103">이 인터페이스는 형식 값을 정렬 하거나 정렬할 수에 의해 구현 됩니다 하 고 제네릭 컬렉션 개체의 멤버를 정렬 하는 것에 대 한 강력한 형식의 비교 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-103">This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="cc42a-104">예를 들어, 1 개의 숫자 된 두 번째 수보다 클 수 있으며 한 문자열이 다른 것 보다 먼저 알파벳 순서로 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-104">For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</span></span> <span data-ttu-id="cc42a-105">구현 형식 단일 메서드를 정의 하는 것이 필요할 <xref:System.IComparable%601.CompareTo%28%600%29>, 하는 정렬 순서에서 현재 인스턴스의 위치 인지 나타내는 이전 후 동일한 형식의 두 번째 개체와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-105">It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</span></span> <span data-ttu-id="cc42a-106">일반적으로 개발자 코드에서 직접 메서드를 호출 하지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-106">Typically, the method is not called directly from developer code.</span></span> <span data-ttu-id="cc42a-107">대신 라고 자동으로 메서드에서 같은 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 고 <xref:System.Collections.Generic.SortedList%602.Add%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-107">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="cc42a-108">일반적으로 형식을 제공 하는 <xref:System.IComparable%601> 구현도 구현 합니다.는 <xref:System.IEquatable%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-108">Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="cc42a-109"><xref:System.IEquatable%601> 인터페이스를 정의 합니다 <xref:System.IEquatable%601.Equals%2A> 메서드를 구현 하는 형식의 인스턴스가 같은지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-109">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="cc42a-110">구현의 합니다 <xref:System.IComparable%601.CompareTo%28%600%29> 메서드를 반환 해야 합니다는 <xref:System.Int32> 있는 세 가지 값 중 하나는 다음 표에 나와 있는 것 처럼 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-110">The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.</span></span>  
  
|<span data-ttu-id="cc42a-111">값</span><span class="sxs-lookup"><span data-stu-id="cc42a-111">Value</span></span>|<span data-ttu-id="cc42a-112">의미</span><span class="sxs-lookup"><span data-stu-id="cc42a-112">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="cc42a-113">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="cc42a-113">Less than zero</span></span>|<span data-ttu-id="cc42a-114">이 개체에서 지정한 개체 앞에 <xref:System.IComparable%601.CompareTo%2A> 정렬 순서에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc42a-114">This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.</span></span>|  
|<span data-ttu-id="cc42a-115">0</span><span class="sxs-lookup"><span data-stu-id="cc42a-115">Zero</span></span>|<span data-ttu-id="cc42a-116">이 현재 인스턴스에 지정 된 개체와 정렬 순서에서 같은 위치에서 발생 된 <xref:System.IComparable%601.CompareTo%2A> 메서드 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-116">This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.</span></span>|  
|<span data-ttu-id="cc42a-117">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="cc42a-117">Greater than zero</span></span>|<span data-ttu-id="cc42a-118">이 현재 인스턴스에 의해 지정 된 개체 다음에 오는 여 <xref:System.IComparable%601.CompareTo%2A> 정렬 순서에서 메서드 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-118">This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.</span></span>|  
  
 <span data-ttu-id="cc42a-119">모든 숫자 형식 (같은 <xref:System.Int32> 하 고 <xref:System.Double>) 구현 <xref:System.IComparable%601>같이 <xref:System.String>를 <xref:System.Char>, 및 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-119">All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>.</span></span> <span data-ttu-id="cc42a-120">사용자 지정 형식의 자체 구현을 제공 해야 <xref:System.IComparable%601> 정렬 되거나 정렬 될 개체 인스턴스를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-120">Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc42a-121">다음 코드 예제 구현의 <xref:System.IComparable%601> 간단 `Temperature` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-121">The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="cc42a-122">이 예에서는 만듭니다는 <xref:System.Collections.Generic.SortedList%602> 사용 하 여 문자열의 컬렉션 `Temperature` 키 개체와 여러 쌍의 온도 문자열 순서 목록에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-122">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="cc42a-123">호출에는 <xref:System.Collections.Generic.SortedList%602.Add%2A> 메서드를를 <xref:System.Collections.Generic.SortedList%602> 컬렉션 사용은 <xref:System.IComparable%601> 온도 증가 하는 순서에 표시 되는 목록 항목을 정렬 하려면 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-123">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="cc42a-124">형식 매개 변수 대체는 <see cref="T:System.IComparable`1" /> 이 인터페이스를 구현 하는 형식과 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-124">Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="cc42a-125">구현 하는 경우 <see cref="T:System.IComparable`1" />, 오버 로드 해야 합니다 <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, 및 <see langword="op_LessThanOrEqual" /> 연산자와 일치 하는 값을 반환할 <see cref="M:System.IComparable`1.CompareTo(`0)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-125">If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />.</span></span> <span data-ttu-id="cc42a-126">또한 구현 해야 <see cref="T:System.IEquatable`1" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-126">In addition, you should also implement <see cref="T:System.IEquatable`1" />.</span></span> <span data-ttu-id="cc42a-127">참조 된 <see cref="T:System.IEquatable`1" /> 자세한 문서.</span><span class="sxs-lookup"><span data-stu-id="cc42a-127">See the <see cref="T:System.IEquatable`1" /> article for complete information.</span></span></para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="cc42a-128">이 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-128">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="cc42a-129">현재 인스턴스와 동일한 형식의 다른 개체를 비교하고 정렬 순서에서 현재 인스턴스의 위치가 다른 개체보다 앞인지, 뒤인지 또는 동일한지를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-129">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="cc42a-130">비교되는 개체의 상대 순서를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-130">A value that indicates the relative order of the objects being compared.</span></span> <span data-ttu-id="cc42a-131">반환 값에는 다음과 같은 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-131">The return value has these meanings:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="cc42a-132">값</span><span class="sxs-lookup"><span data-stu-id="cc42a-132">Value</span></span> 
 </term><description> <span data-ttu-id="cc42a-133">의미</span><span class="sxs-lookup"><span data-stu-id="cc42a-133">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="cc42a-134">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="cc42a-134">Less than zero</span></span> 
 </term><description> <span data-ttu-id="cc42a-135">이 인스턴스가 정렬 순서에서 <paramref name="other" /> 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-135">This instance precedes <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cc42a-136">0</span><span class="sxs-lookup"><span data-stu-id="cc42a-136">Zero</span></span> 
 </term><description> <span data-ttu-id="cc42a-137">이 인스턴스가 정렬 순서에서 <paramref name="other" />와 동일한 위치에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-137">This instance occurs in the same position in the sort order as <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cc42a-138">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="cc42a-138">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="cc42a-139">이 인스턴스가 정렬 순서에서 <paramref name="other" /> 뒤에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-139">This instance follows <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc42a-140"><xref:System.IComparable%601.CompareTo%2A> 제네릭 컬렉션 개체의 멤버를 정렬 하는 강력한 형식의 비교 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-140"><xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="cc42a-141">이 인해이 호출 되지 개발자 코드에서 직접.</span><span class="sxs-lookup"><span data-stu-id="cc42a-141">Because of this, it is usually not called directly from developer code.</span></span> <span data-ttu-id="cc42a-142">대신 라고 자동으로 메서드에서 같은 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 고 <xref:System.Collections.Generic.SortedList%602.Add%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-142">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="cc42a-143">이 메서드는 정의 이며 효과가 사용 되는 특정 클래스 또는 값 형식으로 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-143">This method is only a definition and must be implemented by a specific class or value type to have effect.</span></span> <span data-ttu-id="cc42a-144">섹션 ("앞 에", "와 동일한 위치에서 발생" 및 "따릅니다)은 특정 구현에 따라 반환 값에 지정 된 비교 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-144">The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</span></span>  
  
 <span data-ttu-id="cc42a-145">모든 개체 정의 따라 보다 큰 비교 `null`, 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-145">By definition, any object compares greater than `null`, and two null references compare equal to each other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc42a-146">다음 코드 예제 구현의 <xref:System.IComparable%601> 간단 `Temperature` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-146">The following code example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="cc42a-147">이 예에서는 만듭니다는 <xref:System.Collections.Generic.SortedList%602> 사용 하 여 문자열의 컬렉션 `Temperature` 키 개체와 여러 쌍의 온도 문자열 순서 목록에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-147">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="cc42a-148">호출에는 <xref:System.Collections.Generic.SortedList%602.Add%2A> 메서드를를 <xref:System.Collections.Generic.SortedList%602> 컬렉션 사용은 <xref:System.IComparable%601> 온도 증가 하는 순서에 표시 되는 목록 항목을 정렬 하려면 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-148">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cc42a-149">개체 A, B 및 C의 경우 다음 참 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-149">For objects A, B, and C, the following must be true:</span></span> 
 <span data-ttu-id="cc42a-150"><c>A.CompareTo(A)</c> 0을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-150"><c>A.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="cc42a-151">하는 경우 <c>A.CompareTo(B)</c> 그런 다음 반환 0 <c>B.CompareTo(A)</c> 0을 반환 하는 데 필요한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-151">If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="cc42a-152">하는 경우 <c>A.CompareTo(B)</c> 0을 반환 하 고 <c>B.CompareTo(C)</c> 반환 0, <c>A.CompareTo(C)</c> 0을 반환 하는 데 필요한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-152">If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="cc42a-153">하는 경우 <c>A.CompareTo(B)</c> 그런 다음 0이 아닌 값을 반환 <c>B.CompareTo(A)</c> 부호가 다른 값을 반환 하는 데 필요한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-153">If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.</span></span>  
  
<span data-ttu-id="cc42a-154">경우 <c>A.CompareTo(B)</c> 값을 반환 <paramref name="x" /> 는 0과 같지 않은 및 <c>B.CompareTo(C)</c> 값을 반환 <paramref name="y" /> 같은 부호의 <paramref name="x" />, 한 다음 <c>A.CompareTo(C)</c> 같은 부호 값을 반환 하는 데 필요한 <paramref name="x" /> 및 <paramref name="y" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-154">If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="cc42a-155">사용 된 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 클래스 인스턴스의 순서를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cc42a-155">Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>