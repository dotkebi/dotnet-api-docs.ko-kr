<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="480607eeba6a1c1badfd92906bfb9b87a52e39e4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690793" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="06f57-101">이 대리자로 캡슐화되는 메서드의 반환 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-101">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="06f57-102">매개 변수가 없고 <typeparamref name="TResult" /> 매개 변수에 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="06f57-103">이 대리자로 캡슐화되는 메서드의 반환 값입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-103">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06f57-104">사용자 지정 대리자를 명시적으로 선언 하지 않고 매개 변수로 전달할 수 있는 메서드를 나타내는이 대리자를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="06f57-105">캡슐화 된 메서드에이 대리자에 의해 정의 되는 메서드 시그니처와 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="06f57-106">즉, 캡슐화 된 메서드에 매개 변수가 없어야 하는 값을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="06f57-107">매개 변수가 없으며 반환 하는 메서드를 참조 `void` (Visual Basic의 경우로 선언 되는 `Sub` 아니라는 `Function`)를 사용 하 여는 <xref:System.Action> 대리자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="06f57-108">사용 하는 경우는 <xref:System.Func%601> 대리자 필요가 없습니다를 명시적으로 매개 변수가 없는 메서드를 캡슐화 하는 대리자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="06f57-109">예를 들어, 다음 코드는 라는 대리자를 명시적으로 선언 `WriteMethod` 에 대 한 참조를 할당 합니다 `OutputTarget.SendToFile` 메서드 대리자 인스턴스를 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="06f57-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="06f57-110">다음 예제에서는 인스턴스화하여이 코드를 간소화는 <xref:System.Func%601> 명시적으로 새 대리자를 정의 하 고 명명된 된 메서드를 할당 하는 대신 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="06f57-111">사용할 수는 <xref:System.Func%601> 다음 예제와 같이 C#에서는 무명 메서드로 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="06f57-112">(소개 무명 메서드를 참조 하세요 [무명 메서드](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="06f57-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="06f57-113">람다 식을 할당할 수도 있습니다는 <xref:System.Func%602> 다음 예제와 같이 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="06f57-114">(람다 식에 대 한 소개를 참조 하세요 [람다 식](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) 하 고 [람다 식](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="06f57-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="06f57-115">람다 식의 기본 형식이 제네릭 중 하나인 `Func` 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="06f57-116">이 대리자를 명시적으로 할당 하지 않고 람다 식을 매개 변수로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="06f57-117">특히 때문에 형식의 여러 메서드를 <xref:System.Linq> 네임 스페이스 `Func` 매개 변수를 하면 이러한 메서드는 람다 식을 전달할 수 명시적으로 인스턴스화하지 않고도 `Func` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="06f57-118">비용이 많이 드는 계산 결과 실제로 필요한 경우에 실행 하려는 경우에 비용이 많이 드는 함수를 할당할 수 있습니다는 <xref:System.Func%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="06f57-119">값에 액세스 하는 속성 식에서 사용 될 때까지 함수 실행을 지연할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="06f57-120">다음 섹션의 예제에서는이 작업을 수행 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06f57-121">다음 예제에서는 매개 변수가 없는 대리자를 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="06f57-122">이 코드 라는 제네릭 클래스를 만듭니다 `LazyValue` 형식의 필드를 있는 <xref:System.Func%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="06f57-123">이 대리자 필드의 형식 매개 변수에 해당 하는 형식의 값을 반환 하는 모든 함수에 대 한 참조를 저장할 수는 `LazyValue` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="06f57-124">합니다 `LazyValue` 유형 역시는 `Value` 속성 (이 실행 되지 않았습니다 이미) 하는 경우 함수를 실행 하는 결과 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="06f57-125">이 예제에서는 두 메서드를 만들고 두 개를 인스턴스화하고 `LazyValue` 이러한 메서드를 호출 하는 람다 식 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="06f57-126">방금 메서드를 호출 해야 하기 때문에 람다 식 매개 변수를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="06f57-127">두 메서드가 실행 되는 출력에서 알 수 있듯이, 경우에만 각 값 `LazyValue` 개체가 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="06f57-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="06f57-128">람다 식(C# 프로그래밍 가이드)</span><span class="sxs-lookup"><span data-stu-id="06f57-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="06f57-129">람다 식</span><span class="sxs-lookup"><span data-stu-id="06f57-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="06f57-130">대리자(C# 프로그래밍 가이드)</span><span class="sxs-lookup"><span data-stu-id="06f57-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="06f57-131">Visual Basic에서 대리자</span><span class="sxs-lookup"><span data-stu-id="06f57-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>