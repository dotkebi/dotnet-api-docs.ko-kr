<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1593c517175a34772b35a05f3770c0c79a61337c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58737395" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4e2de-101">클래스 이니셜라이저에 의해 throw되는 예외 주위에서 래퍼로 throw되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-101">The exception that is thrown as a wrapper around the exception thrown by the class initializer.</span></span> <span data-ttu-id="4e2de-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2de-103">클래스 이니셜라이저가 형식을 초기화하지 못하면 <xref:System.TypeInitializationException>이 만들어지고 해당 형식의 클래스 이니셜라이저가 throw한 예외에 대한 참조가 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-103">When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer.</span></span> <span data-ttu-id="4e2de-104">합니다 <xref:System.Exception.InnerException%2A> 속성의 <xref:System.TypeInitializationException> 에 내부 예외가 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-104">The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.</span></span>  
  
 <span data-ttu-id="4e2de-105">일반적으로 <xref:System.TypeInitializationException> 치명적인 상태를 반영 하는 예외 (런타임에서 형식을 인스턴스화할 수 없는 경우.) 하지 않도록 하는 응용 프로그램을 계속할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-105">Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</span></span>  <span data-ttu-id="4e2de-106">가장 일반적으로 <xref:System.TypeInitializationException> 응용 프로그램의 실행 환경에서 일부 변경에 대 한 응답에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-106">Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application.</span></span> <span data-ttu-id="4e2de-107">결과적으로 이외의 수 있는 코드를 디버깅 문제 해결에 대 한 예외 해야 처리를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-107">Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block.</span></span> <span data-ttu-id="4e2de-108">대신 예외의 원인은 조사 및 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-108">Instead, the cause of the exception should be investigated and eliminated.</span></span>  
  
 <span data-ttu-id="4e2de-109"><xref:System.TypeInitializationException> 값 0x80131534 HRESULT COR_E_TYPEINITIALIZATION를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-109"><xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</span></span>  
  
 <span data-ttu-id="4e2de-110">인스턴스의 초기 속성 값의 목록을 <xref:System.TypeInitializationException>, 참조는 <xref:System.TypeInitializationException.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-110">For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="4e2de-111">다음 섹션에서는 몇 가지는 상황을 <xref:System.TypeInitializationException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-111">The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.</span></span>  
  
- [<span data-ttu-id="4e2de-112">정적 생성자 및 TypeInitializationException 예외</span><span class="sxs-lookup"><span data-stu-id="4e2de-112">Static constructors and the TypeInitializationException exception</span></span>](#Static)   
- [<span data-ttu-id="4e2de-113">정규식 일치 하는 시간 제한 값</span><span class="sxs-lookup"><span data-stu-id="4e2de-113">Regular expression match timeout values</span></span>](#Timeout)   
- [<span data-ttu-id="4e2de-114">달력 및 문화권 데이터</span><span class="sxs-lookup"><span data-stu-id="4e2de-114">Calendars and cultural data</span></span>](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a><span data-ttu-id="4e2de-115">정적 생성자 및는 TypeInitializationException</span><span class="sxs-lookup"><span data-stu-id="4e2de-115">Static constructors and the TypeInitializationException</span></span>

 <span data-ttu-id="4e2de-116">정적 생성자 있을 경우 라고 자동으로 런타임에서 형식의 새 인스턴스를 만들기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-116">A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</span></span> <span data-ttu-id="4e2de-117">개발자가 정적 생성자를 명시적으로 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-117">Static constructors can be explicitly defined by a developer.</span></span> <span data-ttu-id="4e2de-118">정적 생성자를 명시적으로 정의 되어 있지 않으면 컴파일러가 자동으로 생성 초기화 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 형식의 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-118">If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.</span></span>  <span data-ttu-id="4e2de-119">정적 생성자에 대 한 자세한 내용은 참조 하세요. [정적 생성자](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-119">For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).</span></span>  
  
 <span data-ttu-id="4e2de-120">가장 일반적으로 <xref:System.TypeInitializationException> 정적 생성자가 형식을 인스턴스화할 수 없는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-120">Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.</span></span>  <span data-ttu-id="4e2de-121"><xref:System.Exception.InnerException%2A> 속성 이유를 나타내는 정적 생성자 형식을 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-121">The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type.</span></span> <span data-ttu-id="4e2de-122">더 일반적인 원인 중 일부는 <xref:System.TypeInitializationException> 예외:</span><span class="sxs-lookup"><span data-stu-id="4e2de-122">Some of the more common causes of a <xref:System.TypeInitializationException> exception are:</span></span>  
  
- <span data-ttu-id="4e2de-123">정적 생성자에서는 처리 되지 않은 예외</span><span class="sxs-lookup"><span data-stu-id="4e2de-123">An unhandled exception in a static constructor</span></span>  
 
   <span data-ttu-id="4e2de-124">정적 생성자에서 예외가 throw 되 면 해당 예외에 래핑됩니다는 <xref:System.TypeInitializationException> 예외 및 형식을 인스턴스화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-124">If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.</span></span>  
  
   <span data-ttu-id="4e2de-125">정적 생성자 소스 코드에 항상 명시적으로 정의 되지 않은 무엇을 사용 하면이 예외 문제 해결이 어렵습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-125">What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</span></span> <span data-ttu-id="4e2de-126">정적 생성자는 경우 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-126">A static constructor exists in a type if:</span></span>  
  
   -   <span data-ttu-id="4e2de-127">명시적으로 정의 된 형식의 멤버로 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-127">It has been explicitly defined as a member of a type.</span></span>  
  
   -   <span data-ttu-id="4e2de-128">형식에 `static` (에서 C#) 또는 `Shared` (Visual Basic)에서는 변수를 선언 하 고 단일 문에서 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-128">The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement.</span></span> <span data-ttu-id="4e2de-129">이 경우 언어 컴파일러는 형식에 대 한 정적 생성자를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-129">In this case, the language compiler generates a static constructor for the type.</span></span> <span data-ttu-id="4e2de-130">같은 유틸리티를 사용 하 여 검사할 수 있습니다 [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-130">You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span> <span data-ttu-id="4e2de-131">예를 들어 C# 및 VB 컴파일러는 다음 예제를 컴파일하려면 해당 IL은 다음과 유사 하 게 하는 정적 생성자에 대 한 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-131">For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</span></span>  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   <span data-ttu-id="4e2de-132">다음 예제는 <xref:System.TypeInitializationException> 컴파일러에서 생성 된 정적 생성자에서 throw 된 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-132">The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor.</span></span> <span data-ttu-id="4e2de-133">`Example` 클래스에 포함을 `static` (에서 C#) 또는 `Shared` (Visual Basic)에서는 형식의 필드 `TestClass` 3은 클래스 생성자에 전달 하 여 인스턴스화한 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-133">The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.</span></span>  <span data-ttu-id="4e2de-134">해당 값을 단, 유효 하지 않은; 0 또는 1 값만 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-134">That value, however, is illegal; only values of 0 or 1 are permitted.</span></span> <span data-ttu-id="4e2de-135">결과적으로 `TestClass` throw 생성자 클래스는 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-135">As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="4e2de-136">이 예외가 처리 되지 않으면 때문에 래핑된는 <xref:System.TypeInitializationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-136">Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   <span data-ttu-id="4e2de-137">예외 메시지에 대 한 정보를 표시 합니다 <xref:System.Exception.InnerException%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-137">Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
- <span data-ttu-id="4e2de-138">누락 된 어셈블리나 데이터 파일</span><span class="sxs-lookup"><span data-stu-id="4e2de-138">A missing assembly or data file</span></span>  
 
   <span data-ttu-id="4e2de-139">일반적인 원인입니다는 <xref:System.TypeInitializationException> 응용 프로그램의 개발 및 테스트 환경에 제공 된 어셈블리 또는 데이터 파일의 런타임 환경에서 누락 된 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-139">A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</span></span> <span data-ttu-id="4e2de-140">예를 들어, 다음 예제에서는이 명령줄 구문을 사용 하 여 Missing1a.dll 이라는 어셈블리에 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-140">For example, you can compile the following example to an assembly named Missing1a.dll by using this command-line syntax:</span></span>  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   <span data-ttu-id="4e2de-141">그런 다음 Missing1.exe Missing1a.dll에 대 한 참조를 포함 하 여 명명 된 실행 파일에 다음 예제를 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-141">You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</span></span>  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   <span data-ttu-id="4e2de-142">그러나 이름 바꾸기, 이동 또는 삭제 경우 Missing1a.dll 예제를 실행, throw를 <xref:System.TypeInitializationException> 예외 예제와 같이 출력을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-142">However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.</span></span>  <span data-ttu-id="4e2de-143">예외 메시지에 대 한 정보가 포함 됩니다는 <xref:System.Exception.InnerException%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-143">Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="4e2de-144">내부 예외는이 경우에 <xref:System.IO.FileNotFoundException> 런타임에 종속 어셈블리를 찾을 수 없기 때문에 throw 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-144">In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  <span data-ttu-id="4e2de-145">이 예제는 <xref:System.TypeInitializationException> 어셈블리를 로드할 수 없습니다 때문에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-145">In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded.</span></span> <span data-ttu-id="4e2de-146">또한 구성 파일, XML 파일 또는 포함 된 파일 데이터를 찾을 수 없는 직렬화와 같은 정적 생성자가 데이터 파일을 열려고 할 경우이 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-146">The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</span></span>  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a><span data-ttu-id="4e2de-147">정규식 일치 하는 시간 제한 값</span><span class="sxs-lookup"><span data-stu-id="4e2de-147">Regular expression match timeout values</span></span>  
 <span data-ttu-id="4e2de-148">응용 프로그램 도메인 별로 작업을 일치 하는 정규식 패턴에 대 한 기본 시간 제한 값을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-148">You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</span></span> <span data-ttu-id="4e2de-149">제한 시간을 지정 하 여 정의 됩니다는 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 대 한 값을 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4e2de-149">The timeout is defined by a specifying a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4e2de-150">시간 간격을 사용할 수 있어야 합니다 <xref:System.TimeSpan> 개체 0 보다 크고 미만 약 24 일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-150">The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days.</span></span> <span data-ttu-id="4e2de-151">이러한 요구 사항을 충족 되지 않는 경우 기본 시간 제한 값을 설정 하려고 throw를 <xref:System.ArgumentOutOfRangeException>, 차례로에 래핑됩니다를 <xref:System.TypeInitializationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-151">If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
 <span data-ttu-id="4e2de-152">다음 예제는 <xref:System.TypeInitializationException> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 할당 된 값에 유효 하지 않을 때 throw 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-152">The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</span></span> <span data-ttu-id="4e2de-153">예외를 제거 하려면 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성을 설정 된 <xref:System.TimeSpan> 0 보다 작거나 약 24 일 보다 큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-153">To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.</span></span>  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a><span data-ttu-id="4e2de-154">달력 및 문화권 데이터</span><span class="sxs-lookup"><span data-stu-id="4e2de-154">Calendars and cultural data</span></span>  
 <span data-ttu-id="4e2de-155">경우 일정을 인스턴스화하고 하려고 하지만 런타임이를 인스턴스화할 수 없는 경우는 <xref:System.Globalization.CultureInfo> 일정에 해당 하는 개체를 throw를 <xref:System.TypeInitializationException> 예외.</span><span class="sxs-lookup"><span data-stu-id="4e2de-155">If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception.</span></span> <span data-ttu-id="4e2de-156">다음 달력 클래스 생성자에서이 예외가 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-156">This exception can be thrown by the following calendar class constructors:</span></span>  
  
-   <span data-ttu-id="4e2de-157">기본 생성자는 <xref:System.Globalization.JapaneseCalendar> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-157">The default constructor of the <xref:System.Globalization.JapaneseCalendar> class.</span></span>  
  
-   <span data-ttu-id="4e2de-158">기본 생성자는 <xref:System.Globalization.KoreanCalendar> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-158">The default constructor of the <xref:System.Globalization.KoreanCalendar> class.</span></span>  
  
-   <span data-ttu-id="4e2de-159">기본 생성자는 <xref:System.Globalization.TaiwanCalendar> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-159">The default constructor of the <xref:System.Globalization.TaiwanCalendar> class.</span></span>  
  
 <span data-ttu-id="4e2de-160">이러한 문화권에 대 한 문화권 데이터는 모든 시스템에서 사용할 수 있어야, 있으므로 있습니다 해야 거의 경우 그 어느 때이 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-160">Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="4e2de-161">.NET의 예외 처리 및 Throw</span><span class="sxs-lookup"><span data-stu-id="4e2de-161">Handling and throwing exceptions in .NET</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName"><span data-ttu-id="4e2de-162">초기화에 실패한 형식의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-162">The fully qualified name of the type that fails to initialize.</span></span></param>
        <param name="innerException"><span data-ttu-id="4e2de-163">현재 예외의 원인인 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-163">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="4e2de-164"><paramref name="innerException" /> 매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)가 아니면, 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-164">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="4e2de-165">기본 오류 메시지, 지정된 형식 이름 및 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.TypeInitializationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-165">Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e2de-166">이전 예외의 직접적인 결과로 throw되는 예외는 <xref:System.Exception.InnerException%2A> 속성에 이전 예외에 대한 참조를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-166">An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="4e2de-167"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 `Nothing` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <xref:System.Exception.InnerException%2A>)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-167">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="4e2de-168">다음 표에서는 <xref:System.TypeInitializationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-168">The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.</span></span>  
  
|<span data-ttu-id="4e2de-169">속성</span><span class="sxs-lookup"><span data-stu-id="4e2de-169">Property</span></span>|<span data-ttu-id="4e2de-170">값</span><span class="sxs-lookup"><span data-stu-id="4e2de-170">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="4e2de-171">내부 예외 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-171">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="4e2de-172">지역화된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-172">The localized error message string.</span></span>|  
|<xref:System.TypeInitializationException.TypeName%2A>|<span data-ttu-id="4e2de-173">형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-173">The name of the type.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="4e2de-174">.NET의 예외 처리 및 Throw</span><span class="sxs-lookup"><span data-stu-id="4e2de-174">Handling and throwing exceptions in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="4e2de-175">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-175">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="4e2de-176">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-176">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="4e2de-177">형식 이름 및 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-177">Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4e2de-178">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-178">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="4e2de-179">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-179">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4e2de-180">초기화에 실패한 형식의 정규화된 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-180">Gets the fully qualified name of the type that fails to initialize.</span></span></summary>
        <value><span data-ttu-id="4e2de-181">초기화에 실패한 형식의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e2de-181">The fully qualified name of the type that fails to initialize.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>