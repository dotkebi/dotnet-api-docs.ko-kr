<Type Name="Exception" FullName="System.Exception">
  <Metadata><Meta Name="ms.openlocfilehash" Value="941ce6ec902db92558c052227196f17b68b2f254" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725196" /></Metadata><TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Exception = class&#xA;    interface ISerializable&#xA;    interface _Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="433a9-101">애플리케이션을 실행할 때 나타나는 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-101">Represents errors that occur during application execution.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-102">이 클래스는 모든 예외에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="433a9-103">오류가 발생 하는 시스템 또는 현재 실행 중인 응용 프로그램 오류에 대 한 정보를 포함 하는 예외를 throw 하 여 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="433a9-104">예외가 throw 되 면 응용 프로그램에서 또는 기본 예외 핸들러에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="433a9-105">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="433a9-105">In this section:</span></span>  
  
 <span data-ttu-id="433a9-106">[오류 및 예외](#Errors) </span><span class="sxs-lookup"><span data-stu-id="433a9-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="433a9-107">[Try/catch 블록](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="433a9-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="433a9-108">[예외 형식 기능](#Features) </span><span class="sxs-lookup"><span data-stu-id="433a9-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="433a9-109">[예외 클래스 속성](#Properties) </span><span class="sxs-lookup"><span data-stu-id="433a9-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="433a9-110">[성능 고려 사항](#Performance) </span><span class="sxs-lookup"><span data-stu-id="433a9-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="433a9-111">[예외 다시 throw](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="433a9-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="433a9-112">[표준 예외를 선택합니다.](#Standard) </span><span class="sxs-lookup"><span data-stu-id="433a9-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="433a9-113">사용자 지정 예외를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="433a9-114">오류 및 예외</span><span class="sxs-lookup"><span data-stu-id="433a9-114">Errors and exceptions</span></span>  
 <span data-ttu-id="433a9-115">런타임 오류는 다양 한 이유로 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="433a9-116">그러나 일부 오류 코드에서 예외로 처리 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="433a9-117">적절 하 게 응답할 수 런타임에 발생할 수 있는 오류의 몇 가지 범주는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="433a9-118">**사용 오류입니다.**</span><span class="sxs-lookup"><span data-stu-id="433a9-118">**Usage errors.**</span></span> <span data-ttu-id="433a9-119">사용 오류를 예외가 발생할 수 있는 프로그램 논리에서 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="433a9-120">그러나 예외 처리를 통해 없습니다 있지만 잘못 된 코드를 수정 하 여 오류를 해결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="433a9-121">예를 들어 재정의는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 가정 다음 예제에서 메서드는 `obj` 인수에 null이 아닌 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="433a9-122"><xref:System.NullReferenceException> 발생 하는 예외 때 `obj` 은 `null` 명시적으로 호출 하기 전에 null 인지 테스트할 소스 코드를 수정 하 여 제거할 수 있습니다는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 재정의 및 다시 컴파일입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="433a9-123">다음 예제에서는 처리 하는 수정 된 소스 코드를 포함 한 `null` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="433a9-124">예외 사용 오류에 대 한 처리를 사용 하는 대신 사용할 수는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에서 사용 오류를 식별 하는 방법 및 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 디버그와 릴리스 사용 오류를 식별 하는 메서드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="433a9-125">자세한 내용은 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="433a9-126">**프로그램 오류가 발생 했습니다.**</span><span class="sxs-lookup"><span data-stu-id="433a9-126">**Program errors.**</span></span> <span data-ttu-id="433a9-127">프로그램 오류에는 반드시 버그 없는 코드를 작성 하 여 방지할 수 없는 런타임 오류가입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="433a9-128">일부 경우에 프로그램 오류는 예상 또는 일상적인 오류 조건이 반영할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="433a9-129">이 경우 다음 예외 처리를 사용 하 여 프로그램 오류를 처리 하 고 대신 작업을 다시 시도를 방지 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="433a9-130">예를 들어, 사용자는 특정 형식으로 날짜를 입력 해야 하는 경우 구문 분석할 수 있습니다 날짜 문자열을 호출 하 여 합니다 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> 반환 하는 메서드를 <xref:System.Boolean> 구문 분석 작업이 성공 했는지를 나타내는, 합니다 사용하는대신값<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>throw 하는 메서드를 <xref:System.FormatException> 날짜 문자열을 변환할 수 없는 경우 예외를 <xref:System.DateTime> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="433a9-131">마찬가지로, 사용자가 존재 하지 않는 파일을 열고 하려고 하는 경우 먼저 호출 된 <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> 여부 파일 존재 하 고 확인을 하지 않는 경우 사용자 만드시겠습니까 하려고 하는지 여부를 확인 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="433a9-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="433a9-132">다른 경우에 프로그램 오류 코드에서 처리할 수 있는 예기치 않은 오류 조건을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="433a9-133">예를 들어 파일이 있는지 확인 하려면를 선택한 경우에이 삭제 될 수 있습니다를 열 수 있도록 전이나 손상 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="433a9-134">인스턴스화하여 파일을 열려고 할 경우는 <xref:System.IO.StreamReader> 개체나 호출 합니다 <xref:System.IO.File.Open%2A> 메서드가 throw 할 수 있습니다는 <xref:System.IO.FileNotFoundException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="433a9-135">이러한 경우에 오류를 복구 하는 예외 처리를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="433a9-136">**시스템 오류입니다.**</span><span class="sxs-lookup"><span data-stu-id="433a9-136">**System failures.**</span></span> <span data-ttu-id="433a9-137">시스템 오류에 의미 있는 방식으로 프로그래밍 방식으로 처리할 수 없는 런타임 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="433a9-138">예를 들어, 모든 메서드가 throw 할 수는 <xref:System.OutOfMemoryException> 공용 언어 런타임에서 추가 메모리를 할당할 수 없는 경우 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="433a9-139">일반적으로 시스템 오류 예외 처리를 사용 하 여 처리 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="433a9-140">대신,와 같은 이벤트를 사용할 수 있습니다 <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 호출을 <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> 예외 정보를 기록 하 고 응용 프로그램을 종료 하기 전에 실패의 사용자에 게 알릴 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="433a9-141">Try/catch 블록</span><span class="sxs-lookup"><span data-stu-id="433a9-141">Try/catch blocks</span></span>  
 <span data-ttu-id="433a9-142">공용 언어 런타임 예외 개체의 표현 및 프로그램 코드 및 예외 처리 코드를 분리를 기반으로 하는 예외 처리 모델을 제공 `try` 블록 및 `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="433a9-143">하나 이상의 수 `catch` 각각은 특정 형식의 예외 또는 다른 블록 보다 구체적인 예외를 catch 하는 데 사용 하기 위한 처리 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="433a9-144">내 코드에 존재 해야 응용 프로그램의 응용 프로그램 코드 블록을 실행 하는 동안 발생 하는 예외를 처리 하는 경우는 `try` 문 이라고는 `try` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="433a9-145">throw 된 예외를 처리 하는 응용 프로그램 코드를 `try` 블록 내에 배치 됩니다는 `catch` 문 라고는 `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="433a9-146">0 개 이상의 `catch` 와 연결 된 블록을 `try` 블록 및 각 `catch` 블록을 처리 하는 예외의 형식을 결정 하는 형식 필터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="433a9-147">예외가 발생 하는 경우는 `try` 블록에 시스템 연결 된 검색 `catch` 블록을 찾을 때까지 응용 프로그램 코드에 나타나는 순서에는 `catch` 예외를 처리 하는 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="433a9-148">A `catch` 형식의 예외를 처리 하는 블록 `T` catch 블록의 형식 필터를 지정 하는 경우 `T` 있는 모든 형식이 또는 `T` 에서 파생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="433a9-149">시스템 중지 후 첫 번째를 찾으면 검색 `catch` 예외를 처리 하는 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="433a9-150">이러한 이유로 응용 프로그램 코드를 `catch` 전에 형식을 처리 하는 블록을 지정 해야 합니다는 `catch` 이 섹션에 나오는 예제에서 설명한 것 처럼 해당 기본 형식으로 처리 하는 블록.</span><span class="sxs-lookup"><span data-stu-id="433a9-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="433a9-151">처리 하는 catch 블록 `System.Exception` 마지막에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="433a9-152">없으면를 `catch` 현재 연결 된 블록 `try` 블록에서 예외를 및 현재 처리 `try` 내 다른 블록에 중첩 `try` 현재 호출에서 차단는 `catch` 다음와 연결 된 블록 바깥쪽 `try` 블록 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="433a9-153">없으면 `catch` 예외에 대 한 블록을 찾지 못하면, 시스템은 현재 호출의 이전 중첩 수준을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="433a9-154">없으면 `catch` 차단 예외가 있으면 현재 호출, 예외 호출 스택 위로 전달 됩니다 및은 이전 스택 프레임 검색 되는 `catch` 예외를 처리 하는 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="433a9-155">호출 스택 검색에는 예외를 처리 하거나 호출 스택에서 더 이상의 프레임이 없을 때까지 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="433a9-156">찾지 못한 채 호출 스택의 위쪽에 도달 하면는 `catch` 기본 예외 핸들러가 예외를 처리 하는 블록을 처리 하 고 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="433a9-157">예외 형식 기능</span><span class="sxs-lookup"><span data-stu-id="433a9-157">Exception type features</span></span>  
 <span data-ttu-id="433a9-158">예외 형식에는 다음 기능을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="433a9-159">오류를 설명 하는 사람이 읽을 수 있는 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="433a9-160">런타임은 예외가 발생 하면 문제를 해결 하는 오류의 특성의 사용자에 게 알려 및 작업을 제안 사용 가능한 텍스트 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="433a9-161">이 텍스트 메시지에 보유 됩니다는 <xref:System.Exception.Message%2A> 예외 개체의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="433a9-162">예외 개체를 만드는 동안 해당 특정 예외의 세부 정보를 설명 하는 생성자를 텍스트 문자열을 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="433a9-163">오류 메시지 인수가 없을 생성자에 제공 하면 기본 오류 메시지 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="433a9-164">자세한 내용은 <xref:System.Exception.Message%2A> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="433a9-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="433a9-165">예외가 throw 되었을 때 호출 스택의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="433a9-166"><xref:System.Exception.StackTrace%2A> 속성은 코드에서 오류가 발생 하는 위치를 결정 하는 스택 추적을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="433a9-167">스택 추적 호출된 되는 모든 메서드가 및 호출이 수행 되는 소스 파일의 줄 번호를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="433a9-168">예외 클래스 속성</span><span class="sxs-lookup"><span data-stu-id="433a9-168">Exception class properties</span></span>  
 <span data-ttu-id="433a9-169"><xref:System.Exception> 클래스에는 다양 한 코드 위치, 유형, 도움말 파일 및 예외에 대 한 이유를 식별 하는 속성이 포함 되어 있습니다.: <xref:System.Exception.StackTrace%2A>를 <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>를 <xref:System.Exception.HelpLink%2A>를 <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, 및 <xref:System.Exception.Data%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="433a9-170">두 개 이상의 예외와 인과 관계에 있는 경우는 <xref:System.Exception.InnerException%2A> 속성은이 정보를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="433a9-171">이 내부 예외에 대 한 응답에서 외부 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="433a9-172">외부 예외를 처리 하는 코드 이전 내부 예외의 정보를 사용 하 여 오류를 보다 적절 하 게 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="433a9-173">키/값 쌍의 컬렉션인 예외에 대 한 보충 정보를 저장할 수 있습니다는 <xref:System.Exception.Data%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="433a9-174">예외 개체를 만드는 동안 생성자에 전달 되는 오류 메시지 문자열을 지역화 해야 하 고 사용 하 여 리소스 파일에서 지정할 수는 <xref:System.Resources.ResourceManager> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="433a9-175">지역화 된 리소스에 대 한 자세한 내용은 참조는 [위성 어셈블리 만들기](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) 하 고 [리소스 패키징 및 배포](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="433a9-176">예외 발생 원인을 하는 방법에 대 한 광범위 한 정보를 사용 하 여 사용자를 제공 하는 <xref:System.Exception.HelpLink%2A> 속성이 도움말 파일 URL (또는 URN)를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="433a9-177"><xref:System.Exception> 클래스 값 0x80131500 HRESULT COR_E_EXCEPTION를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="433a9-178">인스턴스의 초기 속성 값의 목록을 합니다 <xref:System.Exception> 클래스를 참조 하십시오는 <xref:System.Exception.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="433a9-179">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="433a9-179">Performance considerations</span></span>  
 <span data-ttu-id="433a9-180">Throw 되거나 예외를 처리는 상당한 양의 시스템 리소스 및 실행 시간을 소비 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="433a9-181">예측 가능한 이벤트를 처리 또는 흐름 제어 정말 비정상적인 상태를 처리에 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="433a9-182">예를 들어, 클래스 라이브러리를 개발 하는 경우와 같은 일부 경우에서 하다 메서드 인수를 유효 하지 않은 경우, 올바른 매개 변수를 사용 하 여 호출할 메서드를 기대 하기 때문에 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="433a9-183">잘못 된 메서드 인수로 사용 오류를의 결과가 아닌 경우 경우에 특별 한 문제가 발생 했음을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="433a9-184">반대로, 사용자 입력 유효 하지 않은 경우, 종종 잘못 된 데이터를 입력 하는 작업을 할 수 있으므로 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="433a9-185">대신, 유효한 입력을 입력할 수 있도록 재시도 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="433a9-186">또는 사용 오류를 처리 하려면 예외를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="433a9-187">대신 [어설션을](/visualstudio/debugger/assertions-in-managed-code) 식별 하 고 사용 오류를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="433a9-188">반환 코드를; 충분 한 경우 예외를 throw 하지 않는 또한 예외가; 반환 코드를 변환 하지 않습니다 수행 하지 정기적으로 catch 예외, 무시 및 다음 처리를 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="433a9-189">예외 다시 throw</span><span class="sxs-lookup"><span data-stu-id="433a9-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="433a9-190">에서는 대부분의 경우 예외 처리기 단순히가 호출자에 게는 예외를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="433a9-191">이 대부분에서 자주 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="433a9-192">클래스 라이브러리를.NET Framework 클래스 라이브러리 또는 다른 클래스 라이브러리의 메서드 호출을 래핑합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="433a9-193">응용 프로그램 또는 심각한 예외를 발생 하는 라이브러리입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="433a9-194">예외 처리기는 예외를 기록 하 고 예외 다시 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="433a9-195">다시 예외를 throw 하는 권장된 방법은 사용 하기만 하면 되는 [throw](~/docs/csharp/language-reference/keywords/throw.md) C#의 문은 하며 [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) 식을 포함 하지 않고 Visual Basic의 문입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="433a9-196">이렇게 하면 호출자에 게 예외 전파 될 때 모든 호출 스택 정보가 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="433a9-197">다음은 이에 대한 예입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-197">The following example illustrates this.</span></span> <span data-ttu-id="433a9-198">문자열 확장 메서드를 `FindOccurrences`에 대 한 하나 이상의 호출을 래핑합니다 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 미리 인수 유효성 검사 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="433a9-199">호출자가 호출 `FindOccurrences` 두 번입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="433a9-200">두 번째 호출에서 `FindOccurrences`를 호출자에 게 전달을 `null` 사례 검색 문자열로 합니다 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> throw 하는 방법은 <xref:System.ArgumentNullException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="433a9-201">이 예외를 처리 하는 `FindOccurrences` 메서드와 호출자에 게 다시 전달된 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="433a9-202">Throw 문 식 없이 사용 되므로 호출 스택을 유지 됩니다 예제의 출력이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="433a9-203">반대로, 사용 하 여 다시 예외가 발생 합니다</span><span class="sxs-lookup"><span data-stu-id="433a9-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp  
throw e  
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="433a9-204">문, 전체 호출 스택을 유지 되지 및 예제에서는 다음과 같은 출력이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="433a9-205">다소 번거로운 방법은 새 예외를 throw 하는 데 내부 예외가 원래 예외의 호출 스택 정보를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="433a9-206">호출자에 게 새 예외를 사용할 수 있습니다 <xref:System.Exception.InnerException%2A> 스택 프레임 및 원래 예외에 대 한 기타 정보를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="433a9-207">이 경우에 throw 문을 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="433a9-208">알고 있어야 하는 예외를 처리 하는 사용자 코드에는 <xref:System.Exception.InnerException%2A> 다음 예외 처리기에서 볼 수 있듯이 속성 원래 예외에 대 한 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="433a9-209">표준 예외를 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="433a9-210">예외를 throw 하는 경우 사용자 지정 예외를 구현 하는 대신.NET Framework의 기존 예외 형식을 자주 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="433a9-211">이러한 두 가지 조건에 표준 예외 형식을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="433a9-212">사용 현황 오류로 인해 발생 하는 예외를 throw 하는 (즉, 메서드를 호출 하는 개발자가 변경한 프로그램 논리의 오류로 인해).</span><span class="sxs-lookup"><span data-stu-id="433a9-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="433a9-213">일반적으로 예외를 throw 할와 같은 <xref:System.ArgumentException>, <xref:System.ArgumentNullException>를 <xref:System.InvalidOperationException>, 또는 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="433a9-214">예외 개체를 인스턴스화하는 오류를 설명 개발자가 문제를 해결할 수 있도록 하는 경우 예외 개체의 생성자에 제공 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="433a9-215">자세한 내용은 <xref:System.Exception.Message%2A> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="433a9-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="433a9-216">기존.NET Framework 예외를 사용 하 여 호출자에 게 전달 될 수 있는 오류를 처리 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="433a9-217">가능 하면 가장 많이 파생 된 예외를 throw 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="433a9-218">예를 들어 메서드 인수로 열거형의 유효한 멤버에 필요한 경우 throw 해야는 <xref:System.ComponentModel.InvalidEnumArgumentException> (가장 클래스를 파생 하는 데 사용) 아닌 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="433a9-219">다음 표에서 일반적인 예외 형식과 되는 사용자가 throw 할 조건을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="433a9-220">예외</span><span class="sxs-lookup"><span data-stu-id="433a9-220">Exception</span></span>|<span data-ttu-id="433a9-221">조건</span><span class="sxs-lookup"><span data-stu-id="433a9-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="433a9-222">메서드에 전달 되는 null이 아닌 인수가 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="433a9-223">메서드에 전달 되는 인수가 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="433a9-224">인수가 유효한 값의 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="433a9-225">디렉터리 경로의 앞쪽 부분은 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="433a9-226">정수는 분모 또는 <xref:System.Decimal> 나누기 작업은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="433a9-227">드라이브를 사용할 수 없거나 존재 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="433a9-228">파일이 존재 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="433a9-229">값을 변환할 문자열에서 변환 메서드 같은 적절 한 형식이 아닙니다. `Parse`합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="433a9-230">인덱스 배열 또는 컬렉션의 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="433a9-231">메서드 호출이 개체의 현재 상태에서 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="433a9-232">컬렉션의 멤버에 액세스 하는 것에 대 한 지정된 된 키를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="433a9-233">메서드 또는 연산이 구현 되지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="433a9-234">메서드 또는 작업이 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="433a9-235">삭제 된 개체에는 작업이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="433a9-236">산술, 캐스팅 또는 변환 작업 결과로 오버플로가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="433a9-237">경로나 파일 이름에는 시스템 정의 최대 길이 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="433a9-238">작업은 현재 플랫폼에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="433a9-239">차원 수가 잘못 된 배열은 메서드에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="433a9-240">작업에 할당 된 시간 간격이 만료 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="433a9-241">잘못 된 리소스 URI (Uniform Identifier)가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="433a9-242">사용자 지정 예외를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="433a9-243">다음 경우는 오류 조건을 처리 하기 위해 기존.NET Framework 예외를 사용 하 여 적합 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="433a9-244">경우 예외는 기존.NET Framework 예외를 매핑할 수 없는 고유한 프로그램 오류를 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="433a9-245">예외는 기존.NET Framework 예외 나 예외에 대 한 적절 한 처리와에서 다르면 처리가 필요한 경우에 유사한 예외가에서 명확히 구분 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="433a9-246">예를 들어, throw 되는 경우는 <xref:System.ArgumentOutOfRangeException> 대상 정수 계열 형식의 범위를 벗어났습니다 하는 문자열의 숫자 값을 구문 분석할 때 예외를 하지 하려는 호출자에 게 제공 안 함에서 생성 되는 오류에 대 한 동일한 예외를 사용 합니다 적절 한 제한 메서드를 호출할 때 값입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="433a9-247"><xref:System.Exception> 클래스는.NET Framework의 모든 예외의 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="433a9-248">여러 파생된 클래스 멤버의 상속 된 동작에 의존 합니다 <xref:System.Exception> 클래스의 멤버를 재정의 하지 않습니다 <xref:System.Exception>, 고유한 멤버를 정의할 것입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="433a9-249">사용자 고유의 예외 클래스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="433a9-250">상속 되는 클래스를 정의 <xref:System.Exception>합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="433a9-251">필요한 경우 클래스는 예외에 대 한 추가 정보를 제공 하는 데 필요한 고유 멤버를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="433a9-252">예를 들어를 <xref:System.ArgumentException> 클래스에 포함 되어는 <xref:System.ArgumentException.ParamName%2A> 인수에서 예외를 발생 시킨 매개 변수의 이름을 지정 하는 속성 및 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 속성을 포함를 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> 시간 제한 간격을 나타내는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="433a9-253">필요한 경우 모든 상속 된 멤버 변경 하거나 수정 하려면 해당 기능을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="433a9-254">대부분의 기존 클래스의 파생 된 <xref:System.Exception> 상속 된 멤버의 동작을 재정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="433a9-255">사용자 지정 예외 개체는 직렬화 할 수 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="433a9-256">Serialization 예외에 대 한 정보를 저장할 수 있습니다 및 예외 정보를 원격 컨텍스트에서 서버 및 클라이언트 프록시를 공유할 수를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="433a9-257">예외 개체를 직렬화 할 수 있도록 표시 하는 <xref:System.SerializableAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="433a9-258">예외 클래스의 생성자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="433a9-259">일반적으로 예외 클래스에 다음 생성자 중 하나 이상의:</span><span class="sxs-lookup"><span data-stu-id="433a9-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="433a9-260"><xref:System.Exception.%23ctor>에 새 예외 개체의 속성을 초기화 하려면 기본값을 사용 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="433a9-261"><xref:System.Exception.%23ctor%28System.String%29>에 지정된 된 오류 메시지를 사용 하 여 새 예외 개체를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="433a9-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>에 지정 된 오류 메시지와 내부 예외를 사용 하 여 새 예외 개체를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="433a9-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>에를 `protected` serialize 된 데이터에서 새 예외 개체를 초기화 하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="433a9-264">예외 개체를 직렬화 할 수 있도록 선택한 경우이 생성자를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="433a9-265">다음 예제에서는 사용자 지정 예외 클래스의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="433a9-266">정의 `NotPrimeException` 클라이언트 소수가 아닌는 시작 숫자를 지정 하 여 소수의 시퀀스를 검색 하려고 할 때 throw 되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="433a9-267">새 속성을 정의 하는 예외 `NonPrime`는 소수 숫자가 아닌 예외를 발생 시킨 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="433a9-268">매개 변수가 없는 생성자는 protected 생성자 및 사용 하는 생성자를 구현 하는 것 외에도 <xref:System.Runtime.Serialization.SerializationInfo> 하 고 <xref:System.Runtime.Serialization.StreamingContext> serialization에 대 한 매개 변수를 `NotPrimeException` 지원 하기 위해 세 가지 추가 생성자를 정의 하는 클래스를 `NonPrime` 속성.</span><span class="sxs-lookup"><span data-stu-id="433a9-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="433a9-269">각 생성자의 여 소수 숫자가 아닌 값을 유지 하는 것 외에도 기본 클래스 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="433a9-270">합니다 `NotPrimeException` 클래스도 표시 되는 <xref:System.SerializableAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="433a9-271">`PrimeNumberGenerator` 다음 예와에서 같이 클래스 에라토스테네스의 체를 사용 하 여 해당 클래스 생성자 호출에서 클라이언트가 지정한 제한 2에서 소수 시퀀스를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="433a9-272">합니다 `GetPrimesFrom` 메서드 지정된 하한값 보다 크거나 같은 경우에 모든 소수를 반환 하지만 throw를 `NotPrimeException` 해당 하한값 소수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="433a9-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="433a9-273">두 번 호출 하는 다음 예제는 `GetPrimesFrom` 메서드 사용 하 여 소수가 아닌 숫자를 응용 프로그램 도메인 경계를 교차 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="433a9-274">두 경우에는 예외가 throw 되 고 클라이언트 코드에서 성공적으로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="433a9-275">Windows 런타임 및 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="433a9-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="433a9-276">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] 에 대 한 [!INCLUDE[win8](~/includes/win8-md.md)],.NET Framework 이외의 스택 프레임을 통해 예외가 전파 될 때 몇 가지 예외 정보에는 일반적으로 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="433a9-277">로 시작 합니다 [!INCLUDE[net_v451](~/includes/net-v451-md.md)] 및 [!INCLUDE[win81](~/includes/win81-md.md)], 공용 언어 런타임에서 계속 원래 사용 <xref:System.Exception> 해당 예외는.NET Framework 이외의 스택 프레임에서 수정 된 경우가 아니면 throw 된 개체를 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-278">다음 예제는 `catch` 처리 하도록 정의 된 블록 <xref:System.ArithmeticException> 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="433a9-279">이 `catch` catch 블록도 <xref:System.DivideByZeroException> 오류 때문에 <xref:System.DivideByZeroException> 에서 파생 <xref:System.ArithmeticException> 되며 없습니다 `catch` 블록에 대해 명시적으로 정의 된 <xref:System.DivideByZeroException> 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="433a9-280">예외 처리 및 Throw</span><span class="sxs-lookup"><span data-stu-id="433a9-280">Handling and Throwing Exceptions</span></span></related>
    <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md"><span data-ttu-id="433a9-281">데스크톱 응용 프로그램의 리소스 패키징 및 배포</span><span class="sxs-lookup"><span data-stu-id="433a9-281">Packaging and Deploying Resources in Desktop Apps</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1"><span data-ttu-id="433a9-282">관리 코드에 어설션 사용</span><span class="sxs-lookup"><span data-stu-id="433a9-282">Assertions in Managed Code</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="433a9-283"><see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-283">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="433a9-284"><see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-284">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-285">이 생성자는 새 인스턴스의 <xref:System.Exception.Message%2A> 속성을 현재 시스템 문화권에 기반하여 해당 오류를 설명하는 시스템 제공 메시지로 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-285">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="433a9-286">모든 파생된 클래스는이 기본 생성자를 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-286">All the derived classes should provide this default constructor.</span></span> <span data-ttu-id="433a9-287">다음 표에서는 <xref:System.Exception> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-287">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="433a9-288">속성</span><span class="sxs-lookup"><span data-stu-id="433a9-288">Property</span></span>|<span data-ttu-id="433a9-289">값</span><span class="sxs-lookup"><span data-stu-id="433a9-289">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="433a9-290">null 참조(Visual Basic의 경우 `Nothing`)</span><span class="sxs-lookup"><span data-stu-id="433a9-290">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="433a9-291">시스템이 제공하는 지역화된 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-291">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="433a9-292">다음 코드 예제에서는 파생 되는 `Exception` 미리 정의 된 메시지를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-292">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="433a9-293">코드에는 기본 및 파생된 클래스에 대 한 매개 변수가 없는 생성자의 사용 방법을 보여 줍니다. `Exception` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-293">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new Exception : string -&gt; Exception" Usage="new System.Exception message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="433a9-294">오류를 설명하는 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-294">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="433a9-295">지정된 오류 메시지를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-295">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-296">이 생성자는 <xref:System.Exception.Message%2A> 를 사용 하 여 새 인스턴스의 속성을 `message` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-296">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="433a9-297">경우는 `message` 매개 변수가 `null`를 호출할 때와 동일 합니다 <xref:System.Exception.%23ctor%2A> 생성자.</span><span class="sxs-lookup"><span data-stu-id="433a9-297">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="433a9-298">다음 표에서는 <xref:System.Exception> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-298">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="433a9-299">속성</span><span class="sxs-lookup"><span data-stu-id="433a9-299">Property</span></span>|<span data-ttu-id="433a9-300">값</span><span class="sxs-lookup"><span data-stu-id="433a9-300">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="433a9-301">null 참조(Visual Basic의 경우 `Nothing`)</span><span class="sxs-lookup"><span data-stu-id="433a9-301">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="433a9-302">오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-302">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="433a9-303">다음 코드 예제에서는 파생 되는 `Exception` 특정 조건에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-303">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="433a9-304">코드에는 기본 및 파생된 클래스에 대 한 매개 변수로 호출자가 지정한 메시지를 사용 하는 생성자의 사용 방법을 보여 줍니다. `Exception` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-304">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new Exception : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; Exception" Usage="new System.Exception (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="433a9-305">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-305">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="433a9-306">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-306">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="433a9-307">serialize된 데이터를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-307">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-308">deserialization을 수행하는 동안 이 생성자를 호출하여 스트림을 통해 전송될 예외 개체를 다시 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-308">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="433a9-309">자세한 내용은 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-309">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-310">다음 코드 예제에서는 파생 된 정의 serializable `Exception` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-310">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="433a9-311">코드를 0으로 나누기 오류를 강제로 사용 하 여 파생된 예외 인스턴스를 만든 후 합니다 (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-311">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="433a9-312">코드 파일에 인스턴스를 serialize, 새 예외를 throw 하는 파일을 deserialize 한 다음를 catch 하 예외 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-312">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="433a9-313"><paramref name="info" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-313"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="433a9-314">클래스 이름이 <see langword="null" />이거나 <see cref="P:System.Exception.HResult" />가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="433a9-314">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="433a9-315">XML 및 SOAP Serialization</span><span class="sxs-lookup"><span data-stu-id="433a9-315">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new Exception : string * Exception -&gt; Exception" Usage="new System.Exception (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="433a9-316">예외에 대한 이유를 설명하는 오류 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-316">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="433a9-317">현재 예외를 발생시킨 예외입니다. 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-317">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span></span></param>
        <summary><span data-ttu-id="433a9-318">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-318">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-319">이전 예외의 직접적인 결과로 throw되는 예외의 <xref:System.Exception.InnerException%2A> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-319">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="433a9-320"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 `Nothing` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <xref:System.Exception.InnerException%2A>)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-320">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="433a9-321">다음 표에서는 <xref:System.Exception> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-321">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="433a9-322">속성</span><span class="sxs-lookup"><span data-stu-id="433a9-322">Property</span></span>|<span data-ttu-id="433a9-323">값</span><span class="sxs-lookup"><span data-stu-id="433a9-323">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="433a9-324">내부 예외 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-324">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="433a9-325">오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-325">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="433a9-326">다음 코드 예제에서는 파생 되는 `Exception` 특정 조건에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-326">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="433a9-327">코드에는 메시지와 내부 예외를 파생된 된 클래스 및 기본 모두에 대 한 매개 변수로 사용 하는 생성자의 사용 방법을 보여 줍니다. `Exception` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-327">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Collections.IDictionary" Usage="System.Exception.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-328">예외에 대한 사용자 정의 추가 정보를 제공하는 키/값 쌍의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-328">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span></span></summary>
        <value><span data-ttu-id="433a9-329"><see cref="T:System.Collections.IDictionary" /> 인터페이스를 구현하며 사용자 정의 키/값 쌍의 컬렉션을 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-329">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span></span> <span data-ttu-id="433a9-330">기본값은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-330">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-331">사용 합니다 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 에서 반환 된 개체는 <xref:System.Exception.Data%2A> 속성을 저장 하 고 예외와 관련 된 보충 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-331">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="433a9-332">정보는 임의 개수의 사용자 정의 키/값 쌍의 형태로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-332">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="433a9-333">쌍의 값 구성 요소 개체의 형식일 수 있지만 각 키/값 쌍의 핵심 구성 요소는 일반적으로 문자열을 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-333">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="433a9-334">키/값 쌍 보안</span><span class="sxs-lookup"><span data-stu-id="433a9-334">Key/Value Pair Security</span></span>  
 <span data-ttu-id="433a9-335">반환한 컬렉션에 저장 된 키/값 쌍을 <xref:System.Exception.Data%2A> 속성은 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-335">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="433a9-336">응용 프로그램이 중첩 된 일련의 루틴을 호출 하는 경우 예외 처리기를 포함 하는 각 루틴 결과 호출 스택의 해당 예외 처리기의 계층 구조를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-336">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="433a9-337">하위 수준 루틴에서 예외를 throw 하는 경우 호출 스택 계층 구조의 모든 상위 수준 예외 처리기 읽거나 다른 예외 처리기에서 컬렉션에 저장 된 키/값 쌍을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-337">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="433a9-338">즉, 키/값 쌍의 정보는 기밀 및 응용 프로그램의 키/값 쌍에서 정보를 손상 된 경우 제대로 작동 되도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-338">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="433a9-339">키 충돌</span><span class="sxs-lookup"><span data-stu-id="433a9-339">Key Conflicts</span></span>  
 <span data-ttu-id="433a9-340">키 충돌 하는 다른 예외 처리기는 키/값 쌍에 액세스 하려면 동일한 키를 지정 하는 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-340">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="433a9-341">키 충돌의 결과 하위 수준의 예외 처리기 더 높은 수준의 예외 처리기를 사용 하 여 실수로 통신할 수 있고이 통신에는 미묘한 프로그램 오류가 발생할 수 있습니다 되었기 때문에 응용 프로그램을 개발 하는 경우에 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-341">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="433a9-342">그러나 기울인다면 응용 프로그램을 강화 하기 위해 키 충돌을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-342">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="433a9-343">키 충돌을 방지</span><span class="sxs-lookup"><span data-stu-id="433a9-343">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="433a9-344">키/값 쌍에 대 한 고유 키를 생성 하는 명명 규칙을 채택 하 여 키 충돌을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-344">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="433a9-345">예를 들어, 응용 프로그램의 마침표로 구분 된 이름으로 구성 된 키, 쌍 및 고유 식별자에 대 한 보충 정보를 제공 하는 메서드 명명 규칙을 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-345">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="433a9-346">두 응용 프로그램 제품 및 공급 업체 라는 가정 각각에 Sales 라는 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-346">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="433a9-347">제품 응용 프로그램에서 Sales 메서드는 제품의 id 번호 (stock keeping unit 또는 SKU)를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-347">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="433a9-348">공급 업체 응용 프로그램에서 Sales 메서드 id 번호 또는 공급자의 SID를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-348">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="433a9-349">따라서이 예제에 대 한 명명 규칙 "Products.Sales.SKU" 및 "Suppliers.Sales.SID" 키를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-349">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="433a9-350">키 충돌을 악용</span><span class="sxs-lookup"><span data-stu-id="433a9-350">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="433a9-351">처리를 제어 하려면 하나 이상의 특수 한 푸시합니다 키의 존재를 사용 하 여 키 충돌을 악용 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-351">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="433a9-352">가정 시나리오 중 하나를 호출 스택 계층 구조에서 가장 높은 수준의 예외 처리기는 하위 수준의 예외 처리기에서 throw 된 모든 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-352">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="433a9-353">높은 수준의 예외 처리기에서 나머지 키/값 쌍 형식는 특수 키를 사용 하 여 키/값 쌍이 있는 경우는 <xref:System.Collections.IDictionary> 일부 비표준 방식에서 개체 나머지 키/값 쌍을 몇 가지 일반적인 방식으로 서식이 지정 된이 고, 그렇지 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-353">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="433a9-354">이제 예를 들어, 다른 시나리오에서는 호출 스택의 계층 구조의 각 수준에서 예외 처리기를 다음 하위 수준의 예외 핸들러에 의해 throw 된 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-354">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="433a9-355">각 예외 처리기에서 반환 된 컬렉션을 인식 하는 또한는 <xref:System.Exception.Data%2A> 속성 푸시합니다 키 집합을 사용 하 여 액세스할 수 있는 키/값 쌍의 집합을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-355">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="433a9-356">각 예외 핸들러에서 예외 처리기로 고유한 정보를 사용 하 여 해당 키/값 쌍의 값 구성 요소를 업데이트 하려면 푸시합니다 키 집합을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-356">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="433a9-357">업데이트 프로세스를 완료 한 후 예외 처리기는 다음 더 높은 수준의 예외 처리기로 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-357">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="433a9-358">마지막으로 가장 높은 수준의 예외 처리기는 키/값 쌍에 액세스 하 고 모든 하위 수준의 예외 처리기의 통합된 업데이트 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-358">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-359">다음 예제에서는 추가 하 고 사용 하 여 정보를 검색 합니다 <xref:System.Exception.Data%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-359">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberSignature Language="F#" Value="abstract member GetBaseException : unit -&gt; Exception&#xA;override this.GetBaseException : unit -&gt; Exception" Usage="exception.GetBaseException " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="433a9-360">파생 클래스에서 재정의되었을 때, 하나 이상의 후속 예외의 근본 원인이 되는 <see cref="T:System.Exception" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-360">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span></span></summary>
        <returns><span data-ttu-id="433a9-361">예외의 체인에서 throw된 첫째 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-361">The first exception thrown in a chain of exceptions.</span></span> <span data-ttu-id="433a9-362">현재 예외의 <see cref="P:System.Exception.InnerException" /> 속성이 null 참조(Visual Basic에서는 <see langword="Nothing" />)인 경우, 이 속성은 현재 예외를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-362">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-363">체인의 각 예외에서 참조 되는 예외의 직접적인 결과로 throw 된 예외의 체인 구성 예외 집합을 해당 `InnerException` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-363">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="433a9-364">주어진된 체인에서 체인의 다른 모든 예외의 근본 원인인 예외를 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-364">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="433a9-365">이 예외는 기본 예외 호출 되 고 `InnerException` 속성은 항상 null 참조를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-365">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="433a9-366">예외 체인의 모든 예외에 대 한는 `GetBaseException` 메서드 (기본 예외) 동일한 개체를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-366">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="433a9-367">사용 된 `GetBaseException` 메서드 예외의 근본 원인을 찾으려고 하지만 현재 예외와 첫 번째 예외 간에 발생할 수 있는 예외에 대 한 정보가 필요 하지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="433a9-367">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-368">다음 코드 예제에서는 파생 된 두 개의 정의 `Exception` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-368">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="433a9-369">예외를 강제로 수행 하 고 각 파생된 클래스를 사용 하 여 다시 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-369">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="433a9-370">코드의 사용을 보여 줍니다.는 `GetBaseException` 원래 예외를 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-370">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="433a9-371"><see langword="GetBaseException" /> 예외 내용 또는 형식이 제어할 필요가 있는 클래스에서 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-371">The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="exception.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="433a9-372">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-372">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="433a9-373">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-373">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="433a9-374">파생 클래스에서 재정의될 때, 예외에 관한 정보를 <see cref="T:System.Runtime.Serialization.SerializationInfo" />에 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-374">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-375">`GetObjectData`는 serialization을 위해 대상으로 하는 모든 예외 개체 데이터를 사용하여 <xref:System.Runtime.Serialization.SerializationInfo>를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-375">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="433a9-376">deserialization을 수행하는 동안 스트림을 통해 전송된 `SerializationInfo`에서 예외가 다시 구성됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-376">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-377">다음 코드 예제에서는 파생 된 정의 serializable `Exception` 클래스를 구현 하는 `GetObjectData`, 두 개의 속성에 사소한 변경 그러면 및 다음 호출 기본 클래스를 직렬화를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-377">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="433a9-378">이 예제에서는 0으로 나누기 오류를 강제로 파생 예외 인스턴스를 만든 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-378">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="433a9-379">코드 파일에 인스턴스를 serialize, 새 예외를 throw 하는 파일을 deserialize 한 다음를 catch 하 예외 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-379">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="433a9-380"><paramref name="info" />매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)인 경우</span><span class="sxs-lookup"><span data-stu-id="433a9-380">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="433a9-381">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-381">requires full trust for the immediate caller.</span></span> <span data-ttu-id="433a9-382">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-382">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="exception.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="433a9-383">현재 인스턴스의 런타임 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-383">Gets the runtime type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="433a9-384">현재 인스턴스의 정확한 런타임 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-384">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-385">합니다 <xref:System.Exception.GetType%2A> 메서드는.NET Framework 인프라를 지원 하기 위해 존재 하 고 내부적으로 기본 메서드를 호출 <xref:System.Object.GetType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-385">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpLink : string with get, set" Usage="System.Exception.HelpLink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-386">이 예외와 연결된 도움말 파일에 대한 링크를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-386">Gets or sets a link to the help file associated with this exception.</span></span></summary>
        <value><span data-ttu-id="433a9-387">URN(Uniform Resource Name)이거나, URL(Uniform Resource Locator)입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-387">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-388">반환 값은 도움말 파일을 나타내며 URN 또는 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-388">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="433a9-389">예를 들어를 `HelpLink` 값일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-389">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="433a9-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="433a9-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-391">다음 코드 예제에서는 throw는 `Exception` 로 설정 하는 `HelpLink` 생성자 및 다음 catch 된 예외와 표시 속성 `HelpLink`합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-391">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HResult : int with get, set" Usage="System.Exception.HResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-392">특정 예외에 할당된 코드화된 숫자 값인 HRESULT를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-392">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span></span></summary>
        <value><span data-ttu-id="433a9-393">HRESULT 값입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-393">The HRESULT value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-394">HRESULT는 32 비트 값, 다른 세 가지 필드로 구분: 심각도 코드, 기능 코드, 및 오류 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-394">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="433a9-395">심각도 코드는 반환 값 정보, 경고 또는 오류를 나타내는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-395">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="433a9-396">기능 코드 오류에 대 한 시스템 영역을 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-396">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="433a9-397">오류 코드는 예외를 표시에 할당 된 고유 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-397">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="433a9-398">각 예외는 고유한 HRESULT에 매핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-398">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="433a9-399">관리 코드에서 예외를 throw 하는 경우 런타임 HRESULT를 COM 클라이언트에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-399">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="433a9-400">관리 되지 않는 코드 오류를 반환 하는 경우 다음 런타임에 의해 throw 되는 예외를 HRESULT 변환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-400">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="433a9-401">HRESULT 값과 해당 해당.NET Framework 예외에 대 한 정보를 참조 하세요. [방법: Hresult 및 예외 매핑](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-401">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="433a9-402">참조 [일반적인 HRESULT 값](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) 발생할 가능성이 가장 높은 값의 목록은 Windows 문서에서입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-402">See [Common HRESULT Values](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="433a9-403">부터 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Exception.HResult%2A> 반면 해당 getter는 공용 속성의 setter 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-403">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="433a9-404">.NET Framework의 이전 버전에서는 getter 및 setter를 모두 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-404">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-405">다음 코드 예제에서는 파생 된 정의 `Exception` 설정 하는 클래스는 `HResult` 속성을 생성자의 사용자 지정 값입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-405">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/610b364b-2761-429d-9c4a-afbc3e66f1b9"><span data-ttu-id="433a9-406">방법: HRESULT 및 예외 매핑</span><span class="sxs-lookup"><span data-stu-id="433a9-406">How to: Map HRESULTs and Exceptions</span></span></related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx"><span data-ttu-id="433a9-407">일반적인 HRESULT 값</span><span class="sxs-lookup"><span data-stu-id="433a9-407">Common HRESULT Values</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerException : Exception" Usage="System.Exception.InnerException" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-408">현재 예외를 발생시킨 <see cref="T:System.Exception" /> 인스턴스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-408">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span></span></summary>
        <value><span data-ttu-id="433a9-409">현재 예외를 발생시키는 오류를 설명하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-409">An object that describes the error that caused the current exception.</span></span> <span data-ttu-id="433a9-410"><see cref="P:System.Exception.InnerException" /> 속성은 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 생성자로 전달된 것과 동일한 값을 반환하거나 생성자에 내부 예외 값을 제공하지 않은 경우 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-410">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span></span> <span data-ttu-id="433a9-411">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-411">This property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-412">때 예외가 `X` 이전 예외의 직접 결과로 throw 되는 `Y`의 <xref:System.Exception.InnerException%2A> 속성을 `X` 에 대 한 참조를 포함 해야 `Y`합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-412">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="433a9-413">현재 예외의 원인이 된 예외 집합을 얻으려면 <xref:System.Exception.InnerException%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-413">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="433a9-414">이전 예외를 catch 하는 새 예외를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-414">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="433a9-415">예외를 처리는 두 번째 수를 사용 하 여 이전 예외에서 추가 정보를 보다 적절 하 게 오류를 처리 하는 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-415">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="433a9-416">파일을 읽고 해당 파일에서 데이터의 형식을 지정 하는 함수 임을 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-416">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="433a9-417">이 예제에서는 코드 파일을 읽을 하려고로는 <xref:System.IO.IOException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-417">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="433a9-418">함수를 catch 합니다 <xref:System.IO.IOException> throw를 <xref:System.IO.FileNotFoundException>입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-418">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="433a9-419"><xref:System.IO.IOException> 에 저장 될 수는 <xref:System.Exception.InnerException%2A> 의 속성을 <xref:System.IO.FileNotFoundException>를 catch 하는 코드를 사용 하도록 설정는 <xref:System.IO.FileNotFoundException> 초기 오류의 원인을 검토 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-419">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="433a9-420"><xref:System.Exception.InnerException%2A> , 내부 예외에 대 한 참조를 보유 하는 속성은 예외 개체를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-420">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-421">다음 예제에서는 throw 및 내부 예외를 참조 하는 예외를 catch 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-421">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Exception.Message" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-422">현재 예외를 설명하는 메시지를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-422">Gets a message that describes the current exception.</span></span></summary>
        <value><span data-ttu-id="433a9-423">예외의 원인을 설명하는 오류 메시지 또는 빈 문자열("").입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-423">The error message that explains the reason for the exception, or an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-424">오류 메시지는 예외를 처리 하는 개발자를 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-424">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="433a9-425">텍스트는 <xref:System.Exception.Message%2A> 속성 오류를 완벽 하 게 설명 해야 하 고, 가능한 경우 오류를 수정 하는 방법에 설명도 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-425">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="433a9-426">최상위 예외 처리기 문법적으로 올바른 것 및 메시지의 각 문장의 마침표로 끝나는 해야 하므로, 최종 사용자에 게 메시지를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-426">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="433a9-427">물음표 또는 느낌표를 사용 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="433a9-427">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="433a9-428">응용 프로그램에서 지역화 된 예외 메시지를 사용 하는 경우 정확 하 게 변환 하는 것이 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-428">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="433a9-429">적절 한 권한을 확인 하지 않고 예외 메시지에 중요 한 정보를 공개 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-429">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="433a9-430">값을 <xref:System.Exception.Message%2A> 속성에서 반환 된 정보에 포함 되어 <xref:System.Exception.ToString%2A>입니다. 합니다 <xref:System.Exception.Message%2A> 만들 때에 속성이 설정 되어를 <xref:System.Exception>입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-430">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="433a9-431">메시지를 현재 인스턴스에 대 한 생성자에 제공 하는 경우 시스템 현재 시스템 문화권을 사용 하 여 서식이 지정 된 기본 메시지를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-431">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="433a9-432">Windows 런타임 및 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="433a9-432">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="433a9-433">로 시작 합니다 [!INCLUDE[net_v451](~/includes/net-v451-md.md)] 및 [!INCLUDE[win81](~/includes/win81-md.md)], Windows 런타임 형식 및.NET Framework의 일부분이 아닌 멤버에서 전파 되는 예외에서 오류 메시지의 정확도 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-433">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="433a9-434">Visual c + + 구성 요소 확장에서 예외 메시지 특히, (C + + /cli CX) 이제.NET Framework에 다시 전파 됩니다 <xref:System.Exception> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-434">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-435">다음 코드 예제에서는 throw 및 catch 합니다는 <xref:System.Exception> 예외 예외 텍스트를 표시 하 고 사용 하 여 메시지를 <xref:System.Exception.Message%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-435">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="433a9-436">속성에서 예외를 throw 하 고 텍스트에 참조 해야 할 경우 <see cref="P:System.Exception.Message" /> 설정 또는 가져오기 속성 인수, 속성 인수 이름으로 "value"를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-436">If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="433a9-437"><see cref="P:System.Exception.Message" /> 속성 메시지 내용 또는 형식이 제어할 필요가 있는 클래스에서 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-437">The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format.</span></span> <span data-ttu-id="433a9-438">일반적으로 응용 프로그램 코드는 예외 발생 했습니다에 대 한 정보를 표시 해야 할 경우이 속성을 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-438">Application code typically accesses this property when it needs to display information about an exception that has been caught.</span></span>  
  
<span data-ttu-id="433a9-439">오류 메시지를 지역화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-439">The error message should be localized.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberSignature Language="F#" Value="member this.SerializeObjectState : EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " Usage="member this.SerializeObjectState : System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-440">예외에 대한 serialize된 데이터가 들어 있는 예외 상태 개체가 만들어지도록 예외가 serialize될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-440">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-441">예외 상태 개체를 구현 하는 <xref:System.Runtime.Serialization.ISafeSerializationData> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-441">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="433a9-442">경우는 <xref:System.Exception.SerializeObjectState> 이벤트를 구독, 예외는 역직렬화 되 고 빈 예외로 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-442">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="433a9-443">예외의 생성자를 실행 되지 않습니다 및 예외 상태를 역직렬화 할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-443">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="433a9-444"><xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> 예외 상태 개체의 콜백 메서드는 빈 예외를 deserialize 된 데이터를 푸시 수 있도록 다음 알림이 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-444">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="433a9-445"><xref:System.Exception.SerializeObjectState> 이벤트 예외 데이터 직렬화 및 역직렬화를 투명 하 게 예외 형식을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-445">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="433a9-446">투명 코드 수 내에서 작동 하는 권한 집합의 범위 내에서 명령을 실행 하지만 없습니다 실행, 호출, 컨트롤에서 파생 또는 중요 한 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-446">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="433a9-447">경우는 <xref:System.Exception.SerializeObjectState> 이벤트는 구독 하지 않는, 사용 하 여 일반적인 방식으로 deserialization이 발생 합니다 <xref:System.Exception.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-447">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="433a9-448">일반적으로 대 한 처리기를 <xref:System.Exception.SerializeObjectState> 이벤트는 serialization을 위해 제공 하는 예외의 생성자에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-448">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="433a9-449">생성자가 없기 때문에 있지만 될 때 실행 되는 <xref:System.Exception.SerializeObjectState> 이벤트 처리기가 실행, 직렬화 deserialize 된 예외를 throw 할 수 있습니다를 <xref:System.Runtime.Serialization.SerializationException> 예외를 deserialize 하려는 동안 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-449">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="433a9-450">이 방지 하려면 추가 해야에 대 한 처리기를 <xref:System.Exception.SerializeObjectState> 이벤트에는 <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="433a9-450">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="433a9-451">예시 "예" 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="433a9-451">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-452">다음 예제에서는 정의 `BadDivisionException` 처리 하는 <xref:System.Exception.SerializeObjectState> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="433a9-452">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="433a9-453">또한 중첩 된 상태 개체를 포함 라는 구조 `BadDivisionExceptionState` 구현 하는 <xref:System.Runtime.Serialization.ISafeSerializationData> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-453">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="433a9-454">`BadDivisionException` 0으로 부동 소수점 나누기가 발생 하는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-454">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="433a9-455">이 예제에서는 0으로 첫 번째 나누기에서 하는 동안 인스턴스화합니다를 `BadDivisionException` 개체를 serialize 하 고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-455">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="433a9-456">후속 부서 0으로 발생 하는 경우이 예제에서는 이전에 serialize 된 개체를 역직렬화, reserializes, 및 예외를 throw</span><span class="sxs-lookup"><span data-stu-id="433a9-456">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="433a9-457">개체 serialization, deserialization, reserialization, 및 역직렬화를 제공 하려면이 예제에서는 추가 합니다 <xref:System.Exception.SerializeObjectState> 이벤트 처리기 모두에 `BadDivisionException` 클래스 생성자 및를 <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-457">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="433a9-458">이 이벤트 구독을 사용 하는 경우 모든 파생된 형식에 상속 계층 구조에 따라 동일한 serialization 메커니즘을 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-458">If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Exception.Source" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-459">오류를 발생시키는 애플리케이션 또는 개체의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-459">Gets or sets the name of the application or the object that causes the error.</span></span></summary>
        <value><span data-ttu-id="433a9-460">오류를 발생시키는 애플리케이션 또는 개체의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-460">The name of the application or the object that causes the error.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-461">경우는 <xref:System.Exception.Source%2A> 속성이 명시적으로 설정 되지 않은, 런타임 예외가 발생 한 어셈블리의 이름으로 설정 자동으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-461">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-462">다음 예제에서는 throw를 `Exception` 로 설정 하는 `Source` 생성자 및 다음 catch 된 예외와 표시 속성 `Source`.</span><span class="sxs-lookup"><span data-stu-id="433a9-462">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="433a9-463">개체는 런타임 <see cref="N:System.Reflection" /> 개체여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-463">The object must be a runtime <see cref="N:System.Reflection" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StackTrace : string" Usage="System.Exception.StackTrace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-464">호출 스택의 직접 실행 프레임에 대한 문자열 표현을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-464">Gets a string representation of the immediate frames on the call stack.</span></span></summary>
        <value><span data-ttu-id="433a9-465">호출 스택의 직접 실행 프레임을 설명하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-465">A string that describes the immediate frames of the call stack.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-466">실행 스택은 특정 시점에 실행 중인 모든 메서드를 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-466">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="433a9-467">메서드 호출을 추적하는 것을 스택 추적이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-467">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="433a9-468">스택 추적 목록은 예외가 발생 메서드의 줄 번호로 호출 스택을 따를 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-468">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="433a9-469"><xref:System.Exception.StackTrace%2A> 속성은 예외가 throw 된 위치에서 발생 하는 호출 스택의 프레임을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-469">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="433a9-470">새 인스턴스를 만들어 호출 스택에서 추가 프레임에 대 한 정보를 얻을 수 있습니다 합니다 <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> 클래스 및 사용 하 여 해당 <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="433a9-470">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="433a9-471">응용 프로그램 코드에서 예외가 발생 될 때마다 스택 추적을 업데이트 하는 CLR (공용 언어 런타임) (사용 하 여는 `throw` 키워드).</span><span class="sxs-lookup"><span data-stu-id="433a9-471">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="433a9-472">예외는 다른 방법 보다 원래 발생 하는 메서드에서 throw 된, 스택 추적 있으면 여기서 예외가 throw 된 원래, 메서드에서 위치와 메서드에서 예외가 있는 위치 다시 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-472">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="433a9-473">예외는 throw 되 고 나중에 다시 throw를 동일한 메서드에서 스택 추적은 예외가 다시 throw 된 예외 및 예외가 throw 된 원래 위치에 없는 위치만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-473">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="433a9-474"><xref:System.Exception.StackTrace%2A> 속성 수와 같은 코드 변환으로 인해 예상 만큼 많은 메서드 호출을 보고 하지 인라인 처리를 최적화 하는 동안 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-474">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-475">다음 코드 예제에서는 throw를 `Exception` 한 후 catch 하 여 스택 추적을 표시 합니다 `StackTrace` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-475">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="433a9-476"><see langword="StackTrace" /> 속성 스택 추적 내용 또는 형식이 제어할 필요가 있는 클래스에서 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-476">The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.</span></span>  
  
<span data-ttu-id="433a9-477">기본적으로 스택 추적을 예외 개체가 throw 되기 직전 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-477">By default, the stack trace is captured immediately before an exception object is thrown.</span></span> <span data-ttu-id="433a9-478">사용 하 여 <see cref="P:System.Environment.StackTrace" /> 예외가 throw 되는 경우 스택 추적 정보를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-478">Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</span></span></para></block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetSite : System.Reflection.MethodBase" Usage="System.Exception.TargetSite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="433a9-479">현재 예외를 throw하는 메서드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-479">Gets the method that throws the current exception.</span></span></summary>
        <value><span data-ttu-id="433a9-480">현재 예외를 throw하는 <see cref="T:System.Reflection.MethodBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-480">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-481">스택 추적이 null 참조가 아닌 경우 및이 예외를 throw 하는 메서드를 사용할 수 없는 경우 (`Nothing` Visual basic에서), <xref:System.Exception.TargetSite%2A> 스택 추적에서 메서드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-481">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="433a9-482">스택 추적이 null 참조인 경우 <xref:System.Exception.TargetSite%2A>도 null 참조를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-482">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="433a9-483"><xref:System.Exception.TargetSite%2A> 속성 예외 처리기에서 응용 프로그램 도메인 경계를 넘어 예외를 처리 하는 경우 예외가 throw 된 메서드의 이름을 정확 하 게 보고할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-483">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-484">다음 코드 예제에서는 throw를 `Exception` 한 후 catch 하는 원래 메서드를 사용 하 여 표시 된 `TargetSite` 속성.</span><span class="sxs-lookup"><span data-stu-id="433a9-484">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exception.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="433a9-485">현재 예외에 대한 문자열 표현을 만들고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-485">Creates and returns a string representation of the current exception.</span></span></summary>
        <returns><span data-ttu-id="433a9-486">현재 예외에 대한 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-486">A string representation of the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="433a9-487"><xref:System.Exception.ToString%2A> 사용자가 이해할 수에 현재 예외에 대 한 표현을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-487"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="433a9-488">문자열 표현을 반환한 문화권 구분 데이터를 포함 하는 예외, 여기서 `ToString` 현재 시스템 문화권을 고려해 야 할 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-488">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="433a9-489">반환된 된 문자열의 형식에 대 한 정확한 요구 없습니다 있지만, 사용자가 인식된 된 개체의 값을 반영 하도록 시도해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-489">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="433a9-490">기본 구현의 <xref:System.Exception.ToString%2A> 현재 예외, 메시지, 호출의 결과 발생 시킨 클래스의 이름을 가져옵니다 <xref:System.Exception.ToString%2A> 내부 예외를 호출 하는 결과에 <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-490">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="433a9-491">이러한 멤버 중 하나라도 `null`, 값은 반환된 된 문자열에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-491">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="433a9-492">오류 메시지가 없는 경우 또는 빈 문자열인 경우 (""), 오류 메시지가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-492">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="433a9-493">내부 예외 및 스택 추적의 이름을 하지 않은 경우에 반환 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-493">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="433a9-494">이 메서드는 <xref:System.Object.ToString%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-494">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="433a9-495">다음 예제에서는 예외를 발생 하 고 호출의 결과 표시 <xref:System.Exception.ToString%2A> 는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="433a9-495">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="433a9-496">유의 합니다 <xref:System.Exception.ToString%2A?displayProperty=nameWithType> 메서드는 예외 클래스 인스턴스를 사용 하는 인수 목록에 표시 되 면 암시적으로 호출 됩니다는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="433a9-496">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>