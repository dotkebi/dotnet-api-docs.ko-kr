<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd1ce9d661ceaee8286bac06ad73466d6f1f1418" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58741129" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ef677-101"><see cref="T:System.ReadOnlySpan`1" />의 요소에 대한 열거자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-101">Provides an enumerator for the elements of a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="ef677-102">C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) 의 C# 언어 및 [각각에 대 한 중... 다음](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Visual Basic의 구문이 복잡 한 열거자를 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-102">The C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) of the C# language and the [For Each...Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="ef677-103">직접 사용 하 여 열거자를 조작 하는 대신 `foreach` 또는 `For Each...Next` 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="ef677-104">열거자의 첫 번째 요소 앞에 위치는 처음에 <xref:System.ReadOnlySpan`1>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-104">Initially, the enumerator is positioned before the first element in the <xref:System.ReadOnlySpan`1>.</span></span> <span data-ttu-id="ef677-105">이 위치에서 <xref:System.ReadOnlySpan`1.Enumerator.Current>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-105">At this position, <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="ef677-106">호출 해야 합니다 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 하 여 열거자의 첫 번째 항목으로 이동 합니다 <xref:System.ReadOnlySpan`1> 의 값을 읽기 전에 <xref:System.ReadOnlySpan`1.Enumerator.Current>입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-106">You must call <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.ReadOnlySpan`1> before reading the value of <xref:System.ReadOnlySpan`1.Enumerator.Current>.</span></span>

<span data-ttu-id="ef677-107"><xref:System.ReadOnlySpan`1.Enumerator.Current> 반환 될 때까지 동일한 값 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-107"><xref:System.ReadOnlySpan`1.Enumerator.Current> returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="ef677-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 설정 <xref:System.ReadOnlySpan`1.Enumerator.Current> 에서 다음 항목으로는 <xref:System.ReadOnlySpan`1>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> sets <xref:System.ReadOnlySpan`1.Enumerator.Current> to the next item in the <xref:System.ReadOnlySpan`1>.</span></span>

<span data-ttu-id="ef677-109">경우 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 의 끝을 통과 합니다 <xref:System.ReadOnlySpan`1>를 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-109">If <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> passes the end of the <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ef677-110">이 상태에서 후속 호출에서 열거자의 경우 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 반환할 수도 `false` 및 <xref:System.ReadOnlySpan`1.Enumerator.Current> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-110">When the enumerator is at this state, subsequent calls to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> also return `false` and <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="ef677-111">설정할 수 없습니다 <xref:System.ReadOnlySpan`1.Enumerator.Current> 의 첫 번째 항목에는 <xref:System.ReadOnlySpan`1> 다시 새 열거자 인스턴스를 대신 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-111">You cannot set <xref:System.ReadOnlySpan`1.Enumerator.Current> to the first item in the <xref:System.ReadOnlySpan`1> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="ef677-112">하지만 합니다 <xref:System.ReadOnlySpan`1> 기본 데이터가 스택에 할당 됩니다는 <xref:System.ReadOnlySpan`1> 가리킵니다, 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-112">Though the <xref:System.ReadOnlySpan`1> is allocated on the stack, the underlying data on which the <xref:System.ReadOnlySpan`1> points to, may not be.</span></span> <span data-ttu-id="ef677-113">따라서 열거는 <xref:System.ReadOnlySpan`1> 은 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-113">Therefore, enumerating through a <xref:System.ReadOnlySpan`1> is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="ef677-114">을 열거 하는 동안 스레드로부터 안전을 보장 하기 위해 고유한 동기화를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-114">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span>

<span data-ttu-id="ef677-115">.NET에서는 몇 가지 다른 열거자 구조와는 달리는 <xref:System.ReadOnlySpan`1.Enumerator>:</span><span class="sxs-lookup"><span data-stu-id="ef677-115">Unlike some other enumerator structures in .NET, the <xref:System.ReadOnlySpan`1.Enumerator>:</span></span>

- <span data-ttu-id="ef677-116">구현 하지 않는 합니다 <xref:System.Collections.IEnumerator> 또는 <xref:System.Collections.Generic.IEnumerator`1> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-116">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator`1> interface.</span></span> <span data-ttu-id="ef677-117">때문에 이것이 <xref:System.ReadOnlySpan`1.Enumerator> 되는 [ref 구조체](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) 및 boxed 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-117">This is because <xref:System.ReadOnlySpan`1.Enumerator> is a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) and cannot be boxed.</span></span>

- <span data-ttu-id="ef677-118">포함 되지 않습니다는 `Reset` 메서드를 범위에서 첫 번째 요소 앞의 초기 위치에 열거자를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-118">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="ef677-119">(의 <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 인터페이스의 일부로 메서드를 구현 해야 하지만 대부분의 구현자 또는 예외를 throw 하지 구현을 제공 합니다.)</span><span class="sxs-lookup"><span data-stu-id="ef677-119">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef677-120">열거자의 현재 위치에 있는 항목에 대한 참조를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-120">Gets a reference to the item at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="ef677-121"><see cref="T:System.ReadOnlySpan`1" />에서 열거자의 현재 위치에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-121">The element in the <see cref="T:System.ReadOnlySpan`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="ef677-122">`Current` 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-122">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="ef677-123">열거자가 만들어진 후에 즉시 열거자는 범위의 첫 번째 요소 앞 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-123">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="ef677-124"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 호출 하 여 열거자를 범위의 첫 번째 요소 값을 읽기 전에 `Current`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-124"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="ef677-125">마지막으로 호출한 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 반환 `false`, 범위의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-125">The last call to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="ef677-126">`Current` 반환 될 때까지 동일한 값 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-126">`Current` returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> is called.</span></span> <span data-ttu-id="ef677-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 설정 `Current` 범위에서 다음 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> sets `Current` to the next item in the span.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef677-128">열거자를 <see cref="System.ReadOnlySpan`1" />의 다음 항목으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-128">Advances the enumerator to the next item of the <see cref="System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="ef677-129">열거자가 다음 항목으로 이동한 경우 `true`이며, 범위의 끝을 지난 경우 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-129">`true` if the enumerator successfully advanced to the next item; `false` if the end of the span has been passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="ef677-130">범위를 첫 번째 호출에서 첫 번째 요소 앞 위치가 열거자를 만든 후 `MoveNext` 열거자 범위에서 첫 번째 항목으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-130">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="ef677-131">하는 경우 `MoveNext` 범위의 끝을 통과 `MoveNext` 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-131">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="ef677-132">이 상태에서 후속 호출에서 열거자의 경우 `MoveNext` 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef677-132">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>