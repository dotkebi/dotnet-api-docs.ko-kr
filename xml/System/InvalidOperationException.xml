<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89749bf02df9a8d6c5e7e5c2116035169c68ca99" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58724300" /></Metadata><TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="32b8d-101">메서드 호출이 개체의 현재 상태에 대해 유효하지 않을 때 throw되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-101">The exception that is thrown when a method call is invalid for the object's current state.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32b8d-102"><xref:System.InvalidOperationException> 잘못 된 인수 이외의 이유로 인해 메서드 호출에 실패 하는 경우에 경우에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-102"><xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</span></span> <span data-ttu-id="32b8d-103">일반적으로 개체의 상태는이 메서드를 지원할 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-103">Typically, it is thrown when the state of an object cannot support the method call.</span></span> <span data-ttu-id="32b8d-104">예를 들어는 <xref:System.InvalidOperationException> 같은 메서드에서 throw 된 예외:</span><span class="sxs-lookup"><span data-stu-id="32b8d-104">For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:</span></span>  
  
-   <span data-ttu-id="32b8d-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> 컬렉션의 개체 후 수정 되는 경우 열거자 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> if objects of a collection are modified after the enumerator is created.</span></span> <span data-ttu-id="32b8d-106">자세한 내용은 [것을 반복 하는 동안 컬렉션을 변경](#Iterating)합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-106">For more information, see [Changing a collection while iterating it](#Iterating).</span></span>  
  
-   <span data-ttu-id="32b8d-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> 리소스 집합을 닫은 후에 메서드 호출이 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> if the resource set is closed before the method call is made.</span></span>  
  
-   <span data-ttu-id="32b8d-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>에 추가할 개체를 잘못 구조화 된 XML 문서에서 초래 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="32b8d-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, if the object or objects to be added would result in an incorrectly structured XML document.</span></span>  
  
-   <span data-ttu-id="32b8d-109">UI 없는 주 스레드나 UI 스레드를 조작 하려고 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-109">A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="32b8d-110">때문에 합니다 <xref:System.InvalidOperationException> 예외를 throw 다양 한 상황을에서는 반환 된 예외 메시지를 꼭 읽으십시오는 <xref:System.Exception.Message%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-110">Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.</span></span>  
  
 <span data-ttu-id="32b8d-111">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="32b8d-111">In this section:</span></span>  
  
 <span data-ttu-id="32b8d-112">[몇 가지 일반적인 원인은 InvalidOperationException 예외](#Causes) </span><span class="sxs-lookup"><span data-stu-id="32b8d-112">[Some common causes of InvalidOperationException exceptions](#Causes) </span></span>  
 [<span data-ttu-id="32b8d-113">UI가 아닌 스레드에서 UI 스레드를 업데이트 하는 중</span><span class="sxs-lookup"><span data-stu-id="32b8d-113">Updating a UI thread from a non-UI thread</span></span>](#UI)  
 [<span data-ttu-id="32b8d-114">이 반복 하는 동안 컬렉션 변경</span><span class="sxs-lookup"><span data-stu-id="32b8d-114">Changing a collection while iterating it</span></span>](#Iterating)  
 [<span data-ttu-id="32b8d-115">해당 개체를 비교할 수 없습니다 배열 또는 컬렉션 정렬</span><span class="sxs-lookup"><span data-stu-id="32b8d-115">Sorting an array or collection whose objects cannot be compared</span></span>](#Sorting)  
 <span data-ttu-id="32b8d-116">[Nullable 캐스팅&lt;T&gt; 해당 기본 형식에 null이](#Nullable) </span><span class="sxs-lookup"><span data-stu-id="32b8d-116">[Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) </span></span>  
 [<span data-ttu-id="32b8d-117">빈 컬렉션에 System.Linq.Enumerable 메서드가 호출</span><span class="sxs-lookup"><span data-stu-id="32b8d-117">Calling a System.Linq.Enumerable method on an empty collection</span></span>](#Empty)  
 [<span data-ttu-id="32b8d-118">하나의 요소가 없는 시퀀스에서 Enumerable.Single 또는 Enumerable.SingleOrDefault 호출</span><span class="sxs-lookup"><span data-stu-id="32b8d-118">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>](#Single)  
 [<span data-ttu-id="32b8d-119">동적 응용 프로그램 간 도메인 필드 액세스</span><span class="sxs-lookup"><span data-stu-id="32b8d-119">Dynamic cross-application domain field access</span></span>](#Emit)  
[<span data-ttu-id="32b8d-120">InvalidOperationException 예외를 throw</span><span class="sxs-lookup"><span data-stu-id="32b8d-120">Throwing an InvalidOperationException exception</span></span>](#Throwing)  
[<span data-ttu-id="32b8d-121">기타 정보</span><span class="sxs-lookup"><span data-stu-id="32b8d-121">Miscellaneous information</span></span>](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a><span data-ttu-id="32b8d-122">몇 가지 일반적인 원인은 InvalidOperationException 예외</span><span class="sxs-lookup"><span data-stu-id="32b8d-122">Some common causes of InvalidOperationException exceptions</span></span>  
 <span data-ttu-id="32b8d-123">다음 섹션에는 몇 가지 일반적인 경우 하는 방법을 보여 줍니다. <xref:System.InvalidOperationException> 앱에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-123">The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app.</span></span> <span data-ttu-id="32b8d-124">문제를 처리 하는 방법은 특정 상황에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-124">How you handle the issue depends on the specific situation.</span></span> <span data-ttu-id="32b8d-125">가장 일반적으로 단, 예외에서에서 결과 개발자 오류 및 <xref:System.InvalidOperationException> 예외를 예상 하 고 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-125">Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.</span></span>  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a><span data-ttu-id="32b8d-126">UI가 아닌 스레드에서 UI 스레드를 업데이트 하는 중</span><span class="sxs-lookup"><span data-stu-id="32b8d-126">Updating a UI thread from a non-UI thread</span></span>  
 <span data-ttu-id="32b8d-127">종종 작업자 스레드 응용 프로그램의 사용자 인터페이스에 표시 되는 데이터 수집을 포함 하는 몇 가지 백그라운드 작업 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-127">Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</span></span> <span data-ttu-id="32b8d-128">그러나 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-128">However.</span></span> <span data-ttu-id="32b8d-129">Windows Forms 및 Windows Presentation Foundation (WPF) 등.NET Framework에 대 한 대부분의 GUI (그래픽 사용자 인터페이스) 응용 프로그램 프레임 워크를 사용 하면 수 스레드를 만들고 관리 UI (기본 또는 UI 스레드) 에서만 GUI 개체에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-129">most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</span></span> <span data-ttu-id="32b8d-130"><xref:System.InvalidOperationException> UI 스레드가 아닌 스레드에서 UI 요소에 액세스 하려고 할 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-130">An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.</span></span>  <span data-ttu-id="32b8d-131">예외 메시지의 텍스트는 다음 표에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-131">The text of the exception message is shown in the following table.</span></span>  
  
|<span data-ttu-id="32b8d-132">응용 프로그램 종류</span><span class="sxs-lookup"><span data-stu-id="32b8d-132">Application Type</span></span>|<span data-ttu-id="32b8d-133">메시지</span><span class="sxs-lookup"><span data-stu-id="32b8d-133">Message</span></span>|  
|----------------------|-------------|  
|<span data-ttu-id="32b8d-134">WPF 앱</span><span class="sxs-lookup"><span data-stu-id="32b8d-134">WPF app</span></span>|<span data-ttu-id="32b8d-135">**호출 스레드가 소유 하는 다른 스레드가이 개체를 액세스할 수 없습니다.**</span><span class="sxs-lookup"><span data-stu-id="32b8d-135">**The calling thread cannot access this object because a different thread owns it.**</span></span>|  
|<span data-ttu-id="32b8d-136">UWP 앱</span><span class="sxs-lookup"><span data-stu-id="32b8d-136">UWP app</span></span>|<span data-ttu-id="32b8d-137">**응용 프로그램이 다른 스레드에 대 한 마샬링된 된 인터페이스를 호출 합니다.**</span><span class="sxs-lookup"><span data-stu-id="32b8d-137">**The application called an interface that was marshalled for a different thread.**</span></span>|  
|<span data-ttu-id="32b8d-138">Windows Forms 앱</span><span class="sxs-lookup"><span data-stu-id="32b8d-138">Windows Forms app</span></span>|<span data-ttu-id="32b8d-139">**크로스 스레드 작업이 잘못 되었습니다. 컨트롤 'TextBox1' 스레드가 아닌 스레드에서 액세스 되었습니다.**</span><span class="sxs-lookup"><span data-stu-id="32b8d-139">**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**</span></span>|  
  
 <span data-ttu-id="32b8d-140">.NET Framework에 대 한 UI 프레임 워크 구현 된 *발송자* UI 요소의 멤버에 대 한 호출을 UI 스레드에서 실행 되는지를 확인 하는 메서드 및 UI 스레드에서 호출을 예약 하는 기타 메서드가 포함 된 패턴:</span><span class="sxs-lookup"><span data-stu-id="32b8d-140">UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</span></span>  
  
-   <span data-ttu-id="32b8d-141">WPF 앱에서 호출 된 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> UI가 아닌 스레드에서 메서드를 실행 중인지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-141">In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="32b8d-142">반환 `true` 메서드는 UI 스레드에서 실행 중인 경우 및 `false` 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="32b8d-142">It returns `true` if the method is running on the UI thread and `false` otherwise.</span></span> <span data-ttu-id="32b8d-143">오버 로드 중 하나를 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> UI 스레드에서 호출을 예약 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-143">Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> method to schedule the call on the UI thread.</span></span>  
  
-   <span data-ttu-id="32b8d-144">UWP 앱에서 호출 된 [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) UI가 아닌 스레드에서 메서드를 실행 중인지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-144">In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="32b8d-145">호출 된 [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) UI 스레드를 업데이트 하는 대리자를 실행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-145">Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread.</span></span> <span data-ttu-id="32b8d-146">명령줄에서</span><span class="sxs-lookup"><span data-stu-id="32b8d-146">Use the</span></span>  
  
-   <span data-ttu-id="32b8d-147">Windows Forms 앱에서 사용 된 <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> UI가 아닌 스레드에서 메서드를 실행 하는 경우를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-147">In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="32b8d-148">오버 로드 중 하나를 호출 하 여 <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> UI 스레드를 업데이트 하는 대리자를 실행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-148">Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span>  
  
 <span data-ttu-id="32b8d-149">다음 예제는 설명의 <xref:System.InvalidOperationException> 만든 스레드가 아닌 스레드에서 UI 요소를 업데이트 하려고 할 때 throw 되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-149">The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</span></span>  <span data-ttu-id="32b8d-150">각 예제에서는 두 개의 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-150">Each example requires that you create two controls:</span></span>  
  
-   <span data-ttu-id="32b8d-151">텍스트 상자 컨트롤 이라는 `textBox1`합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-151">A text box control named `textBox1`.</span></span>  <span data-ttu-id="32b8d-152">설정 해야 하는 Windows Forms 앱에서 해당 <xref:System.Windows.Forms.TextBox.Multiline%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-152">In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.</span></span>  
  
-   <span data-ttu-id="32b8d-153">이라는 button 컨트롤과 `threadExampleBtn`합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-153">A button  control named `threadExampleBtn`.</span></span> <span data-ttu-id="32b8d-154">이 예제에서는 처리기를 제공 `ThreadsExampleBtn_Click`, 단추에 대 한 `Click` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-154">The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.</span></span>  
  
 <span data-ttu-id="32b8d-155">각각의 경우에는 `threadExampleBtn_Click` 이벤트 처리기 호출을 `DoSomeWork` 메서드를 두 번입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-155">In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice.</span></span> <span data-ttu-id="32b8d-156">첫 번째 호출은 동기적으로 실행 되 고 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-156">The first call runs synchronously and succeeds.</span></span> <span data-ttu-id="32b8d-157">하지만 두 번째 호출에서 스레드 풀 스레드에서 비동기적으로 실행 되기 때문에 하려고 UI가 아닌 스레드에서 UI를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-157">But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</span></span> <span data-ttu-id="32b8d-158">이 인해는 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-158">This results in a <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="32b8d-159">WPF 및 UWP 앱</span><span class="sxs-lookup"><span data-stu-id="32b8d-159">WPF and UWP apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 <span data-ttu-id="32b8d-160">다음 버전의 `DoSomeWork` 메서드 WPF 앱에서 예외를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-160">The following version of the `DoSomeWork` method eliminates the exception in a WPF app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 <span data-ttu-id="32b8d-161">다음 버전의 `DoSomeWork` 메서드 UWP 앱에서 예외를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-161">The following version of the `DoSomeWork` method eliminates the exception in a UWP app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 <span data-ttu-id="32b8d-162">Windows Forms 앱</span><span class="sxs-lookup"><span data-stu-id="32b8d-162">Windows Forms apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 <span data-ttu-id="32b8d-163">다음 버전의 `DoSomeWork` 메서드는 Windows Forms 앱에서 예외를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-163">The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a><span data-ttu-id="32b8d-164">이 반복 하는 동안 컬렉션 변경</span><span class="sxs-lookup"><span data-stu-id="32b8d-164">Changing a collection while iterating it</span></span>  
 <span data-ttu-id="32b8d-165">합니다 `foreach` C#의 문은 또는 `For Each` 컬렉션의 멤버를 반복할 읽기 또는 해당 개별 요소를 수정 하려면 Visual Basic에서 문이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-165">The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</span></span> <span data-ttu-id="32b8d-166">그러나 추가 하거나 컬렉션에서 항목을 제거 하려면 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-166">However, it can't be used to add or remove items from the collection.</span></span> <span data-ttu-id="32b8d-167">Throw이 수행 하는 <xref:System.InvalidOperationException> 에 유사한 메시지와 함께 예외 "**컬렉션이 수정 되었습니다. 열거 작업이 실행 되지 않을 수 있습니다.** "</span><span class="sxs-lookup"><span data-stu-id="32b8d-167">Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, "**Collection was modified; enumeration operation may not execute.**"</span></span>  
  
 <span data-ttu-id="32b8d-168">다음 예제에서는 컬렉션에 각 정수에 대 한 제곱을 추가 하 려 하면 정수 컬렉션을 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-168">The following example iterates a collection of integers attempts to add the square of each integer to the collection.</span></span> <span data-ttu-id="32b8d-169">이 예제에서는 throw를 <xref:System.InvalidOperationException> 첫 번째 호출을 사용 하 여는 <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-169">The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 <span data-ttu-id="32b8d-170">응용 프로그램 논리에 따라 두 가지 방법 중 하나에서 예외를 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-170">You can eliminate the exception in one of two ways, depending on your application logic:</span></span>  
  
-   <span data-ttu-id="32b8d-171">이 반복 하는 동안 컬렉션에 요소를 추가 해야 할 인덱스를 사용 하 여 반복할 수 있습니다 합니다 `for` 대신 문을 `foreach` 또는 `For Each`합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-171">If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`.</span></span> <span data-ttu-id="32b8d-172">다음 예에서는 컬렉션에 컬렉션에 있는 숫자의 제곱을 추가 하는 문에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-172">The following example uses the for statement to add the square of numbers in the collection to the collection.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     <span data-ttu-id="32b8d-173">뒤로 반복 하 여 루프를 적절 하 게 종료 됩니다 루프 카운터를 사용 하 여 컬렉션을 반복 하기 전에 반복 횟수를 설정 해야 하는 참고에서 `Count` -1에서 0 또는 번호를 할당 하 여 예제와 같이 루프의 상한값을 설정 하는 데 사용 하는 변수 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-173">Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropriately, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</span></span> <span data-ttu-id="32b8d-174">그렇지 않으면 요소 반복 될 때마다 컬렉션에 추가 되 면 무한 루프가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-174">Otherwise, if an element is added to the collection on every iteration, an endless loop results.</span></span>  
  
-   <span data-ttu-id="32b8d-175">이 반복 하는 동안 컬렉션에 요소를 추가할 필요가 없는 경우 컬렉션을 반복 마치면 추가한 임시 컬렉션에 추가 될 요소를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-175">If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</span></span>  <span data-ttu-id="32b8d-176">다음 예제에서는이 방법을 사용 하 여 숫자의 제곱 임시 컬렉션을 컬렉션에 추가 및 단일 배열 개체로 컬렉션을 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-176">The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a><span data-ttu-id="32b8d-177">해당 개체를 비교할 수 없습니다 배열 또는 컬렉션 정렬</span><span class="sxs-lookup"><span data-stu-id="32b8d-177">Sorting an array or collection whose objects cannot be compared</span></span>  
 <span data-ttu-id="32b8d-178">정렬 메서드의 같은 범용 합니다 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 메서드 또는 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 메서드를 일반적으로 필요 구현 하는 하나 이상의 개체를 정렬할 합니다 <xref:System.IComparable%601> 또는 <xref:System.IComparable> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="32b8d-178">General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="32b8d-179">그렇지 않은 컬렉션 또는 배열을 정렬할 수 없습니다, 하 고 메서드가 throw는 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-179">If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception.</span></span> <span data-ttu-id="32b8d-180">다음 예제에서는 정의 `Person` 클래스에 두 개의 저장소 `Person` 개체를 일반에서 <xref:System.Collections.Generic.List%601> 개체 및 정렬 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-180">The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them.</span></span> <span data-ttu-id="32b8d-181">예제에 대 한 호출의 출력으로는 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-181">As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException>.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 <span data-ttu-id="32b8d-182">세 가지 방법 중 하나에서 예외를 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-182">You can eliminate the exception in any of three ways:</span></span>  
  
-   <span data-ttu-id="32b8d-183">(즉, 제어할 경우 소스 코드)를 정렬 하려고 하는 형식을 소유할 수 있습니다, 구현할를 수정할 수 있습니다 합니다 <xref:System.IComparable%601> 또는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-183">If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="32b8d-184">이 위해서는 중 하나를 구현 합니다 <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> 또는 <xref:System.IComparable.CompareTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-184">This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> or the <xref:System.IComparable.CompareTo%2A> method.</span></span> <span data-ttu-id="32b8d-185">인터페이스를 구현할 때 기존 형식에 추가 되었습니다 크게 변경 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-185">Adding an interface implementation to an existing type is not a breaking change.</span></span>  
  
     <span data-ttu-id="32b8d-186">다음 예제에서는이 방법을 사용 하 여 제공을 <xref:System.IComparable%601> 에 대 한 구현을 `Person` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-186">The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class.</span></span> <span data-ttu-id="32b8d-187">컬렉션 또는 배열의 일반 정렬 메서드를 호출할 수 있습니다 및 예제의 출력에서 볼 수 있듯이 컬렉션 정렬 했습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-187">You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   <span data-ttu-id="32b8d-188">정렬 하려는 형식에 대 한 소스 코드를 수정할 수 없는 경우 구현 하는 특수 한 용도의 정렬 클래스를 정의할 수 있습니다는 <xref:System.Collections.Generic.IComparer%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-188">If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.</span></span>  <span data-ttu-id="32b8d-189">오버 로드를 호출할 수 있습니다 합니다 `Sort` 포함 하는 메서드는 <xref:System.Collections.Generic.IComparer%601> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-189">You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter.</span></span> <span data-ttu-id="32b8d-190">이 방법은 여러 조건을 기반으로 하는 개체를 정렬할 수 있는 특수 한 정렬 클래스를 개발 하려는 경우에 특히 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-190">This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</span></span>  
  
     <span data-ttu-id="32b8d-191">다음 예제에서는 사용자 지정을 개발 하 여 방법을 사용 `PersonComparer` 정렬 하는 데 사용 되는 클래스 `Person` 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-191">The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.</span></span>  <span data-ttu-id="32b8d-192">그런 다음이 클래스의 인스턴스로 전달 된 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-192">It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   <span data-ttu-id="32b8d-193">형식에 대 한 소스 코드를 수정할 수 없는 경우 정렬 하려는 경우 만들 수 있습니다는 <xref:System.Comparison%601> 정렬을 수행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-193">If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting.</span></span> <span data-ttu-id="32b8d-194">대리자 시그니처는</span><span class="sxs-lookup"><span data-stu-id="32b8d-194">The delegate signature is</span></span>  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     <span data-ttu-id="32b8d-195">다음 예제에서는 정의한 방법을 사용을 `PersonComparison` 일치 하는 메서드는 <xref:System.Comparison%601> 대리자 시그니처입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-195">The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.</span></span>  <span data-ttu-id="32b8d-196">그런 다음이 대리자에 전달 된 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-196">It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a><span data-ttu-id="32b8d-197">Nullable 캐스팅\<T >는 해당 기본 형식에 null</span><span class="sxs-lookup"><span data-stu-id="32b8d-197">Casting a Nullable\<T> that is null to its underlying type</span></span>  
 <span data-ttu-id="32b8d-198">캐스팅 하려고를 <xref:System.Nullable%601> 값이 `null` 해당 기본 형식에 throw는 <xref:System.InvalidOperationException> 예외 오류 메시지를 표시 하 고 "**Nullable 개체 값이 있어야 합니다.**</span><span class="sxs-lookup"><span data-stu-id="32b8d-198">Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, "**Nullable object must have a value.**</span></span>  
  
 <span data-ttu-id="32b8d-199">다음 예제에서는 throw를 <xref:System.InvalidOperationException> 포함 된 배열을 반복 하려고 할 때 예외를 `Nullable(Of Integer)` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-199">The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 <span data-ttu-id="32b8d-200">예외를 방지할:</span><span class="sxs-lookup"><span data-stu-id="32b8d-200">To prevent the exception:</span></span>  
  
-   <span data-ttu-id="32b8d-201">사용 된 <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> 속성을 선택 하지 않은 요소만 `null`.</span><span class="sxs-lookup"><span data-stu-id="32b8d-201">Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> property to select only those elements that are not `null`.</span></span>  
  
-   <span data-ttu-id="32b8d-202">중 하나를 호출 합니다 <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> 오버 로드에 대 한 기본 값을 제공 하는 `null` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-202">Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> overloads to provide a default value for a `null` value.</span></span>  
  
 <span data-ttu-id="32b8d-203">다음 예제와 방지 하려면 둘 다를 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-203">The following example does both to avoid the  <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a><span data-ttu-id="32b8d-204">빈 컬렉션에 System.Linq.Enumerable 메서드가 호출</span><span class="sxs-lookup"><span data-stu-id="32b8d-204">Calling a System.Linq.Enumerable method on an empty collection</span></span>  
 <span data-ttu-id="32b8d-205"><xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, 및 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드 시퀀스에 대 한 작업을 수행 하 고 단일 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-205">The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods perform operations on a sequence and return a single result.</span></span>   <span data-ttu-id="32b8d-206">이러한 메서드의 일부 오버 로드를 throw 한 <xref:System.InvalidOperationException> 시퀀스가 비어 있지만 다른 오버 로드를 반환 하는 동안 예외가 발생 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-206">Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`.</span></span> <span data-ttu-id="32b8d-207"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드는 또한 throw는 <xref:System.InvalidOperationException> 시퀀스에 요소가 둘 이상 포함 하는 동안 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-207">The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="32b8d-208">대부분의 throw 하는 메서드는 <xref:System.InvalidOperationException> 예외는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-208">Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads.</span></span> <span data-ttu-id="32b8d-209">선택 하는 오버 로드의 동작을 이해 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-209">Be sure that you understand the behavior of the overload that you choose.</span></span>  
  
 <span data-ttu-id="32b8d-210">다음 표에서에서 예외 메시지를 <xref:System.InvalidOperationException> 일부에 대 한 호출에서 throw 된 예외 개체 <xref:System.Linq.Enumerable?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-210">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="32b8d-211">메서드</span><span class="sxs-lookup"><span data-stu-id="32b8d-211">Method</span></span>|<span data-ttu-id="32b8d-212">메시지</span><span class="sxs-lookup"><span data-stu-id="32b8d-212">Message</span></span>|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|<span data-ttu-id="32b8d-213">**시퀀스에 요소가 없습니다.**</span><span class="sxs-lookup"><span data-stu-id="32b8d-213">**Sequence contains no elements**</span></span>|  
|`First`|<span data-ttu-id="32b8d-214">**시퀀스에 일치 하는 요소가 없으면**</span><span class="sxs-lookup"><span data-stu-id="32b8d-214">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="32b8d-215">**시퀀스에 일치 하는 요소가 둘 이상**</span><span class="sxs-lookup"><span data-stu-id="32b8d-215">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="32b8d-216">제거 하거나 예외를 처리 하는 방법을 호출 하는 특정 방법 및 응용 프로그램의 가정에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-216">How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</span></span>  
  
-   <span data-ttu-id="32b8d-217">의도적으로 하나를 호출 하면 이러한 메서드의 빈 시퀀스를 확인 하지 않고, 시퀀스가 비어 있지 않으면 이며 빈 시퀀스는 예상치 못한 동작 이라고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-217">When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</span></span> <span data-ttu-id="32b8d-218">이 예제의 예외 다시 throw 또는 catch 할 적절 한 경우.</span><span class="sxs-lookup"><span data-stu-id="32b8d-218">In this case, catching or rethrowing the exception is appropriate .</span></span>  
  
-   <span data-ttu-id="32b8d-219">빈 시퀀스를 확인 하지 못하면 의도 하지 않은 경우, 오버 로드 중 하나를 호출할 수 있습니다는 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> 오버 로드를 시퀀스에 요소가 하나라도 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-219">If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> overload to determine whether a sequence contains any elements.</span></span>  
  
    > [!TIP]
    >  <span data-ttu-id="32b8d-220">호출 된 <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 메서드 시퀀스를 생성 하기 전에 처리할 데이터를 많은 수의 요소 또는 시퀀스를 생성 하는 작업은 비용이 많이 드는 경우 있을 경우 성능을 개선할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-220">Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</span></span>  
  
-   <span data-ttu-id="32b8d-221">와 같은 메서드를 호출 하는 경우 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, 또는 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>와 같은 다른 방법 대신 사용할 수 있습니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, 또는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, 시퀀스의 멤버가 아닌 기본 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-221">If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, that returns a default value instead of a member of the sequence.</span></span>  
  
 <span data-ttu-id="32b8d-222">예제 추가 정보를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-222">The examples provide additional detail.</span></span>  
  
 <span data-ttu-id="32b8d-223">다음 예제에서는 <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> 해당 값은 4 보다 큰 시퀀스의 평균을 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-223">The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> method to compute the average of a sequence whose values are greater than 4.</span></span> <span data-ttu-id="32b8d-224">원래 배열에서 값이 없는 초과 4, 값이 없는 시퀀스에 포함 되 고 메서드에서 throw 하므로 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-224">Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 <span data-ttu-id="32b8d-225">예외를 호출 하 여 제거할 수는 <xref:System.Linq.Enumerable.Any%2A> 다음 예와 같이 시퀀스를 처리 하는 메서드를 호출 하기 전에 시퀀스에 요소가 하나라도 있는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-225">The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <span data-ttu-id="32b8d-226"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 메서드 시퀀스 또는 지정된 된 조건을 만족 하는 시퀀스의 첫 번째 요소에서 첫 번째 항목을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-226">The <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</span></span> <span data-ttu-id="32b8d-227">Throw 시퀀스 비어 있고 따라서 첫 번째 요소를 없습니다, 하는 경우는 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-227">If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="32b8d-228">다음 예제에서는 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException> 예외 dbQueryResults 배열 4 보다 큰 요소가 없으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-228">In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <span data-ttu-id="32b8d-229">호출할 수 있습니다 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> 메서드 대신 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 지정 된 반환 값 이나 기본값을 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-229">You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> to return a specified or default value.</span></span> <span data-ttu-id="32b8d-230">메서드 시퀀스의 첫 번째 요소를 찾지 못하면 해당 데이터 형식에 대 한 기본값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-230">If the method does not find a first element in the sequence, it returns  the default value for that data type.</span></span>  <span data-ttu-id="32b8d-231">기본값은 `null` 숫자 데이터 형식에 대 한 0 참조 형식의 경우 및 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 에 대 한는 <xref:System.DateTime> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-231">The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=nameWithType> for the <xref:System.DateTime> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="32b8d-232">반환 된 값을 해석 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> 메서드는 종종 복잡 형식의 기본 값 시퀀스의 유효한 값 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-232">Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</span></span> <span data-ttu-id="32b8d-233">호출 하면이 경우에는 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> 시퀀스 호출 하기 전에 유효한 구성원에 있는지 여부를 결정 하는 방법의 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-233">In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="32b8d-234">다음 예제에서는 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 방지 하기 위해 메서드를 <xref:System.InvalidOperationException> 이전 예제에서 throw 된 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-234">The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a><span data-ttu-id="32b8d-235">하나의 요소가 없는 시퀀스에서 Enumerable.Single 또는 Enumerable.SingleOrDefault 호출</span><span class="sxs-lookup"><span data-stu-id="32b8d-235">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>  
 <span data-ttu-id="32b8d-236"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드는 시퀀스의 유일한 요소 또는 지정된 된 조건을 충족 하는 시퀀스의 유일한 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-236">The <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</span></span>    <span data-ttu-id="32b8d-237">시퀀스에 요소가 있는 경우 또는 메서드에서 throw 하는 요소가 둘 이상 있으면는 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-237">If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="32b8d-238">사용할 수는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 시퀀스에 요소가 없는 경우 예외를 throw 하는 대신 기본값을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-238">You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method to return a default value instead of throwing an exception when the sequence contains no elements.</span></span> <span data-ttu-id="32b8d-239">그러나 합니다 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드를 계속 throw는 <xref:System.InvalidOperationException> 시퀀스에 요소가 둘 이상 포함 하는 동안 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-239">However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="32b8d-240">다음 표에서에서 예외 메시지를 <xref:System.InvalidOperationException> 에 대 한 호출에서 throw 된 예외 개체를 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 및 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-240">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="32b8d-241">메서드</span><span class="sxs-lookup"><span data-stu-id="32b8d-241">Method</span></span>|<span data-ttu-id="32b8d-242">메시지</span><span class="sxs-lookup"><span data-stu-id="32b8d-242">Message</span></span>|  
|------------|-------------|  
|`Single`|<span data-ttu-id="32b8d-243">**시퀀스에 일치 하는 요소가 없으면**</span><span class="sxs-lookup"><span data-stu-id="32b8d-243">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="32b8d-244">**시퀀스에 일치 하는 요소가 둘 이상**</span><span class="sxs-lookup"><span data-stu-id="32b8d-244">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="32b8d-245">다음 예제에서는 호출에에서는 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException> 예외 시퀀스 4 보다 큰 요소가 없기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-245">In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 <span data-ttu-id="32b8d-246">방지 하기 위해 다음 예제에서는 합니다 <xref:System.InvalidOperationException> 대신 호출 하 여 시퀀스 비어 있을 때 throw 된 예외는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="32b8d-246">The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="32b8d-247">그러나이 시퀀스 값이 2 보다 크면 여러 요소를 반환 하므로 throw는 <xref:System.InvalidOperationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-247">However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <span data-ttu-id="32b8d-248">호출 된 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드는 시퀀스 또는 순서 지정 된 조건을 충족 하는 요소가 하나만 포함 되어 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-248">Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</span></span>  <span data-ttu-id="32b8d-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 0 개 이상의 결과 하지만 더 이상 사용 하 여 순서를 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> assumes a sequence with zero or one result, but no more.</span></span> <span data-ttu-id="32b8d-250">이 가정은 사용자의 주의가 필요 하 고 이러한 조건이 충족 되지 않는 경우 다시 throw 하거나 결과 catch <xref:System.InvalidOperationException> 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-250">If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate.</span></span> <span data-ttu-id="32b8d-251">그렇지 않으면 다른 사용을 고려해 야 무효 상황이 일정 빈도로 발생할 수 있는 예상 되는 경우 또는 <xref:System.Linq.Enumerable> 메서드를 같은 <xref:System.Linq.Enumerable.FirstOrDefault%2A> 또는 <xref:System.Linq.Enumerable.Where%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-251">Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.</span></span>  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a><span data-ttu-id="32b8d-252">동적 응용 프로그램 간 도메인 필드 액세스</span><span class="sxs-lookup"><span data-stu-id="32b8d-252">Dynamic cross-application domain field access</span></span>  
 <span data-ttu-id="32b8d-253">합니다 <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> MSIL (intermediate language) 명령 throw 하는 Microsoft는 <xref:System.InvalidOperationException> 필드는 검색 하려는 해당 주소를 포함 하는 개체 코드 실행 되는 응용 프로그램 도메인 내에서 없는 경우 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-253">The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</span></span> <span data-ttu-id="32b8d-254">필드의 주소는 상주 하는 응용 프로그램 도메인에서 액세스할 수만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-254">The address of a field can only be accessed from the application domain in which it resides.</span></span>  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a><span data-ttu-id="32b8d-255">InvalidOperationException 예외를 throw</span><span class="sxs-lookup"><span data-stu-id="32b8d-255">Throwing an InvalidOperationException exception</span></span>  
 <span data-ttu-id="32b8d-256">Throw 해야는 <xref:System.InvalidOperationException> 이유로 개체의 상태는 특정 메서드 호출을 지원 하지 않습니다 하는 경우에 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-256">You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call.</span></span> <span data-ttu-id="32b8d-257">즉, 메서드 호출 일부 상황에서 컨텍스트를 유효 되었지만 다른 유효 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-257">That is, the method call is valid in some circumstances or contexts, but is invalid in others.</span></span>  
  
 <span data-ttu-id="32b8d-258">다음 메서드 호출 오류가 잘못 된 인수로 인해 발생 한 경우 <xref:System.ArgumentException> 또는 해당 파생된 클래스 중 하나 <xref:System.ArgumentNullException> 또는 <xref:System.ArgumentOutOfRangeException>, 대신 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-258">If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.</span></span>  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a><span data-ttu-id="32b8d-259">기타 정보</span><span class="sxs-lookup"><span data-stu-id="32b8d-259">Miscellaneous information</span></span>  
 <span data-ttu-id="32b8d-260"><xref:System.InvalidOperationException> 값 0x80131509 HRESULT COR_E_INVALIDOPERATION를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-260"><xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</span></span>  
  
 <span data-ttu-id="32b8d-261">인스턴스의 초기 속성 값의 목록을 <xref:System.InvalidOperationException>, 참조는 <xref:System.InvalidOperationException.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-261">For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="32b8d-262">예외 처리 및 Throw</span><span class="sxs-lookup"><span data-stu-id="32b8d-262">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="32b8d-263"><see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-263">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="32b8d-264"><see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-264">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32b8d-265">이 생성자는 <xref:System.Exception.Message%2A> "요청한 작업을 수행할 수 없습니다."와 같은 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성</span><span class="sxs-lookup"><span data-stu-id="32b8d-265">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</span></span> <span data-ttu-id="32b8d-266">이 메시지는 현재 시스템의 문화권을 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-266">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="32b8d-267">다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-267">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="32b8d-268">속성</span><span class="sxs-lookup"><span data-stu-id="32b8d-268">Property</span></span>|<span data-ttu-id="32b8d-269">값</span><span class="sxs-lookup"><span data-stu-id="32b8d-269">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="32b8d-270">null 참조(Visual Basic의 경우 `Nothing`)</span><span class="sxs-lookup"><span data-stu-id="32b8d-270">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="32b8d-271">지역화된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-271">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="32b8d-272">오류를 설명하는 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-272">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="32b8d-273">지정된 오류 메시지를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-273">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32b8d-274">이 생성자는 <xref:System.Exception.Message%2A?displayProperty=nameWithType> 속성을 사용 하 여 새 예외를 `message` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-274">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="32b8d-275">`message` 내용은 사용자의 이해를 돕기 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-275">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="32b8d-276">이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-276">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="32b8d-277">다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-277">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="32b8d-278">속성</span><span class="sxs-lookup"><span data-stu-id="32b8d-278">Property</span></span>|<span data-ttu-id="32b8d-279">값</span><span class="sxs-lookup"><span data-stu-id="32b8d-279">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="32b8d-280">null 참조(Visual Basic의 경우 `Nothing`)</span><span class="sxs-lookup"><span data-stu-id="32b8d-280">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="32b8d-281">오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-281">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="32b8d-282">serialize된 개체 데이터를 보유하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-282">The object that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="32b8d-283">원본 또는 대상에 대한 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-283">The contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="32b8d-284">serialize된 데이터를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-284">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32b8d-285">deserialization을 수행하는 동안 이 생성자를 호출하여 스트림을 통해 전송될 예외 개체를 다시 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-285">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="32b8d-286">자세한 내용은 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-286">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="32b8d-287">XML 및 SOAP Serialization</span><span class="sxs-lookup"><span data-stu-id="32b8d-287">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="32b8d-288">예외에 대한 이유를 설명하는 오류 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-288">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="32b8d-289">현재 예외의 원인인 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-289">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="32b8d-290"><paramref name="innerException" /> 매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)가 아니면, 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-290">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="32b8d-291">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-291">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32b8d-292">이전 예외의 직접적인 결과로 throw되는 예외의 <xref:System.Exception.InnerException%2A> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-292">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="32b8d-293"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 `Nothing` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <xref:System.Exception.InnerException%2A>)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-293">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="32b8d-294">다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-294">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="32b8d-295">속성</span><span class="sxs-lookup"><span data-stu-id="32b8d-295">Property</span></span>|<span data-ttu-id="32b8d-296">값</span><span class="sxs-lookup"><span data-stu-id="32b8d-296">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="32b8d-297">내부 예외 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-297">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="32b8d-298">오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="32b8d-298">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="32b8d-299">예외 처리 및 Throw</span><span class="sxs-lookup"><span data-stu-id="32b8d-299">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>