<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e0e89e011838e20213bc48e7d0a2f9e5f56f30c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58681404" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e6b68-101">개체 값의 사용자 지정 서식 지정을 지원하는 메서드를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-101">Defines a method that supports custom formatting of the value of an object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6b68-102">합니다 <xref:System.ICustomFormatter> 단일 메서드를 포함 하는 인터페이스 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e6b68-103">이 인터페이스는 참조 또는 값 형식에 의해 구현 되는 <xref:System.ICustomFormatter.Format%2A> 메서드는 개체의 값의 사용자 지정 형식 문자열 표현을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="e6b68-104">일반적으로 <xref:System.ICustomFormatter> 인터페이스는 사용 하 여 구현 됩니다는 <xref:System.IFormatProvider> 의 두.NET Framework 복합 문자열 형식 지정 메서드를 포함 하는 동작을 사용자 지정 인터페이스는 <xref:System.IFormatProvider> 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="e6b68-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="e6b68-105">특히 합니다 <xref:System.ICustomFormatter> 인터페이스에 전달 된 개체의 값에 대 한 사용자 지정 형식 지정을 제공할 수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 및 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6b68-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="e6b68-106">사용자 지정 개체의 값 표현을 제공 하려면 다음을 수행 하는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="e6b68-107">구현 하는 클래스를 정의 합니다 <xref:System.ICustomFormatter> 인터페이스 및 해당 단일 멤버를 <xref:System.ICustomFormatter.Format%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6b68-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="e6b68-108">구현 하는 클래스를 정의 합니다 <xref:System.IFormatProvider> 인터페이스 및 해당 단일 멤버를 <xref:System.IFormatProvider.GetFormat%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6b68-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="e6b68-109">합니다 <xref:System.IFormatProvider.GetFormat%2A> 의 인스턴스를 반환 하는 방법에 <xref:System.ICustomFormatter> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="e6b68-110">단일 클래스 둘 다 구현 종종 <xref:System.ICustomFormatter> 고 <xref:System.IFormatProvider>입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e6b68-111">이런 경우, 클래스의 `GetFormat` 구현만 자체의 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="e6b68-112">전달 합니다 <xref:System.IFormatProvider> 구현으로를 `provider` 인수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드 또는 비슷한 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6b68-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="e6b68-113">.NET Framework 메서드는 자체 대신 사용자 지정 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6b68-114">다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="e6b68-115">이 예에서 단일 클래스 `IBinaryFormatter`를 둘 다 구현 <xref:System.ICustomFormatter> 고 <xref:System.IFormatProvider>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="e6b68-116">해당 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드를 결정 하는지 여부를 합니다 `formatType` 매개 변수를 나타냅니다는 <xref:System.ICustomFormatter> 형식.</span><span class="sxs-lookup"><span data-stu-id="e6b68-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="e6b68-117">그렇지 않으면 `BinaryFormatter` 인스턴스가 반환 자체를 반환 합니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="e6b68-118">해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수는 세 가지 지원 되는 형식 문자열 중 하나 인지 확인 ("B" "O"에 대 한 이진에 대 한 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정 합니다 `arg` 매개 변수 적절 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="e6b68-119">그렇지 않은 경우, `arg` 아닙니다 `null`를 호출 합니다 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 하거나 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="e6b68-120">`arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="e6b68-121">`BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체를 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 메서드를 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="e6b68-122">공용 언어 런타임에서 사용 하려고 시도 하 <see cref="T:System.ICustomFormatter" /> 합성 형식 문자열의 모든 형식 항목에 대 한 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-122">The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string.</span></span> <span data-ttu-id="e6b68-123">결과적으로 기대할 수 있는 프로그램 <see cref="T:System.ICustomFormatter" /> 구현을 호출 하 여 서식 지정 서비스 개체를 제공 하는 또는 처리 하도록 설계 되지는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-123">As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</span></span> <span data-ttu-id="e6b68-124">이러한 경우에 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 개체 또는 값에 대 한 적절 한 형식 지정 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-124">In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.</span></span>  
  
<span data-ttu-id="e6b68-125">두 가지 종류의 <see cref="T:System.ICustomFormatter" /> 구현: 내장 함수 및 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-125">There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.</span></span>  
  
<span data-ttu-id="e6b68-126">내장 함수 구현에는 응용 프로그램 정의 개체에 대 한 사용자 지정 서식 지정을 제공 하는 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-126">Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</span></span> <span data-ttu-id="e6b68-127">이 경우 구현 해야 다음과 같은</span><span class="sxs-lookup"><span data-stu-id="e6b68-127">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="e6b68-128">-정의 개체의 형식을 지정 하는 형식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-128">-   A definition of format strings that define the formatting of the object.</span></span> <span data-ttu-id="e6b68-129">형식 문자열은 선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-129">Format strings are optional.</span></span> <span data-ttu-id="e6b68-130">일반적으로 "G" 또는 "g" 형식 문자열에는 일반 (또는 자주 사용 하는) 형식으로 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-130">Typically, a "G" or "g" format string defines the general (or most commonly used) format.</span></span> <span data-ttu-id="e6b68-131">그러나 자유롭게를 선택 하는 형식 문자열을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-131">However, you are free to define any format strings that you choose.</span></span> <span data-ttu-id="e6b68-132">대/소문자 구분 또는 대/소문자 구분 되는지 여부를 결정 하지 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-132">You are also free to decide whether they are case-sensitive or case-insensitive.</span></span>  
  
<span data-ttu-id="e6b68-133">-개체의 형식을 전달할 수 있도록 테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 응용 프로그램 정의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-133">-   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type.</span></span> <span data-ttu-id="e6b68-134">없는 경우 개체의 호출 해야 <see cref="T:System.IFormattable" /> 구현, 있는 경우 또는 해당 <see cref="M:System.Object.ToString" /> 메서드를 사용할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="e6b68-134">If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="e6b68-135">이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-135">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="e6b68-136">-구현 형식 문자열을 지 원하는 경우 null 서식 문자열을 처리 하는 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-136">-   Code to handle a null format string, if your implementation supports format strings.</span></span> <span data-ttu-id="e6b68-137">가장 일반적인 방법은 일반 서식 지정자를 사용 하 여 null 형식 문자열을 바꾸는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-137">The most common approach is to replace a null format string with the general format specifier.</span></span>  
  
<span data-ttu-id="e6b68-138">-구현이 지 원하는 모든 서식 문자열을 처리 하는 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-138">-   Code to handle any format strings that your implementation supports.</span></span>  
  
<span data-ttu-id="e6b68-139">-지원 되지 않는 형식 문자열을 처리 하는 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-139">-   Code to handle format strings that you do not support.</span></span> <span data-ttu-id="e6b68-140">가장 일반적인 방법은 throw 하는 것을 <see cref="T:System.FormatException" />이지만 기본 서식 지정을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-140">The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.</span></span>  
  
<span data-ttu-id="e6b68-141">확장 구현에는 이미 지원 서식 지정 하는 형식에 대 한 사용자 지정 서식 지정을 제공 하는 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-141">Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</span></span> <span data-ttu-id="e6b68-142">예를 들어 정의할 수 있습니다는 <c>CustomerNumberFormatter</c> 서식을 지정 하는 특정 숫자 사이가 하이픈으로 정수 계열 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-142">For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits.</span></span> <span data-ttu-id="e6b68-143">이 경우 구현 해야 다음과 같은</span><span class="sxs-lookup"><span data-stu-id="e6b68-143">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="e6b68-144">-정의 된 개체의 형식을 확장 하는 형식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-144">-   A definition of format strings that extend the formatting of the object.</span></span> <span data-ttu-id="e6b68-145">이러한 형식 문자열은 필요 하지만 형식의 기존 형식 문자열을 사용 하 여 충돌 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-145">These format strings are required, but they must not conflict with the type's existing format strings.</span></span> <span data-ttu-id="e6b68-146">예를 들어, 확장 하는 경우에 대 한 서식 지정을 <see cref="T:System.Int32" /> 형식, "C", "D", "E", "F"와 "G" 형식 지정자 중 일부를 구현 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-146">For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</span></span>  
  
<span data-ttu-id="e6b68-147">개체의 형식에 전달 하는-테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 서식 지정 확장 지원 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-147">-   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports.</span></span> <span data-ttu-id="e6b68-148">없는 경우 개체의 호출 <see cref="T:System.IFormattable" /> 구현, 있는 경우 또는 개체의 매개 변수가 없는 경우 <see cref="M:System.Object.ToString" /> 메서드를 사용할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="e6b68-148">If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="e6b68-149">이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-149">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="e6b68-150">-코드 처리 확장 프로그램을 지 원하는 모든 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-150">-   Code to handle any format strings that your extension supports.</span></span>  
  
<span data-ttu-id="e6b68-151">-코드 처리 확장 프로그램을 지원 하지 않는 모든 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-151">-   Code to handle any format strings that your extension does not support.</span></span> <span data-ttu-id="e6b68-152">이러한 형식에 전달 되어야 합니다 <see cref="T:System.IFormattable" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-152">These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation.</span></span> <span data-ttu-id="e6b68-153">이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-153">You should be prepared to handle any exceptions these method calls might throw.</span></span></para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="e6b68-154">형식 지정 사양을 포함하는 형식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-154">A format string containing formatting specifications.</span></span></param>
        <param name="arg"><span data-ttu-id="e6b68-155">서식을 지정할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-155">An object to format.</span></span></param>
        <param name="formatProvider"><span data-ttu-id="e6b68-156">현재 인스턴스에 대한 서식 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-156">An object that supplies format information about the current instance.</span></span></param>
        <summary><span data-ttu-id="e6b68-157">지정된 형식 및 문화권별 형식 지정 정보를 사용하여 지정된 개체의 값을 해당하는 문자열로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-157">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="e6b68-158"><paramref name="arg" /> 및 <paramref name="format" />에서 지정한 대로 형식이 지정된 <paramref name="formatProvider" /> 값을 문자열로 나타낸 것입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-158">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6b68-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 은 콜백 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="e6b68-160">와 같은 사용자 지정 형식을 지 원하는 메서드에 의해 호출 됩니다 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 또는 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-160">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e6b68-161">구현에서 각 형식 항목에 대해 한 번씩 호출 됩니다는 [복합 형식 문자열](~/docs/standard/base-types/composite-formatting.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-161">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="e6b68-162">예를 들어 다음 문에서는 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 메서드 세 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-162">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="e6b68-163">`arg` 매개 변수는 특정 형식 항목의 인덱스에 해당 하는 0부터 시작 위치가 개체 목록의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-163">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="e6b68-164">합니다 `format` 매개 변수는 형식 문자열을 포함 합니다 `formatString` 형식 항목의 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-164">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="e6b68-165">형식 항목이 없으면 `formatString` 구성 요소, 값 `format` 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-165">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="e6b68-166">하는 경우 `format` 됩니다 `null`의 형식에 따라 `arg`, 선택한 기본 형식 지정을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-166">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="e6b68-167">`formatProvider` 매개 변수를 <xref:System.IFormatProvider> 구현에 대 한 서식 지정을 제공 하는 `arg`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-167">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="e6b68-168">인스턴스의 것이 일반적으로 프로그램 <xref:System.ICustomFormatter> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-168">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="e6b68-169">하는 경우 `formatProvider` 는 `null`, 해당 매개 변수를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-169">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="e6b68-170">구현 된 <xref:System.ICustomFormatter.Format%2A> 메서드에.NET Framework 지원 하지 않는 서식 지정을 제공할 수 있도록 다음과 같은 기능을 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-170">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="e6b68-171">형식 메서드 형식을 지원 하지 않으면, 결정 되는 개체 구현 포맷 되었는지는 <xref:System.IFormattable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-171">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="e6b68-172">호출을 하는 경우는 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 해당 인터페이스의 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-172">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="e6b68-173">그렇지 않으면 기본값을 호출할 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 기본 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6b68-173">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="e6b68-174">다음 코드에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-174">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="e6b68-175">다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-175">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="e6b68-176">해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수는 세 가지 지원 되는 형식 문자열 중 하나 인지 확인 ("B" "O"에 대 한 이진에 대 한 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정 합니다 `arg` 매개 변수 적절 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-176">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="e6b68-177">그렇지 않은 경우, `arg` 아닙니다 `null`를 호출 합니다 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 하거나 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-177">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="e6b68-178">`arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-178">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="e6b68-179">`BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체를 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 메서드를 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6b68-179">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="e6b68-180">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="e6b68-180">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="e6b68-181">복합 형식 지정</span><span class="sxs-lookup"><span data-stu-id="e6b68-181">Composite Formatting</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>