<Type Name="Object" FullName="System.Object">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e55e8acd5a3dd0694385dd71a0e2108d66e1c37" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719693" /></Metadata><TypeSignature Language="C#" Value="public class Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit object" />
  <TypeSignature Language="DocId" Value="T:System.Object" />
  <TypeSignature Language="VB.NET" Value="Public Class Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Object" />
  <TypeSignature Language="F#" Value="type obj = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cd166-101">.Net Framework 클래스 계층 구조의 모든 클래스를 지원하며 파생 클래스에 하위 수준 서비스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-101">Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes.</span></span> <span data-ttu-id="cd166-102">또한 .NET Framework의 모든 클래스 중에서 기본 클래스이며 형식 계층 구조의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-102">This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-103">언어에서 상속을 선언 하는 클래스를 일반적으로 필요 하지 않습니다 <xref:System.Object> 상속은 암시적 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-103">Languages typically do not require a class to declare inheritance from <xref:System.Object> because the inheritance is implicit.</span></span>  
  
 <span data-ttu-id="cd166-104">.NET Framework의 모든 클래스에서 파생 되므로 <xref:System.Object>에 정의 된 모든 메서드는 <xref:System.Object> 클래스는 시스템의 모든 개체에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-104">Because all classes in the .NET Framework are derived from <xref:System.Object>, every method defined in the <xref:System.Object> class is available in all objects in the system.</span></span> <span data-ttu-id="cd166-105">파생 클래스 수 및 포함 하 여 이러한 메서드의 일부를 재정의 하는:</span><span class="sxs-lookup"><span data-stu-id="cd166-105">Derived classes can and do override some of these methods, including:</span></span>  
  
-   <span data-ttu-id="cd166-106"><xref:System.Object.Equals%2A> -개체 간의 비교를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-106"><xref:System.Object.Equals%2A> - Supports comparisons between objects.</span></span>  
  
-   <span data-ttu-id="cd166-107"><xref:System.Object.Finalize%2A> -개체를 자동으로 회수 하기 전에 정리 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-107"><xref:System.Object.Finalize%2A> - Performs cleanup operations before an object is automatically reclaimed.</span></span>  
  
-   <span data-ttu-id="cd166-108"><xref:System.Object.GetHashCode%2A> -해시 테이블의 사용을 지원 하려면 개체의 값에 해당 하는 숫자를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-108"><xref:System.Object.GetHashCode%2A> - Generates a number corresponding to the value of the object to support the use of a hash table.</span></span>  
  
-   <span data-ttu-id="cd166-109"><xref:System.Object.ToString%2A> -클래스의 인스턴스를 설명 하는 사람이 읽을 수 있는 텍스트 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-109"><xref:System.Object.ToString%2A> - Manufactures a human-readable text string that describes an instance of the class.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="cd166-110">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="cd166-110">Performance Considerations</span></span>  
 <span data-ttu-id="cd166-111">인스턴스를 허용 하는 클래스 멤버를 만들 수 같은 모든 형식의 개체를 처리 해야 하는 컬렉션 클래스를 디자인 하는 경우는 <xref:System.Object> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-111">If you are designing a class, such as a collection, that must handle any type of object, you can create class members that accept instances of the <xref:System.Object> class.</span></span> <span data-ttu-id="cd166-112">그러나 프로세스를 boxing 및 unboxing 형식 성능 비용을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-112">However, the process of boxing and unboxing a type carries a performance cost.</span></span> <span data-ttu-id="cd166-113">새 클래스를 특정 값 형식을 처리할 자주 알고 있는 경우 boxing 비용을 최소화 하려면 두 가지 방법 중 하나를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-113">If you know your new class will frequently handle certain value types you can use one of two tactics to minimize the cost of boxing.</span></span>  
  
-   <span data-ttu-id="cd166-114">허용 하는 일반 메서드는 <xref:System.Object> 형식 및 각 값 형식에서 자주 처리 클래스를 허용 하는 형식별 메서드 오버 로드 집합.</span><span class="sxs-lookup"><span data-stu-id="cd166-114">Create a general method that accepts an <xref:System.Object> type, and a set of type-specific method overloads that accept each value type you expect your class to frequently handle.</span></span> <span data-ttu-id="cd166-115">호출 매개 변수 형식을 허용 하는 형식별 메서드 있으면 boxing 되지 않습니다 발생 하 고 형식별 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-115">If a type-specific method exists that accepts the calling parameter type, no boxing occurs and the type-specific method is invoked.</span></span> <span data-ttu-id="cd166-116">호출 매개 변수 형식과 일치 하는 메서드 인수가 있으면 매개 변수는 boxed 및 일반 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-116">If there is no method argument that matches the calling parameter type, the parameter is boxed and the general method is invoked.</span></span>  
  
-   <span data-ttu-id="cd166-117">제네릭을 사용 하 여 형식 및 해당 멤버를 디자인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-117">Design your type and its members to use generics.</span></span> <span data-ttu-id="cd166-118">공용 언어 런타임 클래스의 인스턴스를 만들고 제네릭 형식 인수를 지정할 때 닫힌된 제네릭 형식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-118">The common language runtime creates a closed generic type when you create an instance of your class and specify a generic type argument.</span></span> <span data-ttu-id="cd166-119">제네릭 메서드의 형식 특정 이며 호출 매개 변수를 boxing 하지 않고 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-119">The generic method is type-specific and can be invoked without boxing the calling parameter.</span></span>  
  
 <span data-ttu-id="cd166-120">받아들이거나 반환 하는 범용 클래스를 개발 해야 하는 경우도 있지만 <xref:System.Object> 형식에도 자주 사용 되는 형식을 처리 하는 type 별 클래스를 제공 하 여 성능을 개선할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-120">Although it is sometimes necessary to develop general purpose classes that accept and return <xref:System.Object> types, you can improve performance by also providing a type-specific class to handle a frequently used type.</span></span> <span data-ttu-id="cd166-121">예를 들어, 설정 및 부울 값을 가져오고이에 관련 된 클래스를 제공 비용 boxing 및 unboxing 부울 값을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-121">For example, providing a class that is specific to setting and getting Boolean values eliminates the cost of boxing and unboxing Boolean values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-122">다음 예제에서 파생 되는 지점 형식 정의 <xref:System.Object> 클래스 및 대부분의 가상 메서드를 재정의 합니다 <xref:System.Object> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-122">The following example defines a Point type derived from the <xref:System.Object> class and overrides many of the virtual methods of the <xref:System.Object> class.</span></span> <span data-ttu-id="cd166-123">또한 예제에서는를 호출 하는 다양 한 정적 메서드와 인스턴스는 <xref:System.Object> 클래스.</span><span class="sxs-lookup"><span data-stu-id="cd166-123">In addition, the example shows how to call many of the static and instance methods of the <xref:System.Object> class.</span></span>  
  
 [!code-cpp[ObjectX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectX/cpp/ObjectX.cpp#1)]
 [!code-csharp[ObjectX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectX/CS/ObjectX.cs#1)]
 [!code-vb[ObjectX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectX/vb/objectX.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="cd166-124">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-124">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="cd166-125">인스턴스 멤버는 스레드로부터 안전 하 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-125">Instance members are not guaranteed to be thread-safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Object ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Object();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-126"><see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-126">Initializes a new instance of the <see cref="T:System.Object" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-127">이 생성자는 파생된 클래스의 생성자가 호출 되지만의 인스턴스를 직접 만들려면 사용할 수도 있습니다는 <xref:System.Object> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-127">This constructor is called by constructors in derived classes, but it can also be used to directly create an instance of the <xref:System.Object> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd166-128">두 개체 인스턴스가 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-128">Determines whether two object instances are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool&#xA;override this.Equals : obj -&gt; bool" Usage="obj.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="cd166-129">현재 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-129">The object to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="cd166-130">지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-130">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="cd166-131">지정한 개체가 현재 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-131"><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-132">현재 인스턴스 간 비교의 형식 및 `obj` 매개 변수는 현재 인스턴스 참조 형식 또는 값 형식 인지에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-132">The type of comparison between the current instance and the `obj` parameter depends on whether the current instance is a reference type or a value type.</span></span>  
  
-   <span data-ttu-id="cd166-133">현재 인스턴스 참조 형식인 경우는 <xref:System.Object.Equals%28System.Object%29> 참조 같음에 대 한 테스트 메서드를 호출 하는 <xref:System.Object.Equals%28System.Object%29> 를 호출 하는 것과 같습니다는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-133">If the current instance is a reference type, the <xref:System.Object.Equals%28System.Object%29> method tests for reference equality, and a call to the <xref:System.Object.Equals%28System.Object%29> method is equivalent to a call to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="cd166-134">참조 같음 비교 하는 개체 변수를 같은 개체 참조는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-134">Reference equality means that the object variables that are compared refer to the same object.</span></span> <span data-ttu-id="cd166-135">다음 예제에서는 이러한 비교의 결과를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-135">The following example illustrates the result of such a comparison.</span></span> <span data-ttu-id="cd166-136">정의 `Person` 참조 형식인 클래스를 호출 합니다 `Person` 두 개의 새 인스턴스화할 클래스 생성자 `Person` 개체 `person1a` 및 `person2`, 동일한 값을 포함 하는.</span><span class="sxs-lookup"><span data-stu-id="cd166-136">It defines a `Person` class, which is a reference type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1a` and `person2`, which have the same value.</span></span> <span data-ttu-id="cd166-137">또한 할당 `person1a` 다른 개체 변수에 `person1b`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-137">It also assigns `person1a` to another object variable, `person1b`.</span></span> <span data-ttu-id="cd166-138">예제에서 출력으로 `person1a` 고 `person1b` 동일한 개체를 참조 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-138">As the output from the example shows, `person1a` and `person1b` are equal because they reference the same object.</span></span> <span data-ttu-id="cd166-139">그러나 `person1a` 고 `person2` 동일한 값을 갖고 있지만, 두 개체가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-139">However, `person1a` and `person2` are not equal, although they have the same value.</span></span>  
  
     [!code-csharp[System.Object.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_ref.cs#2)]
     [!code-vb[System.Object.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_ref.vb#2)]  
  
-   <span data-ttu-id="cd166-140">현재 인스턴스 값 형식인 경우는 <xref:System.Object.Equals%28System.Object%29> 메서드는 값이 같은지를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-140">If the current instance is a value type, the <xref:System.Object.Equals%28System.Object%29> method tests for value equality.</span></span> <span data-ttu-id="cd166-141">값 같음은 다음을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-141">Value equality means the following:</span></span>  
  
    -   <span data-ttu-id="cd166-142">두 개체는 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-142">The two objects are of the same type.</span></span> <span data-ttu-id="cd166-143">다음 예제와 같이 <xref:System.Byte> 12의 값이 있는 개체와 같지 않습니다는 <xref:System.Int32> 두 개체가 서로 다른 런타임 형식을 있으므로 12의 값이 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-143">As the following example shows, a <xref:System.Byte> object that has a value of 12 does not equal an <xref:System.Int32> object that has a value of 12, because the two objects have different run-time types.</span></span>  
  
         [!code-csharp[System.Object.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val1.cs#3)]
         [!code-vb[System.Object.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val1.vb#3)]  
  
    -   <span data-ttu-id="cd166-144">두 개체의 public 및 private 필드의 값이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-144">The values of the public and private fields of the two objects are equal.</span></span> <span data-ttu-id="cd166-145">다음 예제에서는 값이 같은지 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-145">The following example tests for value equality.</span></span> <span data-ttu-id="cd166-146">정의 `Person` 구조, 즉 값 형식 및 호출 합니다 `Person` 두 개의 새 인스턴스화할 클래스 생성자 `Person` 개체 `person1` 및 `person2`, 동일한 값을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-146">It defines a `Person` structure, which is a value type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1` and `person2`, which have the same value.</span></span> <span data-ttu-id="cd166-147">두 개체 변수를 다양 한 개체 참조 하지만 예제의 출력을 볼 수 있듯이 `person1` 하 고 `person2` 개인에 대 한 동일한 값이 없으므로 같은지 `personName` 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-147">As the output from the example shows, although the two object variables refer to different objects, `person1` and `person2` are equal because they have the same value for the private `personName` field.</span></span>  
  
         [!code-csharp[System.Object.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val2.cs#4)]
         [!code-vb[System.Object.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val2.vb#4)]  
  
 <span data-ttu-id="cd166-148">때문에 합니다 <xref:System.Object> 클래스는.NET Framework의 모든 형식에 대 한 기본 클래스를 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드는 다른 모든 형식에 대 한 기본 같음 비교를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-148">Because the <xref:System.Object> class is the base class for all types in the .NET Framework, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method provides the default equality comparison for all other types.</span></span> <span data-ttu-id="cd166-149">그러나 형식은 종종를 재정의 합니다 <xref:System.Object.Equals%2A> 값 같음을 구현 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-149">However, types often override the <xref:System.Object.Equals%2A> method to implement value equality.</span></span> <span data-ttu-id="cd166-150">자세한 정보를 상속자 섹션에 대 한 호출자 및 정보에 대 한 참조.</span><span class="sxs-lookup"><span data-stu-id="cd166-150">For more information, see the Notes for Callers and Notes for Inheritors sections.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="cd166-151">에 대 한 정보는 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="cd166-151">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="cd166-152">호출 하는 경우는 <xref:System.Object.Equals%28System.Object%29> 클래스의 메서드 오버 로드는 [!INCLUDE[wrt](~/includes/wrt-md.md)]를 재정의 하지 않는 하는 클래스에 대 한 기본 동작을 쉽게 <xref:System.Object.Equals%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-152">When you call the <xref:System.Object.Equals%28System.Object%29> method overload on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don't override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="cd166-153">이.NET Framework에 대 한 제공 하는 지원의 일부를 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows 런타임](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="cd166-153">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="cd166-154">클래스는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 안 함 <xref:System.Object>, 및 현재 구현 하지는 <xref:System.Object.Equals%28System.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-154">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don't inherit <xref:System.Object>, and currently don't implement an <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="cd166-155">그러나 가진 것으로 나타납니다 <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, 및 <xref:System.Object.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework는 이러한 메서드의 기본 동작을 제공 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd166-155">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="cd166-156">C# 또는 Visual Basic에서 작성 된 클래스에서 재정의할 수는 <xref:System.Object.Equals%28System.Object%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-156">classes that are written in C# or Visual Basic can override the <xref:System.Object.Equals%28System.Object%29> method overload.</span></span>  
  
## <a name="notes-for-callers"></a><span data-ttu-id="cd166-157">호출자에 대 한 정보</span><span class="sxs-lookup"><span data-stu-id="cd166-157">Notes for Callers</span></span>  
 <span data-ttu-id="cd166-158">파생된 클래스를 자주 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 값 같음을 구현 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-158">Derived classes frequently override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to implement value equality.</span></span> <span data-ttu-id="cd166-159">또한 형식에 추가 강력한 형식의 오버 로드를 자주 제공 합니다 `Equals` 메서드를 구현 하 여 일반적으로 <xref:System.IEquatable%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-159">In addition, types also frequently provide an additional strongly typed overload to the `Equals` method, typically by implementing the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="cd166-160">호출 하는 경우는 `Equals` 같은지 테스트 하는 방법 현재 인스턴스가 재정의 하는지 여부를 알아야 할 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 이해 하는 방법에 대 한 특정 호출 및는 `Equals` 메서드는 해결 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-160">When you call the `Equals` method to test for equality, you should know whether the current instance overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType> and understand how a particular call to an `Equals` method is resolved.</span></span> <span data-ttu-id="cd166-161">이 고, 그렇지을 수행할 수도 있습니다는 테스트에 의도 한 것과 다른 같은지 및 메서드는 예기치 않은 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-161">Otherwise, you may be performing a test for equality that is different from what you intended, and the method may return an unexpected value.</span></span>  
  
 <span data-ttu-id="cd166-162">다음 예제에서 이에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-162">The following example provides an illustration.</span></span> <span data-ttu-id="cd166-163">세 개의 인스턴스화할 <xref:System.Text.StringBuilder> 동일한 문자열을 사용 하 여 개체를 다음에 4 개의 호출 `Equals` 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-163">It instantiates three <xref:System.Text.StringBuilder> objects with identical strings, and then makes four calls to `Equals` methods.</span></span> <span data-ttu-id="cd166-164">첫 번째 메서드 호출 반환 `true`, 고 나머지 세 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-164">The first method call returns `true`, and the remaining three return `false`.</span></span>  
  
 [!code-csharp[System.Object.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalssb1.cs#5)]
 [!code-vb[System.Object.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalssb1.vb#5)]  
  
 <span data-ttu-id="cd166-165">강력한 형식의 첫 번째 경우 <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> 값이 같은지를 테스트 하는 메서드 오버 로드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-165">In the first case, the strongly typed <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> method overload, which tests for value equality, is called.</span></span> <span data-ttu-id="cd166-166">두 문자열을 할당 하기 때문에 <xref:System.Text.StringBuilder> 메서드는 반환 개체가 같은지를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-166">Because the strings assigned to the two <xref:System.Text.StringBuilder> objects are equal, the method returns `true`.</span></span> <span data-ttu-id="cd166-167">그러나 <xref:System.Text.StringBuilder> 재정의 하지 않는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-167">However, <xref:System.Text.StringBuilder> does not override <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd166-168">이 인해 때 합니다 <xref:System.Text.StringBuilder> 개체가로 캐스팅는 <xref:System.Object>때를 <xref:System.Text.StringBuilder> 인스턴스가 형식의 변수에 할당 됩니다 <xref:System.Object>, 및 시기를 <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> 두 메서드에 전달 됩니다 <xref:System.Text.StringBuilder> 기본개체<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-168">Because of this, when the <xref:System.Text.StringBuilder> object is cast to an <xref:System.Object>, when a <xref:System.Text.StringBuilder> instance is assigned to a variable of type <xref:System.Object>, and when the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method is passed two <xref:System.Text.StringBuilder> objects, the default <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="cd166-169">때문에 <xref:System.Text.StringBuilder> 참조 형식이 면 두 전달 같습니다 <xref:System.Text.StringBuilder> 개체는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-169">Because <xref:System.Text.StringBuilder> is a reference type, this is equivalent to passing the two <xref:System.Text.StringBuilder> objects to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="cd166-170">하지만 세 가지 모두 <xref:System.Text.StringBuilder> 동일한 문자열을 포함 하는 개체, 세 개의 고유한 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-170">Although all three <xref:System.Text.StringBuilder> objects contain identical strings, they refer to three distinct objects.</span></span> <span data-ttu-id="cd166-171">따라서 이러한 세 개의 메서드 호출 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-171">As a result, these three method calls return `false`.</span></span>  
  
 <span data-ttu-id="cd166-172">현재 개체 참조 같음에 대 한 다른 개체를 호출 하 여 비교할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-172">You can compare the current object to another object for reference equality by calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="cd166-173">Visual basic에서 사용할 수도 있습니다는 `is` 키워드 (예를 들어 `If Me Is otherObject Then ...`).</span><span class="sxs-lookup"><span data-stu-id="cd166-173">In Visual Basic, you can also use the `is` keyword (for example, `If Me Is otherObject Then ...`).</span></span>  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="cd166-174">상속자에 대 한 정보</span><span class="sxs-lookup"><span data-stu-id="cd166-174">Notes for Inheritors</span></span>  
 <span data-ttu-id="cd166-175">해당 형식에서 정의 된 기능을 상속 고유한 형식을 정의 하는 경우는 `Equals` 메서드의 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-175">When you define your own type, that type inherits the functionality defined by the `Equals` method of its base type.</span></span> <span data-ttu-id="cd166-176">다음 표에서 기본 구현의 `Equals` 메서드 형식에서.NET Framework의 주요 범주에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-176">The following table lists the default implementation of the `Equals` method for the major categories of types in the .NET Framework.</span></span>  
  
|<span data-ttu-id="cd166-177">형식 범주</span><span class="sxs-lookup"><span data-stu-id="cd166-177">Type category</span></span>|<span data-ttu-id="cd166-178">로 정의 된 같음</span><span class="sxs-lookup"><span data-stu-id="cd166-178">Equality defined by</span></span>|<span data-ttu-id="cd166-179">설명</span><span class="sxs-lookup"><span data-stu-id="cd166-179">Comments</span></span>|  
|-------------------|-------------------------|--------------|  
|<span data-ttu-id="cd166-180">직접 파생 된 클래스 <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="cd166-180">Class derived directly from <xref:System.Object></span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="cd166-181">참조 같음; 호출할 때와 동일한 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-181">Reference equality; equivalent to calling <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="cd166-182">구조체</span><span class="sxs-lookup"><span data-stu-id="cd166-182">Structure</span></span>|<xref:System.ValueType.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="cd166-183">값이 같은지 확인 합니다. 직접 바이트 단위로 비교 또는 리플렉션을 사용 하 여 필드 별로 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-183">Value equality; either direct byte-by-byte comparison or field-by-field comparison using reflection.</span></span>|  
|<span data-ttu-id="cd166-184">열거형</span><span class="sxs-lookup"><span data-stu-id="cd166-184">Enumeration</span></span>|<xref:System.Enum.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="cd166-185">값은 동일한 열거형 및 기본값이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-185">Values must have the same enumeration type and the same underlying value.</span></span>|  
|<span data-ttu-id="cd166-186">대리자</span><span class="sxs-lookup"><span data-stu-id="cd166-186">Delegate</span></span>|<xref:System.MulticastDelegate.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="cd166-187">대리자와 동일한 호출 목록 가지 유형이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-187">Delegates must have the same type with identical invocation lists.</span></span>|  
|<span data-ttu-id="cd166-188">인터페이스</span><span class="sxs-lookup"><span data-stu-id="cd166-188">Interface</span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="cd166-189">참조 같음입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-189">Reference equality.</span></span>|  
  
 <span data-ttu-id="cd166-190">값 형식에 대 한 항상 재정의 해야 <xref:System.Object.Equals%2A>이므로 리플렉션을 사용 하는 같음에 대 한 테스트의 성능이 저하 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-190">For a value type, you should always override <xref:System.Object.Equals%2A>, because tests for equality that rely on reflection offer poor performance.</span></span> <span data-ttu-id="cd166-191">기본 구현을 재정의할 수도 있습니다 <xref:System.Object.Equals%2A> 참조 형식의 참조 일치 하는 대신 값이 같은지 테스트 하 고 값 같음의 정확한 의미를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-191">You can also override the default implementation of <xref:System.Object.Equals%2A> for reference types to test for value equality instead of reference equality and to define the precise meaning of value equality.</span></span> <span data-ttu-id="cd166-192">이러한 구현이 <xref:System.Object.Equals%2A> 반환 `true` 두 개체가 있으면 같은 값을 동일한 인스턴스에 없는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-192">Such implementations of <xref:System.Object.Equals%2A> return `true` if the two objects have the same value, even if they are not the same instance.</span></span> <span data-ttu-id="cd166-193">형식의 구현 자가 결정 요인을 개체의 값 이지만 일반적으로 일부 또는 모든 데이터 개체의 인스턴스 변수에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-193">The type's implementer decides what constitutes an object's value, but it is typically some or all the data stored in the instance variables of the object.</span></span> <span data-ttu-id="cd166-194">예를 들어, 값을 <xref:System.String> 문자열의 문자를 기준으로 하는 개체를 <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> 메서드 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 반환 하는 방법 `true` 인스턴스가 동일한 순서로 동일한 문자를 포함 하는 두 개의 문자열에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-194">For example, the value of a <xref:System.String> object is based on the characters of the string; the <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to return `true` for any two string instances that contain the same characters in the same order.</span></span>  
  
 <span data-ttu-id="cd166-195">다음 예제에서는 재정의 하는 방법의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 값이 같은지를 테스트 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-195">The following example shows how to override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to test for value equality.</span></span> <span data-ttu-id="cd166-196">재정의 된 <xref:System.Object.Equals%2A> 에 대 한 메서드는 `Person` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-196">It overrides the <xref:System.Object.Equals%2A> method for the `Person` class.</span></span> <span data-ttu-id="cd166-197">하는 경우 `Person` 같음의 기본 클래스 구현을 수락 두 `Person` 개체는 단일 개체를 참조 하는 경우에 같은 것입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-197">If `Person` accepted its base class implementation of equality, two `Person` objects would be equal only if they referenced a single object.</span></span> <span data-ttu-id="cd166-198">그러나이 예제의 경우 두 `Person` 개체는 동일한 값을 가질 경우 동일 합니다 `Person.Id` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-198">However, in this case, two `Person` objects are equal if they have the same value for the `Person.Id` property.</span></span>  
  
 [!code-csharp[System.Object.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalsoverride.cs#6)]
 [!code-vb[System.Object.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalsoverride.vb#6)]  
  
 <span data-ttu-id="cd166-199">재정의 하는 것 외에도 <xref:System.Object.Equals%2A>를 구현할 수 있습니다는 <xref:System.IEquatable%601> 인터페이스를 강력한 형식의 같음 테스트를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-199">In addition to overriding <xref:System.Object.Equals%2A>, you can implement the <xref:System.IEquatable%601> interface to provide a strongly typed test for equality.</span></span>  
  
 <span data-ttu-id="cd166-200">다음 문은 모든 구현에 대해 true 여야 합니다는 <xref:System.Object.Equals%28System.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-200">The following statements must be true for all implementations of the <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="cd166-201">목록에서 `x`, `y`, 및 `z` 되지 않는 개체 참조를 나타내는 **null**합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-201">In the list, `x`, `y`, and `z` represent object references that are not **null**.</span></span>  
  
-   <span data-ttu-id="cd166-202">`x.Equals(x)` 반환 `true`, 부동 소수점 형식은 포함 하는 경우는 제외 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-202">`x.Equals(x)` returns `true`, except in cases that involve floating-point types.</span></span> <span data-ttu-id="cd166-203">ISO/IEC/IEEE 60559:2011, Information technology-마이크로프로세서 시스템-부동 소수점 산술을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="cd166-203">See ISO/IEC/IEEE 60559:2011, Information technology -- Microprocessor Systems -- Floating-Point arithmetic.</span></span>  
  
-   <span data-ttu-id="cd166-204">`x.Equals(y)`는 `y.Equals(x)`와 동일한 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-204">`x.Equals(y)` returns the same value as `y.Equals(x)`.</span></span>  
  
-   <span data-ttu-id="cd166-205">`x.Equals(y)` 반환 `true` 둘 다 `x` 하 고 `y` 는 `NaN`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-205">`x.Equals(y)` returns `true` if both `x` and `y` are `NaN`.</span></span>  
  
-   <span data-ttu-id="cd166-206">경우 `(x.Equals(y) && y.Equals(z))` 반환 `true`, 한 다음 `x.Equals(z)` 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-206">If `(x.Equals(y) && y.Equals(z))` returns `true`, then `x.Equals(z)` returns `true`.</span></span>  
  
-   <span data-ttu-id="cd166-207">에 대 한 연속 호출 `x.Equals(y)` 에서 참조 하는 개체와 동일한 값을 반환 `x` 및 `y` 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-207">Successive calls to `x.Equals(y)` return the same value as long as the objects referenced by `x` and `y` are not modified.</span></span>  
  
-   <span data-ttu-id="cd166-208">`x.Equals(null)`가 `false`를 반환하는 경우</span><span class="sxs-lookup"><span data-stu-id="cd166-208">`x.Equals(null)` returns `false`.</span></span>  
  
 <span data-ttu-id="cd166-209">구현의 <xref:System.Object.Equals%2A> 예외를 throw 하면 안 항상 값을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-209">Implementations of <xref:System.Object.Equals%2A> must not throw exceptions; they should always return a value.</span></span> <span data-ttu-id="cd166-210">예를 들어 경우 `obj` 됩니다 `null`, <xref:System.Object.Equals%2A> 메서드는 반환 해야 `false` throw 하는 대신는 <xref:System.ArgumentNullException>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-210">For example, if `obj` is `null`, the <xref:System.Object.Equals%2A> method should return `false` instead of throwing an <xref:System.ArgumentNullException>.</span></span>  
  
 <span data-ttu-id="cd166-211">재정의 하는 경우 이러한 지침 <xref:System.Object.Equals%28System.Object%29>:</span><span class="sxs-lookup"><span data-stu-id="cd166-211">Follow these guidelines when overriding <xref:System.Object.Equals%28System.Object%29>:</span></span>  
  
-   <span data-ttu-id="cd166-212">구현 하는 형식을 <xref:System.IComparable> 재정의 해야 <xref:System.Object.Equals%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-212">Types that implement <xref:System.IComparable> must override <xref:System.Object.Equals%28System.Object%29>.</span></span>  
  
-   <span data-ttu-id="cd166-213">재정의 하는 형식 <xref:System.Object.Equals%28System.Object%29> 재정의 해야 <xref:System.Object.GetHashCode%2A>고, 그렇지 않으면 해시 테이블 올바르게 작동 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-213">Types that override <xref:System.Object.Equals%28System.Object%29> must also override <xref:System.Object.GetHashCode%2A>; otherwise, hash tables  might not work correctly.</span></span>  
  
-   <span data-ttu-id="cd166-214">구현 하는 것이 좋습니다는 <xref:System.IEquatable%601> 강력 하 게 지원 하기 위해 인터페이스 형식의 같은지 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-214">You should consider implementing the <xref:System.IEquatable%601> interface to support strongly typed tests for equality.</span></span> <span data-ttu-id="cd166-215">프로그램 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 구현에서 일관 된 결과 반환 해야 <xref:System.Object.Equals%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-215">Your <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implementation should return results that are consistent with <xref:System.Object.Equals%2A>.</span></span>  
  
-   <span data-ttu-id="cd166-216">프로그래밍 언어가 연산자 오버 로드를 지 원하는 지정된 된 형식에 같음 연산자를 오버 로드를 재정의 해야 하는 경우는 <xref:System.Object.Equals%28System.Object%29> 같음 연산자와 동일한 결과 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-216">If your programming language supports operator overloading and you overload the equality operator for a given type, you must also override the <xref:System.Object.Equals%28System.Object%29> method to return the same result as the equality operator.</span></span> <span data-ttu-id="cd166-217">이렇게 하면 사용 하는 클래스 라이브러리 코드가 <xref:System.Object.Equals%2A> (같은 <xref:System.Collections.ArrayList> 고 <xref:System.Collections.Hashtable>) 응용 프로그램 코드에서 같음 연산자를 사용 하는 방법은 일치 하는 방식으로 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-217">This  helps ensure that class library code that uses <xref:System.Object.Equals%2A> (such as <xref:System.Collections.ArrayList> and <xref:System.Collections.Hashtable>) behaves in a manner that is consistent with the way the equality operator is used by application code.</span></span>  
  
### <a name="guidelines-for-reference-types"></a><span data-ttu-id="cd166-218">참조 형식에 대 한 지침</span><span class="sxs-lookup"><span data-stu-id="cd166-218">Guidelines for Reference Types</span></span>  
 <span data-ttu-id="cd166-219">다음 지침에 재정의 적용 <xref:System.Object.Equals%28System.Object%29> 참조 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-219">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a reference type:</span></span>  
  
-   <span data-ttu-id="cd166-220">재정의 하는 것이 좋습니다. <xref:System.Object.Equals%2A> 형식의 의미 체계 일부 값을 나타내는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd166-220">Consider overriding <xref:System.Object.Equals%2A> if the semantics of the type are based on the fact that the type represents some value(s).</span></span>  
  
-   <span data-ttu-id="cd166-221">재정의 한 경우에 대부분의 참조 형식은 같음 연산자를 재정의 하지 해야 합니다 <xref:System.Object.Equals%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-221">Most reference types must not overload the equality operator, even if they override <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="cd166-222">그러나 복잡 한 숫자 형식과 같은 값 의미 체계에 참조 형식을 구현 하는 경우 같음 연산자를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-222">However, if you are implementing a reference type that is intended to have value semantics, such as a complex number type, you must override the equality operator.</span></span>  
  
-   <span data-ttu-id="cd166-223">재정의 하지 않아야 함 <xref:System.Object.Equals%2A> 변경 가능한 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-223">You should not override <xref:System.Object.Equals%2A> on a mutable reference type.</span></span> <span data-ttu-id="cd166-224">재정의 되기 때문에 이것이 <xref:System.Object.Equals%2A> 도 재정의 하는 필요는 <xref:System.Object.GetHashCode%2A> 메서드를 이전 섹션에 설명 된 대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-224">This is because overriding <xref:System.Object.Equals%2A> requires that you also override the <xref:System.Object.GetHashCode%2A> method, as discussed in the previous section.</span></span> <span data-ttu-id="cd166-225">이 해시 테이블에서 손실 될 개체를 일으킬 수 있는 해당 수명 동안 변경할 수 있는 참조 형식 인스턴스의 해시 코드를 변경할 수 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-225">This means that the hash code of an instance of a mutable reference type can change during its lifetime, which can cause the object to be lost in a hash table.</span></span>  
  
### <a name="guidelines-for-value-types"></a><span data-ttu-id="cd166-226">값 형식에 대 한 지침</span><span class="sxs-lookup"><span data-stu-id="cd166-226">Guidelines for Value Types</span></span>  
 <span data-ttu-id="cd166-227">재정의에 다음 지침이 적용 <xref:System.Object.Equals%28System.Object%29> 값 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-227">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a value type:</span></span>  
  
-   <span data-ttu-id="cd166-228">하나 이상의 필드를 포함 하는 값 형식을 정의 하는 경우 해당 값은 참조 형식, 재정의 해야 <xref:System.Object.Equals%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-228">If you are defining a value type that includes one or more fields whose values are reference types, you should override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="cd166-229"><xref:System.Object.Equals%28System.Object%29> 가 제공한 구현을 <xref:System.ValueType> 형식이 값에 대 한 바이트 단위로 비교 필드는 모든 값 형식 이지만 리플렉션을 사용 하 여 해당 필드는 참조 형식을 포함 하는 값 형식의 필드에서 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-229">The <xref:System.Object.Equals%28System.Object%29> implementation provided by <xref:System.ValueType> performs a byte-by-byte comparison for value types whose fields are all value types, but it uses reflection to perform a field-by-field comparison of value types whose fields include reference types.</span></span>  
  
-   <span data-ttu-id="cd166-230">재정의 하는 경우 <xref:System.Object.Equals%2A> 개발 언어가 연산자 오버 로드를 지 원하는, 같음 연산자를 오버 로드 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-230">If you override <xref:System.Object.Equals%2A> and your development language supports operator overloading, you must overload the equality operator.</span></span>  
  
-   <span data-ttu-id="cd166-231">구현 해야 합니다 <xref:System.IEquatable%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-231">You should implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="cd166-232">강력한 형식의 호출 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> boxing을 방지 하는 메서드는 `obj` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-232">Calling the strongly typed <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method avoids boxing the `obj` argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-233">다음 예제와 `Point` 재정의 하는 클래스를 <xref:System.Object.Equals%2A> 값이 같은지를 제공 하는 방법 및 `Point3D` 클래스에서 파생 된 `Point`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-233">The following example shows a `Point` class that overrides the <xref:System.Object.Equals%2A> method to provide value equality, and a `Point3D` class that is derived from `Point`.</span></span> <span data-ttu-id="cd166-234">때문에 `Point` 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 의 값이 같은지를 테스트 하는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-234">Because `Point` overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to test for value equality, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is not called.</span></span> <span data-ttu-id="cd166-235">그러나 `Point3D.Equals` 호출 `Point.Equals` 있으므로 `Point` 구현 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 값이 같은지를 제공 하는 방식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-235">However, `Point3D.Equals` calls `Point.Equals` because `Point` implements <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> in a manner that provides value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals2#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals2/CS/equals2.cs#1)]
 [!code-vb[ECMA-System.Object.Equals2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals2/VB/equals2.vb#1)]  
  
 <span data-ttu-id="cd166-236">`Point.Equals` 메서드 했는지를 확인 합니다 `obj` 인수가 아닙니다 **null** 이 개체와 동일한 형식의 인스턴스를 참조 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-236">The `Point.Equals` method checks to make sure that the `obj` argument is not **null** and that it references an instance of the same type as this object.</span></span> <span data-ttu-id="cd166-237">메서드가 반환 하는 경우 검사에 실패할 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-237">If either check fails, the method returns `false`.</span></span>  
  
 <span data-ttu-id="cd166-238">합니다 `Point.Equals` 메서드 호출을 <xref:System.Object.GetType%2A> 두 개체의 런타임 형식이 동일한 지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-238">The `Point.Equals` method calls the <xref:System.Object.GetType%2A> method to determine whether the run-time types of the two objects are identical.</span></span> <span data-ttu-id="cd166-239">메서드는 폼의 확인을 사용 하는 경우 `obj is Point` C# 또는 `TryCast(obj, Point)` Visual basic의 경우 반환 합니다 `true` 의 경우 여기서 `obj` 파생된 클래스의 인스턴스인 `Point`경우에 `obj` 및 현재 인스턴스는 동일한 런타임 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-239">If the method used a check of the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic, the check would return `true` in cases where `obj` is an instance of a derived class of `Point`, even though `obj` and the current instance are not of the same run-time type.</span></span> <span data-ttu-id="cd166-240">것을 확인 했으면는 개체를 모두 같은 형식의 메서드 캐스팅 `obj` 형식으로 `Point` 두 개체의 인스턴스 필드 비교의 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-240">Having verified that both objects are of the same type, the method casts `obj` to type `Point` and returns the result of comparing the instance fields of the two objects.</span></span>  
  
 <span data-ttu-id="cd166-241">`Point3D.Equals`에서 상속 된 `Point.Equals` 메서드를 재정의 하는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, 인스턴스인지 전에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-241">In `Point3D.Equals`, the inherited `Point.Equals` method, which overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, is invoked before anything else is done.</span></span> <span data-ttu-id="cd166-242">때문에 `Point3D` 클래스는 봉인된 클래스 (`NotInheritable` Visual basic에서), 형식에서 검사를 `obj is Point` C# 또는 `TryCast(obj, Point)` Visual Basic의 적합 하도록 `obj` 는 `Point3D` 개체.</span><span class="sxs-lookup"><span data-stu-id="cd166-242">Because `Point3D` is a sealed class (`NotInheritable` in Visual Basic), a check in the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic is adequate to ensure that `obj` is a `Point3D` object.</span></span> <span data-ttu-id="cd166-243">경우는 `Point3D` 개체를 캐스팅 되는 `Point` 개체 및의 기본 클래스 구현에 전달 <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="cd166-243">If it is a `Point3D` object, it is cast to a `Point` object and passed to the base class implementation of <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="cd166-244">경우에만 상속 된 `Point.Equals` 메서드가 반환 `true` 메서드 비교에는 `z` 인스턴스 파생된 클래스에서 도입 된 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-244">Only when the inherited `Point.Equals` method returns `true` does the method compare the `z` instance fields introduced in the derived class.</span></span>  
  
 <span data-ttu-id="cd166-245">다음 예제에서는 정의 `Rectangle` 내부적으로 두 개의 사각형을 구현 하는 클래스 `Point` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-245">The following example defines a `Rectangle` class that internally implements a rectangle as two `Point` objects.</span></span> <span data-ttu-id="cd166-246">합니다 `Rectangle` 클래스에 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 값 같음에 대 한 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-246">The `Rectangle` class also overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to provide for value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals3#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals3/CS/equals3.cs#1)]
 [!code-vb[ECMA-System.Object.Equals3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals3/VB/equals3.vb#1)]  
  
 <span data-ttu-id="cd166-247">C# 및 Visual Basic과 같은 일부 언어 연산자 오버 로드를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-247">Some languages such as C# and Visual Basic support operator overloading.</span></span> <span data-ttu-id="cd166-248">형식이 같음 연산자를 오버 로드를 때 재정의 해야 합니다 <xref:System.Object.Equals%28System.Object%29> 동일한 기능을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-248">When a type overloads the equality operator, it must also override the <xref:System.Object.Equals%28System.Object%29> method to provide the same functionality.</span></span> <span data-ttu-id="cd166-249">작성 하 여 일반적으로 이렇게는 <xref:System.Object.Equals%28System.Object%29> 메서드는 다음 예제와 같이 오버 로드 된 같음 연산자를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-249">This is typically accomplished by writing the <xref:System.Object.Equals%28System.Object%29> method in terms of the overloaded equality operator, as in the following example.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals4#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals4/CS/equals4.cs#1)]
 [!code-vb[ECMA-System.Object.Equals4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals4/vb/equals4.vb#1)]  
  
 <span data-ttu-id="cd166-250">때문에 `Complex` 값 형식에서 파생 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-250">Because `Complex` is a value type, it cannot be derived from.</span></span>  <span data-ttu-id="cd166-251">재정의 하므로 <xref:System.Object.Equals%28System.Object%29> 메서드를 호출 하지 않아도 <xref:System.Object.GetType%2A> 결정할 정확한 런타임 유형의 없지만 각 개체를 대신 사용 합니다 `is` C# 연산자 또는 `TypeOf` 합니다 의유형을확인하려면VisualBasic의연산자`obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-251">Therefore, the override to <xref:System.Object.Equals%28System.Object%29> method need not call <xref:System.Object.GetType%2A> to determine the precise run-time type of each object, but can instead use the `is` operator in C# or the `TypeOf` operator in Visual Basic to check the type of the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberSignature Language="F#" Value="static member Equals : obj * obj -&gt; bool" Usage="System.obj.Equals (objA, objB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA"><span data-ttu-id="cd166-252">비교할 첫 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-252">The first object to compare.</span></span></param>
        <param name="objB"><span data-ttu-id="cd166-253">비교할 두 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-253">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="cd166-254">지정한 개체 인스턴스가 동일한지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-254">Determines whether the specified object instances are considered equal.</span></span></summary>
        <returns><span data-ttu-id="cd166-255">개체가 동일한 것으로 간주되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-255"><see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="cd166-256"><paramref name="objA" /> 및 <paramref name="objB" />가 **null**인 경우 메서드는 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-256">If both <paramref name="objA" /> and <paramref name="objB" /> are **null**, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-257">정적 <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> 여부를 두 개체, 메서드를 나타냅니다 `objA` 고 `objB`, 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-257">The static <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method indicates whether two objects, `objA` and  `objB`, are equal.</span></span> <span data-ttu-id="cd166-258">이 값인 개체를 테스트할 수도 있습니다 **null** 같음에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-258">It also enables you to test objects whose value is **null** for equality.</span></span> <span data-ttu-id="cd166-259">비교 `objA` 고 `objB` 같이 같음에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-259">It compares `objA` and `objB` for equality as follows:</span></span>  
  
-   <span data-ttu-id="cd166-260">두 개체가 같은 개체 참조를 나타내는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-260">It determines whether the two objects represent the same object reference.</span></span> <span data-ttu-id="cd166-261">메서드가 반환 하는 경우 그럴 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-261">If they do, the method returns `true`.</span></span> <span data-ttu-id="cd166-262">이 테스트는 호출에 해당 합니다 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-262">This test is equivalent to calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="cd166-263">또한 모두 `objA` 및 `objB` 됩니다 **null**, 메서드가 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-263">In addition, if both `objA` and `objB` are **null**, the method returns `true`.</span></span>  
  
-   <span data-ttu-id="cd166-264">결정 하는지 여부를 중 하나 `objA` 또는 `objB` 됩니다 **null**합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-264">It determines whether either `objA` or `objB` is **null**.</span></span> <span data-ttu-id="cd166-265">따라서 반환 하는 경우 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-265">If so, it returns `false`.</span></span>  
  
-   <span data-ttu-id="cd166-266">두 개체가 같은 개체 참조를 나타내지 않으면 고 둘 다 **null**을 호출한 `objA`.`Equals` (`objB`) 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-266">If the two objects do not represent the same object reference and neither is **null**, it calls `objA`.`Equals`(`objB`) and returns the result.</span></span> <span data-ttu-id="cd166-267">즉 `objA` 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드를이 재정의 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-267">This means that if `objA` overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, this override is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-268">다음 예제는 <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> 메서드 및 비교 하는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-268">The following example illustrates the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method and compares it with the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_static2.cs#1)]
 [!code-vb[System.Object.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_static2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Object ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Object ()" />
      <MemberSignature Language="F#" Value="abstract member Finalize : unit -&gt; unit&#xA;override this.Finalize : unit -&gt; unit" Usage="obj.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-269">가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-269">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-270"><xref:System.Object.Finalize%2A> 메서드 개체를 제거 하기 전에 현재 개체를 소유 하는 관리 되지 않는 리소스 정리 작업을 수행할를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-270">The <xref:System.Object.Finalize%2A> method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.</span></span> <span data-ttu-id="cd166-271">메서드는 보호 되 고 이므로이 클래스 또는 파생된 클래스를 통해 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-271">The method is protected and therefore is accessible only through this class or through a derived class.</span></span>  
  
 <span data-ttu-id="cd166-272">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="cd166-272">In this section:</span></span>  
  
-   [<span data-ttu-id="cd166-273">종료의 작동 원리</span><span class="sxs-lookup"><span data-stu-id="cd166-273">How finalization works</span></span>](#How)  
  
-   [<span data-ttu-id="cd166-274">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="cd166-274">Notes for implementers</span></span>](#Notes)  
  
-   [<span data-ttu-id="cd166-275">SafeHandle 대안</span><span class="sxs-lookup"><span data-stu-id="cd166-275">The SafeHandle alternative</span></span>](#SafeHandle)  
  
<a name="How"></a>   
## <a name="how-finalization-works"></a><span data-ttu-id="cd166-276">종료의 작동 원리</span><span class="sxs-lookup"><span data-stu-id="cd166-276">How finalization works</span></span>  
 <span data-ttu-id="cd166-277">합니다 <xref:System.Object> 클래스에 대 한 구현을 제공 합니다 <xref:System.Object.Finalize%2A> 메서드를 가비지 수집기에서 파생 된 형식으로 표시 되지 않습니다 <xref:System.Object> 종료에 대 한 재정의 하지 않는 한를 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-277">The <xref:System.Object> class provides no implementation for the <xref:System.Object.Finalize%2A> method, and the garbage collector does not mark types derived from <xref:System.Object> for finalization unless they override the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 <span data-ttu-id="cd166-278">형식에서 재정의 하는 경우는 <xref:System.Object.Finalize%2A> 메서드를 가비지 수집기는 종료 큐 라는 내부 구조에는 형식의 각 인스턴스에 대 한 항목을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-278">If a type does override the <xref:System.Object.Finalize%2A> method, the garbage collector adds an entry for each instance of the type to an internal structure called the finalization queue.</span></span> <span data-ttu-id="cd166-279">가비지 수집기가 메모리를 회수할 수 전에 종료 코드를 실행 해야 관리 되는 힙에 있는 모든 개체에 대 한 항목을 포함 하는 종료 큐에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-279">The finalization queue contains entries for all the objects in the managed heap whose finalization code must run before the garbage collector can reclaim their memory.</span></span> <span data-ttu-id="cd166-280">그런 다음 가비지 수집기를 호출 합니다 <xref:System.Object.Finalize%2A> 메서드는 다음 조건을 자동으로:</span><span class="sxs-lookup"><span data-stu-id="cd166-280">The garbage collector then calls the <xref:System.Object.Finalize%2A> method automatically under the following conditions:</span></span>  
  
-   <span data-ttu-id="cd166-281">가비지 수집기는 개체에 액세스할 수 없는 개체를 호출 하 여 종료에서 제외 된가 하지 않으면 검색에 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-281">After the garbage collector has discovered that an object is inaccessible, unless the object has been exempted from finalization by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="cd166-282">**.NET framework만**, 응용 프로그램 도메인을 종료 하는 동안 없으면 개체를 종료 한 예외로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-282">**On .NET Framework only**, during shutdown of an application domain, unless the object is exempt from finalization.</span></span> <span data-ttu-id="cd166-283">종료 하는 동안에 개체 계속 액세스할 수 있는 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-283">During shutdown, even objects that are still accessible are finalized.</span></span>  
  
 <span data-ttu-id="cd166-284"><xref:System.Object.Finalize%2A> 자동으로 한 번만 호출 인스턴스에, 개체는 같은 메커니즘을 사용 하 여 다시 등록 하지 않는 한 <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> 하며 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드가 이후에 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-284"><xref:System.Object.Finalize%2A> is automatically called only once on a given instance, unless the object is re-registered by using a mechanism such as <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> and the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method has not been subsequently called.</span></span>  
  
 <span data-ttu-id="cd166-285"><xref:System.Object.Finalize%2A> 작업은 다음과 같은 제한 사항이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-285"><xref:System.Object.Finalize%2A> operations have the following limitations:</span></span>  
  
-   <span data-ttu-id="cd166-286">정확한 시간 종료 자가 실행 되는 경우 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-286">The exact time when the finalizer executes is undefined.</span></span> <span data-ttu-id="cd166-287">클래스의 인스턴스는 구현에 대 한 리소스의 명확한 해제를 확인 하는 `Close` 메서드 제공 또는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-287">To ensure deterministic release of resources for instances of your class, implement a `Close` method or provide a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
-   <span data-ttu-id="cd166-288">다른 하나의 개체가 참조 하는 경우에 특정 순서에 관계 없이 실행 하는 두 개체의 종료자 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-288">The finalizers of two objects are not guaranteed to run in any specific order, even if one object refers to the other.</span></span> <span data-ttu-id="cd166-289">즉, 둘 다 종료자 개체 A가 개체 B에 대 한 참조를 개체 B 수 이미 종료 되었을 개체의 종료자를 시작할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-289">That is, if Object A has a reference to Object B and both have finalizers, Object B might have already been finalized when the finalizer of Object A starts.</span></span>  
  
-   <span data-ttu-id="cd166-290">종료 자가 실행 되는 스레드가 지정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-290">The thread on which the finalizer runs is unspecified.</span></span>  
  
 <span data-ttu-id="cd166-291"><xref:System.Object.Finalize%2A> 메서드 완료 될 때까지 실행 되지 않거나 다음 예외적인 상황에서 전혀 실행 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-291">The <xref:System.Object.Finalize%2A> method might not run to completion or might not run at all under the following exceptional circumstances:</span></span>  
  
-   <span data-ttu-id="cd166-292">다른 종료자를 무기한으로 차단 하는 경우 (잠금이 되지를 고 수 등을 가져오려고 시도 무한 루프로 이동).</span><span class="sxs-lookup"><span data-stu-id="cd166-292">If another finalizer blocks indefinitely (goes into an infinite loop, tries to obtain a lock it can never obtain, and so on).</span></span> <span data-ttu-id="cd166-293">런타임에서 종료자 실행이 완료 하려고 하기 때문에 다른 종료자 수 호출할 수 없습니다 경우 종료자 블록 무기한.</span><span class="sxs-lookup"><span data-stu-id="cd166-293">Because the runtime tries to run finalizers to completion, other finalizers might not be called if a finalizer blocks indefinitely.</span></span>  
  
-   <span data-ttu-id="cd166-294">경우 런타임에서 정리할 기회를 제공 하지 않고 프로세스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-294">If the process terminates without giving the runtime a chance to clean up.</span></span> <span data-ttu-id="cd166-295">이 경우 종료 프로세스의 첫 번째 알림 런타임의 DLL_PROCESS_DETACH 알림을 경우합니다</span><span class="sxs-lookup"><span data-stu-id="cd166-295">In this case, the runtime's first notification of process termination is a DLL_PROCESS_DETACH notification.</span></span>  
  
 <span data-ttu-id="cd166-296">런타임에서 종료 가능한 개체 수가 계속 감소 하는 동안에 개체를 종료 하는 동안 종료를 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-296">The runtime continues to finalize objects during shutdown only while the number of finalizable objects continues to decrease.</span></span>  
  
 <span data-ttu-id="cd166-297">하는 경우 <xref:System.Object.Finalize%2A> 또는 재정의 <xref:System.Object.Finalize%2A> 예외를 throw 하 고 런타임이 기본 정책을 재정의 하는 응용 프로그램에서 호스트 되지 않는, 프로세스 및 없는 활성 런타임이 종료 `try` / `finally` 블록 또는 종료자 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-297">If <xref:System.Object.Finalize%2A> or an override of <xref:System.Object.Finalize%2A> throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active `try`/`finally` blocks or finalizers are executed.</span></span> <span data-ttu-id="cd166-298">이 동작은 종료자 없거나 사용 가능한 리소스를 삭제 하는 경우 프로세스의 무결성을 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-298">This behavior ensures process integrity if the finalizer cannot free or destroy resources.</span></span>  
  
<a name="Notes"></a>   
## <a name="overriding-the-finalize-method"></a><span data-ttu-id="cd166-299">Finalize 메서드 재정의</span><span class="sxs-lookup"><span data-stu-id="cd166-299">Overriding the Finalize method</span></span> 
 <span data-ttu-id="cd166-300">재정의 해야 <xref:System.Object.Finalize%2A> 파일 핸들이 나 사용 하는 관리 되는 개체가 가비지 수집 중에 삭제 됩니다 때 해제 되어야 하는 데이터베이스 연결 등의 관리 되지 않는 리소스를 사용 하는 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-300">You should override <xref:System.Object.Finalize%2A> for a class that uses unmanaged resources, such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.</span></span> <span data-ttu-id="cd166-301">구현 하지 않아야는 <xref:System.Object.Finalize%2A> 메서드를 가비지 수집기는 관리 되는 리소스를 자동으로 해제 하기 때문에 개체를 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-301">You shouldn't implement a <xref:System.Object.Finalize%2A> method for managed objects because the garbage collector releases managed resources automatically.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cd166-302">경우는 <xref:System.Runtime.InteropServices.SafeHandle> 개체는 사용할 수 있는 관리 되지 않는 리소스를 래핑하는 권장 되는 대신 safehandle 사용 하 여 dispose 패턴을 구현 하 여 재정의 하지 <xref:System.Object.Finalize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-302">If a <xref:System.Runtime.InteropServices.SafeHandle> object is available that wraps your unmanaged resource, the recommended alternative is to implement the dispose pattern with a safe handle and not override <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="cd166-303">자세한 내용은 [The SafeHandle 대안](#SafeHandle) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-303">For more information, see [The SafeHandle alternative](#SafeHandle) section.</span></span>  
  
 <span data-ttu-id="cd166-304">합니다 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드가 기본적으로 아무 작업도 수행 하지 않지만 재정의 해야 <xref:System.Object.Finalize%2A> 필요 하 고 관리 되지 않는 리소스를 해제 하려는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-304">The <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method does nothing by default, but you should override <xref:System.Object.Finalize%2A> only if necessary, and only to release unmanaged resources.</span></span> <span data-ttu-id="cd166-305">메모리를 회수 길어질 종료 작업을 실행 하는 경우 두 개 이상의 가비지 컬렉션을 필요로 하는 경향이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-305">Reclaiming memory tends to take much longer if a finalization operation runs, because it requires at least two garbage collections.</span></span> <span data-ttu-id="cd166-306">또한를 재정의 해야 하는 <xref:System.Object.Finalize%2A> 메서드 참조용 형식 에서만.</span><span class="sxs-lookup"><span data-stu-id="cd166-306">In addition, you should override the <xref:System.Object.Finalize%2A> method for reference types only.</span></span> <span data-ttu-id="cd166-307">공용 언어 런타임에서 참조 형식만 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-307">The common language runtime only finalizes reference types.</span></span> <span data-ttu-id="cd166-308">값 형식에 종료자는 무시합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-308">It ignores finalizers on value types.</span></span>  

<span data-ttu-id="cd166-309">범위는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드는 `protected`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-309">The scope of the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method is `protected`.</span></span> <span data-ttu-id="cd166-310">클래스에서 메서드를 재정의 하는 경우에이 제한 된 범위를 유지 관리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-310">You should maintain this limited scope when you override the method in your class.</span></span> <span data-ttu-id="cd166-311">유지 하 여는 <xref:System.Object.Finalize%2A> 개체의 호출에서 응용 프로그램의 사용자를 방지 보호 되는 메서드, <xref:System.Object.Finalize%2A> 메서드를 직접.</span><span class="sxs-lookup"><span data-stu-id="cd166-311">By keeping a <xref:System.Object.Finalize%2A> method protected, you prevent users of your application from calling an object's <xref:System.Object.Finalize%2A> method directly.</span></span>
  
 <span data-ttu-id="cd166-312">모든 구현의 <xref:System.Object.Finalize%2A> 파생된 형식에서의 해당 기본 형식 구현을 호출 해야 <xref:System.Object.Finalize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-312">Every implementation of <xref:System.Object.Finalize%2A> in a derived type must call its base type's implementation of <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="cd166-313">이 응용 프로그램에서 코드를 호출할 수는 유일한 경우는 <xref:System.Object.Finalize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-313">This is the only case in which application code is allowed to call <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="cd166-314">개체의 <xref:System.Object.Finalize%2A> 메서드 이외의 해당 기본 클래스의 모든 개체에서 메서드를 호출 해서는 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-314">An object's <xref:System.Object.Finalize%2A> method shouldn't call a method on any objects other than that of its base class.</span></span> <span data-ttu-id="cd166-315">호출 되는 다른 개체 수집할 수 있는 동시 호출 하는 개체와 같은 공용 언어 런타임 종료의 경우 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-315">This is because the other objects being called could be collected at the same time as the calling object, such as in the case of a common language runtime shutdown.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="cd166-316">C# 컴파일러에서는 재정의할 수 없습니다는 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-316">The C# compiler does not allow you to override the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="cd166-317">구현 하 여 종료자를 제공 하는 대신 한 [소멸자](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-317">Instead, you provide a finalizer by implementing a [destructor](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) for your class.</span></span> <span data-ttu-id="cd166-318">C# 소멸자는 자동으로 기본 클래스의 소멸자를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-318">A C# destructor automatically calls the destructor of its base class.</span></span>  
>   
>  <span data-ttu-id="cd166-319">Visual c + + 구현에 대 한 자체 구문을 제공 합니다 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-319">Visual C++ also provides its own syntax for implementing the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="cd166-320">자세한 내용은 "소멸자 및 종료자" 섹션을 참조 하세요. [방법: 클래스 및 구조체 정의 및 사용 (C + + /cli CLI)](https://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-320">For more information, see the "Destructors and finalizers" section of [How to: Define and Consume Classes and Structs (C++/CLI)](https://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7).</span></span>  
  
 <span data-ttu-id="cd166-321">가비지 컬렉션에서는 비결 이기 때문에 모르는 가비지 수집기가 종료를 수행 하는 경우에 정확 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-321">Because garbage collection is non-deterministic, you do not know precisely when the garbage collector performs finalization.</span></span> <span data-ttu-id="cd166-322">리소스를 해제 하려면 즉시 수도 있습니다를 구현 하는 [dispose 패턴](~/docs/standard/garbage-collection/implementing-dispose.md) 및 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-322">To release resources immediately, you can also choose to implement the [dispose pattern](~/docs/standard/garbage-collection/implementing-dispose .md) and the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="cd166-323"><xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현 클래스 소비자가 관리 되지 않는 리소스를 해제 하 여 호출할 수 있고 사용할 수는 <xref:System.Object.Finalize%2A> 관리 되지 않는 리소스를 해제 하는 방법에는 <xref:System.IDisposable.Dispose%2A> 메서드가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-323">The <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation can be called by consumers of your class to free unmanaged resources, and you can use the <xref:System.Object.Finalize%2A> method to free unmanaged resources in the event that the <xref:System.IDisposable.Dispose%2A> method is not called.</span></span>  
  
 <span data-ttu-id="cd166-324"><xref:System.Object.Finalize%2A> 가비지 수집 동안 정리 되지 않은 후 개체 (즉, 내게 필요한 옵션이 개체 다시) 부활 하기를 포함 하 여 거의 모든 작업을 걸릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-324"><xref:System.Object.Finalize%2A> can take almost any action, including resurrecting an object (that is, making the object accessible again) after it has been cleaned up during garbage collection.</span></span> <span data-ttu-id="cd166-325">그러나 개체 수만 복원할 되지 않습니다. <xref:System.Object.Finalize%2A> 가비지 수집 중 부활 개체에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-325">However, the object can only be resurrected once; <xref:System.Object.Finalize%2A> cannot be called on resurrected objects during garbage collection.</span></span> <span data-ttu-id="cd166-326">하나의 액션이 구현의 <xref:System.Object.Finalize%2A> 해서는 안 됩니다: 예외를 throw 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-326">There is one action that your implementation of <xref:System.Object.Finalize%2A> should never take: it should never throw an exception.</span></span> <span data-ttu-id="cd166-327">메서드에서 throw 된 예외에서 호출 된 경우는 <xref:System.Object.Finalize%2A> 메서드는 처리 되지를 <xref:System.Object.Finalize%2A> 메서드를 런타임에 가정를 <xref:System.Object.Finalize%2A> 메서드는 반환 하 고 계속 호출 하는 <xref:System.Object.Finalize%2A> 다른 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-327">If any exceptions thrown by methods called from the <xref:System.Object.Finalize%2A> method are unhandled by the <xref:System.Object.Finalize%2A> method, the runtime assumes that the <xref:System.Object.Finalize%2A> method returned and continues to call the <xref:System.Object.Finalize%2A> methods of other objects.</span></span> 
  
<a name="SafeHandle"></a>   
## <a name="the-safehandle-alternative"></a><span data-ttu-id="cd166-328">SafeHandle 대안</span><span class="sxs-lookup"><span data-stu-id="cd166-328">The SafeHandle alternative</span></span>  
 <span data-ttu-id="cd166-329">신뢰할 수 있는 종료자를 만들기 어렵습니다, 이므로 같은 시스템 예외를 처리 되지 않은 응용 프로그램의 상태에 대 한 가정을 변경할 수 없으므로 <xref:System.OutOfMemoryException> 고 <xref:System.StackOverflowException> 종료자를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-329">Creating reliable finalizers is often difficult, because you cannot make assumptions about the state of your application, and because unhandled system exceptions such as <xref:System.OutOfMemoryException> and <xref:System.StackOverflowException> terminate the finalizer.</span></span> <span data-ttu-id="cd166-330">관리 되지 않는 리소스를 해제 하려면 클래스에 대 한 종료자를 구현 하는 대신에서 파생 된 개체를 사용할 수 있습니다는 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 관리 되지 않는 리소스를 래핑할 클래스 및 종료 자가 없는 dispose 패턴을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-330">Instead of implementing a finalizer for your class to release unmanaged resources, you can use an object that is derived from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> class to wrap your unmanaged resources, and then implement the dispose pattern without a finalizer.</span></span> <span data-ttu-id="cd166-331">.NET Framework의 클래스를 제공 합니다 <xref:Microsoft.Win32?displayProperty=nameWithType> 에서 파생 되는 네임 스페이스 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="cd166-331">The .NET Framework provides the following classes in the <xref:Microsoft.Win32?displayProperty=nameWithType> namespace that are derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="cd166-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 파일 핸들의 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> is a wrapper class for a file handle.</span></span>  
  
-   <span data-ttu-id="cd166-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> 메모리 매핑된 파일 핸들에 대 한 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> is a wrapper class for memory-mapped file handles.</span></span>  
  
-   <span data-ttu-id="cd166-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> 관리 되지 않는 메모리 블록에 대 한 포인터에 대 한 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> is a wrapper class for a pointer to a block of unmanaged memory.</span></span>  
  
-   <span data-ttu-id="cd166-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>를 <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, 및 <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> 암호화 핸들에 대 한 래퍼 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> are wrapper classes for cryptographic handles.</span></span>  
  
-   <span data-ttu-id="cd166-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> 파이프 핸들에 대 한 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> is a wrapper class for pipe handles.</span></span>  
  
-   <span data-ttu-id="cd166-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 레지스트리 키에 대 한 핸들에 대 한 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> is a wrapper class for a handle to a registry key.</span></span>  
  
-   <span data-ttu-id="cd166-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 대기 핸들의 래퍼 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> is a wrapper class for a wait handle.</span></span>  
  
 <span data-ttu-id="cd166-339">다음 예제에서는 합니다 [삭제 패턴](~/docs/standard/garbage-collection/implementing-dispose.md) 재정의 하는 대신 safehandle을 사용 하 여는 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-339">The following example uses the [dispose pattern](~/docs/standard/garbage-collection/implementing-dispose.md) with safe handles instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="cd166-340">정의 `FileAssociation` 특정 파일 확장명을 사용 하 여 파일을 처리 하는 응용 프로그램에 대 한 레지스트리 정보를 래핑하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-340">It defines a `FileAssociation` class that wraps registry information about the application that handles files with a particular file extension.</span></span> <span data-ttu-id="cd166-341">로 반환 하는 두 레지스트리 핸들 `out` Windows에서 매개 변수 [RegOpenKeyEx](https://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) 함수 호출에 전달 되는 <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-341">The two registry handles returned as `out` parameters by Windows [RegOpenKeyEx](https://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) function calls are passed to the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> constructor.</span></span> <span data-ttu-id="cd166-342">종류의 protected `Dispose` 메서드를 호출 합니다 `SafeRegistryHandle.Dispose` 이러한 두 핸들을 해제 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="cd166-342">The type's protected `Dispose` method then calls the `SafeRegistryHandle.Dispose` method  to free these two handles.</span></span>  
  
 [!code-csharp[System.Object.Finalize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize_safe.cs#2)]
 [!code-vb[System.Object.Finalize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize_safe.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="cd166-343">다음 예제에서는 확인 합니다 <xref:System.Object.Finalize%2A> 메서드는 재정의 하는 개체가 <xref:System.Object.Finalize%2A> 소멸 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-343">The following example verifies that the <xref:System.Object.Finalize%2A> method is called when an object that overrides <xref:System.Object.Finalize%2A> is destroyed.</span></span> <span data-ttu-id="cd166-344">응용 프로그램을 프로덕션에서의 <xref:System.Object.Finalize%2A> 개체에서 보유 하는 관리 되지 않는 리소스를 해제 메서드를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-344">Note that, in a production application, the <xref:System.Object.Finalize%2A> method would be overridden to release unmanaged resources held by the object.</span></span> <span data-ttu-id="cd166-345">C# 예제에서는 재정의 하는 대신 소멸자는 참고를 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-345">Also note that the C# example provides a destructor instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Finalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize1.cs#1)]
 [!code-vb[System.Object.Finalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize1.vb#1)]  
  
 <span data-ttu-id="cd166-346">재정의 하는 추가 예제는 <xref:System.Object.Finalize%2A> 메서드를 참조 합니다 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-346">For an additional example that overrides the <xref:System.Object.Finalize%2A> method, see the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.GC.WaitForPendingFinalizers" />
        <altmember cref="T:System.WeakReference" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int&#xA;override this.GetHashCode : unit -&gt; int" Usage="obj.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-347">기본 해시 함수로 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-347">Serves as the default hash function.</span></span></summary>
        <returns><span data-ttu-id="cd166-348">현재 개체의 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-348">A hash code for the current object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-349">해시 코드를 삽입 하 고 같은 해시를 기반으로 컬렉션의 개체를 식별 하는 데 사용 되는 숫자 값을 <xref:System.Collections.Generic.Dictionary%602> 클래스를 <xref:System.Collections.Hashtable> 클래스나 형식에서 파생 된는 <xref:System.Collections.DictionaryBase> 클래스.</span><span class="sxs-lookup"><span data-stu-id="cd166-349">A hash code is a numeric value that is used to insert and identify an object in a hash-based collection such as the <xref:System.Collections.Generic.Dictionary%602> class, the <xref:System.Collections.Hashtable> class, or a type derived from the <xref:System.Collections.DictionaryBase> class.</span></span> <span data-ttu-id="cd166-350"><xref:System.Object.GetHashCode%2A> 메서드 개체 같음의 빠른 검사 해야 하는 알고리즘에 대 한이 해시 코드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-350">The <xref:System.Object.GetHashCode%2A> method provides this hash code for algorithms that need quick checks of object equality.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd166-351">해시 테이블의 해시 코드 사용 하는 방법에 대 한 내용은 및 일부 추가 해시 코드 알고리즘에 대 한 참조를 [해시 함수](https://en.wikipedia.org/wiki/Hash_function) Wikipedia의 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-351">For information about how hash codes are used in hash tables and for some additional hash code algorithms, see the [Hash Function](https://en.wikipedia.org/wiki/Hash_function) entry in Wikipedia.</span></span>  
  
 <span data-ttu-id="cd166-352">두 개체는 동일한 반환는 같은 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-352">Two objects that are equal return hash codes that are equal.</span></span> <span data-ttu-id="cd166-353">그러나는 성립 되지: 다른 (같지 않음) 개체는 동일한 해시 코드를 포함할 수 있으므로 같은 해시 코드를 개체 같음 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-353">However, the reverse is not true: equal hash codes do not imply object equality, because different (unequal) objects can have identical hash codes.</span></span> <span data-ttu-id="cd166-354">또한.NET Framework의 기본 구현을 보장 하지 않습니다는 <xref:System.Object.GetHashCode%2A> 메서드와이 메서드가 반환 다 32 비트 및 64 비트 플랫폼 등의 플랫폼 및.NET Framework 버전 간의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-354">Furthermore, the .NET Framework does not guarantee the default implementation of the <xref:System.Object.GetHashCode%2A> method, and the value this method returns may differ between .NET Framework versions and platforms, such as 32-bit and 64-bit platforms.</span></span> <span data-ttu-id="cd166-355">이러한 이유로, 사용 하지 마십시오이 메서드의 기본 구현은 고유한 개체 식별자로 해시를 위해.</span><span class="sxs-lookup"><span data-stu-id="cd166-355">For these reasons, do not use the default implementation of this method as a unique object identifier for hashing purposes.</span></span> <span data-ttu-id="cd166-356">두 결과에서이 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-356">Two consequences follow from this:</span></span>  
  
-   <span data-ttu-id="cd166-357">같은 해시 코드 개체 같음 의미는 가정 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-357">You should not assume that equal hash codes imply object equality.</span></span>  
  
-   <span data-ttu-id="cd166-358">되지 유지 하거나 응용 프로그램 도메인, 프로세스 및 플랫폼에서 동일한 개체 해시 수 때문에 생성 된 응용 프로그램 도메인 외부 해시 코드를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-358">You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash across application domains, processes, and platforms.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cd166-359">해시 코드를 효율적인 삽입 및 해시 테이블을 기반으로 하는 컬렉션에서 조회를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-359">A hash code is intended for efficient insertion and lookup in collections that are based on a hash table.</span></span> <span data-ttu-id="cd166-360">해시 코드를 영구적으로 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-360">A hash code is not a permanent value.</span></span> <span data-ttu-id="cd166-361">이러한 이유로:</span><span class="sxs-lookup"><span data-stu-id="cd166-361">For this reason:</span></span>  
>   
> -   <span data-ttu-id="cd166-362">해시 코드 값을 serialize 하거나 데이터베이스에 저장 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cd166-362">Do not serialize hash code values or store them in databases.</span></span>  
> -   <span data-ttu-id="cd166-363">키 컬렉션에서 개체를 검색할 키로 해시 코드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cd166-363">Do not use the hash code as the key to retrieve an object from a keyed collection.</span></span>  
> -   <span data-ttu-id="cd166-364">응용 프로그램 도메인 또는 프로세스에서 해시 코드를 보내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-364">Do not send hash codes across application domains or processes.</span></span> <span data-ttu-id="cd166-365">경우에 따라 해시 코드는 프로세스별 또는 응용 프로그램 도메인 별로 계산 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-365">In some cases, hash codes may be computed on a per-process or per-application domain basis.</span></span>  
> -   <span data-ttu-id="cd166-366">암호화 된 강력한 해시 해야 하는 경우 암호화 해시 함수에서 반환 된 값 대신 해시 코드를 사용 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="cd166-366">Do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="cd166-367">암호화 해시, 파생 클래스를 사용 합니다 <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> 또는 <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-367">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
> -   <span data-ttu-id="cd166-368">두 개체가 같은지 여부를 확인 하려면 해시 코드의 같은지 테스트 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cd166-368">Do not test for equality of hash codes to determine whether two objects are equal.</span></span> <span data-ttu-id="cd166-369">(같지 않은 개체에 동일한 해시 코드를 가질 수 있습니다.) 같은지를 테스트 하려면 다음을 호출 합니다 <xref:System.Object.ReferenceEquals%2A> 또는 <xref:System.Object.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-369">(Unequal objects can have identical hash codes.) To test for equality, call the <xref:System.Object.ReferenceEquals%2A> or <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="cd166-370"><xref:System.Object.GetHashCode%2A> 파생된 된 형식에서 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-370">The <xref:System.Object.GetHashCode%2A> method can be overridden by a derived type.</span></span> <span data-ttu-id="cd166-371">하는 경우 <xref:System.Object.GetHashCode%2A> 은 재정의 되지 않으면 해시 코드를 호출 하 여 계산 됩니다 참조 형식에 대 한 합니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 메서드의 해시 코드를 계산 하는 기본 클래스를을 기준으로 개체의 참조에 대 한 자세한 내용은 <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-371">If <xref:System.Object.GetHashCode%2A> is not overridden, hash codes for reference types are computed by calling the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method of the base class, which computes a hash code based on an object's reference; for more information, see <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd166-372">즉, 두 개체의 합니다 <xref:System.Object.ReferenceEquals%2A> 메서드가 반환 되는 `true` 동일한 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-372">In other words, two objects for which the <xref:System.Object.ReferenceEquals%2A> method returns `true` have identical hash codes.</span></span> <span data-ttu-id="cd166-373">값 형식을 재정의 하지 않습니다 <xref:System.Object.GetHashCode%2A>, <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> 메서드는 기본 클래스의 리플렉션을 사용 하 여 해당 형식의 필드의 값을 기반으로 해시 코드를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-373">If value types do not override <xref:System.Object.GetHashCode%2A>, the <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> method of the base class uses reflection to compute the hash code based on the values of the type's fields.</span></span> <span data-ttu-id="cd166-374">즉, 해당 필드에 값이 같으면 값 형식에는 같은 해시 코드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-374">In other words, value types whose fields have equal values have equal hash codes.</span></span> <span data-ttu-id="cd166-375">재정의 하는 방법에 대 한 자세한 내용은 <xref:System.Object.GetHashCode%2A>, "상속자 참고 사항" 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="cd166-375">For more information about overriding <xref:System.Object.GetHashCode%2A>, see the "Notes to Inheritors" section.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cd166-376">재정의 하는 경우는 <xref:System.Object.GetHashCode%2A> 메서드를 재정의 해야 하는 또한 <xref:System.Object.Equals%2A>, 그 반대로 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-376">If you override the <xref:System.Object.GetHashCode%2A> method, you should also override <xref:System.Object.Equals%2A>, and vice versa.</span></span> <span data-ttu-id="cd166-377">경우 재정의 된 <xref:System.Object.Equals%2A> 메서드가 반환 `true` 재정의 된 같음에 대 한 두 개체는 테스트 하는 경우 <xref:System.Object.GetHashCode%2A> 메서드는 두 개체에 대해 동일한 값을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-377">If your overridden <xref:System.Object.Equals%2A> method returns `true` when two objects are tested for equality, your overridden <xref:System.Object.GetHashCode%2A> method must return the same value for the two objects.</span></span>  
  
 <span data-ttu-id="cd166-378">경우 해시 테이블의 키로 사용 되는 개체에서는 구현 하는 유용한 <xref:System.Object.GetHashCode%2A>를 제공 하 여 해시 코드 공급자를 지정할 수 있습니다는 <xref:System.Collections.IEqualityComparer> 오버 로드 중 하나를 구현 합니다 <xref:System.Collections.Hashtable> 클래스 생성자.</span><span class="sxs-lookup"><span data-stu-id="cd166-378">If an object that is used as a key in a hash table does not provide a useful implementation of <xref:System.Object.GetHashCode%2A>, you can specify a hash code provider by supplying an <xref:System.Collections.IEqualityComparer> implementation to one of the overloads of the <xref:System.Collections.Hashtable> class constructor.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="cd166-379">에 대 한 정보는 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="cd166-379">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="cd166-380">호출 하는 경우는 <xref:System.Object.GetHashCode%2A> 클래스의 메서드를 [!INCLUDE[wrt](~/includes/wrt-md.md)]를 재정의 하지 않는 하는 클래스에 대 한 기본 동작을 제공 <xref:System.Object.GetHashCode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-380">When you call the <xref:System.Object.GetHashCode%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don't override <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="cd166-381">이.NET Framework에 대 한 제공 하는 지원의 일부를 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows 런타임](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="cd166-381">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="cd166-382">클래스는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 안 함 <xref:System.Object>, 및 현재 구현 하지 않습니다는 <xref:System.Object.GetHashCode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-382">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don't inherit <xref:System.Object>, and currently don't implement a <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="cd166-383">그러나 가진 것으로 나타납니다 <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, 및 <xref:System.Object.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework는 이러한 메서드의 기본 동작을 제공 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd166-383">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="cd166-384">C# 또는 Visual Basic에서 작성 된 클래스에서 재정의할 수는 <xref:System.Object.GetHashCode%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-384">classes that are written in C# or Visual Basic can override the <xref:System.Object.GetHashCode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-385">동일 하거나 보다 작은 범위에는 숫자 값에 대 한 해시 코드를 계산 하는 가장 간단한 방법 중 하나는 <xref:System.Int32> 형식은 단순히 해당 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-385">One of the simplest ways to compute a hash code for a numeric value that has the same or a smaller range than the <xref:System.Int32> type is to simply return that value.</span></span> <span data-ttu-id="cd166-386">다음 예제에서는 이러한 구현에 대 한는 `Number` 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-386">The following example shows such an implementation for a `Number` structure.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/direct1.cs#1)]
 [!code-vb[System.Object.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/direct1.vb#1)]  
  
 <span data-ttu-id="cd166-387">대부분의 경우 형식에 해시 코드를 생성에 참여할 수 있는 여러 데이터 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-387">Frequently, a type has multiple data fields that can participate in generating the hash code.</span></span> <span data-ttu-id="cd166-388">해시 코드를 생성 하는 한 가지 방법은 사용 하 여 이러한 필드를 결합 하는 것을 `XOR (eXclusive OR)` 다음 예제에서와 같이 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-388">One way to generate a hash code is to combine these fields using an `XOR (eXclusive OR)` operation, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor1.cs#2)]
 [!code-vb[System.Object.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor1.vb#2)]  
  
 <span data-ttu-id="cd166-389">이전 예제에서는 동일한 해시 코드를 반환 합니다 (n1, n2) 및 (n2, n1), 이므로 적합 한 보다 자세한 충돌을 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-389">The previous example returns the same hash code for (n1, n2) and (n2, n1), and so may generate more collisions than are desirable.</span></span> <span data-ttu-id="cd166-390">이러한 경우 해시 코드가 동일 하지 않은 되도록 여러 솔루션을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-390">A number of solutions are available so that hash codes in these cases are not identical.</span></span> <span data-ttu-id="cd166-391">해시 코드를 반환 하는 경우 하나는 `Tuple` 각 필드의 순서를 반영 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-391">One is to return the hash code of a `Tuple` object that reflects the order of each field.</span></span> <span data-ttu-id="cd166-392">다음 예제에서는 사용 하는 가능한 구현 된 <xref:System.Tuple%602> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-392">The following example shows a possible implementation that uses the <xref:System.Tuple%602> class.</span></span> <span data-ttu-id="cd166-393">단는 인스턴스화하는 성능 오버 헤드를 `Tuple` 개체 해시 테이블에 많은 수의 개체를 저장 하는 응용 프로그램의 전반적인 성능에 큰 영향 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-393">Note, though, that the performance overhead of instantiating a `Tuple` object may significantly impact the overall performance of an application that stores large numbers of objects in hash tables.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor2.cs#3)]
 [!code-vb[System.Object.GetHashCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor2.vb#3)]  
  
 <span data-ttu-id="cd166-394">두 번째 대체 솔루션으로 비트를 두 개 이상의 연속 된 필드의 해시 코드를 왼쪽-이동 하 여 개별 해시 코드를 가중치 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-394">A second alternative solution involves weighting the individual hash codes by left-shifting the hash codes of successive fields by two or more bits.</span></span> <span data-ttu-id="cd166-395">최적으로 삭제 되는 대신 31 비트를 벗어나 이동 비트 기준으로 줄 바꿈되는 대신 삭제.</span><span class="sxs-lookup"><span data-stu-id="cd166-395">Optimally, instead of being discarded, bits shifted beyond bit 31 should wrap around rather than be discarded.</span></span> <span data-ttu-id="cd166-396">비트는 C# 및 Visual Basic 왼쪽 시프트 연산자가 무시 되는 있으므로이 다음과 같이 왼쪽된 시프트 및 줄 바꿈 메서드 만들기 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-396">Since bits are discarded by the left-shift operators in both C# and Visual Basic, this requires creating a left shift-and-wrap method like the following:</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#4)]
 [!code-vb[System.Object.GetHashCode#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#4)]  
  
 <span data-ttu-id="cd166-397">다음 예제에서는이 shift 및 줄 바꿈의 해시 코드를 계산 하는 `Point` 이전 예제에서 사용 되는 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-397">The following example then uses this shift-and-wrap method to compute the hash code of the `Point` structure used in the previous examples.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#5)]
 [!code-vb[System.Object.GetHashCode#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cd166-398">해시 함수 개체의 값에 해당 하는 숫자 (해시 코드)를 신속 하 게 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-398">A hash function is used to quickly generate a number (hash code) that corresponds to the value of an object.</span></span> <span data-ttu-id="cd166-399">해시 함수는 각 형식에 일반적으로 특정 하 고 고유성을 위해 사용 해야 하나 이상의 인스턴스 필드를 입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-399">Hash functions are usually specific to each type and, for uniqueness, must use at least one of the instance fields as input.</span></span> <span data-ttu-id="cd166-400">정적 필드의 값을 사용 하 여 해시 코드를 계산할 수 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-400">Hash codes should not be computed by using the values of static fields.</span></span>  
  
<span data-ttu-id="cd166-401">파생 된 클래스 <see cref="T:System.Object" />는 <see langword="GetHashCode" /> 메서드는 기본 클래스를 위임할 수 <see cref="M:System.Object.GetHashCode" /> 파생된 클래스 참조 일치에 일치 여부를 정의 하는 경우에 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-401">For classes derived from <see cref="T:System.Object" />, the <see langword="GetHashCode" /> method can delegate to the base class <see cref="M:System.Object.GetHashCode" /> implementation only if the derived class defines equality to be reference equality.</span></span> <span data-ttu-id="cd166-402">기본 구현의 <see cref="M:System.Object.GetHashCode" /> 참조 형식을 반환한 것에 해당 하는 해시 코드를 반환 하는 <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-402">The default implementation of <see cref="M:System.Object.GetHashCode" /> for reference types returns a hash code that is equivalent to the one returned by the <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> method.</span></span> <span data-ttu-id="cd166-403">재정의할 수 있습니다 <see cref="M:System.Object.GetHashCode" /> 변경할 수 없는 참조 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-403">You can override <see cref="M:System.Object.GetHashCode" /> for immutable reference types.</span></span> <span data-ttu-id="cd166-404">일반적으로 변경할 수 있는 참조 형식에 대해 재정의 해야 <see cref="M:System.Object.GetHashCode" /> 경우에만:</span><span class="sxs-lookup"><span data-stu-id="cd166-404">In general, for mutable reference types, you should override <see cref="M:System.Object.GetHashCode" /> only if:</span></span> 
<span data-ttu-id="cd166-405">해시 코드를 변경할 수 없는; 되지 않는 필드를 계산할 수 있습니다- 또는</span><span class="sxs-lookup"><span data-stu-id="cd166-405">-   You can compute the hash code from fields that are not mutable; or</span></span> 
<span data-ttu-id="cd166-406">-해시 코드를 사용 하는 컬렉션의 개체가 포함 되는 동안 변경할 수 있는 개체의 해시 코드를 변경 하지 않도록 보장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-406">-   You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.</span></span>  
  
<span data-ttu-id="cd166-407">그렇지 않으면 변경할 수 있는 개체 해시 테이블에서 손실 되는 생각할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-407">Otherwise, you might think that the mutable object is lost in the hash table.</span></span> <span data-ttu-id="cd166-408">재정의 하려는 경우 <see cref="M:System.Object.GetHashCode" /> 변경 가능한 참조 형식에 대 한 설명서는 명확 하 게 사용자 형식의 개체는 해시 테이블에 저장 하는 동안 개체 값을 수정 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-408">If you do choose to override <see cref="M:System.Object.GetHashCode" /> for a mutable reference type, your documentation should make it clear that users of your type should not modify object values while the object is stored in a hash table.</span></span>  
  
<span data-ttu-id="cd166-409">값 형식에 대 한 <see cref="M:System.ValueType.GetHashCode" /> 리플렉션을 사용 하는 기본 해시 코드 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-409">For value types, <see cref="M:System.ValueType.GetHashCode" /> provides a default hash code implementation that uses reflection.</span></span> <span data-ttu-id="cd166-410">성능 향상을 위해 재정의 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-410">You should consider overriding it for better performance.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="cd166-411">자세한 내용과 다양 한 방법에에서 대 한 해시 코드를 계산 하는 예제는 예제 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="cd166-411">For more information and examples that compute hash codes in a variety of ways, see the Examples section.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="cd166-412">해시 함수는 다음과 같은 속성이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-412">A hash function must have the following properties:</span></span> 
<span data-ttu-id="cd166-413">-두 개체 같음으로 비교 하는 경우는 <see cref="M:System.Object.GetHashCode" /> 각 개체에 대 한 메서드는 동일한 값을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-413">-   If two objects compare as equal, the <see cref="M:System.Object.GetHashCode" /> method for each object must return the same value.</span></span> <span data-ttu-id="cd166-414">그러나 두 개체를 동일한 것으로 비교 하지 않습니다 하는 경우는 <see cref="M:System.Object.GetHashCode" /> 두 개체의 메서드를 다른 값을 반환할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-414">However, if two objects do not compare as equal, the <see cref="M:System.Object.GetHashCode" /> methods for the two objects do not have to return different values.</span></span>  
  
<span data-ttu-id="cd166-415">- <see cref="M:System.Object.GetHashCode" /> 메서드는 개체에 대 한 개체의 반환 값을 결정 하는 개체 상태를 수정 하지 않으면으로 동일한 해시 코드를 일관 되 게 반환 해야 합니다 [System.Object.Equals](xref:System.Object.Equals*) 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-415">-   The <see cref="M:System.Object.GetHashCode" /> method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's [System.Object.Equals](xref:System.Object.Equals*) method.</span></span> <span data-ttu-id="cd166-416">이 응용 프로그램의 현재 실행에 대해서만 true 및 응용 프로그램을 다시 실행 되 면 다른 해시 코드를 반환할 수는 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-416">Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again.</span></span>  
  
<span data-ttu-id="cd166-417">-해시 함수는 최상의 성능을 위해 클러스터 많이 않은 입력을 포함 하 여 모든 입력에 대해 균등을 생성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-417">-   For the best performance, a hash function should generate an even distribution for all input, including input that is heavily clustered.</span></span> <span data-ttu-id="cd166-418">의미는 개체 상태를 약간 수정할 개가 수신 되어야 대규모 수정을 최상의 성능을 얻으려면 해시 테이블 결과 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-418">An implication is that small modifications to object state should result in large modifications to the resulting hash code for best hash table performance.</span></span>  
  
<span data-ttu-id="cd166-419">해시 함수를 계산 하는 데 비용이 많이 드는 취소 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-419">-   Hash functions should be inexpensive to compute.</span></span>  
  
<span data-ttu-id="cd166-420">- <see cref="M:System.Object.GetHashCode" /> 메서드는 예외를 throw 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-420">-   The <see cref="M:System.Object.GetHashCode" /> method should not throw exceptions.</span></span>  
  
<span data-ttu-id="cd166-421">구현의 예를 들어, 합니다 <see cref="M:System.String.GetHashCode" /> 에서 제공 하는 메서드를 <see cref="T:System.String" /> 클래스 동일한 문자열 값에 대해 동일한 해시 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-421">For example, the implementation of the <see cref="M:System.String.GetHashCode" /> method provided by the <see cref="T:System.String" /> class returns identical hash codes for identical string values.</span></span> <span data-ttu-id="cd166-422">따라서 두 <see cref="T:System.String" /> 동일한 문자열 값을 나타내는 경우 개체는 같은 해시 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-422">Therefore, two <see cref="T:System.String" /> objects return the same hash code if they represent the same string value.</span></span> <span data-ttu-id="cd166-423">또한 메서드를 사용 하 여 모든 문자 문자열에 입력 특정 범위에 클러스터 된 경우에 무작위 분포 된 출력을 생성 (예를 들어 많은 사용자가 있을 수 있습니다도 낮은 128 ASCII 문자만 포함 하는 문자열을 문자열이 포함할 수 있습니다 65,535 유니코드 문자).</span><span class="sxs-lookup"><span data-stu-id="cd166-423">Also, the method uses all the characters in the string to generate reasonably randomly distributed output, even when the input is clustered in certain ranges (for example, many users might have strings that contain only the lower 128 ASCII characters, even though a string can contain any of the 65,535 Unicode characters).</span></span>  
  
<span data-ttu-id="cd166-424">클래스에 적절 한 해시 함수를 제공 하는 해시 테이블에 해당 개체를 추가 하는 성능 크게 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-424">Providing a good hash function on a class can significantly affect the performance of adding those objects to a hash table.</span></span> <span data-ttu-id="cd166-425">해시 함수를 구현 하는 키를 사용 하 여 해시 테이블의 요소를 검색 시간이 상수 (예: O(1) 작업).</span><span class="sxs-lookup"><span data-stu-id="cd166-425">In a hash table with keys that provide a good implementation of a hash function, searching for an element takes constant time (for example, an O(1) operation).</span></span> <span data-ttu-id="cd166-426">잘 구현 되지 않은 해시 함수를 사용 하 여 해시 테이블의 검색 성능에 따라 달라 집니다 해시 테이블의 항목 수 (예를 들어 O (`n`) 작업을 여기서 `n` 해시 테이블의 항목 수입니다).</span><span class="sxs-lookup"><span data-stu-id="cd166-426">In a hash table with a poor implementation of a hash function, the performance of a search depends on the number of items in the hash table (for example, an O(`n`) operation, where `n` is the number of items in the hash table).</span></span> <span data-ttu-id="cd166-427">악의적인 사용자는 다음 조건에서 해시 테이블에 종속 된 응용 프로그램의 성능을 상당히 저하 될 수 있습니다. 있는 충돌 수가 증가 하는 데이터를 입력할 수 있습니다.:</span><span class="sxs-lookup"><span data-stu-id="cd166-427">A malicious user can input data that increases the number of collisions, which can significantly degrade the performance of applications that depend on hash tables, under the following conditions:</span></span> 
<span data-ttu-id="cd166-428">-경우 해시 함수는 자주 충돌을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-428">-   When hash functions produce frequent collisions.</span></span>  
  
<span data-ttu-id="cd166-429">-경우 해시 테이블에서 개체의 상당한 부분 같은지 또는 약 서로 같은지 여부를 지정 하는 해시 코드를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-429">-   When a large proportion of objects in a hash table produce hash codes that are equal or approximately equal to one another.</span></span>  
  
<span data-ttu-id="cd166-430">-사용자의 해시 코드 계산 되는 데이터를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-430">-   When users input the data from which the hash code is computed.</span></span>  
  
<span data-ttu-id="cd166-431">재정의 하는 클래스를 파생 <see cref="M:System.Object.GetHashCode" /> 재정의 해야 합니다 <see cref="M:System.Object.Equals(System.Object)" /> 같은 것으로 간주 하는 두 개체가 동일한 해시 코드를 있는지을 보장 하기 위해이 고, 그렇지는 <see cref="T:System.Collections.Hashtable" /> 형식을 제대로 작동 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-431">Derived classes that override <see cref="M:System.Object.GetHashCode" /> must also override <see cref="M:System.Object.Equals(System.Object)" /> to guarantee that two objects considered equal have the same hash code; otherwise, the <see cref="T:System.Collections.Hashtable" /> type might not work correctly.</span></span></para></block>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="member this.GetType : unit -&gt; Type" Usage="obj.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-432">현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-432">Gets the <see cref="T:System.Type" /> of the current instance.</span></span></summary>
        <returns><span data-ttu-id="cd166-433">현재 인스턴스의 정확한 런타임 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-433">The exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-434">때문에 <xref:System.Object?displayProperty=nameWithType> .NET Framework 형식 시스템의 모든 형식에 대 한 기본 클래스인 합니다 <xref:System.Object.GetType%2A> 메서드를 사용 하 여 반환할 수 있습니다 <xref:System.Type> 모든.NET Framework 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-434">Because <xref:System.Object?displayProperty=nameWithType> is the base class for all types in the .NET Framework type system, the <xref:System.Object.GetType%2A> method can be used to return <xref:System.Type> objects that represent all .NET Framework types.</span></span> <span data-ttu-id="cd166-435">.NET Framework에는 다음 다섯 가지 범주의 형식 인식합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-435">The .NET Framework recognizes the following five categories of types:</span></span>  
  
-   <span data-ttu-id="cd166-436">클래스에서 파생 되는 <xref:System.Object?displayProperty=nameWithType>,</span><span class="sxs-lookup"><span data-stu-id="cd166-436">Classes, which are derived from <xref:System.Object?displayProperty=nameWithType>,</span></span>  
  
-   <span data-ttu-id="cd166-437">값 형식에서 파생 되는 <xref:System.ValueType?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-437">Value types, which are derived from <xref:System.ValueType?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="cd166-438">인터페이스에서 파생 되는 <xref:System.Object?displayProperty=nameWithType> .NET Framework 2.0을 사용 하 여 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-438">Interfaces, which are derived from <xref:System.Object?displayProperty=nameWithType> starting with the .NET Framework 2.0.</span></span>  
  
-   <span data-ttu-id="cd166-439">열거형에서 파생 되는 <xref:System.Enum?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-439">Enumerations, which are derived from <xref:System.Enum?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="cd166-440">파생 되는 대리자 <xref:System.MulticastDelegate?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-440">Delegates, which are derived from <xref:System.MulticastDelegate?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cd166-441">두 개체에 대 한 `x` 하 고 `y` 동일한 런타임 유형의 `Object.ReferenceEquals(x.GetType(),y.GetType())` 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-441">For two objects `x` and `y` that have identical runtime types, `Object.ReferenceEquals(x.GetType(),y.GetType())` returns `true`.</span></span> <span data-ttu-id="cd166-442">다음 예제에서는 합니다 <xref:System.Object.GetType%2A> 메서드는 <xref:System.Object.ReferenceEquals%2A> 하나의 숫자 값에 동일한 두 개의 다른 숫자 값 형식 인지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-442">The following example uses the <xref:System.Object.GetType%2A> method with the <xref:System.Object.ReferenceEquals%2A> method to determine whether one numeric value is the same type as two other numeric values.</span></span>  
  
 [!code-csharp[System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/gettype1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="cd166-443">개체는 특정 형식 인지를 확인 하려면 비교 키워드를 입력 하는 언어의를 사용할 수도 있고 생성 키를 누릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-443">To determine whether an object is a specific type, you can use your language's type comparison keyword or construct.</span></span> <span data-ttu-id="cd166-444">예를 들어 사용할 수 있습니다 합니다 `TypeOf…Is` Visual Basic의 생성 또는 `is` C#의 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-444">For example, you can use the `TypeOf…Is` construct in Visual Basic or the `is` keyword in C#.</span></span>  
  
 <span data-ttu-id="cd166-445">합니다 <xref:System.Object.GetType%2A> 메서드는에서 파생 되는 모든 형식에서 상속 되며, <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-445">The <xref:System.Object.GetType%2A> method is inherited by all types that derive from <xref:System.Object>.</span></span> <span data-ttu-id="cd166-446">이 사용자 고유의 언어의 비교 키워드를 사용 하는 것 외에도 사용할 수 있는 것을 의미 합니다 <xref:System.Object.GetType%2A> 다음 예와 같이 특정 개체의 형식을 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-446">This means that, in addition to using your own language's comparison keyword, you can use the <xref:System.Object.GetType%2A> method to determine the type of a particular object, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.GetType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/GetTypeEx2.cs#2)]
 [!code-vb[System.Object.GetType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/GetTypeEx2.vb#2)]  
  
 <span data-ttu-id="cd166-447">합니다 <xref:System.Type> 개체는 현재 클래스와 연결 된 메타 데이터를 노출 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-447">The <xref:System.Type> object exposes the metadata associated with the class of the current <xref:System.Object>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-448">다음 코드 예제에서는 <xref:System.Object.GetType%2A> 현재 인스턴스의 런타임 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-448">The following code example demonstrates that <xref:System.Object.GetType%2A> returns the runtime type of the current instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.GetType/CPP/gettype.cpp#1)]
 [!code-csharp[ECMA-System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.GetType/CS/gettype.cs#1)]
 [!code-vb[ECMA-System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.GetType/VB/gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected object MemberwiseClone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object MemberwiseClone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.MemberwiseClone" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ MemberwiseClone();" />
      <MemberSignature Language="F#" Value="member this.MemberwiseClone : unit -&gt; obj" Usage="obj.MemberwiseClone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-449">현재 <see cref="T:System.Object" />의 단순 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-449">Creates a shallow copy of the current <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="cd166-450"><see cref="T:System.Object" />의 단순 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-450">A shallow copy of the current <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-451"><xref:System.Object.MemberwiseClone%2A> 메서드는 새 개체를 만들고 다음 새 개체를 현재 개체의 비정적 필드를 복사 하 여 단순 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-451">The <xref:System.Object.MemberwiseClone%2A> method creates a shallow copy by creating a new object, and then copying the nonstatic fields of the current object to the new object.</span></span> <span data-ttu-id="cd166-452">필드 값 형식이 면 필드를 비트 단위로 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-452">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="cd166-453">필드 참조 형식이 면 참조가 복사 되 고 이지만 참조 된 개체는 없습니다. 따라서 원래 개체 및 해당 복제본 같은 개체를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="cd166-453">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="cd166-454">예를 들어 참조 개체 C는 개체 및 개체 B를 참조 하는 X 라는 개체 X의 단순 복사본을 만들고 개체 A 및 B를 참조 하는 새 개체 X2 반면, X의 전체 복사본을 A2 및 B2, A의 복사본 인 새 개체를 참조 하는 새 개체 X2 만들고 B. B2 C의 복사본 인 새 개체 C2, 참조 예제는 단순 하 고 전체 복사 작업의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-454">For example, consider an object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy of C. The example illustrates the difference between a shallow and a deep copy operation.</span></span>  
  
 <span data-ttu-id="cd166-455">단순 복사 작업을 수행한 경우 전체 복사 작업을 구현 하는 방법은 여러 가지가 <xref:System.Object.MemberwiseClone%2A> 메서드 요구를 충족 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-455">There are numerous ways to implement a deep copy operation if the shallow copy operation performed by the <xref:System.Object.MemberwiseClone%2A> method does not meet your needs.</span></span> <span data-ttu-id="cd166-456">이러한 요구 사항은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-456">These include the following:</span></span>  
  
-   <span data-ttu-id="cd166-457">첫 번째 개체에서 가져온 속성 값을 사용 하 여 두 번째 개체를 만들려는 복사 대상 개체의 클래스 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-457">Call a class constructor of the object to be copied to create a second object with property values taken from the first object.</span></span> <span data-ttu-id="cd166-458">이 개체의 값을 클래스 생성자에 의해 완전히 정의 되어 있는지 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-458">This assumes that the values of an object are entirely defined by its class constructor.</span></span>  
  
-   <span data-ttu-id="cd166-459">호출 된 <xref:System.Object.MemberwiseClone%2A> 메서드를 개체의 단순 복사본을 만들고 해당 값은 속성 또는 필드 값은 참조 형식에 원래 개체와 동일한 새 개체를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-459">Call the <xref:System.Object.MemberwiseClone%2A> method to create a shallow copy of an object, and then assign new objects whose values are the same as the original object to any properties or fields whose values are reference types.</span></span> <span data-ttu-id="cd166-460">`DeepCopy` 메서드 예제에서에서는이 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-460">The `DeepCopy` method in the example illustrates this approach.</span></span>  
  
-   <span data-ttu-id="cd166-461">복사 심층 되도록 개체를 serialize 하 고 다양 한 개체 변수를 serialize 된 데이터를 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-461">Serialize the object to be deep copied, and then restore the serialized data to a different object variable.</span></span>  
  
-   <span data-ttu-id="cd166-462">리플렉션을 사용 하 여 재귀를 사용 하 여 심층 복사 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-462">Use reflection with recursion to perform the deep copy operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-463">다음 예제는 <xref:System.Object.MemberwiseClone%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-463">The following example illustrates the <xref:System.Object.MemberwiseClone%2A> method.</span></span> <span data-ttu-id="cd166-464">정의 `ShallowCopy` 메서드를 호출 하는 <xref:System.Object.MemberwiseClone%2A> 단순 복사 작업을 수행 하는 방법을 `Person` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-464">It defines a `ShallowCopy` method that calls the <xref:System.Object.MemberwiseClone%2A> method to perform a shallow copy operation on a `Person` object.</span></span> <span data-ttu-id="cd166-465">또한 정의 `DeepCopy` 에서 전체 복사 작업을 수행 하는 메서드를 `Person` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-465">It also defines a `DeepCopy` method that performs a deep copy operation on a `Person` object.</span></span>  
  
 [!code-csharp[System.Object.MemberwiseClone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.memberwiseclone/cs/memberwiseclone1.cs#1)]
 [!code-vb[System.Object.MemberwiseClone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.memberwiseclone/vb/memberwiseclone1.vb#1)]  
  
 <span data-ttu-id="cd166-466">이 예제에서는 합니다 `Person.IdInfo` 속성이 반환을 `IdInfo` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-466">In this example, the `Person.IdInfo` property returns an `IdInfo` object.</span></span> <span data-ttu-id="cd166-467">예제에서 출력으로 경우는 `Person` 개체를 호출 하 여 복제를 <xref:System.Object.MemberwiseClone%2A> 메서드를 선택 하 여 복제 된 `Person` 개체가 원래 개체의 독립적인 복사본을 동일한 공유 한다는 점을 제외 하면 `Person.IdInfo` 개체 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-467">As the output from the example shows, when a `Person` object is cloned by calling the <xref:System.Object.MemberwiseClone%2A> method, the cloned `Person` object is an independent copy of the original object, except that they share the same `Person.IdInfo` object reference.</span></span> <span data-ttu-id="cd166-468">결과적으로 복제본의 수정 `Person.IdInfo` 속성에는 원래 개체의 변경 `Person.IdInfo` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-468">As a result, modifying the clone's `Person.IdInfo` property changes the original object's `Person.IdInfo` property.</span></span> <span data-ttu-id="cd166-469">반면에 전체 복사 작업을 수행 될 때 복제 된 `Person` 개체를 포함 하 여 해당 `Person.IdInfo` 원래 개체에 영향을 주지 않고 속성을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-469">On the other hand, when a deep copy operation is performed, the cloned `Person` object, including its `Person.IdInfo` property, can be modified without affecting the original object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static bool ReferenceEquals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReferenceEquals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEquals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ReferenceEquals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberSignature Language="F#" Value="static member ReferenceEquals : obj * obj -&gt; bool" Usage="System.obj.ReferenceEquals (objA, objB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA"><span data-ttu-id="cd166-470">비교할 첫 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-470">The first object to compare.</span></span></param>
        <param name="objB"><span data-ttu-id="cd166-471">비교할 두 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-471">The second object  to compare.</span></span></param>
        <summary><span data-ttu-id="cd166-472">지정한 <see cref="T:System.Object" /> 인스턴스가 동일한지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-472">Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</span></span></summary>
        <returns><span data-ttu-id="cd166-473"><paramref name="objA" />와 <paramref name="objB" />의 인스턴스가 같거나 둘 다 **null**인 경우 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-473"><see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are **null**; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-474">달리 합니다 <xref:System.Object.Equals%2A> 메서드와 같음 연산자는 <xref:System.Object.ReferenceEquals%2A> 메서드를 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-474">Unlike the <xref:System.Object.Equals%2A> method and the equality operator, the <xref:System.Object.ReferenceEquals%2A> method cannot be overridden.</span></span> <span data-ttu-id="cd166-475">이 인해 테스트 하려는 경우 두 개체 같음에 대 한 참조 및 구현에 대 한 확실 하지 않은 합니다 `Equals` 메서드를 호출할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-475">Because of this, if you want to test two object references for equality and you are unsure about the implementation of the `Equals` method, you can call the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 <span data-ttu-id="cd166-476">그러나의 반환 값은 <xref:System.Object.ReferenceEquals%2A> 메서드는 이러한 두 가지 시나리오에서 비정상으로 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-476">However, the return value of the <xref:System.Object.ReferenceEquals%2A> method may appear to be anomalous in these two scenarios:</span></span>  
  
-   <span data-ttu-id="cd166-477">값 형식 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-477">When comparing value types.</span></span> <span data-ttu-id="cd166-478">경우 `objA` 하 고 `objB` 는 값 형식에 전달 되기 전에 boxed 됩니다는 <xref:System.Object.ReferenceEquals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-478">If `objA` and `objB` are value types, they are boxed before they are passed to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="cd166-479">즉, 둘 다 `objA` 및 `objB` 값 형식의 같은 인스턴스를 <xref:System.Object.ReferenceEquals%2A> 그럼에도 불구 하 고 반환 `false`다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-479">This means that if both `objA` and `objB` represent the same instance of a value type, the <xref:System.Object.ReferenceEquals%2A> method nevertheless returns `false`, as the following example shows.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequals4.cs#1)]
     [!code-vb[System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequals4.vb#1)]  
  
     <span data-ttu-id="cd166-480">Boxing 값 형식에 대 한 자세한 내용은 [Boxing 및 Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-480">For information on boxing value types, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).</span></span>  
  
-   <span data-ttu-id="cd166-481">문자열 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-481">When comparing strings.</span></span> <span data-ttu-id="cd166-482">하는 경우 `objA` 및 `objB` 는 문자열을 <xref:System.Object.ReferenceEquals%2A> 메서드가 반환 되는 `true` 문자열 내부 풀에 추가 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd166-482">If `objA` and `objB` are strings, the <xref:System.Object.ReferenceEquals%2A> method returns `true` if the string is interned.</span></span> <span data-ttu-id="cd166-483">값이 같은지를 테스트를 수행 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-483">It does not perform a test for value equality.</span></span>  <span data-ttu-id="cd166-484">다음 예에서 `s1` 고 `s2` 이므로 단일 인턴 지정된 문자열의 두 인스턴스가 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-484">In the following example, `s1` and `s2` are equal because they are two instances of a single interned string.</span></span> <span data-ttu-id="cd166-485">그러나 `s3` 고 `s4` 문자열이 인턴 지정 되지 동일한 문자열 값을 같지만 때문에, 두 개체가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-485">However, `s3` and `s4` are not equal, because although they are have identical string values, that string is not interned.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequalsa.cs#2)]
     [!code-vb[System.Object.ReferenceEquals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequalsa.vb#2)]  
  
     <span data-ttu-id="cd166-486">문자열 인터닝에 대 한 자세한 내용은 참조 하세요. <xref:System.String.IsInterned%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-486">For more information about string interning, see <xref:System.String.IsInterned%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd166-487">다음 예제에서는 <xref:System.Object.ReferenceEquals%2A> 두 개체가 같은 인스턴스 되는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-487">The following example uses <xref:System.Object.ReferenceEquals%2A> to determine if two objects are the same instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CPP/referenceequals.cpp#1)]
 [!code-csharp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CS/referenceequals.cs#1)]
 [!code-vb[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/vb/referenceequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="obj.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cd166-488">현재 개체를 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-488">Returns a string that represents the current object.</span></span></summary>
        <returns><span data-ttu-id="cd166-489">현재 개체를 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-489">A string that represents the current object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd166-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> 주요는.NET Framework의 메서드 서식이 지정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> is the major formatting method in the .NET Framework.</span></span> <span data-ttu-id="cd166-491">표시에 적합 한 되도록 개체를 문자열 표현으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-491">It converts an object to its string representation so that it is suitable for display.</span></span> <span data-ttu-id="cd166-492">(.NET framework에서 지원 형식에 대 한 내용은 [형식](~/docs/standard/base-types/formatting-types.md).) 기본 구현은 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드 개체 형식의 정규화 된 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-492">(For information about formatting support in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).) Default implementations of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method return the fully qualified name of the object's type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cd166-493">수에 도달 했습니다.이 페이지에서 다른 형식의 멤버 목록에 링크를 따라</span><span class="sxs-lookup"><span data-stu-id="cd166-493">You may have reached this page by following the link from the member list of another type.</span></span> <span data-ttu-id="cd166-494">해당 형식을 재정의 하지 않는 때문 <xref:System.Object.ToString%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-494">That is because that type does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd166-495">대신,의 기능을 상속 되는 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-495">Instead, it inherits the functionality of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cd166-496">형식은 자주 재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 특정 형식의 더 적합 한 문자열 표현을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-496">Types frequently override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide a more suitable string representation of a particular type.</span></span> <span data-ttu-id="cd166-497">형식에서 자주도 오버 로드는 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 형식 문자열 또는 문화권 구분 서식 지정에 대 한 지원을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-497">Types also frequently overload the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide support for format strings or culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="cd166-498">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="cd166-498">In this section:</span></span>  
  
 <span data-ttu-id="cd166-499">[기본 object.tostring () 메서드](#Default) </span><span class="sxs-lookup"><span data-stu-id="cd166-499">[The default Object.ToString() method](#Default) </span></span>  
 <span data-ttu-id="cd166-500">[Object.tostring () 메서드를 재정의합니다.](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="cd166-500">[Overriding the Object.ToString() method](#Overriding) </span></span>  
 <span data-ttu-id="cd166-501">[ToString 메서드를 오버 로드](#Overloading) </span><span class="sxs-lookup"><span data-stu-id="cd166-501">[Overloading the ToString method](#Overloading) </span></span>  
 <span data-ttu-id="cd166-502">[Object.ToString 메서드를 확장합니다.](#Extending) </span><span class="sxs-lookup"><span data-stu-id="cd166-502">[Extending the Object.ToString method](#Extending) </span></span>  
 [<span data-ttu-id="cd166-503">Windows 런타임에 대 한 정보</span><span class="sxs-lookup"><span data-stu-id="cd166-503">Notes for the Windows Runtime</span></span>](#WinRT)  
  
<a name="Default"></a>   
## <a name="the-default-objecttostring-method"></a><span data-ttu-id="cd166-504">기본 object.tostring () 메서드</span><span class="sxs-lookup"><span data-stu-id="cd166-504">The default Object.ToString() method</span></span>  
 <span data-ttu-id="cd166-505">기본 구현을 <xref:System.Object.ToString%2A> 메서드 형식의 정규화 된 이름을 반환 합니다 <xref:System.Object>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-505">The default implementation of the <xref:System.Object.ToString%2A> method returns the fully qualified name of the type of the <xref:System.Object>, as the following example shows.</span></span>  
  
 [!code-cpp[System.Object.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring1.cpp#1)]
 [!code-csharp[System.Object.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Object.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring1.vb#1)]  
  
 <span data-ttu-id="cd166-506">때문에 <xref:System.Object> 모든 참조 형식의 기본 클래스인.NET framework에서이 동작 재정의 하지 않는 참조 형식에서 상속 되는 <xref:System.Object.ToString%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-506">Because <xref:System.Object> is the base class of all reference types in the .NET Framework, this behavior is inherited by reference types that do not override the <xref:System.Object.ToString%2A> method.</span></span> <span data-ttu-id="cd166-507">다음은 이에 대한 예입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-507">The following example illustrates this.</span></span> <span data-ttu-id="cd166-508">이라는 클래스를 정의 `Object1` 기본 구현의 모든을 허용 하는 <xref:System.Object> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-508">It defines a class named `Object1` that accepts the default implementation of all <xref:System.Object> members.</span></span> <span data-ttu-id="cd166-509">해당 <xref:System.Object.ToString%2A> 메서드는 개체의 정규화 된 형식 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-509">Its <xref:System.Object.ToString%2A> method returns the object's fully qualified type name.</span></span>  
  
 [!code-cpp[System.Object.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring2.cpp#2)]
 [!code-csharp[System.Object.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Object.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring2.vb#2)]  
  
<a name="Overriding"></a>   
## <a name="overriding-the-objecttostring-method"></a><span data-ttu-id="cd166-510">Object.tostring () 메서드를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-510">Overriding the Object.ToString() method</span></span>  
 <span data-ttu-id="cd166-511">형식은 일반적으로 재정의 된 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 개체 인스턴스를 나타내는 문자열을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-511">Types commonly override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return a string that represents the object instance.</span></span> <span data-ttu-id="cd166-512">예를 들어,와 같은 기본 형식 <xref:System.Char>, <xref:System.Int32>, 및 <xref:System.String> 제공 <xref:System.Object.ToString%2A> 문자열 형식의 개체를 나타내는 값을 반환 하는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-512">For example, the base types such as <xref:System.Char>, <xref:System.Int32>, and <xref:System.String> provide <xref:System.Object.ToString%2A> implementations that return the string form of the value that the object represents.</span></span> <span data-ttu-id="cd166-513">다음 예제에서는 클래스를 정의 `Object2`를 재정의 하는 <xref:System.Object.ToString%2A> 해당 값과 함께 형식 이름을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-513">The following example defines a class, `Object2`, that overrides the <xref:System.Object.ToString%2A> method to return the type name along with its value.</span></span>  
  
 [!code-cpp[System.Object.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Object.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Object.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring3.vb#3)]  
  
 <span data-ttu-id="cd166-514">다음 표에서.NET Framework의 형식 범주를 나열 하 고 재정의 되었는지 아닌지를 나타냅니다는 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-514">The following table lists the type categories in the .NET Framework and indicates whether or not they override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
|<span data-ttu-id="cd166-515">형식 범주</span><span class="sxs-lookup"><span data-stu-id="cd166-515">Type category</span></span>|<span data-ttu-id="cd166-516">Object.tostring ()를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-516">Overrides Object.ToString()</span></span>|<span data-ttu-id="cd166-517">동작</span><span class="sxs-lookup"><span data-stu-id="cd166-517">Behavior</span></span>|  
|-------------------|-----------------------------------|--------------|  
|<span data-ttu-id="cd166-518">클래스</span><span class="sxs-lookup"><span data-stu-id="cd166-518">Class</span></span>|<span data-ttu-id="cd166-519">N/A</span><span class="sxs-lookup"><span data-stu-id="cd166-519">n/a</span></span>|<span data-ttu-id="cd166-520">N/A</span><span class="sxs-lookup"><span data-stu-id="cd166-520">n/a</span></span>|  
|<span data-ttu-id="cd166-521">구조체</span><span class="sxs-lookup"><span data-stu-id="cd166-521">Structure</span></span>|<span data-ttu-id="cd166-522">예 (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="cd166-522">Yes (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="cd166-523">Object.tostring ()와 동일</span><span class="sxs-lookup"><span data-stu-id="cd166-523">Same as Object.ToString()</span></span>|  
|<span data-ttu-id="cd166-524">열거형</span><span class="sxs-lookup"><span data-stu-id="cd166-524">Enumeration</span></span>|<span data-ttu-id="cd166-525">예 (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="cd166-525">Yes (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="cd166-526">멤버 이름</span><span class="sxs-lookup"><span data-stu-id="cd166-526">The member name</span></span>|  
|<span data-ttu-id="cd166-527">인터페이스</span><span class="sxs-lookup"><span data-stu-id="cd166-527">Interface</span></span>|<span data-ttu-id="cd166-528">아니요</span><span class="sxs-lookup"><span data-stu-id="cd166-528">No</span></span>|<span data-ttu-id="cd166-529">N/A</span><span class="sxs-lookup"><span data-stu-id="cd166-529">n/a</span></span>|  
|<span data-ttu-id="cd166-530">대리자</span><span class="sxs-lookup"><span data-stu-id="cd166-530">Delegate</span></span>|<span data-ttu-id="cd166-531">아니요</span><span class="sxs-lookup"><span data-stu-id="cd166-531">No</span></span>|<span data-ttu-id="cd166-532">N/A</span><span class="sxs-lookup"><span data-stu-id="cd166-532">n/a</span></span>|  
  
 <span data-ttu-id="cd166-533">재정의에 상속자 섹션 추가 정보에 대 한 정보를 참조 하세요. <xref:System.Object.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-533">See the Notes to Inheritors section for additional information on overriding <xref:System.Object.ToString%2A>.</span></span>  
  
<a name="Overloading"></a>   
## <a name="overloading-the-tostring-method"></a><span data-ttu-id="cd166-534">ToString 메서드를 오버 로드</span><span class="sxs-lookup"><span data-stu-id="cd166-534">Overloading the ToString method</span></span>  
 <span data-ttu-id="cd166-535">매개 변수가 없는 재정의 하는 것 외에도 <xref:System.Object.ToString?displayProperty=nameWithType> 메서드를 다양 한 형식을 오버 로드는 `ToString` 매개 변수를 받아들이는 메서드의 버전을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-535">In addition to overriding the parameterless <xref:System.Object.ToString?displayProperty=nameWithType> method, many types overload the `ToString` method to provide versions of the method that accept parameters.</span></span> <span data-ttu-id="cd166-536">가장 일반적으로 이렇게 하면 변수 서식을 지정 하 고 문화권 구분 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-536">Most commonly, this is done to provide support for variable formatting and culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="cd166-537">다음 예제에서는 오버 로드는 `ToString` 의 다양 한 필드의 값을 포함 하는 결과 문자열을 반환 하는 메서드는 `Automobile` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-537">The following example overloads the `ToString` method to return a result string that includes the value of various fields of an `Automobile` class.</span></span> <span data-ttu-id="cd166-538">4 개의 형식 문자열을 정의 합니다. 모델 이름 및 연간;를 반환 하는 G 모델 이름, 연도 및; 문의 개수를 반환 하는 D 모델 이름, 연도 및; 실린더 수를 반환 하는 C 및는 모든 4 개의 필드 값을 사용 하 여 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-538">It defines four format strings: G, which returns the model name and year; D, which returns the model name, year, and number of doors; C, which returns the model name, year, and number of cylinders; and A, which returns a string with all four field values.</span></span>  
  
 [!code-csharp[System.Object.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload1.cs#4)]
 [!code-vb[System.Object.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload1.vb#4)]  
  
 <span data-ttu-id="cd166-539">다음 예제에서는 오버 로드 된 <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 통화 값의 문화권 구분 서식 지정을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-539">The following example calls the overloaded <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to display culture-sensitive formatting of a currency value.</span></span>  
  
 [!code-csharp[System.Object.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload2.cs#5)]
 [!code-vb[System.Object.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload2.vb#5)]  
  
 <span data-ttu-id="cd166-540">형식 문자열 및 문화권 구분 서식 지정에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-540">For more information on format strings and culture-sensitive formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span> <span data-ttu-id="cd166-541">숫자 값에서 지원 되는 형식 문자열을 참조 하세요 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-541">For the format strings supported by numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="cd166-542">날짜 및 시간 값에서 지원 되는 형식 문자열을 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-542">For the format strings supported by date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
<a name="Extending"></a>   
## <a name="extending-the-objecttostring-method"></a><span data-ttu-id="cd166-543">Object.ToString 메서드를 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-543">Extending the Object.ToString method</span></span>  
 <span data-ttu-id="cd166-544">기본값을 상속 하는 형식은 있으므로 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드 있습니다 동작 바람직하지 않은 찾아서 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="cd166-544">Because a type inherits the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method, you may find its behavior undesirable and want to change it.</span></span> <span data-ttu-id="cd166-545">배열 및 컬렉션 클래스의 경우 특히 그렇습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-545">This is particularly true of arrays and collection classes.</span></span> <span data-ttu-id="cd166-546">수 있지만 `ToString` 메서드는 배열 또는 컬렉션 클래스의 해당 멤버의 값을 표시 하려면 대신 표시 형식 정규화 된 형식 이름, 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-546">While you may expect the `ToString` method of an array or collection class to display the values of its members, it instead displays the type fully qualified type name, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/array1.cs#6)]
 [!code-vb[System.Object.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/array1.vb#6)]  
  
 <span data-ttu-id="cd166-547">원하는 결과 문자열을 생성 하는 몇 가지 옵션이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-547">You have several options to produce the result string that you'd like.</span></span>  
  
-   <span data-ttu-id="cd166-548">형식 배열, 컬렉션 개체 또는 개체를 구현 하는 경우는 <xref:System.Collections.IEnumerable> 또는 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 사용 하 여 해당 요소를 열거할 수 있습니다는 `foreach` C#의 문은 또는 `For Each...Next` Visual Basic에서 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-548">If the type is an array, a collection object, or an object that implements the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interfaces, you can enumerate its elements by using the `foreach` statement in C# or the `For Each...Next` construct in Visual Basic.</span></span>  
  
-   <span data-ttu-id="cd166-549">클래스가 아닌 경우 `sealed` (C#에서) 또는 `NotInheritable` (Visual Basic의 경우)의 해당 기본 클래스에서 상속 하는 래퍼 클래스를 개발할 수 있습니다 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드를 사용자 지정 하려면.</span><span class="sxs-lookup"><span data-stu-id="cd166-549">If the class is not `sealed` (in C#) or `NotInheritable` (in Visual Basic), you can develop a wrapper class that inherits from the base class whose <xref:System.Object.ToString%2A?displayProperty=nameWithType> method you want to customize.</span></span> <span data-ttu-id="cd166-550">최소한 다음을 수행 하는이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-550">At a minimum, this requires that you do the following:</span></span>  
  
    1.  <span data-ttu-id="cd166-551">필요한 생성자를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-551">Implement any necessary constructors.</span></span> <span data-ttu-id="cd166-552">파생된 클래스는 기본 클래스 생성자를 상속 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-552">Derived classes do not inherit their base class constructors.</span></span>  
  
    2.  <span data-ttu-id="cd166-553">재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 싶은 결과 문자열을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-553">Override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return the result string that you'd like.</span></span>  
  
     <span data-ttu-id="cd166-554">다음 예제에 대 한 래퍼 클래스를 정의 합니다 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-554">The following example defines a wrapper class for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="cd166-555">재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 정규화 된 형식 이름 대신 컬렉션의 각 메서드에 값을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-555">It overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to display the value of each method of the collection rather than the fully qualified type name.</span></span>  
  
     [!code-csharp[System.Object.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize1.cs#7)]
     [!code-vb[System.Object.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize1.vb#7)]  
  
-   <span data-ttu-id="cd166-556">개발을 [확장 메서드](~/docs/standard/design-guidelines/extension-methods.md) 는 원하는 결과 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-556">Develop an [extension method](~/docs/standard/design-guidelines/extension-methods.md) that returns the result string that you want.</span></span> <span data-ttu-id="cd166-557">기본값을 재정의할 수 없습니다는 참고 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 이런에서 메서드 (프로그램 확장 클래스 (C#) 또는 모듈 (Visual Basic)에서는 라는 매개 변수가 없는 메서드를 사용할 수 없습니다, 즉 `ToString` 원래 형식 대신 호출 되는 `ToString` 메서드 .</span><span class="sxs-lookup"><span data-stu-id="cd166-557">Note that you can't override the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method in this way (that is, your extension class (in C#) or module (in Visual Basic) cannot have a parameterless method named `ToString` that is called in place of the original type's `ToString` method.</span></span> <span data-ttu-id="cd166-558">에 매개 변수가 없는의 다른 이름을 제공 해야 `ToString` 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-558">You'll have to provide some other name for your parameterless `ToString` replacement.</span></span>  
  
     <span data-ttu-id="cd166-559">확장 하는 두 메서드를 정의 하는 다음 예제에서는 합니다 <xref:System.Collections.Generic.List%601> 클래스: 매개 변수가 없는 `ToString2` 메서드를 및 `ToString` 메서드를 <xref:System.String> 서식 문자열을 나타내는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-559">The following example defines two methods that extend the <xref:System.Collections.Generic.List%601> class: a parameterless `ToString2` method, and a `ToString` method with a <xref:System.String> parameter that represents a format string.</span></span>  
  
     [!code-csharp[System.Object.ToString#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize2.cs#8)]
     [!code-vb[System.Object.ToString#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize2.vb#8)]  
  
<a name="WinRT"></a>   
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="cd166-560">에 대 한 정보는 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="cd166-560">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="cd166-561">호출 하는 경우는 <xref:System.Object.ToString%2A> 클래스의 메서드를 [!INCLUDE[wrt](~/includes/wrt-md.md)]를 재정의 하지 않는 하는 클래스에 대 한 기본 동작을 제공 <xref:System.Object.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-561">When you call the <xref:System.Object.ToString%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don't override <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="cd166-562">이.NET Framework에 대 한 제공 하는 지원의 일부를 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows 런타임](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="cd166-562">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="cd166-563">클래스는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 안 함 <xref:System.Object>, 항상 구현 하지는 <xref:System.Object.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-563">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don't inherit <xref:System.Object>, and don't always implement a <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="cd166-564">그러나 항상 가진 것으로 나타납니다 <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, 및 <xref:System.Object.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework는 이러한 메서드에 대 한 기본 동작을 제공 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd166-564">However, they always appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides a default behavior for these methods.</span></span>  
  
 <span data-ttu-id="cd166-565">부터 합니다 [!INCLUDE[net_v451](~/includes/net-v451-md.md)], 공용 언어 런타임을 사용 합니다 [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) 에 [!INCLUDE[wrt](~/includes/wrt-md.md)] 대체의 기본 구현 하기 전에 개체 <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cd166-565">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], the common language runtime will use [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) on a [!INCLUDE[wrt](~/includes/wrt-md.md)] object before falling back to the default implementation of <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="cd166-566">C# 또는 Visual Basic에서 작성 된 클래스에서 재정의할 수는 <xref:System.Object.ToString%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd166-566">classes that are written in C# or Visual Basic can override the <xref:System.Object.ToString%2A> method.</span></span>  
  
### <a name="the-includewrtincludeswrt-mdmd-and-the-istringable-interface"></a><span data-ttu-id="cd166-567">[!INCLUDE[wrt](~/includes/wrt-md.md)] 및 IStringable 인터페이스</span><span class="sxs-lookup"><span data-stu-id="cd166-567">The [!INCLUDE[wrt](~/includes/wrt-md.md)] and the IStringable Interface</span></span>  
 <span data-ttu-id="cd166-568">부터 [!INCLUDE[win81](~/includes/win81-md.md)]의 [!INCLUDE[wrt](~/includes/wrt-md.md)] 포함을 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 인터페이스 인 단일 메서드 [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), 기본 서식 지정 지원을 제공 합니다 제공한 <xref:System.Object.ToString%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-568">Starting with [!INCLUDE[win81](~/includes/win81-md.md)], the [!INCLUDE[wrt](~/includes/wrt-md.md)] includes an [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface whose single method, [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), provides basic formatting support comparable to that provided by <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd166-569">모호성을 방지 하려면 구현 하지 않아야 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 에서 관리 되는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-569">To prevent ambiguity, you should not implement [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on managed types.</span></span>  
  
 <span data-ttu-id="cd166-570">JavaScript 또는 C +와 같은 언어로 작성 된 코드 또는 네이티브 코드에서 관리 되는 개체 호출 될 때 + 구현에 게 표시 되는, CX [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-570">When managed objects are called by native code or by code written in languages such as JavaScript or C++/CX, they appear to implement [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span> <span data-ttu-id="cd166-571">공용 언어 런타임 호출에서 자동으로 라우팅하므로 [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) 하 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 이벤트 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 관리 개체에서 구현 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-571">The common language runtime will automatically route calls from [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) to <xref:System.Object.ToString%2A?displayProperty=nameWithType> in the event [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) is not implemented on the managed object.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cd166-572">공용 언어 런타임에서 자동 구현 하기 때문에 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 관리 되는 형식에서 모든 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 앱 것이 좋습니다는 제공 하지 않으면 사용자 고유의 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-572">Because the common language runtime auto-implements [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) for all managed types in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps, we recommend that you do not provide your own [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation.</span></span> <span data-ttu-id="cd166-573">구현 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 를 호출할 때 의도 하지 않은 동작이 발생할 `ToString` 에서 [!INCLUDE[wrt](~/includes/wrt-md.md)], C + + /CX 또는 JavaScript입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-573">Implementing [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) may result in unintended behavior when calling `ToString` from the [!INCLUDE[wrt](~/includes/wrt-md.md)], C++/CX, or JavaScript.</span></span>  
  
 <span data-ttu-id="cd166-574">구현 하려는 경우 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 에서 내보낸 관리 공용 형식에는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 구성 요소는 다음 제한이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-574">If you do choose to implement [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) in a public managed type that is exported in a [!INCLUDE[wrt](~/includes/wrt-md.md)] component, the following restrictions apply:</span></span>  
  
-   <span data-ttu-id="cd166-575">정의할 수 있습니다 합니다 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 와 같은 "클래스 구현" 관계 에서만에서 인터페이스</span><span class="sxs-lookup"><span data-stu-id="cd166-575">You can define the [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface only in a "class implements" relationship, such as</span></span>  
  
    ```csharp  
    public class NewClass : IStringable  
    ```  
  
     <span data-ttu-id="cd166-576">C#</span><span class="sxs-lookup"><span data-stu-id="cd166-576">in C#, or</span></span>  
  
    ```vb  
    Public Class NewClass : Implements IStringable  
    ```  
  
     <span data-ttu-id="cd166-577">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="cd166-577">in Visual Basic.</span></span>  
  
-   <span data-ttu-id="cd166-578">구현할 수 없습니다 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 인터페이스에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-578">You cannot implement [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on an interface.</span></span>  
  
-   <span data-ttu-id="cd166-579">형식 매개 변수를 선언할 수 없습니다 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-579">You cannot declare a parameter to be of type [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span>  
  
-   <span data-ttu-id="cd166-580">[IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 반환 형식의 메서드, 속성 또는 필드 일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-580">[IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) cannot be the return type of a method, property, or field.</span></span>  
  
-   <span data-ttu-id="cd166-581">숨길 수 없습니다 하 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 다음과 같은 메서드 정의 사용 하 여 기본 클래스에서 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-581">You cannot hide your [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation from base classes by using a method definition such as the following:</span></span>  
  
    ```csharp  
  
    public class NewClass : IStringable  
    {  
       public new string ToString()  
       {  
          return "New ToString in NewClass";  
       }  
    }  
  
    ```  
  
     <span data-ttu-id="cd166-582">대신 합니다 [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) 구현은 언제나 기본 클래스 구현을 재지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-582">Instead, the [IStringable.ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation must always override the base class implementation.</span></span> <span data-ttu-id="cd166-583">강력한 형식의 클래스 인스턴스에서 호출해야만 `ToString` 구현을 숨길 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-583">You can hide a `ToString` implementation only by invoking it on a strongly typed class instance.</span></span>  
  
 <span data-ttu-id="cd166-584">다양 한 조건에서 구현 하는 관리 되는 형식에 네이티브 코드에서 호출 하는 참고 [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) 표시 하거나 숨깁니다 해당 [ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) 구현에 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-584">Note that under a variety of conditions, calls from native code to a managed type that implements [IStringable](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) or hides its [ToString](https://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation can produce unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cd166-585">사용자 고유의 형식을 구현할 때 재정의 해야 합니다 <see cref="M:System.Object.ToString" /> 해당 형식에 대 한 의미 있는 값을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-585">When you implement your own types, you should override the <see cref="M:System.Object.ToString" /> method to return values that are meaningful for those types.</span></span> <span data-ttu-id="cd166-586">보다 자세한 제어를 필요로 하는 클래스를 파생 <see cref="M:System.Object.ToString" /> 제공 구현할 수는 <see cref="T:System.IFormattable" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-586">Derived classes that require more control over formatting than <see cref="M:System.Object.ToString" /> provides can implement the <see cref="T:System.IFormattable" /> interface.</span></span> <span data-ttu-id="cd166-587">해당 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> 메서드를 사용 하면 서식을 제어 하는 서식 문자열을 정의 하 고 사용 하는 <see cref="T:System.IFormatProvider" /> culture 별 서식 지정에 도움이 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-587">Its <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> method enables you to define format strings that control formatting and to use an <see cref="T:System.IFormatProvider" /> object that can provide for culture-specific formatting.</span></span>  
  
<span data-ttu-id="cd166-588">재정의 <see cref="M:System.Object.ToString" /> 메서드 다음이 지침을 따르십시오.</span><span class="sxs-lookup"><span data-stu-id="cd166-588">Overrides of the <see cref="M:System.Object.ToString" /> method should follow these guidelines:</span></span> 
<span data-ttu-id="cd166-589">-반환 된 문자열은 친숙 하 고 사용자가 읽을 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-589">-   The returned string should be friendly and readable by humans.</span></span>  
  
<span data-ttu-id="cd166-590">-반환 된 문자열 개체 인스턴스의 값을 고유 하 게 식별 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-590">-   The returned string should uniquely identify the value of the object instance.</span></span>  
  
<span data-ttu-id="cd166-591">-반환 된 문자열 디버거에 의해 표시 하기에 적합 되도록 가능한 한 짧은 것 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-591">-   The returned string should be as short as possible so that it is suitable for display by a debugger.</span></span>  
  
<span data-ttu-id="cd166-592">- <see cref="M:System.Object.ToString" /> 재정의 반환 되어서는 안 <see cref="F:System.String.Empty" /> 또는 null 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-592">-   Your <see cref="M:System.Object.ToString" /> override should not return <see cref="F:System.String.Empty" /> or a null string.</span></span>  
  
<span data-ttu-id="cd166-593">- <see cref="M:System.Object.ToString" /> 재정의 예외를 throw 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-593">-   Your <see cref="M:System.Object.ToString" /> override should not throw an exception.</span></span>  
  
<span data-ttu-id="cd166-594">-인스턴스의 문자열 표현을 문화권을 구분 하거나 여러 가지 방법으로 서식을 지정할 수 있습니다, 경우 구현 된 <see cref="T:System.IFormattable" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-594">-   If the string representation of an instance is culture-sensitive or can be formatted in multiple ways, implement the <see cref="T:System.IFormattable" /> interface.</span></span>  
  
<span data-ttu-id="cd166-595">-반환된 된 문자열에 중요 한 정보를 포함 하는 경우 먼저 적절 한 권한을 요청 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-595">-   If the returned string includes sensitive information, you should first demand an appropriate permission.</span></span> <span data-ttu-id="cd166-596">요청이 성공 하면 중요 한 정보를 반환할 수 있습니다. 그렇지 않으면 중요 한 정보를 제외 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-596">If the demand succeeds, you can return the sensitive information; otherwise, you should return a string that excludes the sensitive information.</span></span>  
  
<span data-ttu-id="cd166-597">- <see cref="M:System.Object.ToString" /> 재정의 디버깅 문제가 발생 하지 않도록 하려면 식별할 수 있는 파생 작업이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-597">-   Your <see cref="M:System.Object.ToString" /> override should have no observable side effects to avoid complications in debugging.</span></span> <span data-ttu-id="cd166-598">예를 들어,에 대 한 호출을 <see cref="M:System.Object.ToString" /> 메서드는 인스턴스 필드의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-598">For example, a call to the <see cref="M:System.Object.ToString" /> method should not change the value of instance fields.</span></span>  
  
<span data-ttu-id="cd166-599">-형식을 구문 분석 메서드를 구현 하는 경우 (또는 <see langword="Parse" /> 또는 <see langword="TryParse" /> 메서드, 생성자 또는 문자열에서 형식의 인스턴스를 인스턴스화하는 일부 다른 정적 메서드)를 반환 하는 문자열 확인 해야 합니다 <see cref="M:System.Object.ToString" /> 메서드 일 수 있습니다 개체 인스턴스로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd166-599">-   If your type implements a parsing method (or <see langword="Parse" /> or <see langword="TryParse" /> method, a constructor, or some other static method that instantiates an instance of the type from a string), you should ensure that the string returned by the <see cref="M:System.Object.ToString" /> method can be converted to an object instance.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="cd166-600">.NET의 서식 지정 형식</span><span class="sxs-lookup"><span data-stu-id="cd166-600">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>