<Type Name="ThreadStaticAttribute" FullName="System.ThreadStaticAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba7f6c207809025b013b88d46ad82761ef60cc87" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721072" /></Metadata><TypeSignature Language="C#" Value="public class ThreadStaticAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ThreadStaticAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ThreadStaticAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadStaticAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadStaticAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type ThreadStaticAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="073fc-101">정적 필드의 값이 각 스레드에 대해 고유함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-101">Indicates that the value of a static field is unique for each thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="073fc-102">A `static` 표시 된 필드 <xref:System.ThreadStaticAttribute> 스레드 간에 공유 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-102">A `static` field marked with <xref:System.ThreadStaticAttribute> is not shared between threads.</span></span> <span data-ttu-id="073fc-103">각 실행 스레드에 필드의 별도 인스턴스가 및 독립적으로 설정 하 고이 해당 필드에 대 한 값을 가져옵니다 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-103">Each executing thread has a separate instance of the field, and independently sets and gets values for that field.</span></span> <span data-ttu-id="073fc-104">필드를 다른 스레드에서 액세스 하는 경우 다른 값을 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-104">If the field is accessed on a different thread, it will contain a different value.</span></span>  
  
 <span data-ttu-id="073fc-105">적용 하는 것 외에도 유의 합니다 <xref:System.ThreadStaticAttribute> 특성 필드를 정의 해야 합니다도를 `static` 필드 (C#) 또는 `Shared` 필드 (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="073fc-105">Note that in addition to applying the <xref:System.ThreadStaticAttribute> attribute to a field, you must also define it as a `static` field (in C#) or a `Shared` field (in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="073fc-106">로 표시 된 필드에 대 한 초기 값을 지정 하지 않으면 `ThreadStaticAttribute`이므로 이러한 초기화는 한 번만 클래스 생성자 실행 되 고 하나의 스레드만 영향을 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-106">Do not specify initial values for fields marked with `ThreadStaticAttribute`, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.</span></span> <span data-ttu-id="073fc-107">값 형식인 또는를 기본값으로 초기화 되는 필드 의존할 수 있는 초기 값을 지정 하지 않으면 경우 `null` 참조 형식인 경우.</span><span class="sxs-lookup"><span data-stu-id="073fc-107">If you do not specify an initial value, you can rely on the field being initialized to its default value if it is a value type, or to `null` if it is a reference type.</span></span>  
  
 <span data-ttu-id="073fc-108">이면이 특성을 사용 하 여 여기에서 파생 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-108">Use this attribute as it is, and do not derive from it.</span></span>  
  
 <span data-ttu-id="073fc-109">특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [특성](~/docs/standard/attributes/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-109">For more information about using attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="073fc-110">난수 생성기를 인스턴스화하고 주 스레드에서 외에도 10 개 스레드를 만드는 다음 각 스레드에서 두 백만 난수를 생성 하는 다음 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-110">The following example instantiates a random number generator, creates ten threads in addition to the main thread, and then generates two million random numbers in each thread.</span></span> <span data-ttu-id="073fc-111">사용 된 <xref:System.ThreadStaticAttribute> 스레드당 임의 숫자의 개수 및 합계를 계산 하는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-111">It uses the <xref:System.ThreadStaticAttribute> attribute to calculate the sum and the count of random numbers per thread.</span></span> <span data-ttu-id="073fc-112">또한 두 개의 추가 스레드가 필드 정의 `previous` 및 `abnormal`, 난수 생성기의 손상을 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-112">It also defines two additional per-thread fields, `previous` and `abnormal`, that allows it to detect corruption of the random number generator.</span></span>  
  
 [!code-csharp[System.ThreadStaticAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threadstaticattribute/cs/threadsafe2a.cs#1)]
 [!code-vb[System.ThreadStaticAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threadstaticattribute/vb/threadsafe2a.vb#1)]  
  
 <span data-ttu-id="073fc-113">이 예제에서는 사용 합니다 `lock` C#의 문은 및 `SyncLock` 난수 생성기에 대 한 액세스를 동기화 하는 Visual Basic에서 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-113">The example uses the `lock` statement in C# and the `SyncLock` construct in Visual Basic to synchronize access to the random number generator.</span></span> <span data-ttu-id="073fc-114">이 일반적으로 해당 반환 값이 모든 후속 호출에 대해 0에서 임의의 수 생성기의 손상을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-114">This prevents corruption of the random number generator, which typically results in its returning a value of zero for all subsequent calls.</span></span>  
  
 <span data-ttu-id="073fc-115">또한이 예제에서는 <xref:System.Threading.CountdownEvent> 난수를 생성 하 여 호출의 총 수를 표시 하기 전에 각 스레드가 완료 되었는지 확인 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-115">The example also uses the <xref:System.Threading.CountdownEvent> class to ensure that each thread has finished generating random numbers before it displays the total number of calls.</span></span> <span data-ttu-id="073fc-116">이 고, 그렇지 main 메서드가 추가 스레드는 생성 하기 전에 실행이 완료 되는 경우 메서드 호출의 총 수에 대 한 부정확 한 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-116">Otherwise, if the main thread completes execution before the additional threads that it spawns, it displays an inaccurate value for the total number of method calls.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.AsyncLocal`1" />
    <related type="Article" href="~/docs/standard/attributes/index.md"><span data-ttu-id="073fc-117">특성을 사용하여 메타데이터 확장</span><span class="sxs-lookup"><span data-stu-id="073fc-117">Extending Metadata Using Attributes</span></span></related>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="073fc-118">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="073fc-118">Managed Threading</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadStaticAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ThreadStaticAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadStaticAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="073fc-119"><see cref="T:System.ThreadStaticAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="073fc-119">Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>