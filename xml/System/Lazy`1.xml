<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fe040656ca9af07674a26a02d9bd1c32874d7b8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57911254" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="d943b-101">초기화 지연할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="d943b-102">초기화 지연에 대한 지원을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-103">이러한 생성 또는 실행 프로그램의 수명 동안 발생 하지 않는 경우에 특히 대규모 또는 리소스를 많이 사용 개체를 생성 하거나 리소스 집약적인 작업을 실행을 지연 시키려면 지연 초기화를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="d943b-104">만든 인스턴스의 초기화 지연에 대 한 준비가 <xref:System.Lazy%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="d943b-105">형식 인수는 <xref:System.Lazy%601> 만든 개체는 초기화 지연 하려는 개체의 형식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="d943b-106">만드는 데 사용할 수 있는 생성자는 <xref:System.Lazy%601> 개체 초기화의 특징을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="d943b-107">처음으로 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성에 액세스할 때 초기화 지연이 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="d943b-108">대부분의 경우에서이 두 질문에 답변에 따라 달라 집니다 생성자를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="d943b-109">지연 초기화 된 개체는 둘 이상의 스레드에서 액세스할 수 있습니까?</span><span class="sxs-lookup"><span data-stu-id="d943b-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="d943b-110">그렇다면는 <xref:System.Lazy%601> 개체 모든 스레드에서 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="d943b-111">기본 동작은 스레드로부터 안전한을 만들려면 해당 하는 간단한 생성자 중 하나를 사용할 수 있습니다 <xref:System.Lazy%601> 개체 이므로 지연 인스턴스화된 개체의 인스턴스를 하나만 스레드 수를 액세스 하려고 하는 관계 없이 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="d943b-112">만들려는 <xref:System.Lazy%601> 스레드로부터 안전 하지 않은 개체에 없는 스레드로부터의 안전성을 지정할 수 있도록 하는 생성자를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="d943b-113">만들기는 <xref:System.Lazy%601> 개체 스레드로부터 안전한 지연 초기화 된 개체를 보호 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="d943b-114">여러 스레드가 지연 초기화 된 개체에 액세스 하는 경우 해야 해당 속성과 메서드에 다중 스레드 액세스에 대 한 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="d943b-115">초기화 지연 코드의 많은 필요가 지연 초기화 된 개체에 필요 하 고 예외를 throw 하지 않습니다 모든 작업을 수행 하는 기본 생성자가 있는지 여부</span><span class="sxs-lookup"><span data-stu-id="d943b-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="d943b-116">초기화 코드를 작성 해야 할 경우 또는 예외를 처리 해야 하는 경우, 팩터리 메서드를 사용 하는 생성자 중 하나를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="d943b-117">팩터리 메서드에 초기화 코드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="d943b-118">다음 표에서 이러한 두 가지 요인에 기반을 선택 하는 생성자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="d943b-119">개체에 액세스</span><span class="sxs-lookup"><span data-stu-id="d943b-119">Object will be accessed by</span></span>|<span data-ttu-id="d943b-120">초기화 코드 없이 필요한 경우 (기본 생성자)를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="d943b-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="d943b-121">사용 하 여 초기화 코드가 필요한 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="d943b-122">여러 스레드</span><span class="sxs-lookup"><span data-stu-id="d943b-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="d943b-123">스레드 하나</span><span class="sxs-lookup"><span data-stu-id="d943b-123">One thread</span></span>|<span data-ttu-id="d943b-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> 사용 하 여 `isThreadSafe` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="d943b-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 사용 하 여 `isThreadSafe` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="d943b-126">팩터리 메서드를 지정 하는 람다 식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="d943b-127">이렇게 하면 한 곳에서 모든 초기화 코드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="d943b-128">람다 식 지연 초기화 된 개체의 생성자에 전달할 인수를 포함 하는 컨텍스트를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="d943b-129">**예외 캐싱을** 팩터리 메서드를 사용 하는 경우 예외가 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="d943b-130">즉, 팩터리 메서드 시간을 첫 번째 예외를 throw 하는 경우 스레드 액세스를 시도 합니다 <xref:System.Lazy%601.Value%2A> 속성의는 <xref:System.Lazy%601> 개체를 이후의 모든 시도에서 동일한 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="d943b-131">이렇게 하면 모든 호출을 <xref:System.Lazy%601.Value%2A> 속성 동일한 결과 생성 하 고 다른 스레드가 다른 결과 얻을 경우 발생할 수 있는 사소한 오류를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="d943b-132">합니다 <xref:System.Lazy%601> 대신 실제 `T` 는 그렇지 않은 경우는 초기화 된 후 이전 특정 시점에 시작 하는 동안 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="d943b-133">이전 이때 오류는 일반적으로 치명적입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="d943b-134">복구 가능한 오류가 발생할 경우 초기화 지연을 사용 하지 않는 경우와 마찬가지로 재시도 논리 (이 예제의 경우 팩터리 메서드), 초기화 루틴을 작성 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="d943b-135">**잠금 대신** 상황에서 오버 헤드를 방지 하려는 <xref:System.Lazy%601> 개체의 기본 잠금 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="d943b-136">드문 경우에서 교착 상태가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="d943b-137">이러한 경우에 사용할 수 있습니다 합니다 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자를 지정 하 고 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-138">이 통해 합니다 <xref:System.Lazy%601> 스레드를 호출 하는 경우 여러 스레드를 각 지연 초기화 된 개체의 복사본을 만드는 개체는 <xref:System.Lazy%601.Value%2A> 속성 동시에 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="d943b-139"><xref:System.Lazy%601> 개체 하면 모든 스레드가 지연 초기화 된 개체의 동일한 인스턴스를 사용 하는 사용 되지 않는 인스턴스를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="d943b-140">따라서 잠금 오버 헤드를 줄이는 비용은 프로그램 만들기 및 비용이 많이 드는 개체의 추가 복사본을 삭제 경우도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="d943b-141">대부분의 경우에서 가능성은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="d943b-142">에 대 한 예제는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 고 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자가이 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d943b-143">지정 하는 경우 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 예외는 되지 캐시 팩터리 메서드를 지정 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="d943b-144">**해당 생성자** 사용 하도록 설정 하는 것 외에도 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>서 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자는 다른 생성자의 기능을 복제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="d943b-145">다음 표에서 해당 동작을 생성 하는 매개 변수 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="d943b-146">만들려는 <xref:System.Lazy%601> 개체</span><span class="sxs-lookup"><span data-stu-id="d943b-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="d943b-147">생성자에는 `LazyThreadSafetyMode` `mode` 매개 변수를 설정 `mode` 를</span><span class="sxs-lookup"><span data-stu-id="d943b-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="d943b-148">부울 생성자에 대 한 `isThreadSafe` 매개 변수를 설정 `isThreadSafe` 를</span><span class="sxs-lookup"><span data-stu-id="d943b-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="d943b-149">스레드 안전성 매개 변수가 없는 생성자</span><span class="sxs-lookup"><span data-stu-id="d943b-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="d943b-150">완벽 하 게 스레드로부터 안전 합니다. 해당 스레드가 하나만 있도록 잠금을 사용 하 여 값을 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="d943b-151">이러한 모든 생성자는 완벽 하 게 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="d943b-152">스레드로부터 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="d943b-153">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="d943b-153">Not applicable.</span></span>|  
|<span data-ttu-id="d943b-154">완벽 하 게 스레드로부터 안전 합니다. 스레드 경합 값을 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="d943b-155">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="d943b-155">Not applicable.</span></span>|<span data-ttu-id="d943b-156">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="d943b-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="d943b-157">**다른 기능** 사용에 대 한 자세한 <xref:System.Lazy%601> thread 정적 필드 또는 속성에 대 한 백업 저장소로 참조 [초기화 지연](~/docs/framework/performance/lazy-initialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-158">다음 예제에서는 사용 된 <xref:System.Lazy%601> 여러 스레드로부터의 액세스를에서 사용 하 여 지연 초기화를 제공 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-159">이 예제에서는 사용 된 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="d943b-160">사용 하는 방법도 보여 줍니다 합니다 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="d943b-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d943b-161">다른 생성자를 전환 하는 생성자는 주석으로 처리 변경 하기만 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="d943b-162">예외를 보여 주는 예제에 대 한 참조는 같은 생성자를 사용 하 여 캐싱용는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="d943b-163">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d943b-164">코드의 네 가지 주요 섹션 이니셜라이저, 팩터리 메서드, 실제 초기화 및 생성자의 생성을 보여 줍니다는 `LargeObject` 클래스 개체를 만들 때 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="d943b-165">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-166">팩터리 메서드 추가로 초기화에 대 한 자리 표시자를 사용 하 여 개체의 생성을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="d943b-167">처음 두 코드 섹션에서는 다음과 같이 람다 함수를 사용 하 여 결합할 수 없습니다 note:</span><span class="sxs-lookup"><span data-stu-id="d943b-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="d943b-168">이 예제에서는 초기화 지연이 발생 하기 전에 정해 지지 않은 기간 경과 될 수 있습니다를 나타내기 위해 일시 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="d943b-169">누를 때 합니다 **Enter** 키, 예제를 만들고 세 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="d943b-170">합니다 `ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="d943b-171">이 경우 처음으로 `LargeObject` 인스턴스가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-172">생성자는 `LargeObject` 클래스 코드의 마지막 키 섹션을 포함 하는 메시지를 표시 하 고 초기화 하는 동안 스레드 id를 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="d943b-173">프로그램의 출력은 전체 코드 목록 끝에 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="d943b-174">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-175">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d943b-176">기본적으로의 모든 public 및 protected 멤버는 <see cref="T:System.Lazy`1" /> 클래스는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="d943b-177">필요에 따라 및 형식의 생성자에 매개 변수를 사용 하 여 인스턴스당 이러한 스레드로부터의 안전성 보장을 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-178">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d943b-179"><see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d943b-180"><see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d943b-181">초기화 지연이 발생하면 대상 형식의 기본 생성자가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-181">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-182">이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="d943b-183">스레드 보안 모드를 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-184">스레드 안전 모드는 여러 스레드가 초기화 하려고 시도할 때 동작을 설명 합니다 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d943b-185"><xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d943b-186">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-187">다음 예제에서는이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="d943b-188">사용도 보여 줍니다 합니다 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="d943b-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d943b-189">다른 생성자를 전환 하는 생성자는 주석으로 처리 변경 하기만 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="d943b-190">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d943b-191">이 예제의 코드의 두 가지 핵심 줄은 이니셜라이저 및 실제 초기화를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="d943b-192">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-193">예제를 만들고 세 개의 스레드를 차단 하는 시작을 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d943b-194">`ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드를 <xref:System.Lazy%601.Value%2A> 가져올 속성을 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="d943b-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-195">합니다 <xref:System.Lazy%601> 클래스 잠금, 스레드를 하나만 만들 수 있도록 제공 된 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="d943b-196">이 예제에서는 모든 다른 스레드가 동일한 인스턴스를 가져옵니다 하 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-197">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-198">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-199">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="d943b-200">이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="d943b-201"><see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d943b-202">초기화 지연이 발생하면 대상 형식의 기본 생성자 및 지정된 초기화 모드가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-203">스레드 보안 모드를 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 는 `true`고, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d943b-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-204">스레드 안전 모드는 여러 스레드가 초기화 하려고 시도할 때 동작을 설명 합니다 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d943b-205">지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 합니다 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자.</span><span class="sxs-lookup"><span data-stu-id="d943b-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="d943b-206"><xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d943b-207">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-208">다음 예제에서는 스레드 지연 초기화 된 개체에 대 한 모든 액세스 동일한 스레드에서 발생 하는 시나리오에 대 한 안전 하지 않은 지연 이니셜라이저를 만들려면이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="d943b-209">사용 하는 방법도 보여 줍니다 합니다 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="d943b-210">다른 생성자를 전환 하려면 바꾸면 생성자 주석으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-211">다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`)에 대 한 예제를 참조 하세요.를 <xref:System.Lazy%601.%23ctor> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d943b-212">이 예제에서는 정의 `LargeObject` 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="d943b-213">에 `Main` 메서드는이 예제에서는 생성을 <xref:System.Lazy%601> 인스턴스 및 일시 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="d943b-214">누를 때를 **Enter** 키, 예제에 액세스를 <xref:System.Lazy%601.Value%2A> 의 속성을 <xref:System.Lazy%601> 초기화가 발생 시키는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="d943b-215">생성자는 `LargeObject` 콘솔 메시지를 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-216">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-217">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-218">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d943b-219">필요할 때 초기화 지연된 값을 생성하도록 호출된 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="d943b-220"><see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d943b-221">초기화 지연이 발생하면 지정된 초기화 함수가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-222">이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="d943b-223">스레드 보안 모드를 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-224">스레드 안전 모드는 여러 스레드가 초기화 하려고 시도할 때 동작을 설명 합니다 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d943b-225">throw 된 예외 `valueFactory` 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="d943b-226">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-227">다음 예제에서는 예외 캐싱을 사용 하 여 지연 초기화를 제공 하려면이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="d943b-228">사용 하는 방법도 보여 줍니다 합니다 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="d943b-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d943b-229">다른 생성자를 전환 하는 생성자는 주석으로 처리 변경 하기만 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="d943b-230">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d943b-231">코드의 세 가지 주요 섹션의 생성자, 실제 초기화 및 이니셜라이저 만들기를 보여 줍니다.는 `LargeObject` 클래스 예외 캐싱을 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="d943b-232">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-233">이 예제에서는 만들고 세 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-233">The example creates and starts three threads.</span></span> <span data-ttu-id="d943b-234">`ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드를 <xref:System.Lazy%601.Value%2A> 가져올 속성을 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="d943b-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-235">생성자에는 `LargeObject` 클래스 코드의 세 번째 키 섹션을 처음으로 예외를 throw를 `LargeObject` 인스턴스가 만들어지지만 그 되려면 인스턴스를 만들 수 있습니다:</span><span class="sxs-lookup"><span data-stu-id="d943b-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="d943b-236">예제를 실행할 때의 인스턴스를 만들려고 시도 하는 첫 번째 스레드가 `LargeObject` 실패 및 예외 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="d943b-237">다음 스레드는 인스턴스를 만들려면 예상할 수 있지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="d943b-238">이 때문에 세 개의 스레드 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-239">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-240">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d943b-241"><paramref name="valueFactory" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-242">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="d943b-243">스레드로부터 안전한 모드를 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="d943b-244"><paramref name="T" />의 기본 생성자 및 스레드로부터 안전한 지정된 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-245">스레드 보안 모드를 <xref:System.Lazy%601> 인스턴스가 여러 스레드 초기화 하려고 시도할 때 동작을 설명 합니다는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d943b-246"><xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d943b-247">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-248">다음 예제에서는 여러 스레드 경합 지연 개체를 만들 수 있도록 하는 지연 이니셜라이저를 만들려면이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="d943b-249">인스턴스를 만드는 여러 스레드가 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-250">단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d943b-251">다중 스레드 시나리오에서 경합 하는 대신 잠금을 제공 하려면이 생성자를 사용 하는 방법에 설명 하는 예제 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d943b-252">이 예제에서는 정의 `LargeObject` 몇 개의 스레드 중 하나에서 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="d943b-253">코드의 세 가지 주요 섹션에 설명 이니셜라이저, 실제 초기화 및 생성자의 만들기와의 종료자는 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="d943b-254">맨 앞에 `Main` 메서드를 만듭니다 합니다 <xref:System.Lazy%601> 의 초기화 지연을 수행 하는 개체는 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d943b-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-255">예제를 만들고 세 개의 스레드를 차단 하는 시작을 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d943b-256">에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드를 <xref:System.Lazy%601.Value%2A> 속성을 만듭니다는 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="d943b-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-257">때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="d943b-258">이 예제에서는 생성자와의 종료자에서 콘솔 메시지를 표시 하 여이 보여 줍니다는 `LargeObject` 클래스:</span><span class="sxs-lookup"><span data-stu-id="d943b-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="d943b-259">그러나는 <xref:System.Lazy%601> 개체 인스턴스를 하나만 모든 스레드를 사용해 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="d943b-260">예제의 출력이 동일한 인스턴스 및도 보여 줍니다 가비지 컬렉션에서 다른 두 인스턴스를 회수할 수 있습니다 세 개의 스레드를 사용 하는 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-261">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-262">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d943b-263"><paramref name="mode" />에 잘못된 값이 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-264">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d943b-265">사용될 미리 초기화된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="d943b-266">미리 초기화된 지정 값을 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="d943b-267">이 생성자를 사용 하 여 만든 인스턴스는 동시에 여러 스레드에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d943b-268">필요할 때 초기화 지연된 값을 생성하도록 호출된 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="d943b-269">이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="d943b-270"><see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d943b-271">초기화 지연이 발생하면 지정된 초기화 함수 및 초기화 모드가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-272">스레드 보안 모드를 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 는 `true`고, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d943b-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-273">스레드 안전 모드는 여러 스레드가 초기화 하려고 시도할 때 동작을 설명 합니다 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d943b-274">지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 합니다 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자.</span><span class="sxs-lookup"><span data-stu-id="d943b-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="d943b-275">throw 된 예외 `valueFactory` 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="d943b-276">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-277">다음 예제에서는 캐싱, 단일 스레드 시나리오에서 예외를 사용 하 여 지연 초기화를 제공 하려면이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="d943b-278">사용 하는 방법도 보여 줍니다 합니다 <xref:System.Lazy%601.%23ctor%2A> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="d943b-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d943b-279">해당 생성자를 전환 하려면 바꾸면 생성자 주석으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-280">다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`)에 대 한 예제를 참조 하세요.를 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="d943b-281">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d943b-282">코드의 세 가지 주요 섹션의 생성자, 실제 초기화 및 이니셜라이저 만들기를 보여 줍니다.는 `LargeObject` 클래스 예외 캐싱을 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="d943b-283">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-284">생성자 호출에는 `isThreadSafe` 매개 변수가 `false`이므로 <xref:System.Lazy%601> 은 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="d943b-285">이 예제에서는 호출 하는 스레드로부터 안전 하지 않으므로 <xref:System.Lazy%601.Value%2A> 세 번 동일한 스레드에서 속성:</span><span class="sxs-lookup"><span data-stu-id="d943b-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-286">생성자에는 `LargeObject` 클래스 코드의 세 번째 키 섹션을 처음으로 예외를 throw를 `LargeObject` 인스턴스가 만들어지지만 그 되려면 인스턴스를 만들 수 있습니다:</span><span class="sxs-lookup"><span data-stu-id="d943b-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="d943b-287">예제를 실행할 때의 인스턴스를 만드는 첫 번째 시도 `LargeObject` 실패 및 예외 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="d943b-288">예상한 다음 시도 성공 하지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="d943b-289">이 인해 모든 세 번의 시도가 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-290">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-291">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d943b-292"><paramref name="valueFactory" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-293">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d943b-294">필요할 때 초기화 지연된 값을 생성하도록 호출된 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="d943b-295">스레드로부터 안전한 모드를 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="d943b-296">지정된 초기화 함수 및 스레드로부터 안전한 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-297">스레드 보안 모드를 <xref:System.Lazy%601> 인스턴스가 여러 스레드 초기화 하려고 시도할 때 동작을 설명 합니다는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d943b-298">throw 된 예외 `valueFactory` 캐시 된 경우가 아니면 `mode` 는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d943b-299">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="d943b-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d943b-300">다음 예제에서는 여러 스레드 경합 지연 개체를 만들 수 있도록 하는 지연 이니셜라이저를 만들려면이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="d943b-301">인스턴스를 만드는 여러 스레드가 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="d943b-302">또한 예제에 지정 하는 경우 예외가 캐시 되지 않습니다는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>지연 생성된 된 형식에 기본 생성자가 초기화를 대신 함수에서 수행 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-303">단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d943b-304">다중 스레드 시나리오에서 경합 하는 대신 잠금을 제공 하려면이 생성자를 사용 하는 방법에 설명 하는 예제 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d943b-305">이 예제에서는 정의 `LargeObject` 몇 개의 스레드 중 하나에서 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="d943b-306">코드의 네 가지 주요 섹션에 설명의 이니셜라이저, 실제 초기화, 초기화 함수를 생성자 만들기와의 종료자는 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="d943b-307">맨 앞에 `Main` 메서드를 만듭니다 합니다 <xref:System.Lazy%601> 의 초기화 지연을 수행 하는 개체는 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d943b-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d943b-308">지연 이니셜라이저는 초기화를 수행 하는 함수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="d943b-309">이 경우 함수는에 대 한 기본 생성자가 없는 있기 때문에 필요 합니다 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-309">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="d943b-310">예제를 만들고 세 개의 스레드를 차단 하는 시작을 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d943b-311">에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드를 <xref:System.Lazy%601.Value%2A> 속성을 만듭니다는 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="d943b-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d943b-312">코드의 세 번째 키 섹션을 만들려면 지연 초기화 함수 호출을 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="d943b-313">함수 라고 하는 첫 번째 예외 시간을 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="d943b-314">모든 다른 <xref:System.Threading.LazyThreadSafetyMode> 설정, 초기화 함수에서 처리 되지 않은 예외가 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="d943b-315">그러나 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 예외 캐싱을 표시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="d943b-316">예제의 출력 개체를 초기화 하면 이후 시도 성공 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-317">예외 메시지는 일반적으로 메시지를 나타내는 다른 스레드가 개체를 초기화 했습니다. 한 후 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="d943b-318">Throw 하 고 예외를 catch 하 여 도입 된 지연 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="d943b-319">때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="d943b-320">이 예제에서는 생성자와의 종료자에서 콘솔 메시지를 표시 하 여이 보여 줍니다는 `LargeObject` 클래스:</span><span class="sxs-lookup"><span data-stu-id="d943b-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="d943b-321"><xref:System.Lazy%601> 개체 인스턴스를 하나만 (초기화 함수가 예외를 throw 하는 위치는 스레드)를 제외한 모든 스레드를 사용해 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="d943b-322">출력의 예제에서이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d943b-323">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d943b-324">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d943b-325"><paramref name="mode" />에 잘못된 값이 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d943b-326"><paramref name="valueFactory" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-327">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d943b-328">값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="d943b-329">값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-330">초기화 지연에 대해 발생 하는 경우는 <xref:System.Lazy%601> 인스턴스에 발생할 생성 되는 값 또는 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="d943b-331">예외가 throw 된, 후속 동작의 경우는 <xref:System.Lazy%601> 인스턴스 인지에 따라 다릅니다 예외 캐싱을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="d943b-332">경우는 <xref:System.Lazy%601> 초기화 함수를 지정 하지 않는 생성자를 사용 하 여 인스턴스를 만든 후 예외 캐싱을 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="d943b-333">초기화 이후 시도 <xref:System.Lazy%601> 성공할 수 및 성공적으로 초기화 된 후 합니다 <xref:System.Lazy%601.IsValueCreated%2A> 속성에서 반환 `true`.</span><span class="sxs-lookup"><span data-stu-id="d943b-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="d943b-334">경우는 <xref:System.Lazy%601> 인스턴스를 초기화 함수를 사용 하 여 만든 (지정 된를 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601> 생성자), 다음 스레드 보안 모드를 통해 제어 됩니다 예외 캐싱을 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="d943b-335">모드가 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 또는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, 두 번째 가능성이 초기화할 수 없습니다는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d943b-336">해당 예외가 캐시 되 고의 후속 액세스에서 다시 throw 예외가 발생 하 고 초기화 함수에서 처리 되지 않을 경우는 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d943b-337">예외가 throw 되 면, 이러한 경우이 값이 만들어지지 <xref:System.Lazy%601.IsValueCreated%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="d943b-338">모드가 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>를 성공적으로 초기화 함수 (또는 기본 생성자)를 실행 하는 첫 번째 스레드가 대 한 값을 만듭니다.는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d943b-339">한 스레드에서 예외를 throw 하는 초기화 함수를 다른 스레드에서 계속 시도할 수 초기화는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="d943b-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d943b-340">값을 만들 때까지 합니다 <xref:System.Lazy%601.IsValueCreated%2A> 속성이 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-341">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d943b-342">이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대한 문자열 표현을 만들고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="d943b-343">값이 만들어졌으면(즉, <see cref="M:System.Object.ToString" /> 속성이 <see langword="true" />를 반환하면) 이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대해 <see cref="P:System.Lazy`1.IsValueCreated" /> 메서드를 호출한 결과이고,</span><span class="sxs-lookup"><span data-stu-id="d943b-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="d943b-344">그렇지 않으면 값이 만들어지지 않았음을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-345">이 메서드를 호출 하면 초기화가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="d943b-346"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성 일 수 있습니다 `null` 되었으면 팩터리 메서드는 초기화 지연 후에 대해 지정 된를 `valueFactory` 의 매개 변수를 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자가 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d943b-347"><see cref="P:System.Lazy`1.Value" /> 속성이 <see langword="null" />일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="d943b-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d943b-348">현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="d943b-349">현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d943b-350">경우는 <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> 속성은 `false`에 액세스 합니다 <xref:System.Lazy%601.Value%2A> 속성 초기화를 강제 합니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="d943b-351">나열 되는 예외 외에도 합니다 <xref:System.Lazy%601.Value%2A> 속성에 전달 된 팩터리 메서드에 의해 throw 되는 처리 되지 않은 예외를 throw 할 수 있습니다 합니다 `valueFactory` 의 매개 변수를 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d943b-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="d943b-352"><see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 생성자에 액세스할 수 있는 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="d943b-353"><see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 해당 형식에 매개 변수가 없는 공용 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d943b-354">초기화 함수에서 이 인스턴스의 <see cref="P:System.Lazy`1.Value" />에 액세스하려는 경우</span><span class="sxs-lookup"><span data-stu-id="d943b-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d943b-355">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="d943b-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>