<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa0465bfbd43d8d0a2a299e4193fa98de2a730bf" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56766294" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="83c3a-101">애플리케이션의 컨텍스트에 대한 데이터를 설정 및 검색하기 위한 멤버를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-101">Provides members for setting and retrieving data about an application's context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83c3a-102"><xref:System.AppContext> 클래스 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="83c3a-103">옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="83c3a-104">이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="83c3a-105">반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
## <a name="appcontext-for-library-developers"></a><span data-ttu-id="83c3a-106">라이브러리 개발자를 위한 AppContext</span><span class="sxs-lookup"><span data-stu-id="83c3a-106">AppContext for library developers</span></span>  
 <span data-ttu-id="83c3a-107">라이브러리 사용을 <xref:System.AppContext> 라이브러리 사용자는 해당 스위치를 라이브러리 동작에 영향을 설정할 수 있습니다 하는 동안 정의 하 고 호환성 노출 클래스 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="83c3a-108">기본적으로 라이브러리는 새로운 기능을 제공하며 스위치가 설정된 경우에만 변경합니다(즉, 이전 기능 제공).</span><span class="sxs-lookup"><span data-stu-id="83c3a-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="83c3a-109">이렇게 하면 라이브러리 이전 동작에 의존 하는 호출자를 지원 하면서 기존 API에 대 한 새 동작을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>  
  
### <a name="defining-the-switch-name"></a><span data-ttu-id="83c3a-110">스위치 이름 정의</span><span class="sxs-lookup"><span data-stu-id="83c3a-110">Defining the switch name</span></span>  
 <span data-ttu-id="83c3a-111">변경 된 동작을 옵트아웃 하려면 라이브러리의 소비자를 허용 하는 가장 일반적인 방법은 명명 된 스위치를 정의 하는 경우</span><span class="sxs-lookup"><span data-stu-id="83c3a-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="83c3a-112">해당 `value` 요소는 스위치의 이름으로 이루어진 이름/값 쌍 및 해당 <xref:System.Boolean> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="83c3a-113">기본적으로 스위치는 암시적으로 항상 `false`는 새 동작을 제공 합니다 (및 새 동작을 옵트인 하면 기본적으로).</span><span class="sxs-lookup"><span data-stu-id="83c3a-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="83c3a-114">스위치 설정을 `true` 하면, 레거시 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="83c3a-115">명시적으로 스위치 설정을 `false` 도 새 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>  
  
 <span data-ttu-id="83c3a-116">라이브러리에 의해 노출 되는 공식 계약 이므로 스위치 이름에 대 한 일관 된 형식을 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="83c3a-117">다음은 두 가지 명확한 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-117">The following are two obvious formats.</span></span>  
  
-   <span data-ttu-id="83c3a-118">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="83c3a-118">*Switch*.*namespace*.*switchname*</span></span>  
  
-   <span data-ttu-id="83c3a-119">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="83c3a-119">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="83c3a-120">정의 하 고 스위치를 문서화 하면 호출자가 사용할 수 추가 하 여 레지스트리를 사용 하 여는 [\<AppContextSwitchOverrides &gt;](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소를 호출 하거나 해당 애플리케이션 구성 파일에는 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드에 프로그래밍 방식으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="83c3a-121">참조를 [라이브러리 소비자에 대 한 AppContext](#ForConsumers) 호출자가 사용 하 고 값을 설정 하는 방법에 대 한 자세한 내용은 섹션 <xref:System.AppContext> 구성 스위치입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>  
  
 <span data-ttu-id="83c3a-122">공용 언어 런타임 애플리케이션 실행 될 때 자동으로 레지스트리의 호환성 설정을 읽고 애플리케이션을 채우기 위해 애플리케이션 구성 파일을 로드 <xref:System.AppContext> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="83c3a-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="83c3a-123">때문에 합니다 <xref:System.AppContext> 호출자에 의해 프로그래밍 방식으로 또는 런타임에서 인스턴스 채워집니다, 호출 등의 모든 작업을 수행할 필요가 없습니다를 <xref:System.AppContext.SetSwitch%2A> 메서드를 구성 하는 <xref:System.AppContext> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="83c3a-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>  
  
### <a name="checking-the-setting"></a><span data-ttu-id="83c3a-124">설정 확인</span><span class="sxs-lookup"><span data-stu-id="83c3a-124">Checking the setting</span></span>  
 <span data-ttu-id="83c3a-125">소비자가 act 적절 하 게 호출 하 고 스위치의 값을 선언 하는 경우 확인할 수 있습니다는 <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="83c3a-126">메서드는 반환 `true` 경우는 `switchName` 인수가 발견 되 고 메서드를 반환 하는 경우, 해당 `isEnabled` 인수에 스위치의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="83c3a-127">그렇지 않은 경우 메서드는 `false`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-127">Otherwise, the method returns `false`.</span></span>  
  
### <a name="an-example"></a><span data-ttu-id="83c3a-128">예제</span><span class="sxs-lookup"><span data-stu-id="83c3a-128">An example</span></span>  
 <span data-ttu-id="83c3a-129">다음 예제를 사용 하는 <xref:System.AppContext> 클래스는 고객이 라이브러리 메서드의 원래 동작을 선택할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="83c3a-130">다음은 명명 된 라이브러리의 버전 1.0 `StringLibrary`합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="83c3a-131">정의 `SubstringStartsAt` 더 큰 문자열 내에서 부분 문자열의 시작 인덱스를 확인 하는 서 수 비교를 수행 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 <span data-ttu-id="83c3a-132">다음 예제에서는 다음 라이브러리를 사용 하 여 "고고학자"에서 "archæ" 부분 문자열의 시작 인덱스를 찾을 수 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="83c3a-133">서 수 비교를 수행 하는 메서드, 때문에 부분 문자열을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 <span data-ttu-id="83c3a-134">하지만 라이브러리의 버전 2 변경 된 `SubstringStartsAt` 문화권 구분 비교를 사용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 <span data-ttu-id="83c3a-135">라이브러리의 새 버전에서 실행 되도록 앱을 다시 컴파일하면에 이제 "고고학자"에서 인덱스 4에서 사용 하는 부분 문자열 "archæ" 찾을 수 있는지 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 <span data-ttu-id="83c3a-136">이 변경은 주요 정의 하 여 원래 동작에 종속 된 애플리케이션에서 방지할 수 있습니다는 [\<AppContextSwitchOverrides &gt;](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="83c3a-137">스위치 이름이 예제의 경우 `StringLibrary.DoNotUseCultureSensitiveComparison`합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="83c3a-138">기본값인 `false`, 라이브러리의 2.0 버전 문화권 구분 비교를 수행 해야 한다고 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="83c3a-139">`true` 라이브러리의 버전 1.0 서 수 비교를 수행 해야 한다고 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="83c3a-140">앞의 코드를 약간 수정 메서드가 수행 하는 비교의 종류를 결정 하는 스위치를 설정 하려면 라이브러리 소비자를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 <span data-ttu-id="83c3a-141">그런 다음 애플리케이션 버전 1.0 동작을 복원 하려면 다음 구성 파일을 사용 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="83c3a-142">애플리케이션이 있는 구성 파일을 사용 하 여 실행 되 면 다음 출력이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-142">When the application is run with the configuration file present, it produces the following output:</span></span>  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="83c3a-143">라이브러리 소비자에 대 한 AppContext</span><span class="sxs-lookup"><span data-stu-id="83c3a-143">AppContext for library consumers</span></span>  
 <span data-ttu-id="83c3a-144">라이브러리의 소비자를 있다면를 <xref:System.AppContext> 클래스 라이브러리 또는 라이브러리 메서드가 새 기능의 옵트아웃 메커니즘을 활용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="83c3a-145">개별 메서드를 호출 하는 클래스 라이브러리의 새 동작을 사용할지 여부를 지정 하는 특정 스위치를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="83c3a-146">스위치의 값은 부울입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="83c3a-147">있으면 `false`는 일반적으로 값은 기본값, 새 동작 사용 되는 경우 `true`, 새로운 동작을 사용 하지 않도록 설정 및 멤버 이전에 수행한 것 처럼 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>  
  
 <span data-ttu-id="83c3a-148">네 가지 방법 중 하나에 스위치의 값을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-148">You can set the value of a switch in one of four ways:</span></span>  
  
-   <span data-ttu-id="83c3a-149">호출 하 여는 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 코드에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="83c3a-150">`switchName` 인수는 스위치 이름을 정의 하며 `isEnabled` 속성 스위치의 값을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="83c3a-151">때문에 <xref:System.AppContext> 정적 클래스는 응용 프로그램 도메인 별로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>  
  
     <span data-ttu-id="83c3a-152">호출 된 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 애플리케이션 범위에만 애플리케이션에 영향을 주므로, 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>  
  
-   <span data-ttu-id="83c3a-153">추가 하 여는 `<AppContextSwitchOverrides>` 요소를 [ \<런타임 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="83c3a-154">스위치에는 단일 특성이 `value`, 값인 스위치 이름 및 해당 값을 포함 하는 키/값 쌍을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>  
  
     <span data-ttu-id="83c3a-155">여러 스위치를 정의 하려면 각 스위치의 키/값 쌍을 구분 합니다 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소의 `value` 특성을 세미콜론으로 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="83c3a-156">이런 경우는 `<AppContextSwitchOverrides>` 요소는 다음 형식:</span><span class="sxs-lookup"><span data-stu-id="83c3a-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     <span data-ttu-id="83c3a-157">사용 하는 `<AppContextSwitchOverrides>` 구성 설정을 정의 하는 요소에는 애플리케이션 범위에만 애플리케이션에 영향을 주므로,.</span><span class="sxs-lookup"><span data-stu-id="83c3a-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>  

    > [!NOTE]    
    > <span data-ttu-id="83c3a-158">.NET Framework에서 정의 하는 스위치에 대 한 내용은 참조는 [ \<AppContextSwitchOverrides > 요소](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="83c3a-159">이름이 스위치의 이름인 문자열 값을 추가 하 여 하를 `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` 레지스트리 키입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="83c3a-160">해당 값의 문자열 표현 이어야 합니다는 <xref:System.Boolean> 여 구문 분석할 수 있습니다를 <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> 메서드, 즉 것 이어야 합니다 "True", "true", "False" 또는 "false".</span><span class="sxs-lookup"><span data-stu-id="83c3a-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="83c3a-161">런타임에 다른 값에서 발견 하는 경우 스위치를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-161">If the runtime encounters any other value, it ignores the switch.</span></span>  
  
     <span data-ttu-id="83c3a-162">레지스트리를 사용 하 여 정의 하는 <xref:System.AppContext> 스위치 컴퓨터 범위에는 컴퓨터에서 실행 중인 모든 애플리케이션에 영향을 주므로, 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>  

- <span data-ttu-id="83c3a-163">ASP.NET 애플리케이션에 대 한 추가 [\<추가 &gt;](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) 요소를 [\<appSettings &gt;](~/docs/framework/configure-apps/file-schema/appsettings/index.md) web.config 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-163">For ASP.NET applications, you add an [\<Add>](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) element to the [\<appSettings>](~/docs/framework/configure-apps/file-schema/appsettings/index.md) section of the web.config file.</span></span> <span data-ttu-id="83c3a-164">예:</span><span class="sxs-lookup"><span data-stu-id="83c3a-164">For example:</span></span>

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```
   
 <span data-ttu-id="83c3a-165">둘 이상의 방식으로 동일한 스위치를 설정 하면 다른 어떤 설정이 재정의 확인 하기 위한 우선 순위는:</span><span class="sxs-lookup"><span data-stu-id="83c3a-165">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>  
  
1.  <span data-ttu-id="83c3a-166">프로그래밍 방식으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-166">The programmatic setting.</span></span>  
  
2.  <span data-ttu-id="83c3a-167">앱 구성 파일 또는 web.config 파일에 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-167">The setting in the app config file or the web.config file.</span></span>  
  
3.  <span data-ttu-id="83c3a-168">레지스트리 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-168">The registry setting.</span></span>  
  
 <span data-ttu-id="83c3a-169">다음은 파일 URI를 전달 하는 간단한 애플리케이션에는 <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-169">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="83c3a-170">Throw를.NET Framework 4.6에서 실행 하는 경우는 <xref:System.ArgumentException> 있으므로 `file://` 파일 경로의 유효한 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-170">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 <span data-ttu-id="83c3a-171">메서드의 이전 동작을 복원 하 고 예외를 방지 하려면 추가 `Switch.System.IO.UseLegacyPathHandling` 예제 애플리케이션 구성 파일에 전환:</span><span class="sxs-lookup"><span data-stu-id="83c3a-171">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a><span data-ttu-id="83c3a-172">참고 항목</span><span class="sxs-lookup"><span data-stu-id="83c3a-172">See also</span></span>
[<span data-ttu-id="83c3a-173">AppContext 스위치</span><span class="sxs-lookup"><span data-stu-id="83c3a-173">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd"><span data-ttu-id="83c3a-174">&lt;런타임&gt; 요소</span><span class="sxs-lookup"><span data-stu-id="83c3a-174">&lt;runtime&gt; Element</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752"><span data-ttu-id="83c3a-175">&lt;AppContextSwitchOverrides&gt; 요소</span><span class="sxs-lookup"><span data-stu-id="83c3a-175">&lt;AppContextSwitchOverrides&gt; Element</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83c3a-176">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리의 경로 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-176">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="83c3a-177">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리의 경로 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-177">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83c3a-178">이 애플리케이션 도메인 속성 당 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-178">This is a per application domain property.</span></span> <span data-ttu-id="83c3a-179">해당 값에 해당 하는 <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> 현재 애플리케이션 도메인의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-179">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="83c3a-180">데이터 요소의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-180">The name of the data element.</span></span></param>
        <summary><span data-ttu-id="83c3a-181">현재 애플리케이션 도메인에 할당되어 있는 명명된 데이터 요소의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-181">Returns the value of the named data element assigned to the current application domain.</span></span></summary>
        <returns><span data-ttu-id="83c3a-182"><paramref name="name" />이 명명된 값을 식별하는 경우 <paramref name="name" />의 값이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-182">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="83c3a-183">스위치의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-183">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="83c3a-184">스위치의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-184">The value of the switch.</span></span></param>
        <summary><span data-ttu-id="83c3a-185">스위치의 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-185">Sets the value of a switch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83c3a-186"><xref:System.AppContext> 클래스 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-186">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="83c3a-187">옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-187">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="83c3a-188">이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-188">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="83c3a-189">반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-189">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="83c3a-190">합니다 <xref:System.AppContext.SetSwitch%2A> 스위치의 값을 선언 하는 애플리케이션 (또는 라이브러리)에서 호출 됩니다 (항상를 <xref:System.Boolean> 값) 종속 라이브러리가 정의 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-190">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="83c3a-191">스위치는 항상 암시적으로 `false`, 새 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-191">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="83c3a-192">스위치 설정을 `true` 하면, 레거시 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-192">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="83c3a-193">명시적으로 스위치 설정을 `false` 도 새 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-193">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="83c3a-194">종속 라이브러리를 호출 하 여 다음 스위치의 값을 확인할 수는 <xref:System.AppContext.TryGetSwitch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-194">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="83c3a-195">라이브러리에 의해 노출 되는 공식 계약 이므로 스위치 이름에 대 한 일관 된 형식을 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-195">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="83c3a-196">다음은 두 가지 명확한 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-196">The following are two obvious formats.</span></span>  
>   
> -   <span data-ttu-id="83c3a-197">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="83c3a-197">*Switch*.*namespace*.*switchname*</span></span>  
> -   <span data-ttu-id="83c3a-198">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="83c3a-198">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="83c3a-199">스위치의 값을 프로그래밍 방식으로 설정 하는 것 외에도.NET Framework에서 실행 중인 애플리케이션에 대 한 것도 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-199">For applications running on the .NET Framework, in addition to setting the value of a switch programmatically, it can also be set:</span></span>  
  
-   <span data-ttu-id="83c3a-200">스위치 이름 및 값을 추가 하 여 합니다 [\<AppContextSwitchOverrides &gt;](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소에는 [\<런타임 &gt;](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 애플리케이션 구성 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-200">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="83c3a-201">다음 라는 스위치를 정의 하는 예를 들어 `Libraries.FPLibrary.UseExactFloatingPointComparison` 값인 `False`합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-201">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   <span data-ttu-id="83c3a-202">이름이 스위치의 이름인 문자열 값을 추가 하 여 하를 `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` 레지스트리 키입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-202">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="83c3a-203">해당 값의 문자열 표현 이어야 합니다는 <xref:System.Boolean> 여 구문 분석할 수 있습니다를 <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> 메서드, 즉 것 이어야 합니다 "True", "true", "False" 또는 "false".</span><span class="sxs-lookup"><span data-stu-id="83c3a-203">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>  
  
 <span data-ttu-id="83c3a-204">하는 경우 `switchName` 이미 있으면 해당 값을 덮어씁니다를 `isEnabled` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-204">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="83c3a-205">즉, 가장 최근의 호출을 <xref:System.AppContext.SetSwitch%2A> 레지스트리에 대 한 이전 호출 또는 앱 구성 파일에 정의 된 값을 재정의 하는 메서드를 <xref:System.AppContext.SetSwitch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-205">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
 
 ### <a name="appcontextsetswitch-and-net-core"></a><span data-ttu-id="83c3a-206">AppContext.SetSwitch 및.NET Core</span><span class="sxs-lookup"><span data-stu-id="83c3a-206">AppContext.SetSwitch and .NET Core</span></span>

<span data-ttu-id="83c3a-207">.NET core 지원 사용 하 여 프로그래밍 방식으로 호출 된 <xref:System.AppContext.SetSwitch%2A> 방법 으로만 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-207">.NET Core supports programmatic calls with the <xref:System.AppContext.SetSwitch%2A> method only.</span></span> <span data-ttu-id="83c3a-208">다음 스위치가 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-208">The following switches are supported:</span></span>

|<span data-ttu-id="83c3a-209">전환</span><span class="sxs-lookup"><span data-stu-id="83c3a-209">Switch</span></span>|<span data-ttu-id="83c3a-210">값</span><span class="sxs-lookup"><span data-stu-id="83c3a-210">Values</span></span>|<span data-ttu-id="83c3a-211">설명</span><span class="sxs-lookup"><span data-stu-id="83c3a-211">Description</span></span>|
|--|--|--|
|`System.Net.Http.useSocketsHttpHandler` |`true`|`false`|<span data-ttu-id="83c3a-212">같은지 고급 네트워킹 Api와 같은 <xref:System.Net.Http.HttpClient> 사용 하 여 <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) 또는 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span><span class="sxs-lookup"><span data-stu-id="83c3a-212">Determines whether high-level networking APIs such as <xref:System.Net.Http.HttpClient> use <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) or <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span></span>|   
  
## Examples  
 <span data-ttu-id="83c3a-213">라는 스위치를 설정 하는 다음 코드 줄 `Switch.AmazingLib.ThrowOnException` 에 `true`, 레거시 동작을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-213">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="83c3a-214">라이브러리를 라이브러리 소비자를 호출 하 여 스위치의 값을 설정 않았는지 여부를 확인할 수는 <xref:System.AppContext.TryGetSwitch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-214">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83c3a-215"><paramref name="switchName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-215"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83c3a-216"><paramref name="switchName" />가 <see cref="F:System.String.Empty" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-216"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83c3a-217">현재 애플리케이션의 대상인 프레임워크 버전의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-217">Gets the name of the framework version targeted by the current application.</span></span></summary>
        <value><span data-ttu-id="83c3a-218">현재 애플리케이션의 대상인 프레임워크 버전의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-218">The name of the framework version targeted by the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83c3a-219">값에 해당 하는 대상 프레임 워크 버전의 이름을 합니다 <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-219">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="83c3a-220">.NET Framework에 대 한 대상 프레임 워크 이름 목록에 대해서는 [ &lt;supportedRuntime&gt; 요소](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-220">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="83c3a-221">스위치의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-221">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="83c3a-222">이 메서드가 반환될 때 <paramref name="switchName" />을 찾은 경우 <paramref name="switchName" />의 값을 포함하거나, <paramref name="switchName" />을 찾을 수 없으면 <see langword="false" />의 값을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-222">When this method returns, contains the value of <paramref name="switchName" /> if <paramref name="switchName" /> was found, or <see langword="false" /> if <paramref name="switchName" /> was not found.</span></span> <span data-ttu-id="83c3a-223">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-223">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="83c3a-224">스위치의 값을 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-224">Tries to get the value of a switch.</span></span></summary>
        <returns><span data-ttu-id="83c3a-225"><paramref name="switchName" />이 설정되었으며 <paramref name="isEnabled" /> 인수에 스위치의 값이 포함되어 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-225"><see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83c3a-226"><xref:System.AppContext> 클래스 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-226">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="83c3a-227">옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-227">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="83c3a-228">이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-228">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="83c3a-229">반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-229">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="83c3a-230">공용 언어 런타임에 할당 하는 스위치를 자동으로 채우려고는 <xref:System.AppContext> 레지스트리 및 애플리케이션의 구성 파일을 읽어 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="83c3a-230">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="83c3a-231">이러한 스위치의 값을 재정의할 수 있습니다 다음을 호출 하 여 새 스위치를 추가 및는 <xref:System.AppContext.SetSwitch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-231">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
 <span data-ttu-id="83c3a-232">라이브러리를 호출 하 여 <xref:System.AppContext.TryGetSwitch%2A> 소비자 스위치의 값을 보인 후에 적절 하 게 작동 하는지 여부를 확인 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="83c3a-232">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="83c3a-233">스위치를 정의 하지 않은 경우에 기본적으로 새 기능 사용은...</span><span class="sxs-lookup"><span data-stu-id="83c3a-233">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="83c3a-234">전환 정의 되 고 해당 값은 `false`, 새 기능을 함께 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-234">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="83c3a-235">해당 값이 `true`, 레거시 동작을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-235">If its value is `true`, the legacy behavior is enabled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83c3a-236">다음 예에서는 라이브러리 소비자가 명명 된 스위치를 설정 하는지 여부를 결정 `Switch.AmazingLib.ThrowOnException`합니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-236">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83c3a-237"><paramref name="switchName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-237"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83c3a-238"><paramref name="switchName" />가 <see cref="F:System.String.Empty" />입니다.</span><span class="sxs-lookup"><span data-stu-id="83c3a-238"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>