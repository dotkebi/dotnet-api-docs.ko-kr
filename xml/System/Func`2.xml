<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33e8fee40bc11f095a9a86eabb2540351b323cbf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58728525" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="e0356-101">이 대리자로 캡슐화되는 메서드의 매개 변수 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="e0356-102">이 대리자로 캡슐화되는 메서드의 반환 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-102">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg"><span data-ttu-id="e0356-103">이 대리자로 캡슐화되는 메서드의 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-103">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="e0356-104">매개 변수가 하나이고 <typeparamref name="TResult" /> 매개 변수에 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="e0356-105">이 대리자로 캡슐화되는 메서드의 반환 값입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-105">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0356-106">사용자 지정 대리자를 명시적으로 선언 하지 않고 매개 변수로 전달할 수 있는 메서드를 나타내는이 대리자를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="e0356-107">캡슐화 된 메서드에이 대리자에 의해 정의 되는 메서드 시그니처와 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="e0356-108">즉, 캡슐화 된 메서드에 값으로 전달 되는 매개 변수가 하나 있어야 하는 값을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e0356-109">하나의 매개 변수가 반환 하는 메서드를 참조 `void` (Visual Basic의 경우로 선언 되는 `Sub` 아니라는 `Function`), 제네릭 사용 <xref:System.Action%601> 대리자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="e0356-110">사용 하는 경우는 <xref:System.Func%602> 대리자 필요가 없습니다를 명시적으로 단일 매개 변수를 사용 하 여 메서드를 캡슐화 하는 대리자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="e0356-111">예를 들어, 다음 코드는 라는 대리자를 명시적으로 선언 `ConvertMethod` 에 대 한 참조를 할당 합니다 `UppercaseString` 해당 대리자 인스턴스에 메서드.</span><span class="sxs-lookup"><span data-stu-id="e0356-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="e0356-112">다음 예제에서는 인스턴스화하여이 코드를 간소화는 <xref:System.Func%602> 명시적으로 새 대리자를 정의 하 고 명명된 된 메서드를 할당 하는 대신 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="e0356-113">사용할 수도 있습니다는 <xref:System.Func%602> 다음 예제와 같이 C#에서는 무명 메서드로 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="e0356-114">(소개 무명 메서드를 참조 하세요 [무명 메서드](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="e0356-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="e0356-115">람다 식을 할당할 수도 있습니다는 <xref:System.Func%602> 다음 예제와 같이 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="e0356-116">(람다 식에 대 한 소개를 참조 하세요 [람다 식](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) 하 고 [람다 식](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="e0356-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="e0356-117">람다 식의 기본 형식이 제네릭 중 하나인 `Func` 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="e0356-118">이 대리자를 명시적으로 할당 하지 않고 람다 식을 매개 변수로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="e0356-119">특히 때문에 형식의 여러 메서드를 <xref:System.Linq> 네임 스페이스 <xref:System.Func%602> 매개 변수를 하면 이러한 메서드는 람다 식을 전달할 수 명시적으로 인스턴스화하지 않고도 <xref:System.Func%602> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0356-120">다음 예제에는 선언 및 사용 하는 방법을 보여 줍니다.는 <xref:System.Func%602> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="e0356-121">이 예제에서는 선언는 <xref:System.Func%602> 변수 문자열의 문자를 대문자로 변환 하는 람다 식을 할당 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="e0356-122">이 메서드를 캡슐화 하는 대리자에 전달 된 이후에는 <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> 문자열의 배열에서 문자열을 대문자로 변경 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="e0356-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="e0356-123">람다 식(C# 프로그래밍 가이드)</span><span class="sxs-lookup"><span data-stu-id="e0356-123">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="e0356-124">람다 식(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e0356-124">Lambda Expressions (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="e0356-125">대리자(C# 프로그래밍 가이드)</span><span class="sxs-lookup"><span data-stu-id="e0356-125">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="e0356-126">대리자(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e0356-126">Delegates (Visual Basic)</span></span></related>
  </Docs>
</Type>