<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ae5fac6e3c82cfaf02bcdc8876ab63369f0821b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702472" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="1c5c4-101">비교할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-101">The type of the object to compare.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="1c5c4-102">이 대리자가 나타내는 메서드에 정의된 조건과 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-102">The object to compare against the criteria defined within the method represented by this delegate.</span></span></param>
    <summary><span data-ttu-id="1c5c4-103">조건 집합을 정의하고 지정된 개체가 이러한 조건을 충족하는지 여부를 확인하는 메서드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-103">Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</span></span></summary>
    <returns><span data-ttu-id="1c5c4-104"><paramref name="obj" />가 이 대리자가 나타내는 메서드에 정의된 조건을 충족하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-104"><see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c5c4-105">이 대리자는의 몇 가지 방법으로 사용 합니다 <xref:System.Array> 및 <xref:System.Collections.Generic.List%601> 컬렉션의 요소를 검색 하는 클래스.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-105">This delegate is used by several methods of the <xref:System.Array> and <xref:System.Collections.Generic.List%601> classes to search for elements in the collection.</span></span>  
  
 <span data-ttu-id="1c5c4-106">일반적으로 <xref:System.Predicate%601> 대리자 람다 식을 사용 하 여 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-106">Typically, the <xref:System.Predicate%601> delegate is represented by a lambda expression.</span></span> <span data-ttu-id="1c5c4-107">로컬 범위 변수를 람다 식에 사용할 수 있으므로 정확 하 게 컴파일 타임에 알려지지 않은 조건에 대 한 테스트 하기 쉽습니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-107">Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time.</span></span> <span data-ttu-id="1c5c4-108">이 정의 하는 다음 예제에서는 시뮬레이션 된 `HockeyTeam` National Hockey League 팀과 이전에 설립 된 연도 대 한 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-108">This is simulated in the following example, which defines a `HockeyTeam` class that contains information about a National Hockey League team and the year in which it was founded.</span></span> <span data-ttu-id="1c5c4-109">예제에서는 연도 나타내는 정수 값의 배열을 정의 하 고 배열의 요소가 하나를 임의로 할당 `foundedBeforeYear`에 로컬로 예제의 범위가 지정 된 변수는 `Main` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-109">The example defines an array of integer values that represent years, and randomly assigns one element of the array to `foundedBeforeYear`, which is a variable that is locally scoped to the example's `Main` method.</span></span> <span data-ttu-id="1c5c4-110">범위가 지정 된 로컬 변수를 람다 식에 사용할 수 있는 람다 식에 전달 합니다 <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> 메서드는 반환할 수 있습니다는 `HockeyTeam` 또는 해당 년 전에 설립 된 각 팀에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-110">Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> method is able to return a `HockeyTeam` object for each team founded on or before that year.</span></span>  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="1c5c4-111">다음 코드 예제에서는 <xref:System.Predicate%601> 사용 하 여 대리자를 <xref:System.Array.Find%2A?displayProperty=nameWithType> 배열을 검색 하는 방법 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-111">The following code example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A?displayProperty=nameWithType> method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="1c5c4-112">이 예제에서는 명시적으로 정의 합니다.를 <xref:System.Predicate%601> 라는 대리자 `predicate` 라는 메서드를 할당 `FindPoints` 반환 하는 `true` 경우를 곱한 값를 <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> 및 <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> 필드 100,000 보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-112">The example explicitly defines a <xref:System.Predicate%601> delegate named `predicate` and assigns it a method named `FindPoints` that returns `true` if the product of the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> and <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> fields is greater than 100,000.</span></span> <span data-ttu-id="1c5c4-113">일반적인 형식의 대리자를 명시적으로 정의 하기 보다는 람다 식을 사용 하는 <xref:System.Predicate%601>처럼 두 번째 예제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-113">Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <xref:System.Predicate%601>, as the second example illustrates.</span></span>  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 <span data-ttu-id="1c5c4-114">다음 예제는 람다 식을 나타내는 데 사용 하 여 이전 예제와 동일 합니다 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-114">The following example is identical to the previous example, except that it uses a lambda expression to represent the <xref:System.Predicate%601> delegate.</span></span>  <span data-ttu-id="1c5c4-115">각 요소는 `points` 식 검색 기준을 충족 하는 요소를 찾을 때까지 배열은 람다 식에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-115">Each element of the `points` array is passed to the lambda expression until the expression finds an element that meets the search criteria.</span></span> <span data-ttu-id="1c5c4-116">이 경우 람다 식을 반환 `true` X 및 Y 필드의 곱이 100,000 보다 큰 경우.</span><span class="sxs-lookup"><span data-stu-id="1c5c4-116">In this case, the lambda expression returns `true` if the product of the X and Y fields is greater than 100,000.</span></span>  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>