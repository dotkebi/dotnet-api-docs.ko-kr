<Type Name="GC" FullName="System.GC">
  <Metadata><Meta Name="ms.openlocfilehash" Value="be23d111dc399e846c969bd517a2458710d1f961" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719944" /></Metadata><TypeSignature Language="C#" Value="public static class GC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" />
  <TypeSignature Language="F#" Value="type GC = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ab820-101">사용하지 않는 메모리를 자동적으로 회수하는 서비스인 시스템 가비지 수집기를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-101">Controls the system garbage collector, a service that automatically reclaims unused memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-102">가비지 수집기가 할당 하 고 관리 되는 메모리 해제를 제어 하는 공용 언어 런타임 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-102">The garbage collector is a common language runtime component that controls the allocation and release of managed memory.</span></span> <span data-ttu-id="ab820-103">이 클래스의 메서드는 개체와 개체에 의해 할당 된 리소스를 해제 하는 경우 가비지 컬렉션이 수행 될 때 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-103">The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released.</span></span> <span data-ttu-id="ab820-104">이 클래스의 속성 시스템 및 연령 범주를 생성, 개체에 할당 된 메모리의 총 사용 가능한 메모리에 대 한 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-104">Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.</span></span>  
  
 <span data-ttu-id="ab820-105">가비지 수집기를 추적 하 고 관리 되는 메모리에 할당 된 개체를 회수 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-105">The garbage collector tracks and reclaims objects allocated in managed memory.</span></span> <span data-ttu-id="ab820-106">정기적으로 가비지 수집기 참조가 유효 하지 않은 개체에 할당 된 메모리를 회수 하기 위해 가비지 수집을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-106">Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references.</span></span> <span data-ttu-id="ab820-107">가비지 수집 사용 가능한 메모리를 사용 하 여 메모리에 대 한 요청을 충족할 수 없는 경우 자동으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-107">Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory.</span></span> <span data-ttu-id="ab820-108">또는 응용 프로그램 사용 하 여 가비지 컬렉션 강제할 수는 <xref:System.GC.Collect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-108">Alternatively, an application can force garbage collection using the <xref:System.GC.Collect%2A> method.</span></span>  
  
 <span data-ttu-id="ab820-109">가비지 수집은 다음 단계로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-109">Garbage collection consists of the following steps:</span></span>  
  
1.  <span data-ttu-id="ab820-110">가비지 수집기는 관리 코드에서 참조 되는 관리 되는 개체를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-110">The garbage collector searches for managed objects that are referenced in managed code.</span></span>  
  
2.  <span data-ttu-id="ab820-111">가비지 수집기가 참조 되지 않는 개체를 종료 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-111">The garbage collector tries to finalize objects that are not referenced.</span></span>  
  
3.  <span data-ttu-id="ab820-112">가비지 수집기는 참조 되지 않는 개체를 해제 하 고 해당 메모리를 회수 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-112">The garbage collector frees objects that are not referenced and reclaims their memory.</span></span>  
  
 <span data-ttu-id="ab820-113">이 항목에는 다음 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-113">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="ab820-114">[가비지 수집기 및 관리 되지 않는 리소스](#unmanaged) </span><span class="sxs-lookup"><span data-stu-id="ab820-114">[The garbage collector and unmanaged resources](#unmanaged) </span></span>  
 <span data-ttu-id="ab820-115">[개체 에이징 및 세대](#generations) </span><span class="sxs-lookup"><span data-stu-id="ab820-115">[Object aging and generations](#generations) </span></span>  
 [<span data-ttu-id="ab820-116">가비지 수집을 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-116">Disallowing garbage collection</span></span>](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a><span data-ttu-id="ab820-117">가비지 수집기 및 관리 되지 않는 리소스</span><span class="sxs-lookup"><span data-stu-id="ab820-117">The garbage collector and unmanaged resources</span></span>  
 <span data-ttu-id="ab820-118">수집 중에 관리 코드에서 개체에 대 한 하나 이상의 참조를 찾으면 가비지 수집기는 개체를 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-118">During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code.</span></span> <span data-ttu-id="ab820-119">그러나 가비지 수집기 비관리 코드에서 개체에 대 한 참조를 인식 하지 못하고 이렇게에서 명시적으로 금지 하지 않는 한 관리 되지 않는 코드에서 단독으로 사용 되지 않는 개체를 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-119">However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so.</span></span> <span data-ttu-id="ab820-120"><xref:System.GC.KeepAlive%2A> 메서드 가비지 수집기가 관리 되지 않는 코드에서 사용에서 된 개체를 수집 하지 못하도록 하는 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-120">The <xref:System.GC.KeepAlive%2A> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.</span></span>  
  
 <span data-ttu-id="ab820-121">관리 되는 메모리 할당 외에도 가비지 수집의 구현 파일 핸들, 데이터베이스 연결 등의 개체에서 보유 한 리소스에 대 한 정보를 유지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-121">Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections.</span></span> <span data-ttu-id="ab820-122">형식에서 형식의 인스턴스는 회수 해 넣기 전에 릴리스해야 합니다. 관리 되지 않는 리소스를 사용 하는 경우 형식 종료자를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-122">When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.</span></span>  
  
 <span data-ttu-id="ab820-123">그러나 대부분의 경우 종료자를 재정의 하 여 구현 됩니다 합니다 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드를 C# 또는 c + +로 작성 된 형식은 소멸자의 재정의로 설정 하는 컴파일러를 구현 하는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-123">In most cases, finalizers are implemented by overriding the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ab820-124">대부분의 경우에서 개체는 종료 자가 있으면 가비지 수집기가 호출 개체를 해제 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-124">In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object.</span></span> <span data-ttu-id="ab820-125">그러나 가비지 수집기는 모든 상황;에서 종료자를 호출 하는 데 필요한 예를 들어를 <xref:System.GC.SuppressFinalize%2A> 메서드는 명시적으로 개체의 종료 자가 호출 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-125">However, the garbage collector is not required to call finalizers in all situations; for example, the <xref:System.GC.SuppressFinalize%2A> method explicitly prevents an object's finalizer from being called.</span></span> <span data-ttu-id="ab820-126">또한 가비지 수집기는 특정 스레드를 사용 하 여 개체를 종료 하거나 서로 참조 하지만 그렇지 않은 가비지 컬렉션에 대해 사용할 수 있는 개체에 대 한 종료 자가 호출 하는 순서를 보장 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-126">Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.</span></span>  
  
 <span data-ttu-id="ab820-127">특정 시간에 리소스를 해제 해야 합니다는 여기서 시나리오에서는 클래스에서 구현할 수는 <xref:System.IDisposable> 포함 하는 인터페이스를 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 리소스 관리 및 정리 작업을 수행 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-127">In scenarios where resources must be released at a specific time, classes can implement the <xref:System.IDisposable> interface, which contains the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method that performs resource management and cleanup tasks.</span></span> <span data-ttu-id="ab820-128">구현 하는 클래스 <xref:System.IDisposable.Dispose%2A> 지정 해야 합니다는 클래스 계약의 일부로 개체를 정리 하려면 메서드를 호출 하는 클래스 소비자 경우.</span><span class="sxs-lookup"><span data-stu-id="ab820-128">Classes that implement <xref:System.IDisposable.Dispose%2A> must specify, as part of their class contract, if and when class consumers call the method to clean up the object.</span></span> <span data-ttu-id="ab820-129">가비지 수집기가 호출 하지 않으면, 기본적으로 <xref:System.IDisposable.Dispose%2A> 메서드 하지만 구현의 <xref:System.IDisposable.Dispose%2A> 메서드 메서드를 호출할 수는 <xref:System.GC> 가비지 수집기의 종료 동작을 사용자 지정 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-129">The garbage collector does not, by default, call the <xref:System.IDisposable.Dispose%2A> method; however, implementations of the <xref:System.IDisposable.Dispose%2A> method can call methods in the <xref:System.GC> class to customize the finalization behavior of the garbage collector.</span></span>  
  
 <span data-ttu-id="ab820-130">개체 종료 및 dispose 패턴에 대 한 자세한 내용은 참조 하세요. [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-130">For more information on object finalization and the dispose pattern, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a><span data-ttu-id="ab820-131">개체 에이징 및 세대</span><span class="sxs-lookup"><span data-stu-id="ab820-131">Object aging and generations</span></span>  
 <span data-ttu-id="ab820-132">공용 언어 런타임의 가비지 수집기는 세대를 사용 하 여 개체 에이징을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-132">The garbage collector in the common language runtime supports object aging using generations.</span></span> <span data-ttu-id="ab820-133">생성은 메모리에서 개체의 상대적 기간의 측정 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-133">A generation is a unit of measure of the relative age of objects in memory.</span></span> <span data-ttu-id="ab820-134">개체의 보존 기간을 세대 번호는 개체가 속한 생성을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-134">The generation number, or age, of an object indicates the generation to which an object belongs.</span></span> <span data-ttu-id="ab820-135">만든 개체 자세한 최근에 최신 세대의 일부인 하며 응용 프로그램 수명 동안의 앞부분에서 만든 개체 주기 보다 더 낮은 세대 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-135">Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle.</span></span> <span data-ttu-id="ab820-136">최신 세대의 개체는 세대 0에.</span><span class="sxs-lookup"><span data-stu-id="ab820-136">Objects in the most recent generation are in generation 0.</span></span> <span data-ttu-id="ab820-137">이 구현의 가비지 수집기는 세 가지 개체 세대가, 0, 1 및 2 세대를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-137">This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2.</span></span> <span data-ttu-id="ab820-138">값을 검색할 수는 <xref:System.GC.MaxGeneration%2A> 시스템에서 지원 되는 가장 큰 세대 번호를 확인 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-138">You can retrieve the value of the <xref:System.GC.MaxGeneration%2A> property to determine the maximum generation number supported by the system.</span></span>  
  
 <span data-ttu-id="ab820-139">개체 에이징 가비지 수집기가 모든 세대를 평가 하는 것이 아니라 세대의 특정 집합에서 가비지 수집의 대상 응용 프로그램을 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-139">Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations.</span></span> <span data-ttu-id="ab820-140">오버 로드는 <xref:System.GC.Collect%2A> 포함 하는 메서드를 `generation` 매개 변수를 사용 하면 가장 오래 된 세대 가비지 수집을 지정할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-140">Overloads of the <xref:System.GC.Collect%2A> method that include a `generation` parameter allow you to specify the oldest generation to be garbage collected.</span></span>  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a><span data-ttu-id="ab820-141">가비지 수집을 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-141">Disallowing garbage collection</span></span>  
 <span data-ttu-id="ab820-142">부터 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 가비지 수집기를 비 GC 지역 대기 시간 모드 중요 경로에 가비지 컬렉션 수 성능이 저하 될 앱의 실행 하는 동안 사용할 수 있는 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-142">Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app's performance.</span></span> <span data-ttu-id="ab820-143">비 GC 지역 대기 시간 모드는 가비지 수집기에서 문제 없이 함께 할당 될 수 있는 메모리 양을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-143">The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector.</span></span> <span data-ttu-id="ab820-144">런타임에서 해당 메모리에 할당 하는 경우 중요 경로에서 코드가 실행 되는 동안 런타임 가비지 수집을 수행 하지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-144">If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.</span></span>  
  
 <span data-ttu-id="ab820-145">오버 로드 중 하나를 호출 하 여 없습니다 GC 영역의 중요 한 경로의 시작 부분을 정의 합니다 <xref:System.GC.TryStartNoGCRegion%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-145">You define the beginning of the critical path of the no GC region by calling one of the overloads of the <xref:System.GC.TryStartNoGCRegion%2A>.</span></span> <span data-ttu-id="ab820-146">호출 하 여 중요 한 해당 경로의 끝을 지정 합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-146">You specify the end of its critical path by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 <span data-ttu-id="ab820-147">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-147">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-148">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-148">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-149">다음 예제에서는 몇 가지 GC 메서드를 사용 하 여 생성 및 사용 되지 않는 개체의 블록에 대 한 메모리 정보를 가져오고 콘솔에 인쇄 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-149">The following example uses several GC methods to get generation and memory information about a block of unused objects and print it to the console.</span></span> <span data-ttu-id="ab820-150">사용 되지 않는 개체는 다음 수집 하 고 총 메모리 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-150">The unused objects are then collected, and the resulting memory totals are displayed.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
    <related type="Article" href="~/docs/standard/garbage-collection/index.md"><span data-ttu-id="ab820-151">가비지 컬렉션</span><span class="sxs-lookup"><span data-stu-id="ab820-151">Garbage Collection</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2"><span data-ttu-id="ab820-152">가비지 컬렉션 기본 사항</span><span class="sxs-lookup"><span data-stu-id="ab820-152">Fundamentals of Garbage Collection</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member AddMemoryPressure : int64 -&gt; unit" Usage="System.GC.AddMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="ab820-153">할당된 관리되지 않는 메모리의 증가량입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-153">The incremental amount of unmanaged memory that has been allocated.</span></span></param>
        <summary><span data-ttu-id="ab820-154">가비지 수집을 예약할 때 고려해야 할 많은 양의 관리되지 않는 메모리 할당을 런타임에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-154">Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-155">가비지 컬렉션을 예약할 시기를 결정 하는 데, 런타임 고려 관리 되는 메모리 양을 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-155">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="ab820-156">작은 관리 되는 개체는 많은 양의 관리 되지 않는 메모리를 할당 하면 런타임은 관리 되는 메모리를 고려 하며 따라서 가비지 컬렉션을 예약할의 시급성</span><span class="sxs-lookup"><span data-stu-id="ab820-156">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="ab820-157"><xref:System.GC.AddMemoryPressure%2A> 메서드 시스템 메모리의이 추가 사용에 런타임에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-157">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory.</span></span>  
  
 <span data-ttu-id="ab820-158">가장 간단한 사용 패턴에 관리 되는 개체 생성자에 관리 되지 않는 메모리를 할당 및 해제 하는 `Dispose` 또는 `Finalize` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-158">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="ab820-159">호출을 <xref:System.GC.AddMemoryPressure%2A> 메서드는 관리 되지 않는 메모리를 할당 한 후 호출을 <xref:System.GC.RemoveMemoryPressure%2A> 해제 한 후 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-159">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="ab820-160">호출할 수 있는 관리 되지 않는 메모리 할당을 크게 변경 되는 관리 되는 개체의 수명 동안, 더 복잡 한 시나리오에서의 <xref:System.GC.AddMemoryPressure%2A> 및 <xref:System.GC.RemoveMemoryPressure%2A> 런타임에 이러한 증분 변경 내용을 통신 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-160">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ab820-161">정확 하 게 추가한 압력의 크기를 제거 하는 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-161">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="ab820-162">그렇게 하지 않으면 오랜 시간 동안 실행 되는 응용 프로그램에서 시스템의 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-162">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-163"><paramref name="bytesAllocated" />가 0보다 작거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-163"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="ab820-164">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-164">-or-</span></span> 
<span data-ttu-id="ab820-165">32비트 컴퓨터에서 <paramref name="bytesAllocated" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-165">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="ab820-166">가비지 수집 우선 순위를 조작 하는 경우 관리 되지 않는 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-166">for the ability to call unmanaged code when manipulating garbage-collection priority.</span></span> <span data-ttu-id="ab820-167">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="ab820-167">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-168">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-168">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-169">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-169">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberSignature Language="F#" Value="static member CancelFullGCNotification : unit -&gt; unit" Usage="System.GC.CancelFullGCNotification " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-170">가비지 컬렉션 알림의 등록을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-170">Cancels the registration of a garbage collection notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-171">이 메서드를 사용 하 여 등록 된 가비지 수집 알림을 취소는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-171">This method cancels a garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="ab820-172">임계값에 대 한 후속 호출에서 매개 변수를 조정 하기 전에이 메서드를 호출할 필요가 없습니다를 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-172">You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-173">다음 예에서는 가비지 컬렉션 등록을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-173">The following example cancels a garbage collection registration.</span></span> <span data-ttu-id="ab820-174">이 예제는에 대해 제공 된 큰 예제의 일부 합니다 [가비지 컬렉션 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-174">This example is part of a larger example provided for the [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-175">동시 가비지 컬렉션이 사용되는 경우 이 멤버를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-175">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="ab820-176">동시 가비지 수집을 사용하지 않도록 설정하는 방법에 대한 자세한 내용은 [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 런타임 설정을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-176">See the [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-177">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-177">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-178">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-178">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-179">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-179">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-180">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-180">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-181">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-181">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab820-182">가비지 컬렉션을 수행하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-182">Forces garbage collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberSignature Language="F#" Value="static member Collect : unit -&gt; unit" Usage="System.GC.Collect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-183">모든 세대의 가비지 컬렉션을 즉시 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-183">Forces an immediate garbage collection of all generations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-184">이 메서드를 사용 하 여 액세스할 수 없는 모든 메모리를 회수할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-184">Use this method to try to reclaim all memory that is inaccessible.</span></span> <span data-ttu-id="ab820-185">모든 세대의 차단 가비지 수집을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-185">It performs a blocking garbage collection of all generations.</span></span>  
  
 <span data-ttu-id="ab820-186">메모리에 있었던 시간에 관계 없이 모든 개체를 컬렉션에 대 한 것으로 간주 됩니다. 그러나 관리 코드에서 참조 되는 개체는 수집 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-186">All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected.</span></span> <span data-ttu-id="ab820-187">이 메서드를 사용 하 여 최대 사용 가능한 메모리 양을 회수할 수 시스템 강제 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-187">Use this method to force the system to try to reclaim the maximum amount of available memory.</span></span>  
  
 <span data-ttu-id="ab820-188">부터 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]를 설정 하 여 대형 개체 힙 (LOH)을 압축할 수 있습니다 합니다 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 호출 하기 전에 <xref:System.GC.Collect%2A> 메서드를 다음 예제와 같이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-188">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], you can compact the large object heap (LOH) by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="ab820-189">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.Collect%2A> 메모리의 모든 세대에서 수집을 수행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-189">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on all generations of memory.</span></span> <span data-ttu-id="ab820-190">코드를 사용 하지 않는 개체의 수를 생성 하 고 호출 된 <xref:System.GC.Collect%2A> 메모리에서 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-190">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149"><span data-ttu-id="ab820-191">인덱싱된 컬렉션</span><span class="sxs-lookup"><span data-stu-id="ab820-191">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberSignature Language="F#" Value="static member Collect : int -&gt; unit" Usage="System.GC.Collect generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="ab820-192">가비지를 수집할 가장 오래된 세대의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-192">The number of the oldest generation to be garbage collected.</span></span></param>
        <summary><span data-ttu-id="ab820-193">0세대에서 지정된 세대까지 가비지 수집을 즉시 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-193">Forces an immediate garbage collection from generation 0 through a specified generation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-194">이 메서드를 사용 하 여 액세스할 수 없는 메모리를 회수 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-194">Use this method to try to reclaim memory that is inaccessible.</span></span> <span data-ttu-id="ab820-195">그러나이 메서드를 사용 하 여 반드시 아닙니다 지정된 된 세대에 액세스할 수 없는 모든 메모리가 회수 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-195">However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="ab820-196">가비지 수집기는 세대 번호를 사용 하 여 개체 수집 하지 않습니다 개체 에이징 구현 된 경우 지정된 된 세대 보다 높습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-196">If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation.</span></span> <span data-ttu-id="ab820-197">개체 에이징 구현 되지 않은 경우 가비지 수집기가 가비지 수집 중 모든 개체를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-197">If object aging is not implemented, the garbage collector considers all objects during the garbage collection.</span></span>  
  
 <span data-ttu-id="ab820-198">사용 된 <xref:System.GC.MaxGeneration%2A> 속성의 최대 유효 값을 확인 하는 `generation` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-198">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of the `generation` parameter.</span></span>  
  
 <span data-ttu-id="ab820-199">가비지 수집기는 세대에 관계 없이 모든 개체를 검토 하려면, 매개 변수를 사용 하는이 메서드의 버전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-199">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span> <span data-ttu-id="ab820-200">기반으로 하는 개체를 회수 하는 가비지 수집기는 <xref:System.GCCollectionMode> 설정을 사용 하 여를 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-200">To have the garbage collector reclaim objects based on a <xref:System.GCCollectionMode> setting, use the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-201">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.Collect%2A> 메모리의 각 계층에서 컬렉션을 수행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-201">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on individual layers of memory.</span></span> <span data-ttu-id="ab820-202">코드를 사용 하지 않는 개체의 수를 생성 하 고 호출 된 <xref:System.GC.Collect%2A> 메모리에서 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-202">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-203"><paramref name="generation" />가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-203"><paramref name="generation" /> is not valid.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149"><span data-ttu-id="ab820-204">인덱싱된 컬렉션</span><span class="sxs-lookup"><span data-stu-id="ab820-204">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode -&gt; unit" Usage="System.GC.Collect (generation, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="ab820-205">가비지를 수집할 가장 오래된 세대의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-205">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="ab820-206">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-206">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <summary><span data-ttu-id="ab820-207"><see cref="T:System.GCCollectionMode" /> 값에 지정된 시간에 0세대에서 지정된 세대까지 가비지 컬렉션을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-207">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-208">사용 된 `mode` 가비지 수집이 발생할 지 여부를 즉시 또는 시간 개체를 회수 하는 데 가장 적합 한 경우를 지정 하려면 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-208">Use the `mode` parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects.</span></span> <span data-ttu-id="ab820-209">이 메서드를 사용 하 여 지정된 된 세대에 액세스할 수 없는 모든 메모리가 회수 되는 것은 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-209">Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="ab820-210">응용 프로그램에서 중요 한 기간 동안 가비지 수집의 실행 시기를 조정 하려면 설정의 <xref:System.Runtime.GCSettings.LatencyMode%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-210">To adjust the intrusiveness of garbage collection during critical periods in your application, set the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span>  
  
 <span data-ttu-id="ab820-211">가비지 수집기에서 지정한 것 보다 더 높은 세대 번호를 가진 개체를 수집 하지 않습니다는 `generation` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-211">The garbage collector does not collect objects with a generation number higher than specified by the `generation` parameter.</span></span> <span data-ttu-id="ab820-212">사용 된 <xref:System.GC.MaxGeneration%2A> 속성의 최대 유효 값을 `generation`입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-212">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of `generation`.</span></span>  
  
 <span data-ttu-id="ab820-213">가비지 수집기는 세대에 관계 없이 모든 개체를 검토 하려면, 매개 변수를 사용 하는이 메서드의 버전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-213">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span>  
  
 <span data-ttu-id="ab820-214">개체의 지정된 된 세대까지 개체 회수를 사용 하 여 가비지 수집기가 하는 <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-214">To have the garbage collector reclaim objects up to a specified generation of objects, use the <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="ab820-215">최대 세대를 지정 하는 경우 개체를 모두 수집 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-215">When you specify the maximum generation, all objects are collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-216">다음 예제에서는 2 세대 개체에 대 한 가비지 수집을 강제로 실행 합니다 <xref:System.GCCollectionMode.Optimized> 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-216">The following example forces a garbage collection for generation 2 objects with the <xref:System.GCCollectionMode.Optimized> setting.</span></span>  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-217"><paramref name="generation" />가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-217"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="ab820-218">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-218">-or-</span></span> 
 <span data-ttu-id="ab820-219"><paramref name="mode" />가 <see cref="T:System.GCCollectionMode" /> 값 중 하나가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-219"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149"><span data-ttu-id="ab820-220">인덱싱된 컬렉션</span><span class="sxs-lookup"><span data-stu-id="ab820-220">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="ab820-221">가비지를 수집할 가장 오래된 세대의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-221">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="ab820-222">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-222">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="ab820-223">차단 가비지 수집을 수행하려면 <see langword="true" />이고, 가능한 경우 백그라운드 가비지 수집을 수행하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-223"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <summary><span data-ttu-id="ab820-224">수집이 차단되어야 할지 여부를 지정하는 값을 사용하여 <see cref="T:System.GCCollectionMode" /> 값으로 지정된 시간에 0세대에서 지정된 세대까지 가비지 수집을 강제로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-224">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-225">다음 표에서 요약의 상호 작용 합니다 `mode` 고 `blocking` 매개 변수:</span><span class="sxs-lookup"><span data-stu-id="ab820-225">The following table summarizes the interaction of the `mode` and `blocking` parameters:</span></span>  
  
|`mode`|<span data-ttu-id="ab820-226">`blocking`가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-226">`blocking` is `true`</span></span>|<span data-ttu-id="ab820-227">`blocking`가 `false`인 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-227">`blocking` is `false`</span></span>|  
|-|-|-|  
|<span data-ttu-id="ab820-228"><xref:System.GCCollectionMode.Forced> 또는 <xref:System.GCCollectionMode.Default></span><span class="sxs-lookup"><span data-stu-id="ab820-228"><xref:System.GCCollectionMode.Forced> or <xref:System.GCCollectionMode.Default></span></span>|<span data-ttu-id="ab820-229">차단 컬렉션은 가능한 한 빨리 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-229">A blocking collection is performed as soon as possible.</span></span> <span data-ttu-id="ab820-230">백그라운드 컬렉션이 진행 중인 경우와 `generation` 이 0 또는 1 인는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 메서드 즉시 차단 수집을 트리거하고 컬렉션이 완료 될 때 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-230">If a background collection is in progress and `generation` is 0 or 1, the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method immediately triggers a blocking collection and returns when the collection is finished.</span></span> <span data-ttu-id="ab820-231">백그라운드 컬렉션이 진행 중인 경우 및 `generation` 가 2 인 메서드는 백그라운드 컬렉션이 완료 되, 차단 2 세대 컬렉션을 트리거한 다음을 반환할 때까지 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-231">If a background collection is in progress and `generation` is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</span></span>|<span data-ttu-id="ab820-232">컬렉션은 가능한 한 빨리 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-232">A collection is performed as soon as possible.</span></span> <span data-ttu-id="ab820-233"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 메서드는 백그라운드 컬렉션을 요청하지만 이 작업이 항상 수행되지는 않으며 상황에 따라 차단 컬렉션이 계속 수행될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-233">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="ab820-234">백그라운드 컬렉션이 이미 진행 중인 경우 메서드가 즉시 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-234">If a background collection is already in progress, the method returns immediately.</span></span>|  
|<xref:System.GCCollectionMode.Optimized>|<span data-ttu-id="ab820-235">차단 컬렉션은 가비지 수집기의 상태와 `generation` 매개 변수에 따라 수행될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-235">A blocking collection may be performed, depending on the state of the garbage collector and the `generation` parameter.</span></span> <span data-ttu-id="ab820-236">가비지 수집기는 최적의 성능을 제공하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-236">The garbage collector tries to provide optimal performance.</span></span>|<span data-ttu-id="ab820-237">가비지 수집기의 상태에 따라 컬렉션이 수행될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-237">A collection may be performed, depending on the state of the garbage collector.</span></span> <span data-ttu-id="ab820-238"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 메서드는 백그라운드 컬렉션을 요청하지만 이 작업이 항상 수행되지는 않으며 상황에 따라 차단 컬렉션이 계속 수행될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-238">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="ab820-239">가비지 수집기는 최적의 성능을 제공하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-239">The garbage collector tries to provide optimal performance.</span></span> <span data-ttu-id="ab820-240">백그라운드 컬렉션이 이미 진행 중인 경우 메서드가 즉시 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-240">If a background collection is already in progress, the method returns immediately.</span></span>|  
  
 <span data-ttu-id="ab820-241">호출 하는 경우는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 전체 차단 가비지 수집을 수행 하는 메서드를 설정 하 여도 대형 개체 힙을 압축할 수 있습니다 합니다 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 호출 하기 전에 <xref:System.GC.Collect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-241">If a call to the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method performs a full blocking garbage collection, you can also compact the large object heap by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-242"><paramref name="generation" />가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-242"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="ab820-243">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-243">-or-</span></span> 
 <span data-ttu-id="ab820-244"><paramref name="mode" />가 <see cref="T:System.GCCollectionMode" /> 값 중 하나가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-244"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking, compacting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="compacting" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="ab820-245">가비지를 수집할 가장 오래된 세대의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-245">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="ab820-246">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-246">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="ab820-247">차단 가비지 수집을 수행하려면 <see langword="true" />이고, 가능한 경우 백그라운드 가비지 수집을 수행하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-247"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <param name="compacting"><span data-ttu-id="ab820-248">작은 개체 힙을 압축 하려면 <see langword="true" />, 비우기만 하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-248"><see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</span></span></param>
        <summary><span data-ttu-id="ab820-249">컬렉션이 차단되고 압축되어야 할지 여부를 지정하는 값을 사용하여 <see cref="T:System.GCCollectionMode" /> 값으로 지정된 시간에 0세대에서 지정된 세대까지 가비지 컬렉션을 강제로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-249">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-250">하는 경우 `blocking` 는 `false`, GC 배경 또는 차단 가비지 수집 수행 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-250">If `blocking` is `false`, the GC decides whether to perform a background or a blocking garbage collection.</span></span> <span data-ttu-id="ab820-251">하는 경우 `compacting` 는 `true`, 차단 가비지 수집을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-251">If `compacting` is `true`, it performs a blocking garbage collection.</span></span>  
  
 <span data-ttu-id="ab820-252">하는 경우 `compacting` 는 `true`, 런타임에서 작은 개체 힙 (SOH)을 압축 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-252">If `compacting` is `true`, the runtime compacts the small object heap (SOH).</span></span> <span data-ttu-id="ab820-253">하지 않는 한 대형 개체 힙 (LOH)는 압축 되지 않습니다 합니다 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성이 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-253">The large object heap (LOH) is not compacted unless the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ab820-254">모든 차단 가비지 컬렉션 되지 전체 차단 가비지 컬렉션에 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-254">Note that this includes all blocking garbage collections, not just full blocking garbage collections.</span></span>  
  
 <span data-ttu-id="ab820-255">호출할 수 있습니다는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 다음 코드 조각에서 볼 수 있듯이 관리 되는 힙 가능한 가장 작은 크기를 줄이는 방법.</span><span class="sxs-lookup"><span data-stu-id="ab820-255">You can call the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.</span></span>  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 <span data-ttu-id="ab820-256">지정 `true` 에 대 한는 `compacting` 인수 압축, 전체 차단 가비지 수집을 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-256">Specifying `true` for the `compacting` argument guarantees a compacting, full blocking garbage collection.</span></span> <span data-ttu-id="ab820-257">설정 된 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> LOH와 SOH 압축 되도록 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-257">Setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> ensures that both the LOH and SOH are compacted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberSignature Language="F#" Value="static member CollectionCount : int -&gt; int" Usage="System.GC.CollectionCount generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="ab820-258">가비지 컬렉션 횟수를 확인할 개체의 세대입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-258">The generation of objects for which the garbage collection count is to be determined.</span></span></param>
        <summary><span data-ttu-id="ab820-259">지정된 세대의 개체에 대해 가비지 수집이 수행된 횟수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-259">Returns the number of times garbage collection has occurred for the specified generation of objects.</span></span></summary>
        <returns><span data-ttu-id="ab820-260">프로세스가 시작된 이후 지정된 세대에 대해 가비지 수집이 수행된 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-260">The number of times garbage collection has occurred for the specified generation since the process was started.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-261">사용자 고유의 리소스 관리를 구현 하는 경우 호출 하 여 정기적으로 가비지 수집 강제 실행 해야 할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-261">If you implement your own resource management, you might need to force garbage collection periodically by calling the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="ab820-262">부담이 큰 작업 이기 때문에 가비지 수집을 최근에 발생 했을 때 호출을 건너뛰어 성능을 개선할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-262">Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently.</span></span> <span data-ttu-id="ab820-263">반환 된 값을 저장할 <xref:System.GC.CollectionCount%2A> 호출한 직후 <xref:System.GC.Collect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-263">Save the value returned by <xref:System.GC.CollectionCount%2A> immediately after calling <xref:System.GC.Collect%2A>.</span></span> <span data-ttu-id="ab820-264">다음에 호출 해야 <xref:System.GC.Collect%2A>를 반환 하는 현재 값을 비교 <xref:System.GC.CollectionCount%2A> 저장 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-264">The next time you need to call <xref:System.GC.Collect%2A>, compare the current value returned by <xref:System.GC.CollectionCount%2A> to the saved value.</span></span> <span data-ttu-id="ab820-265">두 값이 같으면 컬렉션이 없는 중간에 발생 하는 호출 <xref:System.GC.Collect%2A> 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-265">If the two values are equal, no collection has occurred in the interim and it is reasonable to call <xref:System.GC.Collect%2A> again.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-266"><paramref name="generation" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-266"><paramref name="generation" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberSignature Language="F#" Value="static member EndNoGCRegion : unit -&gt; unit" Usage="System.GC.EndNoGCRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-267">비 GC 지역 대기 시간 모드를 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-267">Ends the no GC region latency mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-268">합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드가 throw는 <xref:System.InvalidOperationException> 가비지 수집기가 비 GC 지역 대기 시간 모드에 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ab820-268">The <xref:System.GC.EndNoGCRegion%2A> method throws an <xref:System.InvalidOperationException> if the garbage collector is not in no GC region latency mode.</span></span> <span data-ttu-id="ab820-269">이 다음 조건 중 하나에서 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-269">This occurs under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="ab820-270"><xref:System.GC.TryStartNoGCRegion%2A> 메서드가 이전에 호출 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-270">The <xref:System.GC.TryStartNoGCRegion%2A> method was not called previously.</span></span>  
  
-   <span data-ttu-id="ab820-271">에 대 한 호출을 <xref:System.GC.TryStartNoGCRegion%2A> 반환 메서드 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-271">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method returned `false`.</span></span>  
  
-   <span data-ttu-id="ab820-272">에 대 한 호출을 <xref:System.GC.TryStartNoGCRegion%2A> 메서드에서 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-272">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method threw an exception.</span></span>  
  
 <span data-ttu-id="ab820-273">다음과 같은 코드를 사용 하 여 다음과 같은이 이유 중 하나에 대 한 예외를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-273">You can prevent an exception for any of these reasons by using code such as the following:</span></span>  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-274">가비지 수집기가 비 GC 지역 대기 시간 모드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-274">The garbage collector is not in no GC region latency mode.</span></span>  
  
<span data-ttu-id="ab820-275">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-275">-or-</span></span> 
<span data-ttu-id="ab820-276">가비지 수집이 발생하여 비 GC 지역 대기 시간 모드가 이전에 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-276">The no GC region latency mode was ended previously because a garbage collection was induced.</span></span>  
  
<span data-ttu-id="ab820-277">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-277">-or-</span></span> 
<span data-ttu-id="ab820-278">메모리 할당이 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 메서드 호출에서 지정된 크기를 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-278">A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</span></span></exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81"><span data-ttu-id="ab820-279">대기 모드</span><span class="sxs-lookup"><span data-stu-id="ab820-279">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberSignature Language="F#" Value="static member GetAllocatedBytesForCurrentThread : unit -&gt; int64" Usage="System.GC.GetAllocatedBytesForCurrentThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-280">수명 기간이 시작된 이후 현재 스레드에 할당된 바이트의 총 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-280">Gets the total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></summary>
        <returns><span data-ttu-id="ab820-281">수명 기간이 시작된 이후 현재 스레드에 할당된 바이트의 총 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-281">The total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ab820-282">`GetAllocatedBytesForCurrentThread` 메서드 전체 가비지 수집에서 남은 바이트 수가 아니라 스레드의 수명 동안 관리 되는 힙에 할당 된 바이트의 총 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-282">The `GetAllocatedBytesForCurrentThread` method returns the total number of bytes allocated on the managed heap during the lifetime of a thread, not the total number of bytes that have survived garbage collection.</span></span> <span data-ttu-id="ab820-283">또한 반환 된 값을 네이티브 할당 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-283">The returned value also does not include any native allocations.</span></span>

<span data-ttu-id="ab820-284">이 메서드는 메모리 할당 시간 간격이 나 이벤트 간의 차이 측정 하기 위한 시나리오를 모니터링 데 있어서 가장 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-284">This method is most useful in monitoring scenarios for measuring the difference in memory allocation between time intervals or events.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab820-285">개체의 현재 세대 번호를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-285">Returns the current generation number of an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : obj -&gt; int" Usage="System.GC.GetGeneration obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab820-286">세대 정보를 검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-286">The object that generation information is retrieved for.</span></span></param>
        <summary><span data-ttu-id="ab820-287">지정된 개체의 현재 세대 번호를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-287">Returns the current generation number of the specified object.</span></span></summary>
        <returns><span data-ttu-id="ab820-288"><paramref name="obj" />의 현재 세대 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-288">The current generation number of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-289">이 메서드를 사용 하 여 개체의 나가를 확인 하 고 해당 정보를 사용 하 여는 <xref:System.GC.Collect%2A> 메서드를 수집 하 여 가비지 수집기를 동일한 세대의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-289">Use this method to determine the age of an object, and then use that information with the <xref:System.GC.Collect%2A> method to force the garbage collector to collect objects in the same generation.</span></span> <span data-ttu-id="ab820-290">예를 들어, 동시에 사용할 수 없게 하는 그룹으로 만들어지는 개체 집합이 있는 경우이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-290">For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-291">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.GetGeneration%2A> 개체의 보존 기간을 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-291">The following example demonstrates how to use the <xref:System.GC.GetGeneration%2A> method to determine the age of an object.</span></span> <span data-ttu-id="ab820-292">이 예제에서는 메모리를 정리 하 고 사전 비교 콘솔에서 컬렉션을 메모리 합계 게시물에 가비지 수집을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-292">The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : WeakReference -&gt; int" Usage="System.GC.GetGeneration wo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="wo"><span data-ttu-id="ab820-293">세대 번호를 확인할 대상 개체를 참조하는 <see cref="T:System.WeakReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-293">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</span></span></param>
        <summary><span data-ttu-id="ab820-294">지정된 약한 참조의 대상의 현재 세대 번호를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-294">Returns the current generation number of the target of a specified weak reference.</span></span></summary>
        <returns><span data-ttu-id="ab820-295"><paramref name="wo" />의 대상의 현재 세대 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-295">The current generation number of the target of <paramref name="wo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ab820-296">다음 예제에서는 사용 된 <xref:System.GC.GetGeneration%2A> 약한 참조 개체의 보존 기간을 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-296">The following example demonstrates the use of the <xref:System.GC.GetGeneration%2A> method to determine the age of a weak reference object.</span></span>  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ab820-297">가비지 수집이 <paramref name="wo" />에서 이미 수행된 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-297">Garbage collection has already been performed on <paramref name="wo" />.</span></span></exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberSignature Language="F#" Value="static member GetTotalMemory : bool -&gt; int64" Usage="System.GC.GetTotalMemory forceFullCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection"><span data-ttu-id="ab820-298">이 메서드가 반환되기 전에 가비지 수집을 기다릴 수 있다는 것을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-298"><see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ab820-299">현재 할당되었다고 여겨지는 바이트 수를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-299">Retrieves the number of bytes currently thought to be allocated.</span></span> <span data-ttu-id="ab820-300">매개 변수는 시스템에서 가비지를 수집하고 개체를 종료할 수 있도록 이 메서드가 반환되기 전에 잠시 동안 대기할 수 있는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-300">A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</span></span></summary>
        <returns><span data-ttu-id="ab820-301">관리되는 메모리에 현재 할당된 가장 가까운 근사값의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-301">A number that is the best available approximation of the number of bytes currently allocated in managed memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-302">경우는 `forceFullCollection` 매개 변수는 `true`,이 메서드를 반환 하기 전에 잠시 시스템 가비지를 수집 하 고 개체를 종료 하는 동안 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-302">If the `forceFullCollection` parameter is `true`, this method waits a short interval before returning while the system collects garbage and finalizes objects.</span></span> <span data-ttu-id="ab820-303">간격 기간 완료 가비지 수집 주기의 수에 따라 결정 하는 내부적으로 지정 된 제한 및 주기 사이 복구 하는 메모리 양이 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-303">The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles.</span></span> <span data-ttu-id="ab820-304">가비지 수집기에서 액세스할 수 없는 메모리를 모두 수집 됨을 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-304">The garbage collector does not guarantee that all inaccessible memory is collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-305">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.GetTotalMemory%2A> 가져오고 관리 되는 메모리에 현재 할당 된 바이트 수를 표시 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-305">The following example demonstrates how to use the <xref:System.GC.GetTotalMemory%2A> method to get and display the number of bytes currently allocated in managed memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member KeepAlive : obj -&gt; unit" Usage="System.GC.KeepAlive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab820-306">참조할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-306">The object to reference.</span></span></param>
        <summary><span data-ttu-id="ab820-307">지정된 개체를 참조하여 현재 루틴이 시작된 지점에서 이 메서드가 호출된 지점까지 가비지 컬렉션이 불가능하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-307">References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-308">용도 <xref:System.GC.KeepAlive%2A> 메서드는 가비지 수집기에서 회수 중간의 위험에 노출 하는 개체에 대 한 참조가 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-308">The purpose of the <xref:System.GC.KeepAlive%2A> method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector.</span></span> <span data-ttu-id="ab820-309">이 발생할 수 있는 일반적인 시나리오는 관리 되는 코드 또는 데이터를 개체에 대 한 참조가 있지만 개체가 여전히 사용 중인 관리 되지 않는 Dll Win32 Api 같은 비관리 코드에서 또는 COM.를 사용 하 여 메서드</span><span class="sxs-lookup"><span data-stu-id="ab820-309">A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Win32 APIs, unmanaged DLLs, or methods using COM.</span></span>  
  
 <span data-ttu-id="ab820-310">이 메서드가 참조는 `obj` 매개 변수를 해당 개체까지 가비지 수집이 루틴의 시작 부분에서 실행 순서 대로 요소에이 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-310">This method references the `obj` parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called.</span></span> <span data-ttu-id="ab820-311">이 메서드 끝에 지침의 범위 시작이 아닌 코드 위치 `obj` 사용할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-311">Code this method at the end, not the beginning, of the range of instructions where `obj` must be available.</span></span>  
  
 <span data-ttu-id="ab820-312"><xref:System.GC.KeepAlive%2A> 메서드 없는 작업을 수행 하며 생성 매개 변수로 전달 된 개체의 수명을 확장 이외의 다른 부작용이 없어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-312">The <xref:System.GC.KeepAlive%2A> method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-313">다음 코드 예제에서는 맨 앞에 개체를 만듭니다 해당 `Main` 메서드 끝까지 다시 개체를 참조 하지 않습니다 경우는 <xref:System.GC.KeepAlive%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-313">The following code example creates an object at the beginning of its `Main` method and does not refer to the object again until the end, when the <xref:System.GC.KeepAlive%2A> method is called.</span></span> <span data-ttu-id="ab820-314">30 초 동안 지속 되 면 개체는 `Main` 메서드를 호출 해도 합니다 <xref:System.GC.Collect%2A> 및 <xref:System.GC.WaitForPendingFinalizers%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-314">The object persists for the 30-second duration of the `Main` method, despite calls to the <xref:System.GC.Collect%2A> and <xref:System.GC.WaitForPendingFinalizers%2A> methods.</span></span>  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxGeneration : int" Usage="System.GC.MaxGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab820-315">시스템에서 현재 지원하는 가장 큰 세대 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-315">Gets the maximum number of generations that the system currently supports.</span></span></summary>
        <value><span data-ttu-id="ab820-316">0에서 지원되는 가장 큰 세대 번호 사이의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-316">A value that ranges from zero to the maximum number of supported generations.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-317">개체의 보존 기간을 세대 번호는 구현 시 정의 된 상대 측정 하는 개체의 수명입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-317">The generation number, or age, of an object is an implementation-defined relative measure of an object's lifespan.</span></span> <span data-ttu-id="ab820-318">가장 최근에 생성된 된 개체는 세대 0에에서이 고 가장 오래 된 개체를 반환한 생성 보다 작거나 세대에는 <xref:System.GC.MaxGeneration%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-318">The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the <xref:System.GC.MaxGeneration%2A> property.</span></span>  
  
 <span data-ttu-id="ab820-319">가비지 수집기가 새 메모리 이전 메모리 보다 가비지 수집의 대상이 될 가능성이 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-319">The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory.</span></span> <span data-ttu-id="ab820-320">따라서 메모리를 회수 될 때마다 생성 번호를 조정 하 여 성능을 향상를 가비지 수집기 및 <xref:System.GC.MaxGeneration%2A> 속성 값은 시간이 지남에 따라 증가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-320">Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the <xref:System.GC.MaxGeneration%2A> property value can grow over time.</span></span>  
  
 <span data-ttu-id="ab820-321">개체 에이징 구현 된 경우는 <xref:System.GC.MaxGeneration%2A> 속성 시스템에서 사용 하는 가장 큰 세대 번호를 반환 합니다.이 속성에서 0을 반환 하는 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-321">If object aging is implemented, the <xref:System.GC.MaxGeneration%2A> property returns the maximum generation number used by the system; otherwise, this property returns zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-322">다음 예제에서는 현재 사용에서의 가장 큰 세대 번호를 표시 하려면 MaxGeneration 속성을 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-322">The following example demonstrates how to use the MaxGeneration property to display the largest generation number currently in use.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ab820-323">이 구현에 대 한 값으로 반환 된 <see cref="P:System.GC.MaxGeneration" /> 속성이 실행 중인 응용 프로그램의 수명 동안 일정 하 게 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-323">For this implementation, the value returned by the <see cref="P:System.GC.MaxGeneration" /> property is guaranteed to remain constant for the lifetime of an executing application.</span></span>  
  
<span data-ttu-id="ab820-324">사용 합니다 <see cref="P:System.GC.MaxGeneration" /> 를 호출할 때 지정할 수 있습니다 최대 값을 확인 하는 속성을 <see cref="M:System.GC.Collect(System.Int32)" /> 생성 매개 변수를 사용 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-324">Use the <see cref="P:System.GC.MaxGeneration" /> property to determine the maximum value you can specify when calling the <see cref="M:System.GC.Collect(System.Int32)" /> method that takes a generation parameter.</span></span></para></block>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="F#" Value="static member RegisterForFullGCNotification : int * int -&gt; unit" Usage="System.GC.RegisterForFullGCNotification (maxGenerationThreshold, largeObjectHeapThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold"><span data-ttu-id="ab820-325">2세대에 할당된 개체에 따라 알림을 발생시킬 시점을 지정하는 1에서 99 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-325">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</span></span></param>
        <param name="largeObjectHeapThreshold"><span data-ttu-id="ab820-326">대형 개체 힙에 할당된 개체에 따라 알림을 발생시킬 시점을 지정하는 1에서 99 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-326">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</span></span></param>
        <summary><span data-ttu-id="ab820-327">전체 가비지 수집에 유리한 조건인 경우와 수집이 완료된 경우에 가비지 수집 알림이 발생하도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-327">Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-328">각 세대에 대해 가비지 수집기는 해당 세대에 할당에 대 한 임계값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-328">For each generation, the garbage collector sets a threshold for allocations into that generation.</span></span> <span data-ttu-id="ab820-329">이 임계값을 초과 하는 할당의 크기를 해당 세대 가비지 수집이 트리거됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-329">When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation.</span></span> <span data-ttu-id="ab820-330">에 대 한 다음 가비지 수집 하려고 세대 2의 임계값은 20 MB (즉, 20MB 1 세대 컬렉션의 생존 하 고 세대 2로 승격 됩니다) 및 20MB 이상인 경우와 같이 되지 않고 유지 1 세대 및 2 세대에 라는 메시지가 표시 됩니다, 2 세대 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-330">For example, if generation 2's threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection.</span></span> <span data-ttu-id="ab820-331">마찬가지로, 대형 개체 힙 (LOH의)의 임계값은 20 MB 및 앱 20MB 이상인 대형 개체 할당, 다음 가비지 수집 (때문에 LOH gen2 가비지 수집에서 수집) 2 세대 컬렉션으로 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-331">Similarly, if the large object heap's (LOH's) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).</span></span>  
  
 <span data-ttu-id="ab820-332">합니다 `maxGenerationThreshold` 및 `largeObjectHeapThreshold` 임계값 얼마나 미리 알림이 표시 되는 전체 가비지 수집이 발생 하기 전에 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-332">The `maxGenerationThreshold` and `largeObjectHeapThreshold` thresholds control how much in advance you are notified before a full garbage collection occurs.</span></span> <span data-ttu-id="ab820-333">이 임계값이 높을수록 알림 및 다음 전체 가비지 컬렉션 간에 발생할 수 있는 자세한 할당입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-333">The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.</span></span>  
  
 <span data-ttu-id="ab820-334">런타임에서 전체 가비지 수집을 수행 하 고 사용 하 여 해당 컬렉션을 우회 하려고 할 때 알림을 받으려면 요청할 수 있는 공용 언어 런타임에서 전체 가비지 수집이 나쁜 영향을 응용 프로그램의 성능에 있는 경우 컬렉션을 직접 실행 (사용 하 여를 <xref:System.GC.Collect%2A> 메서드) 조건이 여전히 유리할 경우.</span><span class="sxs-lookup"><span data-stu-id="ab820-334">If you have situations in which a full garbage collection by the common language runtime would adversely affect your application's performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <xref:System.GC.Collect%2A> method) when conditions are still favorable.</span></span> <span data-ttu-id="ab820-335">가비지 수집 일정을 직접 변경 하는 것 외에도 전체 GC 알림은 다음 시나리오에서 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-335">In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:</span></span>  
  
-   <span data-ttu-id="ab820-336">전체 가비지 수집의 접근 방식에 대 한 모니터링 하 고 (예를 들어, 일부 캐시 항목 해제)으로 라이브 데이터 크기를 줄일 때 알림이 표시 되는 하나에 도달 하 고, 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-336">You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries).</span></span> <span data-ttu-id="ab820-337">결과적으로, 가비지 컬렉션이 발생 하는 경우 더 많은 메모리를 회수할 수 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-337">As a result, when the garbage collection occurs, it is able to reclaim more memory.</span></span>  
  
-   <span data-ttu-id="ab820-338">일부 통계를 수집할 수 있도록 전체 가비지 수집의 완료에 대 한 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-338">You monitor for the completion of a full garbage collection so that you can collect some statistics.</span></span>  <span data-ttu-id="ab820-339">예를 들어, 다음 라이브 데이터의 크기를 알 수 있도록 GC 완료 시 힙의 크기를 측정 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-339">For example, you might want to measure the size of the heap at GC completion so that you know the size of live data.</span></span> <span data-ttu-id="ab820-340">(전체 GC 후 힙의 경우 가장 작은 크기로)</span><span class="sxs-lookup"><span data-stu-id="ab820-340">(After a full GC, the heap is at its smallest size.)</span></span>  
  
 <span data-ttu-id="ab820-341">전체 가비지 수집을 의미 하는 방법에 대 한 자세한 내용은 참조 하세요. [가비지 컬렉션 알림](~/docs/standard/garbage-collection/notifications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-341">For more information about what represents a full garbage collection, see [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md).</span></span>  
  
 <span data-ttu-id="ab820-342">가비지 컬렉션 알림에 등록할 때 전체 가비지 수집에 근접 하 고 시간과 완료 될 때를 알림을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-342">When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed.</span></span> <span data-ttu-id="ab820-343">이 패턴은 메모리 부족 알림에 대 한 운영 체제 모니터링 하는 방법을 유사 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-343">This pattern resembles how the operating system monitors for low memory notifications.</span></span>  
  
 <span data-ttu-id="ab820-344">다음 지침을 사용 하 여 지정 하는 `maxGenerationThreshold` 및 `largeObjectHeapThreshold` 매개 변수:</span><span class="sxs-lookup"><span data-stu-id="ab820-344">Use the following guidelines for specifying the `maxGenerationThreshold` and `largeObjectHeapThreshold` parameters:</span></span>  
  
-   <span data-ttu-id="ab820-345">클수록 임계값 값을 자세한 할당 알림을 사이의 전체 가비지 수집이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-345">The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.</span></span>  
  
     <span data-ttu-id="ab820-346">더 큰 임계값 근접 컬렉션을 확인 하려면 런타임에 대 한 더 많은 기회를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-346">A larger threshold value provides more opportunities for the runtime to check for an approaching collection.</span></span> <span data-ttu-id="ab820-347">이 따라는 알림이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-347">This increases the likelihood that you will be notified.</span></span> <span data-ttu-id="ab820-348">그러나 런타임은 다음 수집을 실행 하기 전에 자세한 할당의 결과 때문에 임계값을 너무 높게 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-348">However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.</span></span>  
  
     <span data-ttu-id="ab820-349">직접 수집을 유도할 높은 임계값을 사용 하 여 알림을 시에 하는 경우 런타임의 다음 수집에서 회수 되는 것 보다 더 적은 개체 회수 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-349">When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime's next collection.</span></span>  
  
-   <span data-ttu-id="ab820-350">임계값 값이 작을수록, 전체 가비지 컬렉션 알림 사이의 할당 적습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-350">The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-351">다음 예에서는 가비지 수집 알림에 등록 하 고 가비지 수집 알림의 상태를 모니터링 하는 스레드를 시작 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-351">The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification.</span></span> <span data-ttu-id="ab820-352">이 코드 예제는에 대해 제공 된 큰 예제의 일부입니다 [가비지 컬렉션 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-352">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-353"><paramref name="maxGenerationThreshold" /> 또는 <paramref name="largeObjectHeapThreshold" />가 1과 99 사이에 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-353"><paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-354">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-354">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-355">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-355">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-356">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-356">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-357">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-357">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-358">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-358">Garbage Collection Notifications</span></span></related>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-359">동시 가비지 컬렉션이 사용되는 경우 이 멤버를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-359">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="ab820-360">동시 가비지 수집을 사용하지 않도록 설정하는 방법에 대한 자세한 내용은 &lt;gcConcurrent&gt; 런타임 설정을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-360">See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member RemoveMemoryPressure : int64 -&gt; unit" Usage="System.GC.RemoveMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="ab820-361">해제된 관리되지 않는 메모리의 양입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-361">The amount of unmanaged memory that has been released.</span></span></param>
        <summary><span data-ttu-id="ab820-362">관리되는 메모리가 해제되었고 가비지 수집을 예약할 때 더 이상 고려할 필요가 없다고 런타임에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-362">Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-363">가비지 컬렉션을 예약할 시기를 결정 하는 데, 런타임 고려 관리 되는 메모리 양을 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-363">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="ab820-364">작은 관리 되는 개체는 많은 양의 관리 되지 않는 메모리를 할당 하면 런타임은 관리 되는 메모리를 고려 하며 따라서 가비지 컬렉션을 예약할의 시급성</span><span class="sxs-lookup"><span data-stu-id="ab820-364">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="ab820-365">합니다 <xref:System.GC.AddMemoryPressure%2A> 메서드는 시스템 메모리의 추가 사용을 런타임에 알립니다 및 <xref:System.GC.RemoveMemoryPressure%2A> 메서드는 추가 사용이 해제 되었음을 런타임에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-365">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory, and the <xref:System.GC.RemoveMemoryPressure%2A> method informs the runtime that the additional pressure has been released.</span></span>  
  
 <span data-ttu-id="ab820-366">가장 간단한 사용 패턴에 관리 되는 개체 생성자에 관리 되지 않는 메모리를 할당 및 해제 하는 `Dispose` 또는 `Finalize` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-366">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="ab820-367">호출을 <xref:System.GC.AddMemoryPressure%2A> 메서드는 관리 되지 않는 메모리를 할당 한 후 호출을 <xref:System.GC.RemoveMemoryPressure%2A> 해제 한 후 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-367">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="ab820-368">호출할 수 있는 관리 되지 않는 메모리 할당을 크게 변경 되는 관리 되는 개체의 수명 동안, 더 복잡 한 시나리오에서의 <xref:System.GC.AddMemoryPressure%2A> 및 <xref:System.GC.RemoveMemoryPressure%2A> 런타임에 이러한 증분 변경 내용을 통신 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-368">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ab820-369">정확 하 게 추가한 압력의 크기를 제거 하는 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-369">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="ab820-370">그렇게 하지 않으면 오랜 시간 동안 실행 되는 응용 프로그램에서 시스템의 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-370">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-371"><paramref name="bytesAllocated" />가 0보다 작거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-371"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="ab820-372">또는</span><span class="sxs-lookup"><span data-stu-id="ab820-372">-or-</span></span> 
<span data-ttu-id="ab820-373">32비트 컴퓨터에서 <paramref name="bytesAllocated" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="ab820-373">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="ab820-374">가비지 수집 우선 순위를 조작 하는 경우 관리 되지 않는 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-374">for the ability to call unmanaged code when manipulating garbage-collection priority.</span></span> <span data-ttu-id="ab820-375">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="ab820-375">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-376">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-376">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-377">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-377">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member ReRegisterForFinalize : obj -&gt; unit" Usage="System.GC.ReRegisterForFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab820-378">종료자가 호출되어야 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-378">The object that a finalizer must be called for.</span></span></param>
        <summary><span data-ttu-id="ab820-379"><see cref="M:System.GC.SuppressFinalize(System.Object)" />가 이전에 호출된 지정된 개체에 대해 시스템에서 종료자를 호출하도록 요청합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-379">Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-380">합니다 <xref:System.GC.ReRegisterForFinalize%2A> 메서드를 추가 합니다 `obj` 가비지 수집기에서 개체를 해제 하기 전에 종료를 요청 하는 개체의 목록에 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-380">The <xref:System.GC.ReRegisterForFinalize%2A> method adds the `obj` parameter to the list of objects that request finalization before the garbage collector frees the object.</span></span> <span data-ttu-id="ab820-381">`obj` 매개 변수는이 메서드의 호출자에 게 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-381">The `obj` parameter must be the caller of this method.</span></span>  
  
 <span data-ttu-id="ab820-382">호출 된 <xref:System.GC.ReRegisterForFinalize%2A> 메서드는 가비지 수집기는 개체의 종료자를 호출 하도록 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-382">Calling the <xref:System.GC.ReRegisterForFinalize%2A> method does not guarantee that the garbage collector will call an object's finalizer.</span></span>  
  
 <span data-ttu-id="ab820-383">기본적으로 종료자를 구현 하는 모든 개체 일을 해야 하는 개체의 목록에 추가 그러나 이미 종료 되었을 수 있습니다 또는 수 사용 하지 않도록 설정한 종료를 호출 하 여 개체를 <xref:System.GC.SuppressFinalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-383">By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="ab820-384">종료 자가이 메서드를 사용 자체 또는 참조 하는 개체를 재 활성화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-384">A finalizer can use this method to resurrect itself or an object that it references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-385">다음 예제에서는 표준 메서드를 사용 하 여 개체를 두 번째로 완료 하는 방법에 설명 가비지 컬렉션 후 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-385">The following example demonstrates how to use the ReRegisterForFinalize method to finalize an object a second time after garbage collection.</span></span>  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ab820-386"><paramref name="obj" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-386"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member SuppressFinalize : obj -&gt; unit" Usage="System.GC.SuppressFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab820-387">종료자가 실행되지 않아야 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-387">The object whose finalizer must not be executed.</span></span></param>
        <summary><span data-ttu-id="ab820-388">공용 언어 런타임에서 지정된 개체에 대해 종료자를 호출하지 않도록 요청합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-388">Requests that the common language runtime not call the finalizer for the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-389">이 메서드는 개체의 헤더에 약간 설정 `obj`, 종료자를 호출 하는 경우 런타임에 확인 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-389">This method sets a bit in the object header of `obj`, which the runtime checks when calling finalizers.</span></span> <span data-ttu-id="ab820-390">으로 표현 되는 종료자를 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드, 개체는 가비지 수집 되기 전에 관리 되지 않는 리소스를 해제를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-390">A finalizer, which is represented by the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, is used to release unmanaged resources before an object is garbage-collected.</span></span> <span data-ttu-id="ab820-391">하는 경우 `obj` 종료자를 호출 되지 않은 <xref:System.GC.SuppressFinalize%2A> 메서드는 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-391">If `obj` does not have a finalizer, the call to the <xref:System.GC.SuppressFinalize%2A> method has no effect.</span></span>  
  
 <span data-ttu-id="ab820-392">구현 하는 개체를 <xref:System.IDisposable> 인터페이스 개체에서이 메서드를 호출할 수 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 호출에서 가비지 수집기를 방지 하기 위해 구현 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 필요가 없는 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-392">Objects that implement the <xref:System.IDisposable> interface can call this method from the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to prevent the garbage collector from calling <xref:System.Object.Finalize%2A?displayProperty=nameWithType> on an object that does not require it.</span></span> <span data-ttu-id="ab820-393">종료자에서 이미 해제 된 관리 되지 않는 리소스를 해제 하지 않도록 하려면이 작업을 수행 하는 일반적으로 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-393">Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-394">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.SuppressFinalize%2A> 호출 되 고 중복 가비지 수집을 방지 하기 위해 리소스 클래스에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-394">The following example demonstrates how to use the <xref:System.GC.SuppressFinalize%2A> method in a resource class to prevent a redundant garbage collection from being called.</span></span> <span data-ttu-id="ab820-395">예제에서는 [dispose 패턴](~/docs/standard/garbage-collection/implementing-dispose.md) 모두 관리 되는 리소스를 해제 (즉, 구현 하는 개체가 <xref:System.IDisposable>) 관리 되지 않는 리소스 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-395">The example uses the [dispose pattern](~/docs/standard/garbage-collection/implementing-dispose .md) to free both managed resources (that is, objects that implement <xref:System.IDisposable>) and unmanaged resources.</span></span>  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ab820-396"><paramref name="obj" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-396"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
        <related type="Article" href="https://msdn.microsoft.com/library/31a6c13b-d6a2-492b-9a9f-e5238c983bcb"><span data-ttu-id="ab820-397">삭제 패턴</span><span class="sxs-lookup"><span data-stu-id="ab820-397">Dispose Pattern</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab820-398">중요한 경로를 실행하는 동안에는 가비지 수집이 허용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-398">Attempts to disallow garbage collection during the execution of a critical path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="ab820-399">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-399">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-400">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-400">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion totalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="ab820-401">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-401">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="ab820-402">임시 세그먼트 크기보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-402">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="ab820-403">임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-403">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <summary><span data-ttu-id="ab820-404">지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안에는 가비지 수집이 허용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-404">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</span></span></summary>
        <returns><span data-ttu-id="ab820-405">런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-405"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-406"><xref:System.GC.TryStartNoGCRegion%28System.Int64%29> 메서드는 앱 코드의 중요 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에서 가비지 수집기를 배치 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-406">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="ab820-407">런타임에서 처음으로 요청 된 메모리 양을 할당할 수 없는 경우 가비지 수집기는 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-407">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="ab820-408">필요한 실제로 2에이 경우에 메모리 양을 할당할 수 있으면 가비지 수집기가 비 GC 지역 대기 시간 모드 \* `totalSize` 바이트 (할당 하려고 `totalSize` 작은 개체 힙 바이트 및 `totalSize` 바이트 큰 개체 힙)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-408">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` bytes (it attempts to allocate `totalSize` bytes for the small object heap and `totalSize` bytes for the large object heap).</span></span>  
  
 <span data-ttu-id="ab820-409">`totalSize` 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-409">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="ab820-410">앱의 대신 런타임에 할당 뿐만 아니라 앱에 할당이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-410">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ab820-411">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-411">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-412">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-412">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="ab820-413">호출 하 여 비 GC 지역 대기 시간 모드를 종료 합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-413">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-414"><paramref name="totalSize" />가 임시 세그먼트 크기를 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-414"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-415">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-415">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2"><span data-ttu-id="ab820-416">가비지 컬렉션 기본 사항</span><span class="sxs-lookup"><span data-stu-id="ab820-416">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81"><span data-ttu-id="ab820-417">대기 모드</span><span class="sxs-lookup"><span data-stu-id="ab820-417">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="ab820-418">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-418">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="ab820-419">임시 세그먼트 크기보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-419">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="ab820-420">임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-420">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="ab820-421">가비지 수집기가 처음에 <see langword="true" /> 바이트를 할당할 수 없는 경우 전체 차단 가비지 수집을 생략하려면 <paramref name="totalSize" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-421"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <paramref name="totalSize" /> bytes; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ab820-422">지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안 가비지 수집이 허용되지 않고, 초기에 사용할 수 있는 메모리가 충분하지 않은 경우 가비지 수집기가 전체 차단 가비지 수집 수행 여부를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-422">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="ab820-423">런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-423"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-424"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> 메서드는 앱 코드의 중요 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에서 가비지 수집기를 배치 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-424">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="ab820-425">런타임에서 처음으로 요청 된 메모리 양을 할당할 수 없는 경우와 `disallowFullBlockingGC` 인수가 `false`, 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 하는 가비지 수집기가 고, 그렇지 할당 실패 하 고 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-425">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="ab820-426">필요한 실제로 2에이 경우에 메모리 양을 할당할 수 있으면 가비지 수집기가 비 GC 지역 대기 시간 모드 \* `totalSize` (할당 하려고 `totalSize` 작은 개체 힙 및 `totalSize` 큰 개체에 대 한 힙)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-426">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` (it attempts to allocate `totalSize` for the small object heap and `totalSize` for the large object heap).</span></span>  
  
 <span data-ttu-id="ab820-427">`totalSize` 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-427">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="ab820-428">앱의 대신 런타임에 할당 뿐만 아니라 앱에 할당이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-428">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="ab820-429">설정 `disallowFullBlockingGC` 에 `true` 전체 차단 가비지를 방지 하기 위해 처음에 사용 가능한 메모리가 부족 한 경우 컬렉션은 부하 분산 시나리오에서에서 가장 유용 합니다: 하나 시스템이이 메서드를 호출 하 고 자체를 반환 하는 경우 요청을 수락 하도록 준비 된 상태로 보고서 수 `true`를 반환 하는 경우 다른 시스템에 요청을 리디렉션하도록 부하 분산 장치가 및 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-429">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="ab820-430">호출 하 여 요청을 처리 하지 않는 경우 전체 차단 가비지 수집을 수행한 다음 수는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-430">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ab820-431">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-431">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-432">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-432">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="ab820-433">호출 하 여 비 GC 지역 대기 시간 모드를 종료 합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-433">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-434"><paramref name="totalSize" />가 임시 세그먼트 크기를 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-434"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-435">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-435">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2"><span data-ttu-id="ab820-436">가비지 컬렉션 기본 사항</span><span class="sxs-lookup"><span data-stu-id="ab820-436">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81"><span data-ttu-id="ab820-437">대기 모드</span><span class="sxs-lookup"><span data-stu-id="ab820-437">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="ab820-438">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-438">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="ab820-439"><paramref name="totalSize" /> -<paramref name="lohSize" />는 임시 세그먼트 크기보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-439"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="ab820-440">임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-440">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="ab820-441">큰 개체 힙(LOH) 할당용으로 사용하는 <paramref name="totalSize" />의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-441">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <summary><span data-ttu-id="ab820-442">큰 개체 힙 및 작은 개체 힙에 지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안에는 가비지 수집이 허용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-442">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</span></span></summary>
        <returns><span data-ttu-id="ab820-443">런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-443"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-444"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> 메서드는 앱 코드의 중요 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에서 가비지 수집기를 배치 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-444">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="ab820-445">런타임에서 처음으로 요청 된 메모리 양을 할당할 수 없는 경우 가비지 수집기는 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-445">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="ab820-446">할당할 수 있으면 가비지 수집기가 비 GC 지역 대기 시간 모드를 입력 `lohSize` loh와 `totalSize`  -  `lohSize` 작은 개체 힙 (SOH)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-446">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="ab820-447">`lohSize` loh에 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 하 고 `totalSize`  -  `lohSize` soh의 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-447">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="ab820-448">앱의 대신 런타임에 할당 뿐만 아니라 앱에 할당이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-448">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ab820-449">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-449">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-450">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-450">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="ab820-451">호출 하 여 비 GC 지역 대기 시간 모드를 종료 합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-451">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-452"><paramref name="totalSize" /> - <paramref name="lohSize" />는 임시 세그먼트 크기를 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-452"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-453">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-453">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2"><span data-ttu-id="ab820-454">가비지 컬렉션 기본 사항</span><span class="sxs-lookup"><span data-stu-id="ab820-454">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81"><span data-ttu-id="ab820-455">대기 모드</span><span class="sxs-lookup"><span data-stu-id="ab820-455">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="ab820-456">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-456">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="ab820-457"><paramref name="totalSize" /> -<paramref name="lohSize" />는 임시 세그먼트 크기보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-457"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="ab820-458">임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ab820-458">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="ab820-459">큰 개체 힙(LOH) 할당용으로 사용하는 <paramref name="totalSize" />의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-459">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="ab820-460">가비지 수집기가 처음에 작은 개체 힙(SOH) 및 LOH에서 지정된 메모리를 할당할 수 없는 경우 전체 차단 가비지 수집을 생략하려면 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-460"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ab820-461">큰 개체 힙 및 작은 개체 힙에 지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안 가비지 수집이 허용되지 않고, 초기에 사용할 수 있는 메모리가 충분하지 않은 경우 가비지 수집기가 전체 차단 가비지 수집 수행 여부를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-461">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="ab820-462">런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-462"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-463"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> 메서드는 앱 코드의 중요 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에서 가비지 수집기를 배치 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-463">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="ab820-464">런타임에서 처음으로 요청 된 메모리 양을 할당할 수 없는 경우와 `disallowFullBlockingGC` 인수가 `false`, 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 하는 가비지 수집기가 고, 그렇지 할당 실패 하 고 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-464">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="ab820-465">할당할 수 있으면 가비지 수집기가 비 GC 지역 대기 시간 모드를 입력 `lohSize` loh와 `totalSize`  -  `lohSize` 작은 개체 힙 (SOH)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-465">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="ab820-466">`lohSize` loh에 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 하 고 `totalSize`  -  `lohSize` soh의 중요 경로에서 발생 하는 모든 메모리 할당을 처리 하기에 충분 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-466">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="ab820-467">앱의 대신 런타임에 할당 뿐만 아니라 앱에 할당이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-467">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="ab820-468">설정 `disallowFullBlockingGC` 에 `true` 전체 차단 가비지를 방지 하기 위해 처음에 사용 가능한 메모리가 부족 한 경우 컬렉션은 부하 분산 시나리오에서에서 가장 유용 합니다: 하나 시스템이이 메서드를 호출 하 고 자체를 반환 하는 경우 요청을 수락 하도록 준비 된 상태로 보고서 수 `true`를 반환 하는 경우 다른 시스템에 요청을 리디렉션하도록 부하 분산 장치가 및 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-468">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="ab820-469">호출 하 여 요청을 처리 하지 않는 경우 전체 차단 가비지 수집을 수행한 다음 수는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-469">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ab820-470">에 대 한 호출을 중첩할 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 런타임에서 비 GC 지역 대기 시간 모드에서 현재 경우 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-470">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="ab820-471">즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출 되어야 하 고 <xref:System.GC.EndNoGCRegion%2A> 첫 번째 호출 해 서 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-471">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="ab820-472">호출 하 여 비 GC 지역 대기 시간 모드를 종료 합니다 <xref:System.GC.EndNoGCRegion%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-472">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-473"><paramref name="totalSize" /> - <paramref name="lohSize" />는 임시 세그먼트 크기를 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-473"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-474">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-474">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2"><span data-ttu-id="ab820-475">가비지 컬렉션 기본 사항</span><span class="sxs-lookup"><span data-stu-id="ab820-475">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81"><span data-ttu-id="ab820-476">대기 모드</span><span class="sxs-lookup"><span data-stu-id="ab820-476">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab820-477">공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-477">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-478">공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-478">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="ab820-479">등록된 가비지 수집 알림의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-479">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-480">사용 합니다 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-480">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="ab820-481">사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 수집이 완료 되었는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-481">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="ab820-482">열거형 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>에 할당 되 고 사용 하 여 직접 컬렉션을 유도에서 추가 개체를 방지 하는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-482">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="ab820-483">Note 알림은 전체 가비지 컬렉션이 발생할 수 있는만 조건에 도달 하는 전체 가비지 수집을 편리 하 게 구성 된 임계값을 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-483">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="ab820-484">이 메서드를 가져올 가비지 수집 알림에 대 한 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-484">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="ab820-485">사용 하 여 알림을 가져올 수 없는 경우 반환할 메서드에 대 한 제한 시간 지정 하려는 경우는 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-485">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="ab820-486">제한 시간을 지정 하지 않고이 메서드를 호출 하는 경우 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드 기본 설정 보다 오래 대기 중인 경우.</span><span class="sxs-lookup"><span data-stu-id="ab820-486">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="ab820-487">이 메서드를 호출 하 여 따라야 하는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 수집이 완료 되었는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-487">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="ab820-488">이 메서드 호출만 하면 불확실 한 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-488">Calling this method alone causes indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-489">다음 예제에서는 전체 차단 가비지 수집이 임박 하는지 여부를 확인 하려면이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-489">The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching.</span></span> <span data-ttu-id="ab820-490">알림의 상태 될 때마다 <xref:System.GCNotificationStatus.Succeeded>, 사용자 지정 메서드 `OnFullGCApproachNotify` 근접 컬렉션에 대 한 응답으로 작업을 수행 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-490">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCApproachNotify` is called to perform actions in response to the approaching collection.</span></span> <span data-ttu-id="ab820-491">이 코드 예제는에 대해 제공 된 큰 예제의 일부입니다 [가비지 컬렉션 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-491">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-492">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-492">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-493">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-493">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-494">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-494">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-495">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-495">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-496">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-496">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="ab820-497">알림 상태를 가져올 때까지 기다릴 시간의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-497">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="ab820-498">무한정 기다리려면 -1을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-498">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ab820-499">공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 지정된 제한 시간 내에 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-499">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="ab820-500">등록된 가비지 수집 알림의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-500">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-501">사용 합니다 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-501">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="ab820-502">사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 수집이 완료 되었는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-502">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="ab820-503">이 메서드가 반환 될 때마다 가비지 컬렉션 알림 상태를 받으면 지정 된 값에 관계 없이 즉시는 `millisecondsTimeout`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-503">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="ab820-504">가비지 컬렉션 알림 상태 전에 획득 되지 않으면 `millisecondsTimeout` 시간,이 메서드는 반환 <xref:System.GCNotificationStatus.NotApplicable>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-504">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="ab820-505">열거형 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>에 할당 되 고 사용 하 여 직접 컬렉션을 유도에서 추가 개체를 방지 하는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-505">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="ab820-506">Note 알림은 전체 가비지 컬렉션이 발생할 수 있는만 조건에 도달 하는 전체 가비지 수집을 편리 하 게 구성 된 임계값을 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-506">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="ab820-507">호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드는 시간 제한 기간이 경과할 때까지 기다리는 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-507">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="ab820-508">이 메서드를 호출 하 여 따라야 하는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 수집이 완료 되었는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-508">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="ab820-509">이 메서드 호출만 하면 불확실 한 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-509">Calling this method alone causes indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ab820-510"><paramref name="millisecondsTimeout" />은 음수가 아니거나 <see cref="F:System.Int32.MaxValue" /> 또는 -1보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-510"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-511">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-511">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-512">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-512">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-513">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-513">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-514">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-514">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-515">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-515">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab820-516">공용 언어 런타임에 의한 전체 차단 가비지 수집이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-516">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-517">공용 언어 런타임에 의한 전체 차단 가비지 수집이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-517">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="ab820-518">등록된 가비지 수집 알림의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-518">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-519">사용 합니다 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-519">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="ab820-520">사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCApproach%2A> 전체 가비지 수집이 임박 하는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-520">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="ab820-521">열거형의 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>, 작업을 다시 시작 하 고 사용 하 여 수집 횟수를 가져오는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.CollectionCount%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-521">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="ab820-522">이 메서드를 가져올 가비지 수집 알림에 대 한 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-522">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="ab820-523">사용 하 여 알림을 가져올 수 없는 경우 반환할 메서드에 대 한 제한 시간 지정 하려는 경우는 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-523">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="ab820-524">제한 시간을 지정 하지 않고이 메서드를 호출 하는 경우 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드 기본 설정 보다 오래 대기 중인 경우.</span><span class="sxs-lookup"><span data-stu-id="ab820-524">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="ab820-525">이 메서드 호출에 대 한 호출을 사용 하 여 앞에 있어야 합니다 <xref:System.GC.WaitForFullGCApproach%2A> 전체 가비지 수집이 완료 되었는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-525">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="ab820-526">이 메서드만 호출 불확실 한 결과 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-526">Calling this method alone can produce indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-527">다음 예제에서는 전체 가비지 수집이 완료 되었는지 여부를 확인 하려면이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-527">The following example shows how to use this method to determine whether a full garbage collection has completed.</span></span> <span data-ttu-id="ab820-528">알림의 상태 될 때마다 <xref:System.GCNotificationStatus.Succeeded>, 사용자 지정 메서드 `OnFullGCCompletedNotify` 완료 된 컬렉션에 대 한 응답으로 작업을 수행 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-528">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCCompletedNotify` is called to perform actions in response to the completed collection.</span></span> <span data-ttu-id="ab820-529">이 코드 예제는에 대해 제공 된 큰 예제의 일부입니다 [가비지 컬렉션 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-529">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-530">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-530">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-531">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-531">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-532">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-532">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-533">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-533">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-534">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-534">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="ab820-535">알림 상태를 가져올 때까지 기다릴 시간의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-535">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="ab820-536">무한정 기다리려면 -1을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-536">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ab820-537">공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 지정된 제한 시간 내에 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-537">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="ab820-538">등록된 가비지 수집 알림의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-538">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-539">사용 합니다 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab820-539">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="ab820-540">사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCApproach%2A> 전체 가비지 수집이 임박 하는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-540">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="ab820-541">이 메서드가 반환 될 때마다 가비지 컬렉션 알림 상태를 받으면 지정 된 값에 관계 없이 즉시는 `millisecondsTimeout`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-541">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="ab820-542">가비지 컬렉션 알림 상태 전에 획득 되지 않으면 `millisecondsTimeout` 시간,이 메서드는 반환 <xref:System.GCNotificationStatus.NotApplicable>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-542">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="ab820-543">열거형의 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>, 작업을 다시 시작 하 고 사용 하 여 수집 횟수를 가져오는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.CollectionCount%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-543">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="ab820-544">호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드는 시간 제한 기간이 경과할 때까지 기다리는 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-544">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="ab820-545">이 메서드 호출에 대 한 호출을 사용 하 여 앞에 있어야 합니다 <xref:System.GC.WaitForFullGCApproach%2A> 전체 가비지 수집이 완료 되었는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-545">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="ab820-546">이 메서드만 호출 불확실 한 결과 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-546">Calling this method alone can produce indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab820-547"><paramref name="millisecondsTimeout" />은 음수가 아니거나 <see cref="F:System.Int32.MaxValue" /> 또는 -1보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-547"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="ab820-548">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-548">for full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-549">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-549">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ab820-550">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-550">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ab820-551">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-551">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89"><span data-ttu-id="ab820-552">가비지 컬렉션 알림</span><span class="sxs-lookup"><span data-stu-id="ab820-552">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberSignature Language="F#" Value="static member WaitForPendingFinalizers : unit -&gt; unit" Usage="System.GC.WaitForPendingFinalizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab820-553">종료자의 큐를 처리하는 스레드에서 해당 큐를 비울 때까지 현재 스레드를 일시 중단합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-553">Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab820-554">가비지 수집기가 회수 될 수 있는 개체를 찾으면 각 개체는 개체의 종료 요구 사항을 확인 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-554">When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object's finalization requirements.</span></span> <span data-ttu-id="ab820-555">개체 종료자를 구현 및 호출 하 여 종료를 비활성화 되지 않은 경우 <xref:System.GC.SuppressFinalize%2A>, 개체는 종료 준비가 된 것으로 표시 된 개체의 목록에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-555">If an object implements a finalizer and has not disabled finalization by calling <xref:System.GC.SuppressFinalize%2A>, the object is placed in a list of objects that are marked as ready for finalization.</span></span> <span data-ttu-id="ab820-556">가비지 수집기가 호출 된 <xref:System.Object.Finalize%2A> 이 목록에 목록에서 항목을 제거 하는 개체의 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-556">The garbage collector calls the <xref:System.Object.Finalize%2A> methods for the objects in this list and removes the entries from the list.</span></span> <span data-ttu-id="ab820-557">이 메서드 블록 일까 지 모든 종료자는 완료 될 때까지 실행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-557">This method blocks until all finalizers have run to completion.</span></span>  
  
 <span data-ttu-id="ab820-558">이 메서드가 종료 보장 하지 않으므로 종료 자가 실행 되는 스레드 지정 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-558">The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate.</span></span> <span data-ttu-id="ab820-559">이 스레드가 하는 동안 다른 스레드에 의해 중단 될 수 있지만 <xref:System.GC.WaitForPendingFinalizers%2A> 메서드 진행에서 중입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-559">However, this thread can be interrupted by another thread while the <xref:System.GC.WaitForPendingFinalizers%2A> method is in progress.</span></span> <span data-ttu-id="ab820-560">예를 들어, 특정 기간 동안 대기 하 고이 스레드는 계속 일시 중단 하는 경우 다음이 스레드를 중단 하는 다른 스레드를 시작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-560">For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab820-561">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.GC.WaitForPendingFinalizers%2A> 수집 된 모든 개체의 종료가 완료 될 때까지 현재 스레드를 일시 중단 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ab820-561">The following example demonstrates how to use the <xref:System.GC.WaitForPendingFinalizers%2A> method to suspend the current thread until finalization of all the collected objects is complete.</span></span>  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>