<Type Name="Stack&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.Stack&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e494b1460f1655643f65f0a045c173056a1611bf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58749448" /></Metadata><TypeSignature Language="C#" Value="public struct Stack&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit Stack`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Stack(Of T).Enumerator&#xA;Implements IEnumerator(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: value class Stack&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt;.Enumerator = struct&#xA;    interface IEnumerator&lt;'T&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d299f-101"><see cref="T:System.Collections.Generic.Stack`1" />의 요소를 열거합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d299f-102">합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual Basic에서) 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="d299f-103">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="d299f-104">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-104">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="d299f-105">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-105">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="d299f-106">이 위치에서 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-106">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="d299f-107">따라서 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-107">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="d299f-108"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-108"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="d299f-109"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-109"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="d299f-110">경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-110">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="d299f-111">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-111">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="d299f-112">마지막으로 호출 하는 경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-112">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="d299f-113"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-113">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="d299f-114">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-114">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d299f-115">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-115">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="d299f-116">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-116">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="d299f-117">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-117">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="d299f-118">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-118">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="d299f-119">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-119">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d299f-120">열거자의 현재 위치에 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-120">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="d299f-121"><see cref="T:System.Collections.Generic.Stack`1" />에서 열거자의 현재 위치에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-121">The element in the <see cref="T:System.Collections.Generic.Stack`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d299f-122"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-122"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined under any of the following conditions:</span></span>  
  
- <span data-ttu-id="d299f-123">열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-123">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="d299f-124">열거자를 만든 후 또는 한 후 이런는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-124">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="d299f-125">합니다 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 합니다 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-125">The <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property.</span></span>  
  
- <span data-ttu-id="d299f-126">마지막으로 호출한 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`하 고 컬렉션의 끝을 나타내는 있으며 열거자는 컬렉션의 마지막 요소 뒤에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-126">The last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

- <span data-ttu-id="d299f-127">요소의 추가, 수정 또는 삭제 하는 등 컬렉션에서 변경 되어 열거자가 무효화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-127">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>

 <span data-ttu-id="d299f-128"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 열거자에 대 한 연속 호출의 위치를 이동 하지 않습니다 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 될 때까지 동일한 개체를 반환 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-128"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> return the same object until either <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
    
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d299f-129">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-129">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="enumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d299f-130"><see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-130">Releases all resources used by the <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d299f-131">열거자를 <see cref="T:System.Collections.Generic.Stack`1" />의 다음 요소로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-131">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="d299f-132">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-132"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d299f-133">열거자 컬렉션에서 첫 번째 호출은 첫 번째 요소 앞에 배치 되는 열거자를 만든 후 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-133">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="d299f-134">경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-134">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="d299f-135">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-135">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="d299f-136">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-136">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d299f-137">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-137">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d299f-138">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-138">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d299f-139">열거자의 현재 위치에 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-139">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="d299f-140">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-140">The element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
 <span data-ttu-id="d299f-141"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-141"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined under any of the following conditions:</span></span>  
  
- <span data-ttu-id="d299f-142">열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-142">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="d299f-143">열거자를 만든 후 또는 한 후 이런는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-143">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="d299f-144">합니다 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 합니다 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-144">The <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> property.</span></span>  
  
- <span data-ttu-id="d299f-145">마지막으로 호출한 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`하 고 컬렉션의 끝을 나타내는 있으며 열거자는 컬렉션의 마지막 요소 뒤에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-145">The last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

- <span data-ttu-id="d299f-146">요소의 추가, 수정 또는 삭제 하는 등 컬렉션에서 변경 되어 열거자가 무효화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-146">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>

 <span data-ttu-id="d299f-147"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 열거자에 대 한 연속 호출의 위치를 이동 하지 않습니다 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 될 때까지 동일한 개체를 반환 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-147"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
    
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset" />
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d299f-148">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-148">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d299f-149">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-149">Sets the enumerator to its initial position, which is before the first element in the collection.</span></span> <span data-ttu-id="d299f-150">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-150">This class cannot be inherited.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d299f-151">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-151">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d299f-152">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-152">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d299f-153">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d299f-153">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>