<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e711e8893beec361781ecb39b6d3b35cf53a30c2" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58749685" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="78130-101">사전에 있는 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-101">The type of keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="78130-102">사전에 있는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-102">The type of values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="78130-103">키/값 쌍의 제네릭 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="78130-103">Represents a generic collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-104"><xref:System.Collections.Generic.IDictionary%602> 인터페이스는 키/값 쌍의 제네릭 컬렉션에 대 한 기본 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="78130-105">각 요소는에 저장 된 키/값 쌍을 <xref:System.Collections.Generic.KeyValuePair%602> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="78130-106">각 쌍 고유 키를 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-106">Each pair must have a unique key.</span></span> <span data-ttu-id="78130-107">있습니다 수 있는지 여부에 따라 다양 한 구현이 `key` 되도록 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="78130-108">값은 `null` 고유할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78130-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="78130-109"><xref:System.Collections.Generic.IDictionary%602> 인터페이스를 사용 하면 포함 된 키와 값을 열거할 수 있지만 특정 정렬 순서를 의미 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78130-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="78130-110">합니다 `foreach` C# 언어의 (`For Each` Visual basic에서는 `for each` c + +에서) 컬렉션 요소의 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="78130-111">각 요소의 이후는 <xref:System.Collections.Generic.IDictionary%602> 는 키/값 쌍은 요소 형식이 키의 형식 또는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="78130-112">요소 형식은 대신 <xref:System.Collections.Generic.KeyValuePair%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="78130-113">예:</span><span class="sxs-lookup"><span data-stu-id="78130-113">For example:</span></span>  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="78130-114">`foreach` 문을 열거자를 컬렉션에 쓰는 것부터 읽기 가능 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78130-115">키에 상속 될 수 있으므로 동작을 변경할의 절대적인 고유성을 보장할 수 없습니다를 사용 하 여 비교 하 여는 <xref:System.Type.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78130-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-116">다음 코드 예제에서는 빈 <xref:System.Collections.Generic.Dictionary%602> 문자열의 문자열 키 및 통해 액세스 된 <xref:System.Collections.Generic.IDictionary%602> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="78130-117">사용 하 여 코드 예제는 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 일부 요소를 추가 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="78130-118">예제에 합니다 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 메서드가 throw <xref:System.ArgumentException> 중복 키를 추가 하려고 할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="78130-119">예제에서는 합니다 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 (C# 인덱서) 설명 하는 값을 검색 하는 <xref:System.Collections.Generic.KeyNotFoundException> 요청 된 키가 없는, 하 고 보여 주는 키를 사용 하 여 연결 된 값을 바꿀 수 있습니다 하는 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78130-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="78130-120">예제에 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 프로그램을 자주 사용 해야 경우 키 값 사전 및 사용 하는 방법에 있지 않은 값을 검색 하는 보다 효율적인 방법으로 메서드는 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 를호출하기전에키의존재여부를테스트하는방법<xref:System.Collections.Generic.IDictionary%602.Add%2A>메서드.</span><span class="sxs-lookup"><span data-stu-id="78130-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="78130-121">마지막으로 예제에서는 키와 사전에 값을 열거 하는 방법 및 사용 하 여 단독으로 값을 열거 하는 방법을 보여 줍니다는 <xref:System.Collections.Generic.IDictionary%602.Values%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="78130-122">구현 하는 클래스에는 키를 비교할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-122">The implementing class must have a means to compare keys.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78130-123">추가할 요소의 키로 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-123">The object to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="78130-124">추가할 요소의 값으로 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-124">The object to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="78130-125">제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.Generic.IDictionary`2" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-126">사용할 수도 있습니다는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 사전에 존재 하지 않는 키 값을 설정 하 여 새 요소를 추가 하려면 예를 들어 `myCollection["myNonexistentKey"] = myValue` C# (`myCollection("myNonexistentKey") = myValue` Visual Basic의).</span><span class="sxs-lookup"><span data-stu-id="78130-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="78130-127">그러나 사전에 지정된 된 키가 이미 있는 경우 설정는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="78130-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="78130-128">반면,는 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78130-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="78130-129">개체의 같음 여부를 결정 하는 방법의 구현을 달라질 수 있습니다. 예를 들어를 <xref:System.Collections.Generic.List%601> 클래스가 사용 하 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>반면를 <xref:System.Collections.Generic.Dictionary%602> 클래스를 사용 하면 사용자 지정는 <xref:System.Collections.Generic.IComparer%601> 키를 비교 하는 데 사용할 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="78130-130">있습니다 수 있는지 여부에 따라 다양 한 구현이 `key` 되도록 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-131">다음 코드 예제에서는 빈 <xref:System.Collections.Generic.Dictionary%602> 의 문자열, 정수 키를 사용 하 여을 통해 액세스 된 <xref:System.Collections.Generic.IDictionary%602> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="78130-132">사용 하 여 코드 예제는 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 일부 요소를 추가 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="78130-133">예제에 합니다 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 메서드가 throw는 <xref:System.ArgumentException> 중복 키를 추가 하려고 할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="78130-134">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-135"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78130-136"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-136"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78130-137">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.IDictionary`2" />에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="78130-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78130-138"><see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78130-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78130-139"><see cref="T:System.Collections.Generic.IDictionary`2" />에서 찾을 수 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="78130-140">지정된 키를 갖는 요소가 <see cref="T:System.Collections.Generic.IDictionary`2" />에 들어 있는지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="78130-141"><see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.IDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-141"><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-142">개체의 같음 여부를 결정 하는 방법의 구현을 달라질 수 있습니다. 예를 들어를 <xref:System.Collections.Generic.List%601> 클래스가 사용 하 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>반면를 <xref:System.Collections.Generic.Dictionary%602> 클래스를 사용 하면 사용자 지정는 <xref:System.Collections.Generic.IComparer%601> 키를 비교 하는 데 사용할 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="78130-143">있습니다 수 있는지 여부에 따라 다양 한 구현이 `key` 되도록 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-144">다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 메서드를 호출 하기 전에 키의 존재 여부를 테스트 합니다 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78130-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="78130-145">또한 사용 하는 방법을 보여 줍니다는 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 메서드를 더 효율적으로 프로그램을 사전에 없는 키 값을 자주 사용 하는 경우 값을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78130-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="78130-146">마지막으로 사용 하 여 항목을 삽입 하는 방법을 보여 줍니다 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="78130-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="78130-147">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-148"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78130-149"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78130-150">가져오거나 설정할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-150">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="78130-151">지정한 키를 가진 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-151">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="78130-152">지정한 키가 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-152">The element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-153">이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소에 액세스 하는 기능을 제공 합니다. `myCollection[key]` (`myCollection(key)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="78130-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="78130-154">사용할 수도 있습니다는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 사전에 존재 하지 않는 키 값을 설정 하 여 새 요소를 추가 하려면 예를 들어 `myCollection["myNonexistentKey"] = myValue` C# (`myCollection("myNonexistentKey") = myValue` Visual Basic의).</span><span class="sxs-lookup"><span data-stu-id="78130-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="78130-155">그러나 사전에 지정된 된 키가 이미 있는 경우 설정는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="78130-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="78130-156">반면,는 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78130-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="78130-157">개체의 같음 여부를 결정 하는 방법의 구현을 달라질 수 있습니다. 예를 들어를 <xref:System.Collections.Generic.List%601> 클래스가 사용 하 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>반면를 <xref:System.Collections.Generic.Dictionary%602> 클래스를 사용 하면 사용자 지정는 <xref:System.Collections.Generic.IComparer%601> 키를 비교 하는 데 사용할 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="78130-158">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-158">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="78130-159">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Generic.IDictionary%602.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="78130-160">있습니다 수 있는지 여부에 따라 다양 한 구현이 `key` 되도록 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-161">다음 코드 예제에서는 합니다 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성 (C# 인덱서) 설명 하는 값을 검색 하는 <xref:System.Collections.Generic.KeyNotFoundException> 요청 된 키가 없는, 하 고 보여 주는 키를 사용 하 여 연결 된 값을 바꿀 수 있습니다 하는 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78130-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="78130-162">또한이 예제에서는 사용 하는 방법의 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 메서드 값을 검색 하는 프로그램 자주 사용 해야 경우 사전에 없는 키 값 보다 효율적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="78130-163">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-164"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78130-165"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="78130-166">속성이 검색되었지만 <paramref name="key" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="78130-166">The property is retrieved and <paramref name="key" /> is not found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78130-167">속성이 설정되어 있으며 <see cref="T:System.Collections.Generic.IDictionary`2" />가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78130-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78130-168"><see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78130-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="78130-169"><see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-170">반환 된 키의 순서 <xref:System.Collections.Generic.ICollection%601> 지정 되지 있지만 해당 값과 같은 순서로 정렬 되도록 보장할 합니다 <xref:System.Collections.Generic.ICollection%601> 반환한는 <xref:System.Collections.Generic.IDictionary%602.Values%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-171">다음 코드 예제에는 키를 사용 하 여만 열거 하는 방법을 보여 줍니다는 <xref:System.Collections.Generic.IDictionary%602.Keys%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="78130-172">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-173"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78130-174">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-174">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="78130-175"><see cref="T:System.Collections.Generic.IDictionary`2" />에서 지정한 키를 가지는 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="78130-176">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-176"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="78130-177">이 메서드는 <paramref name="key" />가 원래 <see cref="T:System.Collections.Generic.IDictionary`2" />에 없는 경우에도 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-178">개체의 같음 여부를 결정 하는 방법의 구현을 달라질 수 있습니다. 예를 들어를 <xref:System.Collections.Generic.List%601> 클래스가 사용 하 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>반면를 <xref:System.Collections.Generic.Dictionary%602> 클래스를 사용 하면 사용자 지정는 <xref:System.Collections.Generic.IComparer%601> 키를 비교 하는 데 사용할 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-179">다음 코드 예제에 사용 하 여 사전에서 키/값 쌍을 제거 하는 방법을 보여 줍니다는 <xref:System.Collections.Generic.IDictionary%602.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78130-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="78130-180">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-181"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78130-182"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-182"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78130-183"><see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78130-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78130-184">가져올 값이 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-184">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="78130-185">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="78130-186">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="78130-186">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="78130-187">지정한 키와 연결된 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78130-187">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="78130-188"><see cref="T:System.Collections.Generic.IDictionary`2" />를 구현하는 개체에 지정한 키가 있는 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-188"><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-189">이 메서드는의 기능을 결합 합니다 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 메서드 및 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="78130-190">키가 없으면 해당 `value` 매개 변수 형식에 대 한 적절 한 기본값을 가져옵니다 `TValue`; 예를 들어 정수 형식의 경우 영 (0) `false` 부울 형식에 대 한 및 `null` 참조 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="78130-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-191">사용 하는 방법을 보여는 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 값을 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="78130-192">프로그램을 사전에 없는 키 값을 자주 사용 하는 경우는 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 메서드를 사용 하 여 보다 더 효율적일 수 있습니다는 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 존재 하지 않는 키를 검색 하려고 할 때 예외를 throw 하는 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="78130-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="78130-193">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-194"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78130-195"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-195"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78130-196"><see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78130-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="78130-197"><see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78130-198">반환 된 값의 순서 <xref:System.Collections.Generic.ICollection%601> 지정 되지 있지만에서 해당 키와 순서가 동일 하 게 지정 되는 <xref:System.Collections.Generic.ICollection%601> 반환한는 <xref:System.Collections.Generic.IDictionary%602.Keys%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78130-199">다음 코드 예제에는 값만 사용 하 여 열거 하는 방법을 보여 줍니다는 <xref:System.Collections.Generic.IDictionary%602.Values%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="78130-200">이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="78130-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="78130-201"><xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="78130-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>