<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f16f70a6ecc86c79689f40eb54b9d7bd114712aa" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/15/2019" /><Meta Name="ms.locfileid" Value="57928024" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="de04d-101">비교할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-101">The type of objects to compare.</span></span></typeparam>
    <summary><span data-ttu-id="de04d-102"><see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스의 구현에 대한 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-102">Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de04d-103">사용자 지정 구현을 제공 하도록이 클래스에서 파생 된 <xref:System.Collections.Generic.IComparer%601> 와 같은 컬렉션 클래스 사용에 대 한 인터페이스를 <xref:System.Collections.Generic.SortedList%602> 및 <xref:System.Collections.Generic.SortedDictionary%602> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-103">Derive from this class to provide a custom implementation of the <xref:System.Collections.Generic.IComparer%601> interface for use with collection classes such as the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes.</span></span>  
  
 <span data-ttu-id="de04d-104">파생 간의 차이 <xref:System.Collections.Generic.Comparer%601> 클래스 및 구현 합니다 <xref:System.IComparable?displayProperty=nameWithType> 인터페이스는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-104">The difference between deriving from the <xref:System.Collections.Generic.Comparer%601> class and implementing the <xref:System.IComparable?displayProperty=nameWithType> interface is as follows:</span></span>  
  
-   <span data-ttu-id="de04d-105">지정 하려면 두 개체는 기본적으로 비교 해야를 어떻게 구현 된 <xref:System.IComparable?displayProperty=nameWithType> 클래스에서 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="de04d-105">To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=nameWithType> interface in your class.</span></span> <span data-ttu-id="de04d-106">이렇게 하면 정렬 작업이 제공한 기본 비교 코드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-106">This ensures that sort operations will use the default comparison code that you provided.</span></span>  
  
-   <span data-ttu-id="de04d-107">기본 비교자를 대신 사용 하는 비교자를 정의 하려면에서 파생 된 <xref:System.Collections.Generic.Comparer%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-107">To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class.</span></span> <span data-ttu-id="de04d-108">다음 매개 변수로 비교자를 사용 하는 정렬 작업에서이 비교자를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-108">You can then use this comparer in sort operations that take a comparer as a parameter.</span></span>  
  
 <span data-ttu-id="de04d-109">반환 하는 개체를 <xref:System.Collections.Generic.Comparer%601.Default%2A> 속성에서 사용 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 제네릭 인터페이스 (`IComparable<T>` C#에서는 `IComparable(Of T)` Visual basic에서) 두 개체를 비교 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-109">The object returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A> property uses the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects.</span></span> <span data-ttu-id="de04d-110">경우 형식 `T` 구현 하지 않습니다는 <xref:System.IComparable%601?displayProperty=nameWithType> 제네릭 인터페이스를를 <xref:System.Collections.Generic.Comparer%601.Default%2A> 속성에서 반환을 <xref:System.Collections.Generic.Comparer%601> 를 사용 하는 <xref:System.IComparable?displayProperty=nameWithType> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="de04d-110">If type `T` does not implement the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface, the <xref:System.Collections.Generic.Comparer%601.Default%2A> property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=nameWithType> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de04d-111">다음 예제에서는 파생 클래스 `BoxLengthFirst`에서 <xref:System.Collections.Generic.Comparer%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-111">The following example derives a class, `BoxLengthFirst`, from the <xref:System.Collections.Generic.Comparer%601> class.</span></span> <span data-ttu-id="de04d-112">형식의 두 개체를 비교 하는이 비교자 `Box`합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-112">This comparer compares two objects of type `Box`.</span></span> <span data-ttu-id="de04d-113">정렬 하 먼저 길이의 높이 너비입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-113">It sorts them first by length, then by height, and then by width.</span></span> <span data-ttu-id="de04d-114">합니다 `Box` 클래스가 구현 하는 <xref:System.IComparable%601> 두 기본 비교를 제어 하는 인터페이스 `Box` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-114">The `Box` class implements the <xref:System.IComparable%601> interface to control the default comparison between two `Box` objects.</span></span> <span data-ttu-id="de04d-115">이 기본 구현은 높이에서 길이 너비에 의해 먼저 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-115">This default implementation sorts first by height, then by length, and then by width.</span></span> <span data-ttu-id="de04d-116">예제 목록을 정렬 하 여 두 비교 차이 보여 줍니다 `Box` 먼저을 사용 하 여 개체를 `BoxLengthFirst` 비교자 및 다음 기본 비교자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-116">The example shows the differences between the two comparisons by sorting a list of `Box` objects first by using the `BoxLengthFirst` comparer and then by using the default comparer.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="de04d-117">
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> 및 <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,\`0)" /> 문화권 구분 및 대/소문자 구분 측면에서 다르게 동작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-117">
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,\`0)" /> and <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,\`0)" /> may behave differently in terms of culture-sensitivity and case-sensitivity.</span></span>  
  
<span data-ttu-id="de04d-118">문자열 비교에 <see cref="T:System.StringComparer" /> 클래스는 것이 좋습니다 <c>비교자&lt;문자열&gt;</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-118">For string comparisons, the <see cref="T:System.StringComparer" /> class is recommended over <c>Comparer&lt;String&gt;</c>.</span></span>  <span data-ttu-id="de04d-119">속성을 <see cref="T:System.StringComparer" /> 클래스 문화권 구분 및 대/소문자 구분의 다른 조합 사용 하 여 문자열 비교를 수행 하는 미리 정의 된 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-119">Properties of the <see cref="T:System.StringComparer" /> class return predefined instances that perform string comparisons with different combinations of culture-sensitivity and case-sensitivity.</span></span>  <span data-ttu-id="de04d-120">대/소문자 구분 및 문화권 구분 동일한 멤버 간에 일관 되 <see cref="T:System.StringComparer" /> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="de04d-120">The case-sensitivity and culture-sensitivity are consistent among the members of the same <see cref="T:System.StringComparer" /> instance.</span></span>  
  
<span data-ttu-id="de04d-121">문화권별 비교에 대 한 자세한 내용은 참조는 <see cref="N:System.Globalization" /> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-121">For more information on culture-specific comparisons, see the <see cref="N:System.Globalization" /> namespace and [Globalization and Localization](~/docs/standard/globalization-localization/index.md).</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de04d-122"><see cref="T:System.Collections.Generic.Comparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-122">Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="de04d-123">비교할 첫 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-123">The first object to compare.</span></span></param>
        <param name="y"><span data-ttu-id="de04d-124">비교할 두 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-124">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="de04d-125">파생된 클래스에서 재정의된 경우 같은 형식의 두 개체를 비교한 다음 한 개체가 다른 개체보다 작은지, 큰지 또는 두 개체가 같은지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-125">When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</span></span></summary>
        <returns><span data-ttu-id="de04d-126">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-126">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="de04d-127">값</span><span class="sxs-lookup"><span data-stu-id="de04d-127">Value</span></span> 
 </term><description> <span data-ttu-id="de04d-128">의미</span><span class="sxs-lookup"><span data-stu-id="de04d-128">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="de04d-129">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="de04d-129">Less than zero</span></span> 
 </term><description><span data-ttu-id="de04d-130"><paramref name="x" />가 <paramref name="y" />보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-130"><paramref name="x" /> is less than <paramref name="y" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="de04d-131">0</span><span class="sxs-lookup"><span data-stu-id="de04d-131">Zero</span></span> 
 </term><description><span data-ttu-id="de04d-132"><paramref name="x" />가 <paramref name="y" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-132"><paramref name="x" /> equals <paramref name="y" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="de04d-133">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="de04d-133">Greater than zero</span></span> 
 </term><description><span data-ttu-id="de04d-134"><paramref name="x" />가 <paramref name="y" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-134"><paramref name="x" /> is greater than <paramref name="y" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de04d-135">사용자 지정을 제공 하려면이 메서드를 구현 합니다. 정렬 순서 비교 형식에 대 한 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-135">Implement this method to provide a customized sort order comparison for type `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de04d-136">다음 예제에서는 정의의 비교자 `Box` 기본 비교자를 대신 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-136">The following example defines a comparer of `Box` objects that can be used instead of the default comparer.</span></span> <span data-ttu-id="de04d-137">이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Collections.Generic.Comparer%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-137">This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de04d-138"><paramref name="T" /> 형식이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-138">Type <paramref name="T" /> does not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="de04d-139">비교 <see langword="null" /> 모든 참조를 사용 하 여 허용 되는 형식과 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-139">Comparing <see langword="null" /> with any reference type is allowed and does not generate an exception.</span></span> <span data-ttu-id="de04d-140">Null 참조는 null이 아닌 보다 작은 참조로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-140">A null reference is considered to be less than any reference that is not null.</span></span>  
  
<span data-ttu-id="de04d-141">문화권별 비교에 대 한 내용은 참조는 <see cref="N:System.Globalization" /> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-141">For information on culture-specific comparisons, see the <see cref="N:System.Globalization" /> namespace and [Globalization and Localization](~/docs/standard/globalization-localization/index.md).</span></span></para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison"><span data-ttu-id="de04d-142">사용할 비교입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-142">The comparison to use.</span></span></param>
        <summary><span data-ttu-id="de04d-143">지정된 비교를 사용하여 비교자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-143">Creates a comparer by using the specified comparison.</span></span></summary>
        <returns><span data-ttu-id="de04d-144">새 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-144">The new comparer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de04d-145">제네릭 인수에서 지정한 형식의 기본 정렬 순서 비교자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-145">Returns a default sort order comparer for the type specified by the generic argument.</span></span></summary>
        <value><span data-ttu-id="de04d-146"><see cref="T:System.Collections.Generic.Comparer`1" />을 상속하고 <paramref name="T" /> 형식에 대한 정렬 순서 비교자의 역할을 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-146">An object that inherits <see cref="T:System.Collections.Generic.Comparer`1" /> and serves as a sort order comparer for type <paramref name="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de04d-147"><xref:System.Collections.Generic.Comparer%601> 이 속성에서 반환 사용 합니다 <xref:System.IComparable%601?displayProperty=nameWithType> 제네릭 인터페이스 (`IComparable<T>` C#에서 `IComparable(Of T)` Visual Basic의) 두 개체를 비교 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-147">The <xref:System.Collections.Generic.Comparer%601> returned by this property uses the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects.</span></span> <span data-ttu-id="de04d-148">경우 형식 `T` 를 구현 하지 않습니다는 <xref:System.IComparable%601?displayProperty=nameWithType> 제네릭 인터페이스를이 속성을 반환을 <xref:System.Collections.Generic.Comparer%601> 를 사용 하는 <xref:System.IComparable?displayProperty=nameWithType> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="de04d-148">If type `T` does not implement the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface, this property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=nameWithType> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de04d-149">다음 예제에서는 사용 하는 방법의 <xref:System.Collections.Generic.Comparer%601.Default%2A> 속성이 기본 비교를 수행 하는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-149">The following example shows how to use the <xref:System.Collections.Generic.Comparer%601.Default%2A> property to get an object that performs the default comparison.</span></span> <span data-ttu-id="de04d-150">이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Collections.Generic.Comparer%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-150">This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="de04d-151">문자열 비교에 <see cref="T:System.StringComparer" /> 클래스는 것이 좋습니다 <c>비교자&lt;문자열&gt;</c> (<c>비교자 (Of String)</c> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="de04d-151">For string comparisons, the <see cref="T:System.StringComparer" /> class is recommended over <c>Comparer&lt;String&gt;</c> (<c>Comparer(Of String)</c> in Visual Basic).</span></span>  <span data-ttu-id="de04d-152">속성을 <see cref="T:System.StringComparer" /> 클래스 문화권 구분 및 대/소문자 구분의 다른 조합 사용 하 여 문자열 비교를 수행 하는 미리 정의 된 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-152">Properties of the <see cref="T:System.StringComparer" /> class return predefined instances that perform string comparisons with different combinations of culture-sensitivity and case-sensitivity.</span></span>  <span data-ttu-id="de04d-153">대/소문자 구분 및 문화권 구분 동일한 멤버 간에 일관 되 <see cref="T:System.StringComparer" /> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="de04d-153">The case-sensitivity and culture-sensitivity are consistent among the members of the same <see cref="T:System.StringComparer" /> instance.</span></span>  
  
<span data-ttu-id="de04d-154">문화권별 비교에 대 한 자세한 내용은 참조는 <see cref="N:System.Globalization" /> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-154">For more information on culture-specific comparisons, see the <see cref="N:System.Globalization" /> namespace and [Globalization and Localization](~/docs/standard/globalization-localization/index.md).</span></span></para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="de04d-155">비교할 첫 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-155">The first object to compare.</span></span></param>
        <param name="y"><span data-ttu-id="de04d-156">비교할 두 번째 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-156">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="de04d-157">두 개체를 비교하여 한 개체가 다른 개체보다 작거나, 같거나 또는 크다는 것을 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-157">Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</span></span></summary>
        <returns><span data-ttu-id="de04d-158">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-158">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="de04d-159">값</span><span class="sxs-lookup"><span data-stu-id="de04d-159">Value</span></span> 
 </term><description> <span data-ttu-id="de04d-160">의미</span><span class="sxs-lookup"><span data-stu-id="de04d-160">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="de04d-161">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="de04d-161">Less than zero</span></span> 
 </term><description><span data-ttu-id="de04d-162"><paramref name="x" />가 <paramref name="y" />보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-162"><paramref name="x" /> is less than <paramref name="y" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="de04d-163">0</span><span class="sxs-lookup"><span data-stu-id="de04d-163">Zero</span></span> 
 </term><description><span data-ttu-id="de04d-164"><paramref name="x" />가 <paramref name="y" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-164"><paramref name="x" /> equals <paramref name="y" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="de04d-165">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="de04d-165">Greater than zero</span></span> 
 </term><description><span data-ttu-id="de04d-166"><paramref name="x" />가 <paramref name="y" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-166"><paramref name="x" /> is greater than <paramref name="y" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de04d-167">이 메서드는에 대 한 래퍼를 <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> 메서드 이므로 `obj` 제네릭 인수에서 지정 된 형식으로 캐스팅 되어야 합니다 `T` 현재 인스턴스의 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-167">This method is a wrapper for the <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> method, so `obj` must be cast to the type specified by the generic argument `T` of the current instance.</span></span> <span data-ttu-id="de04d-168">로 캐스팅할 수 없는 경우 `T`, <xref:System.ArgumentException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-168">If it cannot be cast to `T`, an <xref:System.ArgumentException> is thrown.</span></span>  
  
 <span data-ttu-id="de04d-169">비교 `null` 모든 참조를 사용 하 여 허용 되는 형식과 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-169">Comparing `null` with any reference type is allowed and does not generate an exception.</span></span> <span data-ttu-id="de04d-170">정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-170">When sorting, `null` is considered to be less than any other object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de04d-171">다음 예제에서는 사용 하는 방법의 <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> 두 개체를 비교 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-171">The following example shows how to use the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method to compare two objects.</span></span> <span data-ttu-id="de04d-172">이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Collections.Generic.Comparer%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-172">This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de04d-173"><paramref name="x" /> 또는 <paramref name="y" />가 <paramref name="T" /> 형식으로 캐스팅할 수 없는 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-173"><paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.</span></span>  
  
<span data-ttu-id="de04d-174">또는</span><span class="sxs-lookup"><span data-stu-id="de04d-174">-or-</span></span> 
 <span data-ttu-id="de04d-175"><paramref name="x" />와 <paramref name="y" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="de04d-175"><paramref name="x" /> and <paramref name="y" /> do not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="de04d-176">
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> 및 <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(\`0,\`0)" /> 문화권 구분 및 대/소문자 구분 측면에서 다르게 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-176">
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> and <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(\`0,\`0)" /> behave differently in terms of culture-sensitivity and case-sensitivity.</span></span>  
  
<span data-ttu-id="de04d-177">문자열 비교에 <see cref="T:System.StringComparer" /> 클래스는 것이 좋습니다 <c>비교자&lt;문자열&gt;</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-177">For string comparisons, the <see cref="T:System.StringComparer" /> class is recommended over <c>Comparer&lt;String&gt;</c>.</span></span>  <span data-ttu-id="de04d-178">속성을 <see cref="T:System.StringComparer" /> 클래스 문화권 구분 및 대/소문자 구분의 다른 조합 사용 하 여 문자열 비교를 수행 하는 미리 정의 된 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-178">Properties of the <see cref="T:System.StringComparer" /> class return predefined instances that perform string comparisons with different combinations of culture-sensitivity and case-sensitivity.</span></span>  <span data-ttu-id="de04d-179">대/소문자 구분 및 문화권 구분 동일한 멤버 간에 일관 되 <see cref="T:System.StringComparer" /> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="de04d-179">The case-sensitivity and culture-sensitivity are consistent among the members of the same <see cref="T:System.StringComparer" /> instance.</span></span>  
  
<span data-ttu-id="de04d-180">문화권별 비교에 대 한 자세한 내용은 참조는 <see cref="N:System.Globalization" /> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="de04d-180">For more information on culture-specific comparisons, see the <see cref="N:System.Globalization" /> namespace and [Globalization and Localization](~/docs/standard/globalization-localization/index.md).</span></span></para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>