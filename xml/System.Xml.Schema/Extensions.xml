<Type Name="Extensions" FullName="System.Xml.Schema.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d2c8239fcc407f8953d07a9771bf66edb9113c8" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58746145" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="40902-101">이 클래스에는 XSD 유효성 검사에 대한 LINQ to XML 확장 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-101">This class contains the LINQ to XML extension methods for XSD validation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-102">또한이 클래스는 유효성이 검사 된 XML 노드의 스키마 유효성 검사 이후 정보 PSVI ()를 가져오는 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-102">This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.</span></span>  
  
 <span data-ttu-id="40902-103">유효성을 검사할 때 프로그램 <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, 또는 <xref:System.Xml.Linq.XAttribute>, 스키마 유효성 검사 이후 정보 집합을 사용 하 여 XML 트리를 채울 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-103">When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset.</span></span> <span data-ttu-id="40902-104">PSVI 정보가 형식의 주석으로 추가 됩니다 <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-104">PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40902-105">XSD [샘플 XSD 파일: Customers 및 Orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) XML 문서 유효성 검사에 사용할 수 있는 스키마가 들어 [샘플 XML 파일: Customers 및 Orders(LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span><span class="sxs-lookup"><span data-stu-id="40902-105">The XSD in [Sample XSD File: Customers and Orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span></span> <span data-ttu-id="40902-106">다음 예제에서는 스키마 및 문서 로드 된 문서의 유효성을 검사, 문서를 변경 하는 `xs:key` 및 `xs:keyref` 관계 유효 하지 않은 한 다음 유효성 검사를 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-106">The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.</span></span>  
  
```csharp  
  
                XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", "CustomersOrders.xsd");  
  
XDocument custOrd = XDocument.Load("CustomersOrders.xml");  
  
Console.WriteLine("Validating custOrd");  
bool errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
  
// Modify the custOrd tree so that it is no longer valid.  
custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA";  
  
Console.WriteLine();  
Console.WriteLine("Validating custOrd");  
errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", "CustomersOrders.xsd")  
  
    Console.WriteLine("Validating custOrd")  
    Dim custOrd As XDocument = XDocument.Load("CustomersOrders.xml")  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating custOrd")  
    ' Modify the source document so that it will not validate.  
    custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA"  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="40902-107">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-107">This example produces the following output:</span></span>  
  
```  
Validating custOrd  
custOrd validated  
  
Validating custOrd  
The key sequence 'AAAAA' in Keyref fails to refer to some key.  
custOrd did not validate  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetSchemaInfo">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="40902-108">유효성이 검사된 노드의 PSVI(스키마 유효성 검사 이후 정보 집합)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-108">Gets the post-schema-validation infoset (PSVI) of a validated node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-109">유효성을 검사 한 후는 <xref:System.Xml.Linq.XDocument>에 스키마 유효성 검사 이후 정보 집합에 대 한 검색할 수 있습니다는 <xref:System.Xml.Linq.XElement> 또는 <xref:System.Xml.Linq.XAttribute> 문서에 포함 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-109">After you have validated an <xref:System.Xml.Linq.XDocument>, you can retrieve the post-schema-validation infoset for an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> that is contained in the document.</span></span>  
  
 <span data-ttu-id="40902-110">검색 한 후 합니다 <xref:System.Xml.Schema.IXmlSchemaInfo> 개체를 사용할 수는 <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> 또는 <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> 부분 유효성 검사 형식을 가져올 속성 (<xref:System.Xml.Schema.XmlSchemaElement> 또는 <xref:System.Xml.Schema.XmlSchemaAttribute>).</span><span class="sxs-lookup"><span data-stu-id="40902-110">After retrieving the <xref:System.Xml.Schema.IXmlSchemaInfo> object, you can use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> or <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> properties to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement> or <xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="40902-111">부분 유효성 검사 형식 특성 또는 하위 트리의 유효성 검사에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-111">You can use the partial validation types to validate an attribute or a sub-tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XAttribute source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XAttribute) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XAttribute ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XAttribute -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-112">이전에 유효성을 검사한 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-112">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="40902-113">유효성이 검사된 특성의 PSVI(스키마 유효성 검사 이후 정보 집합)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-113">Gets the post-schema-validation infoset (PSVI) of a validated attribute.</span></span></summary>
        <returns><span data-ttu-id="40902-114"><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />에 대한 스키마 유효성 검사 이후 정보 집합이 포함된 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-114">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-115">사용할 수는 <xref:System.Xml.Schema.IXmlSchemaInfo> 유효성이 검사 된 특성의 특정 특성을 결정이 메서드에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-115">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute.</span></span> <span data-ttu-id="40902-116">예를 들어 XSD의 기본 특성 값에서 가져왔는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-116">For example, you can determine if the attribute came from a default attribute value in an XSD.</span></span>  
  
 <span data-ttu-id="40902-117">사용 된 <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> 부분 유효성 검사 유형을 가져올 속성 (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span><span class="sxs-lookup"><span data-stu-id="40902-117">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="40902-118">전체 문서 유효성 검사 하지 않고 특성을 유효성 검사를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-118">You can use it to revalidate an attribute without validating an entire document.</span></span>  
  
 <span data-ttu-id="40902-119">이 속성의 예제를 참조 하세요. <xref:System.Xml.Schema.Extensions.Validate%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-119">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XElement source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XElement) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XElement ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XElement -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-120">이전에 유효성을 검사한 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-120">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="40902-121">유효성이 검사된 요소의 PSVI(스키마 유효성 검사 이후 정보 집합)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-121">Gets the post-schema-validation infoset (PSVI) of a validated element.</span></span></summary>
        <returns><span data-ttu-id="40902-122"><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />에 대한 PSVI(스키마 유효성 검사 이후 정보 집합)가 포함된 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-122">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-123">사용할 수는 <xref:System.Xml.Schema.IXmlSchemaInfo> 유효성이 검사 된 요소의 특정 특성을 확인 하려면이 메서드에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-123">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element.</span></span> <span data-ttu-id="40902-124">예를 들어, 요소의 동적 스키마 형식을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-124">For example, you can determine the dynamic schema type of the element.</span></span>  
  
 <span data-ttu-id="40902-125">사용 된 <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> 부분 유효성 검사 유형을 가져올 속성 (<xref:System.Xml.Schema.XmlSchemaElement>).</span><span class="sxs-lookup"><span data-stu-id="40902-125">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>).</span></span> <span data-ttu-id="40902-126">하위 트리의 루트 요소를 사용 하 여 전체 문서 유효성 검사 하지 않고 유효성 검사를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-126">You can use it to revalidate a sub-tree with an element at its root without validating an entire document.</span></span>  
  
 <span data-ttu-id="40902-127">이 속성의 예제를 참조 하세요. <xref:System.Xml.Schema.Extensions.Validate%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-127">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40902-128">다음 예제에서는 PSVI 사용 하 여 트리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="40902-128">The following example populates the tree with a PSVI.</span></span> <span data-ttu-id="40902-129">유효성 검사 후 모든 특성과 해당 요소 트리의 PSVI에 따라 유효 하지 않은 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-129">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
         @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
   <xsd:simpleType name='GCType'>  
    <xsd:restriction base='xsd:token'>  
     <xsd:enumeration value='AAA'/>  
     <xsd:enumeration value='BBB'/>  
    </xsd:restriction>  
   </xsd:simpleType>  
   <xsd:element name='Root'>  
    <xsd:complexType>  
     <xsd:sequence>  
      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
       <xsd:complexType>  
        <xsd:sequence>  
         <xsd:element name='GrandChild1' type='GCType'/>  
         <xsd:element name='GrandChild2' type='GCType'/>  
         <xsd:element name='GrandChild3' type='GCType'/>  
        </xsd:sequence>  
       </xsd:complexType>  
      </xsd:element>  
     </xsd:sequence>  
    </xsd:complexType>  
   </xsd:element>  
  </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
                <xsd:enumeration value='AAA'/>  
                <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
        </xsd:simpleType>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:sequence>  
                                <xsd:element name='GrandChild1' type='GCType'/>  
                                <xsd:element name='GrandChild2' type='GCType'/>  
                                <xsd:element name='GrandChild3' type='GCType'/>  
                            </xsd:sequence>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>  
            <GrandChild1>AAA</GrandChild1>  
            <GrandChild2>ZZZ</GrandChild2>  
            <GrandChild3>ZZZ</GrandChild3>  
        </Child1>  
    </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="40902-130">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-130">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="40902-131"><see cref="T:System.Xml.Linq.XDocument" />, <see cref="T:System.Xml.Linq.XElement" /> 또는 <see cref="T:System.Xml.Linq.XAttribute" />가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 XSD를 준수하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-131">Validates that an <see cref="T:System.Xml.Linq.XDocument" />, an <see cref="T:System.Xml.Linq.XElement" />, or an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-132">이러한 메서드는 내부 사용 <xref:System.Xml.XmlReader> XSD에 대해 XML 트리의 유효성을 검사할 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-132">These methods use an underlying <xref:System.Xml.XmlReader> to validate the XML tree against an XSD.</span></span>  
  
 <span data-ttu-id="40902-133">유효성 검사 오류 및 경고 메시지를 사용 하 여 처리 되는 <xref:System.Xml.Schema.ValidationEventHandler> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-133">Validation error and warning messages are handled using the <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span></span> <span data-ttu-id="40902-134">유효성 검사 오류도 노출 된 이벤트 처리기를 이러한 메서드에 제공 하는 경우는 <xref:System.Xml.Schema.XmlSchemaValidationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-134">If no event handler is provided to these methods, validation errors are exposed as an <xref:System.Xml.Schema.XmlSchemaValidationException>.</span></span> <span data-ttu-id="40902-135">유효성 검사 경고 발생 하지는 <xref:System.Xml.Schema.XmlSchemaValidationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-135">Validation warnings do not cause an <xref:System.Xml.Schema.XmlSchemaValidationException> to be thrown.</span></span>  
  
 <span data-ttu-id="40902-136">이러한 확장 메서드 중 일부는 필요에 따라 스키마 유효성 검사 이후 정보 집합 (PSVI)의 채우기를 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-136">Some of these extension methods optionally allow population of the post-schema-validation infoset (PSVI).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-137">유효성을 검사할 <see cref="T:System.Xml.Linq.XDocument" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-137">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-138">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-138">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-139">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-139">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-140"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-140">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="40902-141">이 메서드는 <see cref="T:System.Xml.Linq.XDocument" />가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 XSD를 준수하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-141">This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-142">이 확장 메서드는 유효성을 검사 합니다 <xref:System.Xml.Linq.XDocument> 스키마 콘텐츠 모델에 대 한 준수 <xref:System.Xml.Schema.XmlSchemaSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-142">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40902-143">다음 예제에서는 <xref:System.Xml.Schema.XmlSchemaSet>을 만든 다음 스키마 집합에 대해 두 <xref:System.Xml.Linq.XDocument> 개체의 유효성을 검사합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-143">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set.</span></span> <span data-ttu-id="40902-144">문서 중 하나는 유효하고 다른 하나는 유효하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-144">One of the documents is valid, the other is not.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child2", "content1")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child2>content2</Child2>  
    </Root>  
  
    Dim doc2 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child3>content1</Child3>  
    </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="40902-145">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-145">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-146">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-146">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-147">유효성을 검사할 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-147">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="40902-148">유효성을 검사할 하위 트리를 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-148">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-149">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-149">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-150">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-150">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-151"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-151">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="40902-152">이 메서드는 <see cref="T:System.Xml.Linq.XAttribute" />가 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 준수하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-152">This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-153">이 메서드를 사용 하 여 유효성을 검사 하는 <xref:System.Xml.Linq.XAttribute> 스키마를 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-153">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="40902-154">일반적으로 특성을 수정 하 고 여전히 해당 스키마를 준수 하는지 확인 하려는 경우이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-154">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="40902-155">전체 문서를 유효성을 검사할 수 있지만 특성만 유효성을 검사 하는 처리 시간이 적게 걸립니다.</span><span class="sxs-lookup"><span data-stu-id="40902-155">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="40902-156">전달 하는 경우 `null` 에 대 한 `validationEventHandler`,이 메서드는 유효성 검사 오류 시 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-156">If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors.</span></span> <span data-ttu-id="40902-157">유효성 검사 경고에는 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-157">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="40902-158">인스턴스를 사용 하면 특성의 유효성을 검사할 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-158">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="40902-159">다양 한 방법으로이 인스턴스를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-159">You can obtain this instance in various ways.</span></span> <span data-ttu-id="40902-160">쉬운 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-160">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="40902-161">문서 스키마를 준수 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-161">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="40902-162">스키마 유효성 검사 이후 정보 집합 (PSVI) 호출 하 여 추가 된 <xref:System.Xml.Schema.Extensions.Validate%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="40902-162">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="40902-163">호출 된 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 확장 메서드를 구현 하는 개체 검색 <xref:System.Xml.Schema.IXmlSchemaInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-163">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="40902-164">검색된 된 개체에서 가져올 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-164">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="40902-165">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XElement>, 형식은 <xref:System.Xml.Schema.XmlSchemaElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-165">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="40902-166">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XAttribute>, 형식은 <xref:System.Xml.Schema.XmlSchemaAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-166">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="40902-167">인스턴스를 만든 후는 <xref:System.Xml.Schema.XmlSchemaObject>, 특성의 유효성을 검사 하려면이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-167">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XAttribute("Lang", "C#")  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
XAttribute lang = doc1.Root.Attribute("Lang");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Lang attribute invalid according to the schema  
lang.Value = "VC";  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
      <?xml version='1.0'?>  
      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
          <xsd:element name='Root'>  
              <xsd:complexType>  
                  <xsd:simpleContent>  
                      <xsd:extension base='xsd:string'>  
                          <xsd:attribute name='Lang' use='required'>  
                              <xsd:simpleType>  
                                  <xsd:restriction base='xsd:token'>  
                                      <xsd:enumeration value='C#'/>  
                                      <xsd:enumeration value='VB'/>  
                                  </xsd:restriction>  
                              </xsd:simpleType>  
                          </xsd:attribute>  
                      </xsd:extension>  
                  </xsd:simpleContent>  
              </xsd:complexType>  
          </xsd:element>  
      </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Root.Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="40902-168">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-168">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-169">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-169">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-170">유효성을 검사할 <see cref="T:System.Xml.Linq.XDocument" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-170">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-171">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-171">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-172">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-172">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-173"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-173">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="40902-174">PSVI(스키마 유효성 검사 이후 정보 집합)를 채울지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-174">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="40902-175"><see cref="T:System.Xml.Linq.XDocument" />가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 XSD를 준수하는지 확인하고, 선택적으로 XML 트리를 PSVI(스키마 유효성 검사 이후 정보 집합)로 채울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-175">Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-176">이 확장 메서드는 유효성을 검사 합니다 <xref:System.Xml.Linq.XDocument> 스키마 콘텐츠 모델에 대 한 준수 <xref:System.Xml.Schema.XmlSchemaSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-176">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
 <span data-ttu-id="40902-177">하는 경우 `addSchemaInfo` 는 `true`,이 메서드는 스키마 유효성 검사 이후 정보 집합 (PSVI)를 사용 하 여 XML 트리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="40902-177">If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="40902-178">XML 트리를 PSVI에는 다음과 같은 두 단계가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-178">There are two steps to populating the XML tree with the PSVI.</span></span>  
  
1.  <span data-ttu-id="40902-179">첫째, 주석의 호출할 수 있도록 트리의 모든 노드에 추가 됩니다 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> 또는 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> 요소 또는 트리에서 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-179">First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on an element or attribute in the tree.</span></span>  
  
2.  <span data-ttu-id="40902-180">둘째, 기본 요소 및 XSD에 정의 된 특성을 XML 트리에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-180">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="40902-181">중 하나를 호출 하 여는 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 메서드 경우 특정 요소 또는 특성으로 추가 된 XSD에서 기본 요소 또는 특성을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-181">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40902-182">다음 예제에 정의 하는 XSD의 `Child2` 요소는 `Att1` 기본값을 사용 하 여 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-182">The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value.</span></span> <span data-ttu-id="40902-183">문서의 유효성을 검사 한 후 기본값을 사용 하 여 특성을 XML 트리에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-183">After successfully validating the document, the attribute with the default value is added to the XML tree.</span></span> <span data-ttu-id="40902-184">기본 특성이 없는 참고 추가할 `doc2`, 스키마에 대해 유효성을 검사 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-184">Note that the default attribute is not added to `doc2`, which does not validate against the schema.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                           {  
                               Console.WriteLine("{0}", e.Message);  
                               errors = true;  
                           }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:simpleContent>  
                                <xsd:extension base='xsd:string'>  
                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                </xsd:extension>  
                            </xsd:simpleContent>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>c1</Child1>  
                                <Child2>c2</Child2>  
                            </Root>  
    Dim doc2 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>content1</Child1>  
                                <Child3>content1</Child3>  
                            </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="40902-185">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-185">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 <span data-ttu-id="40902-186">다음 예제에서는 트리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="40902-186">The following example populates the tree with PSVI.</span></span> <span data-ttu-id="40902-187">유효성 검사 후 모든 특성과 해당 요소 트리의 PSVI에 따라 유효 하지 않은 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-187">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
   string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
           <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
             <xsd:enumeration value='AAA'/>  
             <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
           </xsd:simpleType>  
           <xsd:element name='Root'>  
            <xsd:complexType>  
             <xsd:sequence>  
              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
               <xsd:complexType>  
                <xsd:sequence>  
                 <xsd:element name='GrandChild1' type='GCType'/>  
                 <xsd:element name='GrandChild2' type='GCType'/>  
                 <xsd:element name='GrandChild3' type='GCType'/>  
                </xsd:sequence>  
               </xsd:complexType>  
              </xsd:element>  
             </xsd:sequence>  
            </xsd:complexType>  
           </xsd:element>  
          </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
        {  
            Console.WriteLine(e.Message);  
            errors = true;  
        }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:simpleType name='GCType'>  
                <xsd:restriction base='xsd:token'>  
                    <xsd:enumeration value='AAA'/>  
                    <xsd:enumeration value='BBB'/>  
                </xsd:restriction>  
            </xsd:simpleType>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' type='GCType'/>  
                                    <xsd:element name='GrandChild2' type='GCType'/>  
                                    <xsd:element name='GrandChild3' type='GCType'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>AAA</GrandChild1>  
                <GrandChild2>ZZZ</GrandChild2>  
                <GrandChild3>ZZZ</GrandChild3>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="40902-188">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-188">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-189">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-189">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-190">유효성을 검사할 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-190">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="40902-191">유효성을 검사할 하위 트리를 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-191">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-192">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-192">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-193">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-193">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-194"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-194">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="40902-195">이 메서드는 <see cref="T:System.Xml.Linq.XElement" /> 하위 트리가 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 준수하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-195">This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-196">하위 트리의 유효성을 검사 하는이 메서드를 사용할 수 있습니다 (사용 하 여는 <xref:System.Xml.Linq.XElement> 루트) 스키마를 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-196">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema.</span></span> <span data-ttu-id="40902-197">일반적으로 하위 트리를 수정 하 고 여전히 해당 스키마를 준수 하는지 확인 하려는 경우이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-197">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="40902-198">전체 문서를 유효성을 검사할 수 있지만에 처리 시간이 적게 걸립니다 하위 트리.</span><span class="sxs-lookup"><span data-stu-id="40902-198">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="40902-199">전달 하는 경우 `null` 에 대 한 `validationEventHandler`,이 메서드를 유효성 검사 오류에 예외를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-199">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="40902-200">유효성 검사 경고에는 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-200">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="40902-201">인스턴스를 사용 하면 하위 트리의 유효성을 검사할 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-201">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="40902-202">다양 한 방법으로이 인스턴스를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-202">You can obtain this instance in various ways.</span></span> <span data-ttu-id="40902-203">쉬운 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-203">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="40902-204">문서 스키마를 준수 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-204">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="40902-205">스키마 유효성 검사 이후 정보 집합 (PSVI) 호출 하 여 추가 된 <xref:System.Xml.Schema.Extensions.Validate%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="40902-205">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="40902-206">호출 된 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 확장 메서드를 구현 하는 개체 검색 <xref:System.Xml.Schema.IXmlSchemaInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-206">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="40902-207">검색된 된 개체에서 가져올 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-207">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="40902-208">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XElement>, 형식은 <xref:System.Xml.Schema.XmlSchemaElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-208">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="40902-209">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XAttribute>, 형식은 <xref:System.Xml.Schema.XmlSchemaAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-209">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="40902-210">인스턴스를 만든 후는 <xref:System.Xml.Schema.XmlSchemaObject>에 하위 트리의 유효성을 검사할이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-210">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:sequence>  
             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
            </xsd:sequence>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1",  
            new XElement("GrandChild1", "gc"),  
            new XElement("GrandChild2", "gc")  
        )  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after first edit ...");  
XElement child1 = doc1.Element("Root").Element("Child1");  
child1.Add(new XElement("GrandChild2", "gc"));  
errors = false;  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Child1 element invalid according to the schema  
child1.Add(new XElement("GrandChild3", "gc"));  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after second edit ...");  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>gc</GrandChild1>  
                <GrandChild2>gc</GrandChild2>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after first edit ...")  
    Dim child1 As XElement = doc1.Element("Root").Element("Child1")  
    child1.Add(<GrandChild2>gc</GrandChild2>)  
    errors = False  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Child1 element invalid according to the schema  
    child1.Add(<GrandChild3>gc</GrandChild3>)  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after second edit ...")  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="40902-211">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-211">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Child1 after first edit ...  
child1 validated  
  
Validating Child1 after second edit ...  
The element 'Child1' has invalid child element 'GrandChild3'.  
child1 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-212">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-212">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-213">유효성을 검사할 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-213">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="40902-214">유효성을 검사할 하위 트리를 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-214">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-215">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-215">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-216">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-216">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-217"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-217">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="40902-218">PSVI(스키마 유효성 검사 이후 정보 집합)를 채울지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-218">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="40902-219"><see cref="T:System.Xml.Linq.XAttribute" />가 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 준수하는지 확인하고, 선택적으로 XML 트리를 PSVI(스키마 유효성 검사 이후 정보 집합)로 채울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-219">Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-220">이 메서드를 사용 하 여 유효성을 검사 하는 <xref:System.Xml.Linq.XAttribute> 스키마를 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-220">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="40902-221">일반적으로 특성을 수정 하 고 여전히 해당 스키마를 준수 하는지 확인 하려는 경우이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-221">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="40902-222">전체 문서를 유효성을 검사할 수 있지만 특성만 유효성을 검사 하는 처리 시간이 적게 걸립니다.</span><span class="sxs-lookup"><span data-stu-id="40902-222">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="40902-223">하는 경우 `addSchemaInfo` 는 `true`,이 메서드는 스키마 유효성 검사 이후 정보 집합 (PSVI)를 사용 하 여 특성을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="40902-223">If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI).</span></span> <span data-ttu-id="40902-224">PSVI 사용 하 여 XML 트리를 채운 후 호출할 수 있습니다 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> 유효성이 검사 된 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-224">After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on the validated attribute.</span></span> <span data-ttu-id="40902-225">반환 된 데이터를 사용 하는 코드를 작성 하는 경우에 유용 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-225">This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span></span>  
  
 <span data-ttu-id="40902-226">전달 하는 경우 `null` 에 대 한 `validationEventHandler`,이 메서드를 유효성 검사 오류에 예외를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-226">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="40902-227">유효성 검사 경고에는 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-227">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="40902-228">인스턴스를 사용 하면 특성의 유효성을 검사할 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-228">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="40902-229">다양 한 방법으로이 인스턴스를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-229">You can obtain this instance in various ways.</span></span> <span data-ttu-id="40902-230">쉬운 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-230">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="40902-231">문서 스키마를 준수 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-231">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="40902-232">스키마 유효성 검사 이후 정보 집합 (PSVI) 호출 하 여 추가 된 <xref:System.Xml.Schema.Extensions.Validate%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="40902-232">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="40902-233">호출 된 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 확장 메서드를 구현 하는 개체 검색 <xref:System.Xml.Schema.IXmlSchemaInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-233">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="40902-234">검색된 된 개체에서 가져올 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-234">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="40902-235">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XElement>, 형식은 <xref:System.Xml.Schema.XmlSchemaElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-235">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="40902-236">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XAttribute>, 형식은 <xref:System.Xml.Schema.XmlSchemaAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-236">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="40902-237">인스턴스를 만든 후는 <xref:System.Xml.Schema.XmlSchemaObject>, 특성의 유효성을 검사 하려면이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-237">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XAttribute("Lang", "C#")  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
    XAttribute lang = doc1.Element("Root").Attribute("Lang");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    // the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC";  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:simpleContent>  
                        <xsd:extension base='xsd:string'>  
                            <xsd:attribute name='Lang' use='required'>  
                                <xsd:simpleType>  
                                    <xsd:restriction base='xsd:token'>  
                                        <xsd:enumeration value='C#'/>  
                                        <xsd:enumeration value='VB'/>  
                                    </xsd:restriction>  
                                </xsd:simpleType>  
                            </xsd:attribute>  
                        </xsd:extension>  
                    </xsd:simpleContent>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Element("Root").Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="40902-238">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-238">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
Invalid Attribute /Root/@Lang  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-239">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-239">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="40902-240">유효성을 검사할 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-240">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="40902-241">유효성을 검사할 하위 트리를 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-241">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="40902-242">유효성을 검사할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-242">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="40902-243">판독기에서 유효성 검사 오류를 발견했을 때 수행되는 이벤트의 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-243">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="40902-244"><see langword="null" />인 경우 유효성 검사 오류가 있을 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-244">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="40902-245">PSVI(스키마 유효성 검사 이후 정보 집합)를 채울지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-245">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="40902-246"><see cref="T:System.Xml.Linq.XElement" /> 하위 트리가 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 준수하는지 확인하고, 선택적으로 XML 트리를 PSVI(스키마 유효성 검사 이후 정보 집합)로 채울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-246">Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40902-247">하위 트리의 유효성을 검사 하는이 메서드를 사용할 수 있습니다 (사용 하 여는 <xref:System.Xml.Linq.XElement> 하위 트리의 루트로) 스키마를 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-247">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema.</span></span> <span data-ttu-id="40902-248">일반적으로 하위 트리를 수정 하 고 여전히 해당 스키마를 준수 하는지 확인 하려는 경우이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-248">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="40902-249">전체 문서를 유효성을 검사할 수 있지만에 처리 시간이 적게 걸립니다 하위 트리.</span><span class="sxs-lookup"><span data-stu-id="40902-249">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="40902-250">하는 경우 `addSchemaInfo` 는 `true`, 다음이 메서드는 스키마 유효성 검사 이후 정보 집합 (PSVI)를 사용 하 여 XML 트리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="40902-250">If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="40902-251">PSVI 사용 하 여 XML 트리를 채우는 방법은 두 가지 측면이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-251">There are two aspects of populating the XML tree with the PSVI.</span></span>  
  
 <span data-ttu-id="40902-252">먼저 주석을 추가할 트리의 모든 노드는 이제 호출할 수 있습니다 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 요소 또는 트리에서 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="40902-252">First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.</span></span>  
  
 <span data-ttu-id="40902-253">둘째, 기본 요소 및 XSD에 정의 된 특성을 XML 트리에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-253">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="40902-254">중 하나를 호출 하 여는 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 메서드 경우 특정 요소 또는 특성으로 추가 된 XSD에서 기본 요소 또는 특성을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-254">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
 <span data-ttu-id="40902-255">전달 하는 경우 `null` 에 대 한 `validationEventHandler`,이 메서드를 유효성 검사 오류에 예외를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="40902-255">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="40902-256">유효성 검사 경고에는 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-256">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="40902-257">인스턴스를 사용 하면 하위 트리의 유효성을 검사할 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-257">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="40902-258">다양 한 방법으로이 인스턴스를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-258">You can obtain this instance in various ways.</span></span> <span data-ttu-id="40902-259">쉬운 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="40902-259">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="40902-260">문서 스키마를 준수 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-260">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="40902-261">스키마 유효성 검사 이후 정보 집합 (PSVI) 호출 하 여 추가 된 <xref:System.Xml.Schema.Extensions.Validate%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="40902-261">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="40902-262">호출 된 <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 확장 메서드를 구현 하는 개체 검색 <xref:System.Xml.Schema.IXmlSchemaInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-262">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="40902-263">검색된 된 개체에서 가져올 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-263">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="40902-264">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XElement>, 형식은 <xref:System.Xml.Schema.XmlSchemaElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-264">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="40902-265">표시 되 면를 <xref:System.Xml.Schema.XmlSchemaObject> 에 대 한는 <xref:System.Xml.Linq.XAttribute>, 형식은 <xref:System.Xml.Schema.XmlSchemaAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-265">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="40902-266">인스턴스를 만든 후는 <xref:System.Xml.Schema.XmlSchemaObject>,이 메서드를 사용 하 여 하위 트리의 유효성을 검사할 수 있습니다...</span><span class="sxs-lookup"><span data-stu-id="40902-266">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:simpleContent>  
                                    <xsd:extension base='xsd:string'>  
                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                    </xsd:extension>  
                                </xsd:simpleContent>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>c1</Child1>  
            <Child2>c2</Child2>  
        </Root>  
  
    Dim doc2 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>content1</Child1>  
            <Child3>content1</Child3>  
        </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="40902-267">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="40902-267">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="40902-268">XSD(XML 스키마 정의) 언어 유효성 검사 오류가 발생한 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="40902-268">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>