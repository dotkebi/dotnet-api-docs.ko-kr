<Type Name="TaskFactory&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskFactory&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="be0e07f55b1da5e54c47cb82442ddc1da238bb0d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698739" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="c3849-101">이 클래스의 메서드로 만든 <see cref="T:System.Threading.Tasks.Task`1" /> 개체의 반환 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-101">The return value of the <see cref="T:System.Threading.Tasks.Task`1" /> objects that the methods of this class create.</span></span></typeparam>
    <summary><span data-ttu-id="c3849-102"><see cref="T:System.Threading.Tasks.Task`1" /> 개체를 만들고 예약하도록 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-102">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-103">.NET Framework는 만들기 및 작업 예약에 대 한 두 팩터리를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-103">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="c3849-104">합니다 <xref:System.Threading.Tasks.TaskFactory> 클래스를 만듭니다 <xref:System.Threading.Tasks.Task> 고 <xref:System.Threading.Tasks.Task%601> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-104">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
-   <span data-ttu-id="c3849-105">합니다 <xref:System.Threading.Tasks.TaskFactory%601> 클래스를 만드는 <xref:System.Threading.Tasks.Task%601> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-105">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="c3849-106"><xref:System.Threading.Tasks.TaskFactory%601> 클래스를 사용 하면 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-106">The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="c3849-107">작업을 만들고 호출 하 여 즉시 시작 합니다 <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3849-107">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="c3849-108">만들고 기본이 아닌 인수를 필요로 하는 작업 실행이 메서드의 오버 로드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-108">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="c3849-109">로 시작 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> 메서드는 구성 값 이며 기본값은 태스크를 만드는 즉시 시작 하는 가장 쉬운 방법은 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="c3849-110">배열에서 작업 중 하나를 호출 하 여 완료 될 때 시작 되는 작업을 만들 합니다 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> 또는 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3849-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="c3849-111">호출 하 여 배열에는 모든 작업이 완료 될 때 시작 되는 작업 만들기를 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> 또는 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3849-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="c3849-112">정적 <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> 속성을 기본 반환 <xref:System.Threading.Tasks.TaskFactory%601> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="c3849-113">중 하나를 호출할 수도 있습니다는 <xref:System.Threading.Tasks.TaskFactory%601> 클래스 생성자를 구성 하는 <xref:System.Threading.Tasks.Task%601> 개체는 <xref:System.Threading.Tasks.TaskFactory%601> 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates.</span></span> <span data-ttu-id="c3849-114">다음 예제에서는 새 구성 <xref:System.Threading.Tasks.TaskFactory%601> 지정 된 취소 토큰, 작업 생성 옵션, 연속 옵션 및 사용자 지정된 작업 스케줄러는 작업을 만드는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]
 [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  
  
 <span data-ttu-id="c3849-115">대부분의 경우에서 수행 하면 새 <xref:System.Threading.Tasks.TaskFactory%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3849-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance.</span></span> <span data-ttu-id="c3849-116">대신 정적을 사용할 수 있습니다 <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> 기본값을 사용 하는 팩터리 개체를 반환 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-116">Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="c3849-117">새 작업을 시작 하거나 작업 연속을 정의 하려면 해당 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="c3849-118">예시의 경우에 대 한 예제를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="c3849-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3849-119">다음 예제에서는 정적 <xref:System.Threading.Tasks.Task%601.Factory%2A> 속성에 대 한 두 호출을는 <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3849-119">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c3849-120">첫 번째 작업에는 두 번째 사용자의 내 문서 디렉터리의 하위 디렉터리의 이름으로 채워지는 문자열 배열을 반환 하는 동안 사용자의 내 문서 디렉터리의 파일 이름으로 채워지는 문자열 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-120">The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="c3849-121">그런 다음 호출 하는 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> 실행 완료 된 후 두 작업에서 반환 된 배열에 있는 파일 및 디렉터리의 수에 대 한 정보를 표시 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3849-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c3849-122">모든 public 및 protected 멤버만 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-123">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-123">Task Parallel Library (TPL)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3849-124"><see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-124">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-125">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-125">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3849-126">기본 구성을 사용하여 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-126">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-127">이 생성자는 <xref:System.Threading.Tasks.TaskFactory%601> 기본 구성 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3849-127">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="c3849-128">합니다 <xref:System.Threading.Tasks.TaskCreationOptions> 속성은 초기화 <xref:System.Threading.Tasks.TaskCreationOptions.None>의 <xref:System.Threading.Tasks.TaskContinuationOptions> 속성으로 초기화 됩니다 <xref:System.Threading.Tasks.TaskContinuationOptions.None>, 및 <xref:System.Threading.Tasks.TaskScheduler> 속성은 현재 스케줄러로 초기화 (참조 <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3849-128">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-129">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-129">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="c3849-130">팩터리 메서드를 호출할 때 다른 취소 토큰을 명시적으로 지정하지 않는 경우 이 <see cref="T:System.Threading.Tasks.TaskFactory" />에서 만든 작업에 할당할 기본 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-130">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="c3849-131">기본 구성을 사용하여 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-131">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-132">이 생성자는 <xref:System.Threading.Tasks.TaskFactory%601> 기본 구성 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3849-132">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="c3849-133">합니다 <xref:System.Threading.Tasks.TaskCreationOptions> 속성은 초기화 <xref:System.Threading.Tasks.TaskCreationOptions.None>의 <xref:System.Threading.Tasks.TaskContinuationOptions> 속성으로 초기화 됩니다 <xref:System.Threading.Tasks.TaskContinuationOptions.None>, 및 <xref:System.Threading.Tasks.TaskScheduler> 속성은 현재 스케줄러로 초기화 (참조 <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3849-133">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-134">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-134">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="c3849-135">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />을 사용하여 만든 작업을 예약하는 데 사용할 기본 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-135">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="c3849-136">null 값은 현재 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 사용해야 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-136">A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler" /> should be used.</span></span></param>
        <summary><span data-ttu-id="c3849-137">지정된 구성을 사용하여 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-137">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-138">이 생성자를 사용 하 여는 <xref:System.Threading.Tasks.TaskCreationOptions> 속성은 초기화 <xref:System.Threading.Tasks.TaskCreationOptions.None>의 <xref:System.Threading.Tasks.TaskContinuationOptions> 속성으로 초기화 됩니다 <xref:System.Threading.Tasks.TaskContinuationOptions.None>, 및 <xref:System.Threading.Tasks.TaskScheduler> 속성으로 초기화 됩니다 `scheduler`에 없는 경우, `null`에서 현재 스케줄러로 인스턴스화될 경우 속성 (참조 <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3849-138">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-139">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-139">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-140">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-140">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-141">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-141">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="c3849-142">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />를 사용하여 작업을 만들 때 사용할 기본 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-142">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-143">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />를 사용하여 연속 작업을 만들 때 사용할 기본 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-143">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <summary><span data-ttu-id="c3849-144">지정된 구성을 사용하여 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-144">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-145">이 생성자를 사용 하 여는 <xref:System.Threading.Tasks.TaskCreationOptions> 속성은 초기화 `creationOptions`의 <xref:System.Threading.Tasks.TaskContinuationOptions> 속성은 초기화 `continuationOptions`, 및 <xref:System.Threading.Tasks.TaskScheduler> 속성은 현재 스케줄러로 초기화 (참조 <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3849-145">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-146"><paramref name="creationOptions" /> 또는 <paramref name="continuationOptions" />에 잘못된 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-146"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-147">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-147">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-148">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-148">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-149">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-149">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="c3849-150">팩터리 메서드를 호출할 때 다른 취소 토큰을 명시적으로 지정하지 않는 경우 이 <see cref="T:System.Threading.Tasks.TaskFactory" />에서 만든 작업에 할당할 기본 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-150">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-151">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />를 사용하여 작업을 만들 때 사용할 기본 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-151">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-152">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />를 사용하여 연속 작업을 만들 때 사용할 기본 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-152">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-153">이 <see cref="T:System.Threading.Tasks.TaskFactory`1" />을 사용하여 만든 작업을 예약하는 데 사용할 기본 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-153">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="c3849-154">Null 값은 <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />를 사용해야 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-154">A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> should be used.</span></span></param>
        <summary><span data-ttu-id="c3849-155">지정된 구성을 사용하여 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-155">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-156">이 생성자를 사용 하 여는 <xref:System.Threading.Tasks.TaskCreationOptions> 속성은 초기화 `creationOptions`의 <xref:System.Threading.Tasks.TaskContinuationOptions> 속성으로 초기화 됩니다 `continuationOptions`, 및 <xref:System.Threading.Tasks.TaskScheduler> 속성으로 초기화 됩니다 `scheduler`에 없는 경우, `null`에서 현재 스케줄러로 인스턴스화될 경우 속성 (참조 <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c3849-156">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-157"><paramref name="creationOptions" /> 또는 <paramref name="continuationOptions" />에 잘못된 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-157"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-158">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-158">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-159">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-159">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-160">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-160">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3849-161">이 작업 팩터리에 대한 기본 취소 토큰을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-161">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="c3849-162">이 작업 팩터리에 대한 기본 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-162">The default cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-163">이 속성은 태스크 팩터리 메서드를 호출 하는 동안 다른 취소 토큰 값을 명시적으로 지정 하지 않는 한이 팩터리에서 만든 모든 작업에 할당할 기본 취소 토큰을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-163">This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-164">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-165">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-165">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3849-166">이 작업 팩터리에 대한 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 열거형 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-166">Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="c3849-167">이 작업 팩터리에 대한 기본 연속 옵션을 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-167">One of the enumeration values that specifies the default continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-168">이 속성의 기본이이 팩터리에 대 한 연속 작업 옵션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-168">This property returns the default continuation options for this factory.</span></span> <span data-ttu-id="c3849-169">이 팩터리의 메서드를 호출 하는 동안 다른 옵션이 명시적으로 지정 하지 않는 한 모든 연속 작업을 만들 데 사용할가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-169">They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-170">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-170">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-171">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-171">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3849-172">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-172">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-173">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-173">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-174">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-174">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-175">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-175">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-176">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-176">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-177"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-177">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c3849-178">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-178">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-179">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-179">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-180">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-180">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-181"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-181">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-182"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-182"><paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-183">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-183">-or-</span></span> 
<span data-ttu-id="c3849-184"><paramref name="continuationFunction" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-184">The <paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-185"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-185">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-186">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-186">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-187">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-187">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-188">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-188">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-189">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-189">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-190"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-190">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-191">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-191">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-192">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-192">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-193">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-193">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-194">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-194">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-195"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-195">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-196">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-196">-or-</span></span> 
<span data-ttu-id="c3849-197"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-197">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-198"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-198">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-199">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-199">-or-</span></span> 
 <span data-ttu-id="c3849-200"><paramref name="continuationFunction" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-200"><paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-201"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-201">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-202">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-202">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-203">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-203">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-204">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-204">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-205">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-205">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-206"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-206">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-207">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-207">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-208">NotOn\* 또는 OnlyOn\* 값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-208">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="c3849-209">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-209">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-210">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-210">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-211">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-211">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-212"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-212">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-213"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-213">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-214">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-214">-or-</span></span> 
<span data-ttu-id="c3849-215"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-215">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-216"><paramref name="continuationOptions" /> 인수에서 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-216">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-217"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-217">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-218">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-218">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-219">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-219">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-220">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-220">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-221">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-221">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-222"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-222">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-223">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-223">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-224">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-224">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-225">NotOn\* 또는 OnlyOn\* 값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-225">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-226">만들어진 연속 작업을 예약하는 데 사용할 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-226">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-227">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-227">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-228">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-228">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-229">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-229">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-230"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-230">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-231">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-231">-or-</span></span> 
<span data-ttu-id="c3849-232"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-232">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-233">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-233">-or-</span></span> 
<span data-ttu-id="c3849-234"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-234">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-235"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-235">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-236"><paramref name="continuationOptions" />가 잘못된 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-236"><paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-237"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-237">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-238">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-238">-or-</span></span> 
<span data-ttu-id="c3849-239"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-239">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-240">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-240">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-241">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-241">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-242">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-242">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-243">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-243">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-244">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-244">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-245"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-245">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c3849-246">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-246">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-247">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-247">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-248">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-248">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-249"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-249">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-250"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-250">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-251">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-251">-or-</span></span> 
<span data-ttu-id="c3849-252"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-252">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-253"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-253">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-254">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-254">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-255">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-255">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-256">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-256">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-257">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-257">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-258">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-258">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-259"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-259">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-260">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-260">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-261">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-261">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-262">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-262">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-263">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-263">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-264"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-264">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-265">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-265">-or-</span></span> 
<span data-ttu-id="c3849-266"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-267"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-268">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-268">-or-</span></span> 
<span data-ttu-id="c3849-269"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-269">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-270"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-270">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-271">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-272">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-273">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-274">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-275">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-276"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-276">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-277">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-277">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-278">NotOn\* 또는 OnlyOn\* 값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-278">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="c3849-279">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-279">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-280">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-280">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-281">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-281">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-282"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-282">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-283"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-283">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-284">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-284">-or-</span></span> 
<span data-ttu-id="c3849-285"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-285">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-286"><paramref name="continuationOptions" /> 인수에서 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-286">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-287"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-287">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-288">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-288">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-289">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-289">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-290">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-290">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-291">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-291">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-292">계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-292">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-293"><paramref name="tasks" /> 배열의 모든 작업이 완료되었을 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-293">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-294">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-294">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-295">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-295">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-296">NotOn\* 또는 OnlyOn\* 값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-296">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-297">만들어진 연속 작업을 예약하는 데 사용할 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-297">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-298">제공된 작업 집합이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-298">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="c3849-299">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-299">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-300">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-300">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-301"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-301">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-302">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-302">-or-</span></span> 
<span data-ttu-id="c3849-303"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-303">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-304">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-304">-or-</span></span> 
<span data-ttu-id="c3849-305"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-305">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-306"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-306">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-307"><paramref name="continuationOptions" /> 인수에서 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-307">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-308"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-308">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-309">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-309">-or-</span></span> 
<span data-ttu-id="c3849-310"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-310">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-311">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-311">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-312">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-312">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-313">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-313">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3849-314">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-314">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-315">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-315">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-316">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-316">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-317">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-317">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-318">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-318">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-319"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-319">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c3849-320">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-320">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-321">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-321">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-322">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-322">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-323"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-323">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-324"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-324">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-325">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-325">-or-</span></span> 
<span data-ttu-id="c3849-326"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-326">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-327"><paramref name="tasks" /> 배열에 null 값이 있거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-327">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-328">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-328">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-329">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-329">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-330">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-330">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-331">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-331">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-332"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-332">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-333">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-333">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-334">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-334">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-335">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-335">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-336">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-336">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-337"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-337">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-338">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-338">-or-</span></span> 
<span data-ttu-id="c3849-339"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-339">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-340"><paramref name="tasks" /> 배열이 null입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-340">The <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c3849-341">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-341">-or-</span></span> 
<span data-ttu-id="c3849-342"><paramref name="continuationFunction" /> 인수가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-342">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-343"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-343">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-344">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-344">-or-</span></span> 
<span data-ttu-id="c3849-345"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-345">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-346">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-346">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-347">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-347">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-348">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-348">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-349">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-349">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-350"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-350">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-351">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-351">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-352"><see langword="NotOn*" /> 또는 <see langword="OnlyOn*" />값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-352">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="c3849-353">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-353">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-354">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-354">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-355">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-355">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-356"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-356">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-357"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-357">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-358">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-358">-or-</span></span> 
<span data-ttu-id="c3849-359"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-359">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-360"><paramref name="continuationOptions" /> 인수가 잘못된 열거형 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-360">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-361"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-361">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-362">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-362">-or-</span></span> 
<span data-ttu-id="c3849-363"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-363">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-364">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-364">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-365">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-365">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-366">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-366">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c3849-367">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-367">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-368"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-368">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-369">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-369">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-370">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-370">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-371"><see langword="NotOn*" /> 또는 <see langword="OnlyOn*" />값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-371">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-372">만들어진 연속 작업을 예약하는 데 사용할 작업 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-372">The task scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-373">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-373">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-374">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-374">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-375">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-375">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-376"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-376">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-377">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-377">-or-</span></span> 
<span data-ttu-id="c3849-378"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-378">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-379">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-379">-or-</span></span> 
<span data-ttu-id="c3849-380"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-380">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-381"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-381">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-382">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-382">-or-</span></span> 
<span data-ttu-id="c3849-383"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-383">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-384"><paramref name="continuationOptions" /> 인수에서 잘못된 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-384">The <paramref name="continuationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-385"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-385">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-386">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-386">-or-</span></span> 
<span data-ttu-id="c3849-387"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-387">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-388">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-388">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-389">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-389">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-390">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-390">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-391">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-391">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-392">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-392">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-393"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-393">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c3849-394">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-394">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-395">새 연속 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-395">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-396">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-396">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-397"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-397">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-398"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-398">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-399">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-399">-or-</span></span> 
<span data-ttu-id="c3849-400"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-400">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-401"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-401">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-402">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-402">-or-</span></span> 
<span data-ttu-id="c3849-403"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-403">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-404">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-404">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-405">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-405">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-406">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-406">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-407">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-407">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-408">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-408">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-409"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-409">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-410">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-410">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c3849-411">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-411">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-412">새 연속 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-412">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-413">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-413">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-414"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-414">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-415">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-415">-or-</span></span> 
<span data-ttu-id="c3849-416"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-416">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-417"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-417">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-418">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-418">-or-</span></span> 
<span data-ttu-id="c3849-419"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-419">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-420"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-420">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-421">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-421">-or-</span></span> 
<span data-ttu-id="c3849-422"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-422">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-423">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-423">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-424">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-424">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-425">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-425">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-426">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-426">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-427">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-427">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-428"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-428">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-429">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-429">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-430"><see langword="NotOn*" /> 또는 <see langword="OnlyOn*" />값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-430">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="c3849-431">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-431">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-432">새 연속 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-432">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-433">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-433">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-434"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-434">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-435"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-435">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-436">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-436">-or-</span></span> 
<span data-ttu-id="c3849-437"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-438"><paramref name="continuationOptions" /> 인수가 잘못된 열거형 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-438">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-439"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-439">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-440">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-440">-or-</span></span> 
<span data-ttu-id="c3849-441"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-441">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-442">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-443">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-444">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-444">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c3849-445">선행 <paramref name="tasks" />의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-445">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c3849-446">작업이 완료될 때 계속할 작업의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c3849-447"><paramref name="tasks" /> 배열에서 작업이 완료될 때 비동기로 실행할 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-447">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-448">새 연속 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-448">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c3849-449">만들어진 연속 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-449">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="c3849-450"><see langword="NotOn*" /> 또는 <see langword="OnlyOn*" />값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-450">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-451">만들어진 연속 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 예약하는 데 사용할 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-451">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c3849-452">제공된 집합에서 모든 작업이 완료될 때 시작할 연속 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-452">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c3849-453">새 연속 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-453">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-454">작업은 작업이 완료 되 면 이러한 상태 중 하나: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, 또는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-454">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-455"><paramref name="tasks" /> 배열이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-455">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-456">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-456">-or-</span></span> 
<span data-ttu-id="c3849-457"><paramref name="continuationFunction" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-457">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-458">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-458">-or-</span></span> 
<span data-ttu-id="c3849-459"><paramref name="scheduler" /> 인수가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-459">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3849-460"><paramref name="tasks" /> 배열에 null 값이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-460">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c3849-461">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-461">-or-</span></span> 
<span data-ttu-id="c3849-462"><paramref name="tasks" /> 배열이 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-462">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-463"><paramref name="continuationOptions" /> 인수는 잘못된 TaskContinuationOptions 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-463">The <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-464"><paramref name="tasks" /> 배열에 있는 요소 중 하나가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-464">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c3849-465">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-465">-or-</span></span> 
<span data-ttu-id="c3849-466"><paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-466">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-467">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-467">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c3849-468">연속 작업을 사용하여 작업 연결</span><span class="sxs-lookup"><span data-stu-id="c3849-468">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c3849-469">작업 취소</span><span class="sxs-lookup"><span data-stu-id="c3849-469">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3849-470">이 작업 팩터리에 대한 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 열거형 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-470">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="c3849-471">이 작업 팩터리에 대한 기본 만들기 옵션을 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-471">One of the enumeration values that specifies the default creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-472">이 속성의 기본이이 팩터리에 대 한 만들기 옵션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-472">This property returns the default creation options for this factory.</span></span> <span data-ttu-id="c3849-473">이 팩터리의 메서드를 호출 하는 동안 다른 옵션이 명시적으로 지정 하지 않는 한 모든 작업을 만들려면 사용할가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-473">They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-474">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-474">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-475">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-475">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3849-476">작업 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-476">Creates a task instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-477">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-477">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-478">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-478">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c3849-479">완료될 때 <paramref name="endMethod" />의 처리를 트리거해야 하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-479">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-480">완료된 <paramref name="asyncResult" />를 처리하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-480">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="c3849-481">지정된 <see cref="T:System.IAsyncResult" />가 완료될 때 End 메서드 함수를 실행하는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-481">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c3849-482">비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-482">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-483"><paramref name="asyncResult" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-483">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-484">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-484">-or-</span></span> 
<span data-ttu-id="c3849-485"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-485">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-486">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-486">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-487">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-487">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="c3849-488">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-488">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-489">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-489">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-490"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-490">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c3849-491">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-491">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-492">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-492">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-493">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-493">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-494">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-494">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-495"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-495">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-496">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-496">-or-</span></span> 
<span data-ttu-id="c3849-497"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-497">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-498">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-498">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-499">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-499">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c3849-500">완료될 때 <paramref name="endMethod" />의 처리를 트리거해야 하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-500">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-501">완료된 <paramref name="asyncResult" />를 처리하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-501">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-502">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-502">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-503">지정된 <see cref="T:System.IAsyncResult" />가 완료될 때 End 메서드 함수를 실행하는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-503">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c3849-504">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-504">A task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-505"><paramref name="asyncResult" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-505">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-506">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-506">-or-</span></span> 
<span data-ttu-id="c3849-507"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-507">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-508"><paramref name="creationOptions" /> 인수에서 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-508">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-509">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-509">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-510">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-510">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="c3849-511">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-511">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-512">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-512">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-513"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-513">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-514">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-514">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-515">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-515">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-516">비동기 작업을 나타내는 만들어진 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-516">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-517">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-517">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-518">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-518">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-519"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-519">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-520">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-520">-or-</span></span> 
<span data-ttu-id="c3849-521"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-521">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-522"><paramref name="creationOptions" /> 인수에서 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-522">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-523">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-523">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-524">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-524">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c3849-525">완료될 때 <paramref name="endMethod" />의 처리를 트리거해야 하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-525">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-526">완료된 <paramref name="asyncResult" />를 처리하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-526">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-527">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-527">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-528">End 메서드를 실행하는 작업을 예약하는 데 사용할 작업 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-528">The task scheduler that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="c3849-529">지정된 <see cref="T:System.IAsyncResult" />가 완료될 때 End 메서드 함수를 실행하는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-529">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c3849-530">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-530">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-531"><paramref name="asyncResult" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-531">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-532">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-532">-or-</span></span> 
<span data-ttu-id="c3849-533"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-533">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-534">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-534">-or-</span></span> 
<span data-ttu-id="c3849-535"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-535">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-536"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-536">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-537">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-537">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-538">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-538">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-539"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-539">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-540">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-540">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-541">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-541">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-542"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-542">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-543"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-543">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c3849-544">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-544">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-545">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-545">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-546">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-546">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-547">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-547">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-548"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-548">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-549">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-549">-or-</span></span> 
<span data-ttu-id="c3849-550"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-550">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-551">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-551">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-552">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-552">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-553"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-553">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-554">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-554">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-555">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-555">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-556"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-556">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-557"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-557">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-558">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-558">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-559">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-559">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-560">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-560">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-561">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-561">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-562">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-562">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-563"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-563">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-564">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-564">-or-</span></span> 
<span data-ttu-id="c3849-565"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-565">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-566"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-566">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-567">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-567">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-568">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-568">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-569"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-569">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c3849-570"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-570">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-571">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-571">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-572">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-572">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-573"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-573">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c3849-574"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-574">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-575"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-575">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c3849-576">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-576">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-577">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-577">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-578">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-578">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-579">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-579">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-580"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-580">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-581">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-581">-or-</span></span> 
<span data-ttu-id="c3849-582"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-582">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-583">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-583">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-584">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-584">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-585"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-585">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c3849-586"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-586">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-587">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-587">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-588">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-588">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-589"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-589">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c3849-590"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-590">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-591"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-591">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-592">만들어진 <see cref="T:System.Threading.Tasks.Task`1" />의 동작을 제어하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-592">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c3849-593">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-593">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-594">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-594">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-595">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-595">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-596">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-596">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-597"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-597">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-598">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-598">-or-</span></span> 
<span data-ttu-id="c3849-599"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-599">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-600"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-600">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-601">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-601">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-602">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-602">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-603"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-603">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c3849-604"><paramref name="beginMethod" /> 대리자에 전달되는 세 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-604">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c3849-605"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-605">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-606">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-606">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-607">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-607">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-608"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-608">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c3849-609"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-609">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c3849-610"><paramref name="beginMethod" /> 대리자에 전달되는 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-610">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-611"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-611">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c3849-612">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-612">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-613">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-613">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-614">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-614">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-615">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-615">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-616"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-616">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-617">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-617">-or-</span></span> 
<span data-ttu-id="c3849-618"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-618">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-619">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-619">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-620">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-620">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c3849-621"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-621">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c3849-622"><paramref name="beginMethod" /> 대리자에 전달되는 세 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-622">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c3849-623"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-623">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c3849-624">비동기 작업을 시작하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-624">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c3849-625">비동기 작업을 종료하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-625">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3849-626"><paramref name="beginMethod" /> 대리자에 전달되는 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-626">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c3849-627"><paramref name="beginMethod" /> 대리자에 전달되는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-627">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c3849-628"><paramref name="beginMethod" /> 대리자에 전달되는 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-628">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-629"><paramref name="beginMethod" /> 대리자가 사용할 데이터가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-629">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-630">만들어진 작업의 동작을 제어하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-630">An object that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-631">비동기 프로그래밍 모델 패턴을 따르는 Begin 및 End 메서드 쌍을 나타내는 작업을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-631">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c3849-632">비동기 작업을 나타내는 만들어진 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-632">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-633">이 메서드에 의해 throw 된 예외 throw를 `beginMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-633">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c3849-634">에 대 한 예외 `endmethod` 반환된 된 작업에서 대기 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-634">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-635"><paramref name="beginMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-635">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-636">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-636">-or-</span></span> 
<span data-ttu-id="c3849-637"><paramref name="endMethod" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-637">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-638"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-638">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-639">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-639">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-640">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-640">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3849-641">이 작업 팩터리에 대한 작업 스케줄러를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-641">Gets the task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="c3849-642">이 작업 팩터리에 대한 작업 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-642">The task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-643">이 속성에는이 팩터리에 대 한 기본 스케줄러를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-643">This property returns the default scheduler for this factory.</span></span> <span data-ttu-id="c3849-644">이 팩터리의 메서드를 호출 하는 동안 다른 스케줄러 명시적으로 지정 하지 않으면 모든 작업을 예약 하려면 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-644">It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="c3849-645">이 속성을 반환 하는 경우 `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-645">If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-646">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-646">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-647">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-647">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3849-648">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-648">Creates and starts a task.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-649">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-649">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-650">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-650">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-651">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-651">A function delegate that returns the future result to be available through the task.</span></span></param>
        <summary><span data-ttu-id="c3849-652">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-652">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-653">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-653">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-654">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-654">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-655">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-655">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-656"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-656">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-657">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-657">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-658">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-658">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-659">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-659">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-660"><paramref name="function" /> 대리자에서 사용할 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-660">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c3849-661">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-661">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-662">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-662">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-663">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-663">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-664">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-664">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-665"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-665">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-666">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-666">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-667">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-667">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-668">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-668">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-669">새 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-669">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="c3849-670">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-670">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-671">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-671">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-672">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-672">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-673">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-673">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-674"><paramref name="cancellationToken" />을 만든 취소 토큰 원본이 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-674">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-675"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-675">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-676">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-676">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-677">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-677">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-678">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-678">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-679">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-679">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-680">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-680">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-681">시작된 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-681">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-682">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-682">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-683">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-683">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-684"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-684">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-685"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-685">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-686">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-686">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-687">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-687">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-688">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-688">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-689"><paramref name="function" /> 대리자에서 사용할 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-689">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-690">새 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-690">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="c3849-691">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-691">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-692">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-692">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-693">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-693">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-694">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-694">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-695"><paramref name="cancellationToken" />을 만든 취소 토큰 원본이 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-695">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-696"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-696">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-697">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-697">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-698">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-698">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-699">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-699">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-700"><paramref name="function" /> 대리자에서 사용할 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-700">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-701">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-701">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-702">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-702">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-703">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-703">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-704">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-704">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-705">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-705">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-706"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-706">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-707"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-707">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-708">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-708">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-709">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-709">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-710">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-710">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-711">새 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-711">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-712">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-712">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-713">만들어진 작업을 예약하는 데 사용할 작업 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-713">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-714">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-714">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-715">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-715">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-716">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-716">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-717">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-717">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-718"><paramref name="cancellationToken" />을 만든 취소 토큰 원본이 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-718">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-719"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-719">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-720">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-720">-or-</span></span> 
<span data-ttu-id="c3849-721"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-721">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-722"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-722">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-723">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-723">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-724">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-724">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="c3849-725">작업을 통해 사용할 수 있는 이후 결과를 반환하는 함수 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-725">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="c3849-726"><paramref name="function" /> 대리자에서 사용할 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-726">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c3849-727">새 작업에 할당할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-727">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c3849-728">만들어진 작업의 동작을 제어하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-728">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c3849-729">만들어진 작업을 예약하는 데 사용할 작업 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-729">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="c3849-730">작업을 만들고 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-730">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c3849-731">시작된 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-731">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3849-732">호출 `StartNew` 중 하나를 사용 하 여 작업을 만드는 기능적으로 동일 합니다 <xref:System.Threading.Tasks.Task%601> 생성자 및 호출은 <xref:System.Threading.Tasks.Task.Start%2A> 실행에 대 한 예약 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="c3849-732">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c3849-733">그러나 생성 및 일정 예약을 구분 해야, 하지 않는 한, `StartNew` 단순성 및 성능에 대 한 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-733">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c3849-734"><paramref name="cancellationToken" />을 만든 취소 토큰 원본이 이미 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-734">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3849-735"><paramref name="function" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-735">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c3849-736">또는</span><span class="sxs-lookup"><span data-stu-id="c3849-736">-or-</span></span> 
<span data-ttu-id="c3849-737"><paramref name="scheduler" /> 인수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3849-737">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3849-738"><paramref name="creationOptions" /> 매개 변수가 잘못된 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3849-738">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c3849-739">TPL(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="c3849-739">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c3849-740">TPL과 기타 비동기 패턴 사용</span><span class="sxs-lookup"><span data-stu-id="c3849-740">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>