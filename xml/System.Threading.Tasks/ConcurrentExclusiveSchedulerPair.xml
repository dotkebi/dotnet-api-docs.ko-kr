<Type Name="ConcurrentExclusiveSchedulerPair" FullName="System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
  <Metadata><Meta Name="ms.openlocfilehash" Value="92a780cf199a5e763dc8f59cb964fe7c1a739095" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721529" /></Metadata><TypeSignature Language="C#" Value="public class ConcurrentExclusiveSchedulerPair" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConcurrentExclusiveSchedulerPair extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />
  <TypeSignature Language="VB.NET" Value="Public Class ConcurrentExclusiveSchedulerPair" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConcurrentExclusiveSchedulerPair" />
  <TypeSignature Language="F#" Value="type ConcurrentExclusiveSchedulerPair = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Concurrent={ConcurrentTaskCountForDebugger}, Exclusive={ExclusiveTaskCountForDebugger}, Mode={ModeForDebugger}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair/DebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97a08-101">동시 작업을 동시에 실행하고 전용 작업은 실행하지 않으면서 작업을 실행하도록 조정하는 작업 스케줄러를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-101">Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97a08-102">다음 예제에서는 사용 된 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-102">The following example shows the use of the <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair> class.</span></span> <span data-ttu-id="97a08-103">판독기는 스케줄러의 부분을 동시에 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-103">Readers run on the concurrent part of the scheduler.</span></span> <span data-ttu-id="97a08-104">스케줄러의 전용 부분에 작성기를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-104">The writer runs on the exclusive part of the scheduler.</span></span> <span data-ttu-id="97a08-105">이 코드 예제는에 대해 제공 된 큰 예제의 일부 합니다 [방법: 데이터 흐름 블록의 작업 스케줄러 지정](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-105">This code example is part of a larger example provided for the [How to: Specify a Task Scheduler in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) topic.</span></span>  
  
 [!code-csharp[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/cs/writerreaderswinforms/form1.cs#4)]
 [!code-vb[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/vb/writerreaderswinforms/form1.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97a08-106"><see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-106">Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentExclusiveSchedulerPair ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentExclusiveSchedulerPair();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97a08-107"><see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-107">Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97a08-108">다음 예제에서는 사용 된 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.%23ctor%2A> 새 생성자 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-108">The following example shows the use of the <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.%23ctor%2A> constructor to create a new <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair> object.</span></span> <span data-ttu-id="97a08-109">이 코드 예제는에 대해 제공 된 큰 예제의 일부 합니다 [방법: 데이터 흐름 블록의 작업 스케줄러 지정](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-109">This code example is part of a larger example provided for the [How to: Specify a Task Scheduler in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) topic.</span></span>  
  
 [!code-csharp[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/cs/writerreaderswinforms/form1.cs#4)]
 [!code-vb[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/vb/writerreaderswinforms/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler taskScheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentExclusiveSchedulerPair(System::Threading::Tasks::TaskScheduler ^ taskScheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" Usage="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair taskScheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="taskScheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="taskScheduler"><span data-ttu-id="97a08-110">이 쌍을 실행해야 하는 대상 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-110">The target scheduler on which this pair should execute.</span></span></param>
        <summary><span data-ttu-id="97a08-111">지정된 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-111">Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> class that targets the specified scheduler.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler taskScheduler, int32 maxConcurrencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentExclusiveSchedulerPair(System::Threading::Tasks::TaskScheduler ^ taskScheduler, int maxConcurrencyLevel);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair : System.Threading.Tasks.TaskScheduler * int -&gt; System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" Usage="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair (taskScheduler, maxConcurrencyLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="taskScheduler" Type="System.Threading.Tasks.TaskScheduler" />
        <Parameter Name="maxConcurrencyLevel" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="taskScheduler"><span data-ttu-id="97a08-112">이 쌍을 실행해야 하는 대상 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-112">The target scheduler on which this pair should execute.</span></span></param>
        <param name="maxConcurrencyLevel"><span data-ttu-id="97a08-113">동시에 실행할 최대 작업 수입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-113">The maximum number of tasks to run concurrently.</span></span></param>
        <summary><span data-ttu-id="97a08-114">최대 동시성 수준을 사용하여 지정된 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-114">Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> class that targets the specified scheduler with a maximum concurrency level.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler taskScheduler, int32 maxConcurrencyLevel, int32 maxItemsPerTask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentExclusiveSchedulerPair(System::Threading::Tasks::TaskScheduler ^ taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair : System.Threading.Tasks.TaskScheduler * int * int -&gt; System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" Usage="new System.Threading.Tasks.ConcurrentExclusiveSchedulerPair (taskScheduler, maxConcurrencyLevel, maxItemsPerTask)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="taskScheduler" Type="System.Threading.Tasks.TaskScheduler" />
        <Parameter Name="maxConcurrencyLevel" Type="System.Int32" />
        <Parameter Name="maxItemsPerTask" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="taskScheduler"><span data-ttu-id="97a08-115">이 쌍을 실행해야 하는 대상 스케줄러입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-115">The target scheduler on which this pair should execute.</span></span></param>
        <param name="maxConcurrencyLevel"><span data-ttu-id="97a08-116">동시에 실행할 최대 작업 수입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-116">The maximum number of tasks to run concurrently.</span></span></param>
        <param name="maxItemsPerTask"><span data-ttu-id="97a08-117">쌍으로 사용되는 예약된 각 내부 작업을 처리하는 최대 작업 수입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-117">The maximum number of tasks to process for each underlying scheduled task used by the pair.</span></span></param>
        <summary><span data-ttu-id="97a08-118">최대 동시성 수준과 예약된 최대 작업 수(단위로 처리될 수도 있음)와 함께 지정한 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화하고 보호 수준에 서명합니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-118">Initializes a new instance of the <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> class that targets the specified scheduler with a maximum concurrency level and a maximum number of scheduled tasks that may be processed as a unit.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberSignature Language="F#" Value="member this.Complete : unit -&gt; unit" Usage="concurrentExclusiveSchedulerPair.Complete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97a08-119">스케줄러 쌍에게 추가 작업을 수락할 수 없음을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-119">Informs the scheduler pair that it should not accept any more tasks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97a08-120">호출 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete%2A> 선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-120">Calling <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete%2A> is optional.</span></span> <span data-ttu-id="97a08-121">에 의존 하는 경우에 필요한 것은 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion%2A> 모든 처리가 완료 되었음을 나타내는 알림에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-121">It is necessary only if you're relying on the <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion%2A> property for notification that all processing has been completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97a08-122">스케줄러가 처리를 완료하면 완료될 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-122">Gets a <see cref="T:System.Threading.Tasks.Task" /> that will complete when the scheduler has completed processing.</span></span></summary>
        <value><span data-ttu-id="97a08-123">스케줄러 처리를 마칠 때 완료되는 비동기 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-123">The asynchronous operation that will complete when the scheduler finishes processing.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrentScheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler ConcurrentScheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler ConcurrentScheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrentScheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ ConcurrentScheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConcurrentScheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97a08-124">이 쌍에서 다른 작업과 동시에 실행될 수 있는 이 쌍에 대한 작업을 예약하는 데 사용할 수 있는 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-124">Gets a <see cref="T:System.Threading.Tasks.TaskScheduler" /> that can be used to schedule tasks to this pair that may run concurrently with other tasks on this pair.</span></span></summary>
        <value><span data-ttu-id="97a08-125">동시에 작업을 예약하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-125">An object that can be used to schedule tasks concurrently.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97a08-126">다음 예제에서는 사용 된 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler%2A> 판독기를 실행 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-126">The following example shows the use of the <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler%2A> property to run a reader.</span></span> <span data-ttu-id="97a08-127">이 코드 예제는에 대해 제공 된 큰 예제의 일부 합니다 [방법: 데이터 흐름 블록의 작업 스케줄러 지정](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-127">This code example is part of a larger example provided for the [How to: Specify a Task Scheduler in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) topic.</span></span>  
  
 [!code-csharp[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/cs/writerreaderswinforms/form1.cs#4)]
 [!code-vb[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/vb/writerreaderswinforms/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveScheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler ExclusiveScheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler ExclusiveScheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExclusiveScheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ ExclusiveScheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveScheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97a08-128">이 쌍에서 다른 작업과 관련하여 단독으로 실행되어야 하는 이 쌍에 대한 작업을 예약하는 데 사용할 수 있는 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-128">Gets a <see cref="T:System.Threading.Tasks.TaskScheduler" /> that can be used to schedule tasks to this pair that must run exclusively with regards to other tasks on this pair.</span></span></summary>
        <value><span data-ttu-id="97a08-129">다른 작업과 동시에 실행되지 않는 작업을 예약하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-129">An object that can be used to schedule tasks that do not run concurrently with other tasks.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97a08-130">다음 예제에서는 사용 된 <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler%2A> 작성기를 실행 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-130">The following example shows the use of the <xref:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler%2A> property to run a writer.</span></span> <span data-ttu-id="97a08-131">이 코드 예제는에 대해 제공 된 큰 예제의 일부 합니다 [방법: 데이터 흐름 블록의 작업 스케줄러 지정](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="97a08-131">This code example is part of a larger example provided for the [How to: Specify a Task Scheduler in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-a-task-scheduler-in-a-dataflow-block.md) topic.</span></span>  
  
 [!code-csharp[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/cs/writerreaderswinforms/form1.cs#4)]
 [!code-vb[TPLDataflow_WriterReadersWinForms#4](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_writerreaderswinforms/vb/writerreaderswinforms/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>