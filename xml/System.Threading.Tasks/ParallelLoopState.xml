<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f0237c0ab6a5df247c24cc0cab4d856a2a5ef27" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690526" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="77550-101">병렬 루프의 반복이 다른 반복과 상호 작용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="77550-102">이 클래스의 인스턴스는 <see cref="T:System.Threading.Tasks.Parallel" /> 클래스에 의해 각 루프에 제공됩니다. 코드에 인스턴스를 만들 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-103">이 클래스의 인스턴스를 인스턴스화할 수 없습니다는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="77550-104">에 대 한 호출에서 인수로 컴파일러에서 자동으로 생성 되는 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 또는 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="77550-105">예제에서는 그림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="77550-106">와 같은 생성 `for` 및 `foreach` (에서 C#) 및 `For` 및 `For Each` (Visual Basic)에서는 순차적으로 또는 집합의 첫 번째 개체에서 가장 높은 가장 낮은 인덱스에서 마지막까지 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="77550-107">반면에 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 및 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="77550-108">루프의 개별 반복을 병렬로 실행할 때문에 시작할 수 있으며 순서에 관계 없이 종료.</span><span class="sxs-lookup"><span data-stu-id="77550-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="77550-109"><xref:System.Threading.Tasks.ParallelLoopState> 클래스를 사용 하면 서로 상호 작용에 대 한 병렬 루프의 개별 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="77550-110"><xref:System.Threading.Tasks.ParallelLoopState> 클래스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="77550-111">현재 반복을 종료 하 고 호출 하 여 처음부터 모든 추가 반복을 방지 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="77550-112">실행을 이미 시작 하는 반복에는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="77550-113">호출 하 여 실행에서 현재 인덱스 보다 큰 인덱스를 사용 하 여 반복을 방지 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-114">실행을 이미 시작 하는 반복에는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="77550-115">값을 검색 하 여 루프 반복에서 예외가 발생 했는지 여부를 결정 합니다 <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="77550-116">루프의 반복에 호출할지 여부를 확인 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 의 값을 검색 하는 메서드는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="77550-117">이 속성을 사용 하 여 호출 하기 전에 시작 하는 루프의 반복에서 반환할 수는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드 되었지만 여전히 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="77550-118">루프의 반복에 호출할지 여부를 확인 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 또는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드 값을 검색 하 여 예외를 throw 했는지 또는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="77550-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="77550-119">인덱스의 값을 검색 하 여 Break가 호출 하는 반복의 인덱스 보다 큽니다. 장기 실행 반복을 종료 합니다 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-120">다음 예제에서는 동시에 최대 100 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-121">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-122">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="77550-123">예제 인덱스 보다 큽니다. 반복의에서 출력으로는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 호출 후 시작 하는 속성 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="77550-124">루프의 반복 될 때 실행 되는 것도 가능성이 있으므로 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 되 면 반복 될 때마다 호출 합니다 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복에 호출할지 여부를 확인 하는 속성을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-125">속성 값이 `true`의 값을 확인 하는 반복을 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복의 인덱스 값 보다 큰 경우 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="77550-126"><see cref="T:System.Threading.Tasks.ParallelLoopState" /> 인스턴스는 인스턴스가 제공 된 루프의 본문 내 에서만 사용 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="77550-127">제공 된 사용 하기에 안전한 것 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 연결된 루프 후 인스턴스를 명시적으로 해제 다른 스레드에 안전 않으며 언제 든 지 액세스 이러한 스레드에 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="77550-128">다른 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 각 스레드는 루프에 관련 된 인스턴스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-129">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="77550-130">시스템의 편의상 빨리 수행하는 현재 반복 이외에 <see cref="T:System.Threading.Tasks.Parallel" /> 루프의 실행이 중단되도록 통신합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 현재 반복 후 반복을 실행 해야 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="77550-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="77550-132">효과적으로 모든 추가 반복 루프를 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="77550-133">그러나 이미 실행을 시작 하는 모든 반복 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="77550-134">예를 들어 경우 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 반복 0에서 1,000, 모든 반복을 100 보다 작은 해야 계속 실행 되지만 않은 아직 시작 되지 않는 1000 101 ~에서 반복 실행 되어 병렬 루프의 100 번째 반복에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="77550-135">장기 실행 반복 실행 이미 수에 대 한 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 설정 합니다 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 인덱스의 현재 값 보다 작으면 현재 반복의 인덱스 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="77550-136">경쟁 실행에서 가장 낮은 중단 반복 인덱스 보다 반복을 중지 하려면 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="77550-137">확인 여부는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="77550-138">해당 항목이 있는 인덱스 보다 큰 경우 반복에서 종료를 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="77550-139">예제에서는 그림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="77550-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 순서는 데이터 원본에 있는 검색 기반 알고리즘에서 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-141">다음 예제에서는 동시에 최대 100 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-142">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-143">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="77550-144">예제 인덱스 보다 큽니다. 반복의에서 출력으로는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 호출 후 시작 하는 속성 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="77550-145">루프의 반복 될 때 실행 되는 것도 가능성이 있으므로 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 되 면 반복 될 때마다 호출 합니다 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복에 호출할지 여부를 확인 하는 속성을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-146">속성 값이 `true`의 값을 확인 하는 반복을 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복의 인덱스 값 보다 큰 경우 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="77550-147"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드가 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="77550-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="77550-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 및 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />은 동일한 루프의 반복을 조합하여 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-149">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77550-150">루프 반복이 해당 반복에서 처리되지 않은 예외를 throw했는지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77550-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="77550-151">처리되지 않은 예외를 throw했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-152">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77550-153">루프 반복에서 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드를 호출했는지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77550-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="77550-154"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드를 호출하여 반복에서 루프를 중지했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-155">장기 실행 루프의 반복에 대 한 값을 검색할 수 있습니다는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 결정할 여부를 루프의 반복 하는 속성을 호출 하기 전에 실행을 시작한는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="77550-156">값을 사용할 수 있습니다는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 속성을 즉시 반환 해야 또는 정상적으로 실행 되는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-157">다음 예제에서는 동시에 최대 10,000 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-158">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-159">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="77550-160">루프의 반복 될 때 실행 되는 것도 가능성이 있으므로 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 되는 람다 식 호출을 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 다른 반복에 호출할지 여부를 확인 하는 메서드를 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="77550-161">반환 하는 경우 `true`, 반복 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-162">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77550-163"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />가 호출된 루프의 가장 낮은 반복을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77550-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="77550-164"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />이 호출된 가장 낮은 반복입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="77550-165"><see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 루프의 경우 값은 내부에서 생성된 인덱스를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-166">여러 번 반복 호출 하는 병렬 루프의 수를 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-167">이 값은 호출 하는 반복의 가장 작은 인덱스 그럴 경우 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="77550-168">루프의 반복이 없는 호출 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>,이 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="77550-169">속성 값에 대 한 호출의 영향을 받지 않습니다는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="77550-170">장기 실행 반복 호출 하는 반복 후 모든 반복에는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드 실행할 필요가 없습니다를 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성에 대 한 호출 하기 전에 실행을 시작 하는 반복을 종료 하는 데 사용 됩니다는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-171">경쟁 실행에서 가장 낮은 중단 반복 인덱스 보다 반복을 중지 하려면 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="77550-172">확인 여부는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="77550-173">해당 항목이 있는 인덱스 보다 큰 경우 반복에서 종료를 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="77550-174">예제에서는 그림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-175">다음 예제에서는 동시에 최대 100 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-176">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-177">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="77550-178">반복 인덱스 보다 큽니다. 그래야 합니다 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 호출 후부터 속성 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드 하지만 실행을 이미 시작 하는 모든 반복에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="77550-179">각 반복에서 완료를 방지 하려면 호출을 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복에 호출할지 여부를 확인 하는 메서드를 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-180">따라서 반복의 값을 확인 하는 경우는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복의 인덱스 값 보다 큰 경우 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="77550-181">때문에 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 값 병렬 루프 외부에서 범위를 벗어나면 해당 값을 유지 하려는 경우 루프 외부에서 표시 되는 변수에 할당 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-182">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77550-183">루프의 현재 반복이 해당 반복 또는 다른 반복에서 수행한 요청에 따라 종료되어야 하는지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77550-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="77550-184">현재 반복이 종료되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="77550-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-185">합니다 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성이 `true` 다음 조건 중 하나에서:</span><span class="sxs-lookup"><span data-stu-id="77550-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="77550-186">호출 하 여 루프의 반복 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 또는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="77550-187">루프의 반복 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="77550-188">루프 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="77550-189">이 속성이 `true`, <xref:System.Threading.Tasks.Parallel> 클래스 추가 반복 루프의 실행을 시작 하지 못하게 하려면 사전에 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="77550-190">그러나 추가 반복 시작을 방지할 수 없는 경우가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="77550-191">장기 실행 반복 하는 이미 시작 되었음을 실행 하는 경우는 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="77550-192">이러한 경우 반복 명시적으로 확인 합니다 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성과 cease 실행 속성을 반환 하는 경우 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-193">다음 예제에서는 동시에 최대 100 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-194">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-195">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="77550-196">반복 인덱스 보다 큽니다. 그래야 합니다 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 호출 후부터 속성 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드 하지만 실행을 이미 시작 하는 모든 반복에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="77550-197">각 반복에서 완료를 방지 하려면 호출을 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복에 호출할지 여부를 확인 하는 메서드를 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="77550-198">따라서 반복의 값을 확인 하는 경우는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복의 인덱스 값 보다 큰 경우 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-199">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="77550-200">시스템에서 편의상 빨리 수행하는 반복에서 <see cref="T:System.Threading.Tasks.Parallel" /> 루프의 실행이 중단되도록 통신합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77550-201">호출 된 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드는 아직 시작 되지 않은 루프의 반복 해야 실행 되지 않도록 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="77550-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="77550-202">효과적으로 모든 추가 반복 루프를 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="77550-203">그러나 이미 실행을 시작 하는 모든 반복 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="77550-204">호출을 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 사용 하면 합니다 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 반환할 속성 `true` 아직 실행 되는 루프의 반복에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="77550-205">확인할 수 있는 장기 실행 반복에 특히 유용 합니다 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 속성과 해당 값은 경우에 조기에 종료 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="77550-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 여기서 결과 되 면이 고, 다른 반복을 실행할 필요가 검색 기반 알고리즘에서 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77550-207">다음 예제에서는 동시에 최대 10,000 개의 루프 반복을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="77550-208">1에서 1,000 밀리초 임의의 간격에 대 한 각 반복 일시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="77550-209">루프는 반복에서 결정 하는 임의로 생성 된 값을 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77550-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="77550-210">호출한 후 반복이 실행 예제의 출력에서 볼 수 있듯이 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="77550-211">루프의 반복 될 때 실행 되는 것도 가능성이 있으므로 합니다 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 되 면 반복 될 때마다 호출 합니다 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 다른 반복에 호출할지 여부를 확인 하는 메서드를 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77550-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="77550-212">반환 하는 경우 `true`, 반복 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="77550-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="77550-213"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 메서드가 이미 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="77550-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 및 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />은 동일한 루프의 반복을 조합하여 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="77550-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="77550-215">데이터 병렬 처리(작업 병렬 라이브러리)</span><span class="sxs-lookup"><span data-stu-id="77550-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>