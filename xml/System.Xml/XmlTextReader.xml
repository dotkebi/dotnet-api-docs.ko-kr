<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa1d34719b4be2b9ad56010e26175b4a46ecbf25" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56770336" /></Metadata><TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b4ac-101">빠르고, 캐시되지 않으며 앞으로만 이동 가능한 XML 데이터 액세스를 제공하는 판독기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-101">Represents a reader that provides fast, non-cached, forward-only access to XML data.</span></span>  
  
<span data-ttu-id="0b4ac-102">.NET Framework 2.0부터 <see cref="T:System.Xml.XmlReader" /> 클래스를 대신 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReader" /> class instead.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-103">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-103">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-104"><xref:System.Xml.XmlTextReader> 스트림의 XML 데이터에 대 한 정방향 전용, 읽기 전용 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-104"><xref:System.Xml.XmlTextReader> provides forward-only, read-only access to a stream of XML data.</span></span> <span data-ttu-id="0b4ac-105">현재 노드란 판독기가 배치된 노드를 말합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-105">The current node refers to the node on which the reader is positioned.</span></span> <span data-ttu-id="0b4ac-106">읽기 방법 중 하나를 사용 하는 판독기 및 속성은 현재 노드의 값을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-106">The reader is advanced using any of the read methods and properties reflect the value of the current node.</span></span>  
  
 <span data-ttu-id="0b4ac-107">이 클래스는 구현 <xref:System.Xml.XmlReader> 는 W3C XML Extensible Markup Language () 1.0 및 Namespaces in XML 권장 사항 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-107">This class implements <xref:System.Xml.XmlReader> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span> <span data-ttu-id="0b4ac-108">`XmlTextReader` 다음 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-108">`XmlTextReader` provides the following functionality:</span></span>  
  
-   <span data-ttu-id="0b4ac-109">올바른 형식의 xml 규칙을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-109">Enforces the rules of well-formed XML.</span></span>  
  
-   <span data-ttu-id="0b4ac-110">`XmlTextReader` 데이터 유효성 검사를 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-110">`XmlTextReader` does not provide data validation.</span></span>  
  
-   <span data-ttu-id="0b4ac-111">검사 `DocumentType` 노드가 제대로 구성 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-111">Checks that `DocumentType` nodes are well-formed.</span></span> <span data-ttu-id="0b4ac-112">`XmlTextReader` 올바른 형식 인지에 대 한 DTD를 확인 하지만 DTD를 사용 하 여 유효성을 검사 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-112">`XmlTextReader` checks the DTD for well-formedness, but does not validate using the DTD.</span></span>  
  
-   <span data-ttu-id="0b4ac-113">노드에 대 한 위치 <xref:System.Xml.XmlTextReader.NodeType%2A> 됩니다 `XmlNodeType.EntityReference`, 비어 있는 단일 `EntityReference` 노드가 반환 됩니다 (즉,는 <xref:System.Xml.XmlTextReader.Value%2A> 속성은 `String.Empty`).</span><span class="sxs-lookup"><span data-stu-id="0b4ac-113">For nodes where <xref:System.Xml.XmlTextReader.NodeType%2A> is `XmlNodeType.EntityReference`, a single empty `EntityReference` node is returned (that is, the <xref:System.Xml.XmlTextReader.Value%2A> property is `String.Empty`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-114">DTD의 엔터티에 대 한 실제 선언을 `Entity` 노드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-114">The actual declarations of entities in the DTD are called `Entity` nodes.</span></span> <span data-ttu-id="0b4ac-115">호출 될 데이터에이 노드를 참조할 때 `EntityReference` 노드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-115">When you refer to these nodes in your data, they are called `EntityReference` nodes.</span></span>  
  
-   <span data-ttu-id="0b4ac-116">기본 특성을 확장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-116">Does not expand default attributes.</span></span>  
  
 <span data-ttu-id="0b4ac-117">때문에 `XmlTextReader` 데이터 유효성 검사를 위해 필요한 추가 검사를 수행 하지 않습니다 빠른 제대로 파서를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-117">Because the `XmlTextReader` does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</span></span>  
  
 <span data-ttu-id="0b4ac-118">데이터 유효성 검사를 수행 하려면 유효성 검사를 사용 하 여 <xref:System.Xml.XmlReader>입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-118">To perform data validation, use a validating <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="0b4ac-119">XML 데이터를 읽을 수는 <xref:System.Xml.XmlDocument>를 사용 하 여 <xref:System.Xml.XmlNodeReader>입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-119">To read XML data from an <xref:System.Xml.XmlDocument>, use <xref:System.Xml.XmlNodeReader>.</span></span>  
  
 <span data-ttu-id="0b4ac-120">`XmlTextReader` throw는 <xref:System.Xml.XmlException> xml 구문 분석 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-120">`XmlTextReader` throws an <xref:System.Xml.XmlException> on XML parse errors.</span></span> <span data-ttu-id="0b4ac-121">예외가 throw 된 후 판독기의 상태 예측 가능한 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-121">After an exception is thrown the state of the reader is not predictable.</span></span> <span data-ttu-id="0b4ac-122">예를 들어, 보고 된 노드 유형을 현재 노드의 실제 노드 형식과 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-122">For example, the reported node type may be different than the actual node type of the current node.</span></span> <span data-ttu-id="0b4ac-123">사용 된 <xref:System.Xml.XmlTextReader.ReadState%2A> 판독기가 오류 상태 인지 여부를 확인할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-123">Use the <xref:System.Xml.XmlTextReader.ReadState%2A> property to check whether a reader is in error state.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="0b4ac-124">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="0b4ac-124">Security Considerations</span></span>  
 <span data-ttu-id="0b4ac-125">다음은 사용 하는 경우를 고려해 야 할 사항은 <xref:System.Xml.XmlTextReader> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-125">The following are things to consider when using the <xref:System.Xml.XmlTextReader> class.</span></span>  
  
-   <span data-ttu-id="0b4ac-126">Throw 된 예외는 <xref:System.Xml.XmlTextReader> 애플리케이션에 버블링 하지 않을 경로 정보가 노출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-126">Exceptions thrown the <xref:System.Xml.XmlTextReader> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="0b4ac-127">애플리케이션에서는 예외를 캐치하고 적절히 처리해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-127">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="0b4ac-128">DTD 처리는 기본적으로 활성화되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-128">DTD processing is enabled by default.</span></span> <span data-ttu-id="0b4ac-129">서비스 거부 문제 또는 신뢰할 수 없는 소스를 사용 하 여 처리할 경우 염려 하는 경우 DTD 처리는 사용 하지 않도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-129">Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</span></span> <span data-ttu-id="0b4ac-130">설정 된 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성을 <xref:System.Xml.DtdProcessing.Prohibit> DTD 처리를 사용 하지 않도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-130">Set the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property to <xref:System.Xml.DtdProcessing.Prohibit> to disable DTD processing.</span></span>  
  
     <span data-ttu-id="0b4ac-131">DTD 처리를 활성화하는 경우 <xref:System.Xml.XmlSecureResolver>를 사용하여 <xref:System.Xml.XmlTextReader>가 액세스할 수 있는 리소스를 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-131">If you have DTD processing enabled, you can use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="0b4ac-132">또한 애플리케이션을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-132">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="0b4ac-133">예를 들어, ASP.NET 애플리케이션에서 시간 제한을 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-133">For example, configure time-out limits in your ASP.NET application.</span></span>  
  
-   <span data-ttu-id="0b4ac-134">XML 데이터가 DTD 파일 등의 외부 리소스에 대 한 참조를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-134">XML data can include references to external resources such as a DTD file.</span></span> <span data-ttu-id="0b4ac-135">기본적으로 외부 리소스는 사용자 자격 증명 없이 <xref:System.Xml.XmlUrlResolver> 개체를 사용하여 확인됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-135">By default external resources are resolved using an <xref:System.Xml.XmlUrlResolver> object with no user credentials.</span></span> <span data-ttu-id="0b4ac-136">이러한 경우 다음 중 하나를 수행하여 보안을 강화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-136">You can secure this further by doing one of the following:</span></span>  
  
    -   <span data-ttu-id="0b4ac-137"><xref:System.Xml.XmlTextReader> 속성을 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 개체로 설정하여 <xref:System.Xml.XmlSecureResolver>에서 액세스 가능한 리소스를 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-137">Restrict the resources that the <xref:System.Xml.XmlTextReader> can access by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.</span></span>  
  
    -   <span data-ttu-id="0b4ac-138"><xref:System.Xml.XmlReader> 속성을 <xref:System.Xml.XmlTextReader.XmlResolver%2A>로 설정하여 `null`가 모든 외부 리소스를 열 수 없도록 하십시오.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-138">Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to `null`.</span></span>  
  
-   <span data-ttu-id="0b4ac-139">XML 데이터에는 처리하는 데 시간이 많이 걸리는 수많은 특성, 네임스페이스 선언, 중첩된 요소 등이 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-139">XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</span></span> <span data-ttu-id="0b4ac-140">로 전송 되는 입력의 크기를 제한 하는 <xref:System.Xml.XmlTextReader>사용자 지정 IStream 구현을 만들고 제공 합니다 <xref:System.Xml.XmlTextReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-140">To limit the size of the input that is sent to the <xref:System.Xml.XmlTextReader>, create a custom IStream implementation and supply it the <xref:System.Xml.XmlTextReader>.</span></span>  
  
-   <span data-ttu-id="0b4ac-141"><xref:System.Xml.XmlReader.ReadValueChunk%2A> 메서드를 사용 하 여 데이터의 큰 스트림을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-141">The <xref:System.Xml.XmlReader.ReadValueChunk%2A> method can be used to handle large streams of data.</span></span> <span data-ttu-id="0b4ac-142">이 메서드는 전체 값에 대한 단일 문자열을 할당하는 대신 한 번에 적은 수의 문자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-142">This method reads a small number of characters at a time instead of allocating a single string for the whole value.</span></span>  
  
-   <span data-ttu-id="0b4ac-143">기본적으로 일반 엔터티는 확장되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-143">By default general entities are not expanded.</span></span> <span data-ttu-id="0b4ac-144"><xref:System.Xml.XmlTextReader.ResolveEntity%2A> 메서드를 호출해야 일반 엔터티가 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-144">General entities are expanded when you call the <xref:System.Xml.XmlTextReader.ResolveEntity%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="0b4ac-145">이 클래스는 상속 요청이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-145">This class has an inheritance demand.</span></span> <span data-ttu-id="0b4ac-146">완전 신뢰에서 상속 해야 <see langword="XmlTextReader" />합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-146">Full trust is required to inherit from <see langword="XmlTextReader" />.</span></span></para></block>
    <related type="Article" href="~/docs/standard/data/xml/index.md"><span data-ttu-id="0b4ac-147">XML 문서 및 데이터</span><span class="sxs-lookup"><span data-stu-id="0b4ac-147">XML Documents and Data</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b4ac-148"><see cref="T:System.Xml.XmlTextReader" />의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-148">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-149">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-149">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-150"><see langword="XmlTextReader" />의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-150">Initializes a new instance of the <see langword="XmlTextReader" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0b4ac-151">읽을 XML 데이터를 포함하고 있는 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-151">The stream containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="0b4ac-152">지정된 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-152">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-153">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-153">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-154">합니다 <xref:System.Xml.XmlTextReader> 스트림을 사용 디코딩합니다 <xref:System.Text.Encoding?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-154">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-155"><paramref name="input" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-155"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0b4ac-156">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-156">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="0b4ac-157">지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-157">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-158">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-158">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-159">`TextReader`가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-159">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="0b4ac-160">이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-160">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-161">다음 예제에서는 XML 문자열을 로드 합니다 `XmlTextReader` 를 사용 하 여 개체를 <xref:System.IO.StringReader> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-161">The following example loads an XML string into the `XmlTextReader` object using the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[XmlTextReader.cctor1#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-162">XML 데이터를 포함하는 파일의 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-162">The URL for the file containing the XML data.</span></span> <span data-ttu-id="0b4ac-163"><see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-163">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <summary><span data-ttu-id="0b4ac-164">지정된 파일을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-164">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-165">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-165">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-166">사용 하 여 파일 액세스 자격 증명을 요구 하는 리소스에 있으면는 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 속성이 필요한 자격 증명을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-166">If the file is located on a resource that requires access credentials, use the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to specify the necessary credentials.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-167">버전 1.1에에서는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 코드에서 설정할 수 없습니다를 부분적으로 신뢰할 수 있는 `XmlResolver` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-167">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], partially trusted code cannot set the `XmlResolver` property.</span></span> <span data-ttu-id="0b4ac-168">만들려면이 문제를 해결은 <xref:System.Xml.XmlUrlResolver> 필요한 자격 증명을 사용 하 여 URI를 전달 합니다 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 메서드를 다음 구문 합니다 `XmlTextReader` 결과 사용 하 여 <xref:System.IO.Stream> 개체.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-168">The workaround is to create an <xref:System.Xml.XmlUrlResolver> with the necessary credentials, pass the URI to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method, and then construct the `XmlTextReader` using the resulting <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="0b4ac-169">해결 방법은 다음 C# 코드에 설명 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-169">The workaround is described in the following C# code.</span></span>  
  
```csharp  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-170">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-170">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-171">이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-171">The example uses the file, `items.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0b4ac-172">지정된 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-172">The specified file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="0b4ac-173">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-173">Part of the filename or directory cannot be found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-174"><paramref name="url" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-174"><paramref name="url" /> is an empty string.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="0b4ac-175">원격 파일 이름을 확인할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-175">The remote filename cannot be resolved.</span></span>  
  
<span data-ttu-id="0b4ac-176">또는</span><span class="sxs-lookup"><span data-stu-id="0b4ac-176">-or-</span></span> 
<span data-ttu-id="0b4ac-177">이 요청을 처리하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-177">An error occurred while processing the request.</span></span></exception>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="0b4ac-178"><paramref name="url" /> 경로는 유효한 URI가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-178"><paramref name="url" /> is not a valid URI.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader(System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader nt" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt"><span data-ttu-id="0b4ac-179">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-179">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-180">지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-180">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-181">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-181">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0b4ac-182">읽을 XML 데이터를 포함하고 있는 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-182">The stream containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="0b4ac-183">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-183">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-184">지정된 스트림, <see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-184">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-185">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-185">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-186">합니다 <xref:System.Xml.XmlTextReader> 스트림을 사용 디코딩합니다 <xref:System.Text.Encoding?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-186">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0b4ac-187">이름 테이블을 지정 하는 경우이 생성자는 해당 테이블에 이미 정의 된 이름을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-187">If you specify a name table, this constructor uses the names defined already in that table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0b4ac-188"><paramref name="input" /> 또는 <paramref name="nt" /> 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-188">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="0b4ac-189">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-189">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="0b4ac-190">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-190">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-191">지정된 <see cref="T:System.Xml.XmlTextReader" /> 및 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-191">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-192">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-192">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-193">`TextReader`가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-193">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="0b4ac-194">이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-194">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0b4ac-195"><paramref name="nt" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-195">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-196">외부 리소스를 확인하는 데 사용할 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-196">The URL to use for resolving external resources.</span></span> <span data-ttu-id="0b4ac-197"><see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-197">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <param name="input"><span data-ttu-id="0b4ac-198">읽을 XML 데이터를 포함하고 있는 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-198">The stream containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="0b4ac-199">지정된 URL과 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-199">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-200">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-200">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-201"><paramref name="input" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-201"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-202">외부 리소스를 확인하는 데 사용할 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-202">The URL to use for resolving external resources.</span></span> <span data-ttu-id="0b4ac-203"><see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-203">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <param name="input"><span data-ttu-id="0b4ac-204">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-204">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="0b4ac-205">지정된 URL과 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-205">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-206">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-206">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-207">`TextReader`가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-207">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="0b4ac-208">이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-208">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-209">읽을 XML 데이터를 포함하는 파일의 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-209">The URL for the file containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="0b4ac-210">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-210">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-211">지정된 파일과 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-211">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-212">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-212">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0b4ac-213"><paramref name="nt" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-213">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="0b4ac-214">지정된 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-214">The specified file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="0b4ac-215">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-215">Part of the filename or directory cannot be found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-216"><paramref name="url" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-216"><paramref name="url" /> is an empty string.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="0b4ac-217">원격 파일 이름을 확인할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-217">The remote filename cannot be resolved.</span></span>  
  
<span data-ttu-id="0b4ac-218">또는</span><span class="sxs-lookup"><span data-stu-id="0b4ac-218">-or-</span></span> 
<span data-ttu-id="0b4ac-219">이 요청을 처리하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-219">An error occurred while processing the request.</span></span></exception>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="0b4ac-220"><paramref name="url" /> 경로는 유효한 URI가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-220"><paramref name="url" /> is not a valid URI.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment"><span data-ttu-id="0b4ac-221">구문 분석할 XML 조각을 포함하는 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-221">The stream containing the XML fragment to parse.</span></span></param>
        <param name="fragType"><span data-ttu-id="0b4ac-222">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-222">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span></span> <span data-ttu-id="0b4ac-223">또한 조각에 포함되는 사항을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-223">This also determines what the fragment can contain.</span></span> <span data-ttu-id="0b4ac-224">아래 표를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-224">(See table below.)</span></span></param>
        <param name="context"><span data-ttu-id="0b4ac-225"><paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-225">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span></span> <span data-ttu-id="0b4ac-226">사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-226">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span></span></param>
        <summary><span data-ttu-id="0b4ac-227">지정된 스트림, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-227">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-228">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-228">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-229">이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-229">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="0b4ac-230">XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-230">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span>  
  
 <span data-ttu-id="0b4ac-231">다음 표에 대 한 유효한 값 `fragType`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-231">The following table lists valid values for `fragType`.</span></span>  
  
|<span data-ttu-id="0b4ac-232">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="0b4ac-232">XmlNodeType</span></span>|<span data-ttu-id="0b4ac-233">조각에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-233">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|`Element`|<span data-ttu-id="0b4ac-234">모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 모든 조합)입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-234">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="0b4ac-235">XML 선언을 제공할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-235">An XML declaration can also be supplied.</span></span> <span data-ttu-id="0b4ac-236">설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다이 <xref:System.Xml.XmlParserContext> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-236">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|`Attribute`|<span data-ttu-id="0b4ac-237">값 특성 (따옴표 내 부분)입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-237">The value of an attribute (the part inside the quotes).</span></span>|  
|`Document`|<span data-ttu-id="0b4ac-238">전체 XML 문서의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-238">The contents of an entire XML document.</span></span> <span data-ttu-id="0b4ac-239">이 문서 수준 규칙을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-239">This enforces document level rules.</span></span>|  
  
 <span data-ttu-id="0b4ac-240">판독기는 스트림의 인코딩을 결정 하려면 다음을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-240">The reader uses the following to determine the encoding of the stream.</span></span>  
  
1.  <span data-ttu-id="0b4ac-241">확인 된 <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> 인코딩을 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-241">Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> property to determine the encoding.</span></span>  
  
2.  <span data-ttu-id="0b4ac-242">경우는 `Encoding` 속성은 `null`, 판독기가 스트림의 시작 부분에서 바이트 순서 표시를 위한 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-242">If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.</span></span>  
  
3.  <span data-ttu-id="0b4ac-243">경우는 `Encoding` 속성은 `null`, 바이트 순서 표시가 없는 발견 되 고 판독기 스트림이 u t F-8에서 인코딩된 것으로 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-243">If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-244"><paramref name="fragType" />이 Element, Attribute 또는 Document <see langword="XmlNodeType" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-244"><paramref name="fragType" /> is not an Element, Attribute, or Document <see langword="XmlNodeType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-245"><paramref name="xmlFragment" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-245"><paramref name="xmlFragment" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-246">외부 리소스를 확인하는 데 사용할 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-246">The URL to use for resolving external resources.</span></span> <span data-ttu-id="0b4ac-247"><see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-247">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span> <span data-ttu-id="0b4ac-248"><paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-248">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span></span></param>
        <param name="input"><span data-ttu-id="0b4ac-249">읽을 XML 데이터를 포함하고 있는 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-249">The stream containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="0b4ac-250">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-250">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-251">지정된 URL, 스트림 및 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-251">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-252">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-252">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0b4ac-253"><paramref name="input" /> 또는 <paramref name="nt" /> 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-253">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0b4ac-254">외부 리소스를 확인하는 데 사용할 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-254">The URL to use for resolving external resources.</span></span> <span data-ttu-id="0b4ac-255"><see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-255">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span> <span data-ttu-id="0b4ac-256"><paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-256">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span></span></param>
        <param name="input"><span data-ttu-id="0b4ac-257">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-257">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="0b4ac-258">사용할 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-258">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="0b4ac-259">지정된 URL과 <see cref="T:System.IO.TextReader" /> <see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-259">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-260">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-260">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-261">`TextReader`가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-261">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="0b4ac-262">이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-262">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-263"><paramref name="nt" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-263">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment"><span data-ttu-id="0b4ac-264">구문 분석할 XML 조각을 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-264">The string containing the XML fragment to parse.</span></span></param>
        <param name="fragType"><span data-ttu-id="0b4ac-265">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-265">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span></span> <span data-ttu-id="0b4ac-266">또한 조각 문자열에 포함되는 사항을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-266">This also determines what the fragment string can contain.</span></span> <span data-ttu-id="0b4ac-267">아래 표를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-267">(See table below.)</span></span></param>
        <param name="context"><span data-ttu-id="0b4ac-268"><paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-268">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span></span> <span data-ttu-id="0b4ac-269">사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-269">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span></span></param>
        <summary><span data-ttu-id="0b4ac-270">지정된 문자열, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-270">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-271">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-271">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-272">이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-272">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="0b4ac-273">XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-273">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span> <span data-ttu-id="0b4ac-274">이 생성자에서 반환 된 문자열을 처리할 수 <xref:System.Xml.XmlReader.ReadInnerXml%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-274">This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.</span></span>  
  
 <span data-ttu-id="0b4ac-275">다음 표에 대 한 유효한 값 `fragType` 판독기 다른 노드 형식 구문 분석 하는 방법 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-275">The following table lists valid values for `fragType` and how the reader parses each of the different node types.</span></span>  
  
|<span data-ttu-id="0b4ac-276">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="0b4ac-276">XmlNodeType</span></span>|<span data-ttu-id="0b4ac-277">조각에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-277">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|<span data-ttu-id="0b4ac-278">요소</span><span class="sxs-lookup"><span data-stu-id="0b4ac-278">Element</span></span>|<span data-ttu-id="0b4ac-279">모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 모든 조합)입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-279">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="0b4ac-280">XML 선언을 제공할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-280">An XML declaration can also be supplied.</span></span> <span data-ttu-id="0b4ac-281">설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다이 <xref:System.Xml.XmlParserContext> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-281">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|<span data-ttu-id="0b4ac-282">특성</span><span class="sxs-lookup"><span data-stu-id="0b4ac-282">Attribute</span></span>|<span data-ttu-id="0b4ac-283">값 특성 (따옴표 내 부분)입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-283">The value of an attribute (the part inside the quotes).</span></span>|  
|<span data-ttu-id="0b4ac-284">문서</span><span class="sxs-lookup"><span data-stu-id="0b4ac-284">Document</span></span>|<span data-ttu-id="0b4ac-285">전체 XML 문서의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-285">The contents of an entire XML document.</span></span> <span data-ttu-id="0b4ac-286">이 문서 수준 규칙을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-286">This enforces document level rules.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-287">다음 예제에서는 XML 조각을 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-287">The following example parses an XML fragment.</span></span> <span data-ttu-id="0b4ac-288">사용 하 여는 `XmlParserContext` 고 <xref:System.Xml.XmlNamespaceManager> 네임 스페이스 확인을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-288">It uses the `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace resolution.</span></span>  
  
 [!code-cpp[XmlTextReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-289"><paramref name="fragType" />은 <see langword="Element" />, <see langword="Attribute" /> 또는 <see langword="Document" /><see langword="XmlNodeType" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-289"><paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see langword="XmlNodeType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-290"><paramref name="xmlFragment" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-290"><paramref name="xmlFragment" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-291">현재 노드의 특성 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-291">Gets the number of attributes on the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-292">현재 노드에 포함된 특성의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-292">The number of attributes on the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-293">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-293">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-294">이 속성이 관련이 `Element`, `DocumentType` 및 `XmlDeclaration` 노드만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-294">This property is relevant to `Element`, `DocumentType` and `XmlDeclaration` nodes only.</span></span> <span data-ttu-id="0b4ac-295">(다른 노드 형식 특성이 없습니다.)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-295">(Other node types do not have attributes.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-296">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-296">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlTextReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-297">현재 노드의 기본 URI를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-297">Gets the base URI of the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-298">현재 노드의 기본 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-298">The base URI of the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-299">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-299">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-300">네트워크에 연결 된 XML 문서를 다양 한 W3C 표준 포함 메커니즘을 사용 하 여 집계 데이터의 청크 이루어집니다 및 서로 다른 위치에서 제공 되는 노드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-300">A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</span></span> <span data-ttu-id="0b4ac-301">DTD 엔터티 예가이 있고이 Dtd에 제한 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-301">DTD entities are an example of this, but this is not limited to DTDs.</span></span> <span data-ttu-id="0b4ac-302">기본 URI 알려 이러한 노드를 가져온 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-302">The base URI tells you where these nodes came from.</span></span> <span data-ttu-id="0b4ac-303">반환 되는 노드에 대 한 기본 URI 인지 (예를 들어, 구문 분석 된 경우 메모리 내 문자열에서), `String.Empty` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-303">If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), `String.Empty` is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-304">다음 예제에서는 각 노드에 대 한 기본 URI를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-304">The following example displays the base URI for each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-305">이 예제에서는 파일을 사용 하 여 `baseuri.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-305">The example uses the file, `baseuri.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-306"><see cref="T:System.Xml.XmlTextReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-306">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</span></span></summary>
        <value><span data-ttu-id="0b4ac-307">이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-307"><see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-308"><see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-308">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-309">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-309">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-310">이진 콘텐츠 읽기 메서드를 포함 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>를 <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, 및 <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-310">The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-311"><see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-311">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</span></span></summary>
        <value><span data-ttu-id="0b4ac-312"><see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-312"><see langword="true" /> if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-313"><see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-313">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-314">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-314">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-315">합니다 <xref:System.Xml.XmlTextReader> throw를 <xref:System.NotSupportedException> 경우는 <xref:System.Xml.XmlReader.ReadValueChunk%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-315">The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-316">이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-316">Gets a value indicating whether this reader can parse and resolve entities.</span></span></summary>
        <value><span data-ttu-id="0b4ac-317">판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-317"><see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-318"><see langword="XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-318">The <see langword="XmlTextReader" /> class always returns <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-319">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-319">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-320">이 변경 내용에 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 릴리스 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-320">This is a change in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] release.</span></span> <span data-ttu-id="0b4ac-321">이전 버전에서의 `XmlTextReader` 클래스 엔터티를 확인할 수 없습니다 및 `CanResolveEntity` 항상 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-321">In previous versions, the `XmlTextReader` class could not resolve entities and `CanResolveEntity` always returned `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-322"><see cref="P:System.Xml.XmlReader.ReadState" />를 <see langword="Closed" />로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-322">Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to <see langword="Closed" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-323">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-323">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-324">이 메서드는 또한 읽는 동안 보유 한 모든 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-324">This method also releases any resources held while reading.</span></span> <span data-ttu-id="0b4ac-325">이 판독기에 생성 된 스트림을 사용 하는 경우이 메서드 호출 `Close` 내부 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-325">If this reader was constructed using a stream, this method also calls `Close` on the underlying stream.</span></span>  
  
 <span data-ttu-id="0b4ac-326">경우 `Close` 이미 호출 조치가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-326">If `Close` has already been called, no action is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-327">XML 문서에서 현재 노드의 수준을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-327">Gets the depth of the current node in the XML document.</span></span></summary>
        <value><span data-ttu-id="0b4ac-328">XML 문서의 현재 노드 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-328">The depth of the current node in the XML document.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-329">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-329">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-330">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-330">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-331"><see cref="T:System.Xml.DtdProcessing" /> 열거형을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-331">Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="0b4ac-332"><see cref="T:System.Xml.DtdProcessing" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-332">The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b4ac-333">합니다 <xref:System.Xml.DtdProcessing> 열거형을 포함 합니다 <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, 및 <xref:System.Xml.DtdProcessing.Parse> 열거자입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-333">The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, and <xref:System.Xml.DtdProcessing.Parse> enumerators.</span></span> <span data-ttu-id="0b4ac-334"><xref:System.Xml.DtdProcessing.Parse> 기본 동작이입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-334"><xref:System.Xml.DtdProcessing.Parse> is the default behavior.</span></span> <span data-ttu-id="0b4ac-335">합니다 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성을 대체 합니다 `ProhibitDTD` 속성 DOCTYPE 요소를 무시 하는 기능을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-335">The <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property replaces the `ProhibitDTD` property and adds the ability to ignore the DOCTYPE element.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0b4ac-336">경우는 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성이 <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>는 <xref:System.Xml.XmlTextReader> Dtd를 보고 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-336">If the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property is set to <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, the <xref:System.Xml.XmlTextReader> will not report the DTDs.</span></span> <span data-ttu-id="0b4ac-337">즉, DTD/DOCTYPE는 출력에서 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-337">This means that the DTD/DOCTYPE will be lost on output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlTextReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-338">문서의 인코딩을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-338">Gets the encoding of the document.</span></span></summary>
        <value><span data-ttu-id="0b4ac-339">인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-339">The encoding value.</span></span> <span data-ttu-id="0b4ac-340">인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-340">If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-341">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-341">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-342">때문에 <xref:System.Xml.XmlTextReader> 사용 하는 <xref:System.Text.Encoding?displayProperty=nameWithType> 클래스 `XmlTextReader` 도 해당 클래스에서 지 원하는 모든 인코딩을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-342">Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=nameWithType> class, `XmlTextReader` also supports all encodings supported by that class.</span></span> <span data-ttu-id="0b4ac-343">이 예외는 u t F-7 EBCDIC 매핑하는 등 모든 인코딩을 `<?xml` 시퀀스 utf-8 이외의 다른 바이트 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-343">The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-344">판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-344">Gets or sets a value that specifies how the reader handles entities.</span></span></summary>
        <value><span data-ttu-id="0b4ac-345"><see cref="T:System.Xml.EntityHandling" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-345">One of the <see cref="T:System.Xml.EntityHandling" /> values.</span></span> <span data-ttu-id="0b4ac-346"><see langword="EntityHandling" />을 지정하지 않으면 기본값이 <see langword="EntityHandling.ExpandCharEntities" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-346">If no <see langword="EntityHandling" /> is specified, it defaults to <see langword="EntityHandling.ExpandCharEntities" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-347">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-347">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-348">다음 후 신속 하 게 하 고 사용 결과에이 속성을 변경할 수 있습니다 <xref:System.Xml.XmlTextReader.Read%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-348">This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.</span></span>  
  
 <span data-ttu-id="0b4ac-349">때 `EntityHandling` 로 설정 된 `ExpandCharEntities`, 특성 값만 부분적으로 정규화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-349">When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized.</span></span> <span data-ttu-id="0b4ac-350">판독기는 인접 한 엔터티 참조 노드 내용에서 독립적으로 각 개별 텍스트 노드를 정규화합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-350">The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</span></span>  
  
 <span data-ttu-id="0b4ac-351">엔터티 간의 차이점을 설명 하기 위해 처리 모드는 다음 XML을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-351">To illustrate the difference between the entity handling modes consider the following XML:</span></span>  
  
```  
<!DOCTYPE doc [<!ENTITY num "123">]>  
    <doc> &#65; &num; </doc>  
```  
  
 <span data-ttu-id="0b4ac-352">때 `EntityHandling` 로 설정 된 `ExpandEntities` "doc" 요소 노드 확장된 엔터티 텍스트를 사용 하 여 하나의 텍스트 노드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-352">When `EntityHandling` is set to `ExpandEntities` the "doc" element node contains one text node with the expanded entity text:</span></span>  
  
|<span data-ttu-id="0b4ac-353">깊이</span><span class="sxs-lookup"><span data-stu-id="0b4ac-353">Depth</span></span>|<span data-ttu-id="0b4ac-354">노드 형식</span><span class="sxs-lookup"><span data-stu-id="0b4ac-354">Node type</span></span>|<span data-ttu-id="0b4ac-355">name</span><span class="sxs-lookup"><span data-stu-id="0b4ac-355">Name</span></span>|<span data-ttu-id="0b4ac-356">값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-356">Value</span></span>|  
|-----------|---------------|----------|-----------|  
|<span data-ttu-id="0b4ac-357">1</span><span class="sxs-lookup"><span data-stu-id="0b4ac-357">1</span></span>|`Text`||<span data-ttu-id="0b4ac-358">A 123</span><span class="sxs-lookup"><span data-stu-id="0b4ac-358">A 123</span></span>|  
  
 <span data-ttu-id="0b4ac-359">때 `EntityHandling` 로 설정 된 `ExpandCharEntites`, 및 <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> 로 설정 되어 `Significant` 또는 `All`, 문자 엔터티를 확장 하 고 노드로 일반 엔터티를 반환 하는 "doc" 요소:</span><span class="sxs-lookup"><span data-stu-id="0b4ac-359">When `EntityHandling` is set to `ExpandCharEntites`, and <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> is set to `Significant` or `All`, the "doc" element expands the character entity and returns the general entity as a node:</span></span>  
  
|<span data-ttu-id="0b4ac-360">깊이</span><span class="sxs-lookup"><span data-stu-id="0b4ac-360">Depth</span></span>|<span data-ttu-id="0b4ac-361">노드 형식</span><span class="sxs-lookup"><span data-stu-id="0b4ac-361">Node type</span></span>|<span data-ttu-id="0b4ac-362">name</span><span class="sxs-lookup"><span data-stu-id="0b4ac-362">Name</span></span>|<span data-ttu-id="0b4ac-363">값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-363">Value</span></span>|  
|-----------|---------------|----------|-----------|  
|<span data-ttu-id="0b4ac-364">1</span><span class="sxs-lookup"><span data-stu-id="0b4ac-364">1</span></span>|`Text`||<span data-ttu-id="0b4ac-365">A</span><span class="sxs-lookup"><span data-stu-id="0b4ac-365">A</span></span>|  
|<span data-ttu-id="0b4ac-366">1</span><span class="sxs-lookup"><span data-stu-id="0b4ac-366">1</span></span>|`EntityReference`|<span data-ttu-id="0b4ac-367">num</span><span class="sxs-lookup"><span data-stu-id="0b4ac-367">num</span></span>||  
|<span data-ttu-id="0b4ac-368">1</span><span class="sxs-lookup"><span data-stu-id="0b4ac-368">1</span></span>|`SignificantWhitespace`|||  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-369">판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-369">Gets a value indicating whether the reader is positioned at the end of the stream.</span></span></summary>
        <value><span data-ttu-id="0b4ac-370">판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-370"><see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-371">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-371">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b4ac-372">특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-372">Gets the value of an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-373">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-373">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlTextReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="0b4ac-374">특성의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-374">The index of the attribute.</span></span> <span data-ttu-id="0b4ac-375">인덱스는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-375">The index is zero-based.</span></span> <span data-ttu-id="0b4ac-376">첫 번째 특성의 인덱스는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-376">(The first attribute has index 0.)</span></span></param>
        <summary><span data-ttu-id="0b4ac-377">지정된 인덱스가 있는 특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-377">Gets the value of the attribute with the specified index.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-378">지정된 특성의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-378">The value of the specified attribute.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-379">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-379">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-380">이 메서드는 판독기를 이동하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-380">This method does not move the reader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-381"><paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-381">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlTextReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b4ac-382">특성의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-382">The qualified name of the attribute.</span></span></param>
        <summary><span data-ttu-id="0b4ac-383">지정된 이름이 있는 특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-383">Gets the value of the attribute with the specified name.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-384">지정된 특성의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-384">The value of the specified attribute.</span></span> <span data-ttu-id="0b4ac-385">특성이 없으면 <see langword="null" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-385">If the attribute is not found, <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-386">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-386">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-387">이 메서드는 판독기를 이동하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-387">This method does not move the reader.</span></span>  
  
 <span data-ttu-id="0b4ac-388">판독기가 위치에 `DocumentType` 노드를이 메서드는 PUBLIC과 SYSTEM 리터럴, 예를 들어, 가져오는 데 사용할 수 있습니다 `reader.GetAttribute("PUBLIC")`</span><span class="sxs-lookup"><span data-stu-id="0b4ac-388">If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute("PUBLIC")`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-389">다음 예제에서는 ISBN 특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-389">The following example gets the value of the ISBN attribute.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-390">이 예제에서는 파일을 사용 하 여 `attrs.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-390">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlTextReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="0b4ac-391">특성의 로컬 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-391">The local name of the attribute.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="0b4ac-392">특성의 네임스페이스 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-392">The namespace URI of the attribute.</span></span></param>
        <summary><span data-ttu-id="0b4ac-393">지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-393">Gets the value of the attribute with the specified local name and namespace URI.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-394">지정된 특성의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-394">The value of the specified attribute.</span></span> <span data-ttu-id="0b4ac-395">특성이 없으면 <see langword="null" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-395">If the attribute is not found, <see langword="null" /> is returned.</span></span> <span data-ttu-id="0b4ac-396">이 메서드는 판독기를 이동하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-396">This method does not move the reader.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-397">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-397">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-398">다음 XML 특정 네임 스페이스의 특성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-398">The following XML contains an attribute in a specific namespace:</span></span>  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 <span data-ttu-id="0b4ac-399">조회 수는 `dt:type` (접두사와 로컬 이름)의 인수를 하나 또는 두 개의 인수 (로컬 이름 및 네임 스페이스 URI)를 사용 하 여 특성:</span><span class="sxs-lookup"><span data-stu-id="0b4ac-399">You can lookup the `dt:type` attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</span></span>  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 <span data-ttu-id="0b4ac-400">조회 하는 `xmlns:dt` 특성에 다음 인수 중 하나를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-400">To lookup the `xmlns:dt` attribute, use one of the following arguments:</span></span>  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 <span data-ttu-id="0b4ac-401">사용 하 여이 정보를 가져올 수도 있습니다는 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-401">You can also get this information using the <xref:System.Xml.XmlTextReader.Prefix%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetNamespacesInScope(System::Xml::XmlNamespaceScope scope);" />
      <MemberSignature Language="F#" Value="member this.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="0b4ac-402">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-402">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span></span></param>
        <summary><span data-ttu-id="0b4ac-403">현재 범위 내에 있는 모든 네임스페이스가 포함된 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-403">Gets a collection that contains all namespaces currently in-scope.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-404">현재 범위 내에 있는 모든 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-404">An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces.</span></span> <span data-ttu-id="0b4ac-405">판독기가 요소에 배치되지 않은 경우에는 네임스페이스가 없는 빈 사전이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-405">If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-406">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-406">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-407">사전 컬렉션 접두사가 붙은 네임 스페이스 이름으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-407">The dictionary consists of a collection of namespace names keyed by prefix.</span></span> <span data-ttu-id="0b4ac-408">범위에서 네임 스페이스 열거를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-408">It can be used to enumerate the in-scope namespaces.</span></span> <span data-ttu-id="0b4ac-409">사전은 연결이 끊긴된 복사본 판독기의 네임 스페이스 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-409">The dictionary is a disconnected copy of the namespace list of the reader.</span></span> <span data-ttu-id="0b4ac-410">변경 되지 않습니다 판독기 위치, 현재 범위에서 네임 스페이스 목록을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-410">It remains unchanged as the reader position, current in-scope namespace list, changes.</span></span>  
  
 <span data-ttu-id="0b4ac-411">다음 표에서 설명 하는 방법을 <xref:System.Xml.XmlNamespaceScope> 하지는 기본 및 기본 제공 네임 스페이스는 반환 되는 또는 열거형 값에 있는지 여부를 영향을 줍니다 <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-411">The following table describes how the <xref:System.Xml.XmlNamespaceScope> enumeration value affects the whether or not the default and built-in namespaces are returned by <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>.</span></span>  
  
|<span data-ttu-id="0b4ac-412">XmlNamespaceScope 값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-412">XmlNamespaceScope Value</span></span>|<span data-ttu-id="0b4ac-413">xmlns:xml</span><span class="sxs-lookup"><span data-stu-id="0b4ac-413">xmlns:xml</span></span>|<span data-ttu-id="0b4ac-414">xmlns:xmlns</span><span class="sxs-lookup"><span data-stu-id="0b4ac-414">xmlns:xmlns</span></span>|<span data-ttu-id="0b4ac-415">xmlns=""</span><span class="sxs-lookup"><span data-stu-id="0b4ac-415">xmlns=""</span></span>|  
|-----------------------------|---------------|-----------------|---------------|  
|`All`|<span data-ttu-id="0b4ac-416">예</span><span class="sxs-lookup"><span data-stu-id="0b4ac-416">yes</span></span>|<span data-ttu-id="0b4ac-417">no</span><span class="sxs-lookup"><span data-stu-id="0b4ac-417">no</span></span>|<span data-ttu-id="0b4ac-418">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-418">no</span></span>|  
|`ExcludeXml`|<span data-ttu-id="0b4ac-419">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-419">no</span></span>|<span data-ttu-id="0b4ac-420">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-420">no</span></span>|<span data-ttu-id="0b4ac-421">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-421">no</span></span>|  
|`Local`|<span data-ttu-id="0b4ac-422">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-422">no</span></span>|<span data-ttu-id="0b4ac-423">아니요</span><span class="sxs-lookup"><span data-stu-id="0b4ac-423">no</span></span>|<span data-ttu-id="0b4ac-424">예</span><span class="sxs-lookup"><span data-stu-id="0b4ac-424">yes</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemainder () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextReader ^ GetRemainder();" />
      <MemberSignature Language="F#" Value="member this.GetRemainder : unit -&gt; System.IO.TextReader" Usage="xmlTextReader.GetRemainder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-425">버퍼링된 XML의 나머지 부분을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-425">Gets the remainder of the buffered XML.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-426">버퍼링된 XML 의 나머지 부분을 포함하는 <see cref="T:System.IO.TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-426">A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-427">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-427">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-428">때문에 <xref:System.Xml.XmlTextReader> 버퍼링 않습니다 `Read`, 데이터는 손실 되지 않도록 사용 되지 않는 버퍼의 나머지 부분을 반환 하는 일을 할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-428">Because <xref:System.Xml.XmlTextReader> does a buffered `Read`, it must be able to return the remainder of the unused buffer so that no data is lost.</span></span> <span data-ttu-id="0b4ac-429">이렇게 하면 패키지에서 다른 작업으로 동일한 스트림에서 XML 프로토콜 (예: 다중 파트 MIME).</span><span class="sxs-lookup"><span data-stu-id="0b4ac-429">This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</span></span>  
  
 <span data-ttu-id="0b4ac-430">이 메서드를 호출한 후 <xref:System.Xml.XmlTextReader.EOF%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-430">After calling this method, <xref:System.Xml.XmlTextReader.EOF%2A> is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-431">다음 예제에서는 첫 번째 부분은 XML 문서를 읽고 사용 하 여 `GetRemainder` 두 번째 판독기를 사용 하는 문서 읽기를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-431">The following example reads the first part of an XML document and then uses `GetRemainder` to complete reading the document using a second reader.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-432">이 예제에서는 입력된 파일 사용 `tworeads.xml`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-432">The example uses the input file `tworeads.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-433">클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-433">Gets a value indicating whether the class can return line information.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-434">클래스에서 줄 정보를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-434"><see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-435">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-435">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-436">현재 노드에 <see langword="String.Empty" /> 이외의 <see cref="P:System.Xml.XmlTextReader.Value" />를 사용할 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-436">Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than <see langword="String.Empty" />.</span></span></summary>
        <value><span data-ttu-id="0b4ac-437">현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-437"><see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-438">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-438">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-439">다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-439">The following table lists node types that have a value to return.</span></span>  
  
|<span data-ttu-id="0b4ac-440">노드 형식</span><span class="sxs-lookup"><span data-stu-id="0b4ac-440">Node type</span></span>|<span data-ttu-id="0b4ac-441">값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-441">Value</span></span>|  
|---------------|-----------|  
|`Attribute`|<span data-ttu-id="0b4ac-442">특성 값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-442">The value of the attribute.</span></span>|  
|`CDATA`|<span data-ttu-id="0b4ac-443">CDATA 섹션 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-443">The content of the CDATA section.</span></span>|  
|`Comment`|<span data-ttu-id="0b4ac-444">주석의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-444">The content of the comment.</span></span>|  
|`DocumentType`|<span data-ttu-id="0b4ac-445">내부 하위 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-445">The internal subset.</span></span>|  
|`ProcessingInstruction`|<span data-ttu-id="0b4ac-446">대상을 제외한 전체 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-446">The entire content, excluding the target.</span></span>|  
|`SignificantWhitespace`|<span data-ttu-id="0b4ac-447">혼합된 콘텐츠 모델의 태그 간 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-447">The white space between markup in a mixed content model.</span></span>|  
|`Text`|<span data-ttu-id="0b4ac-448">텍스트 노드의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-448">The content of the text node.</span></span>|  
|`Whitespace`|<span data-ttu-id="0b4ac-449">태그 사이의 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-449">The white space between markup.</span></span>|  
|`XmlDeclaration`|<span data-ttu-id="0b4ac-450">선언 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-450">The content of the declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-451">다음 예제에서는 값을 가질 수 있는 모든 노드에 대 한 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-451">The following example displays the value for every node that can have a value.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-452">이 예제에서는 파일을 사용 하 여 `book1.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-452">The example uses the file, `book1.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-453">현재 노드가 DTD 또는 스키마에 정의된 기본값에서 생성된 특성인지를 나타내는 값을 얻습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-453">Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</span></span></summary>
        <value><span data-ttu-id="0b4ac-454">이 속성은 항상 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-454">This property always returns <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-455"><see cref="T:System.Xml.XmlTextReader" />는 기본 특성을 확장하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-455">(<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.)</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-456">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-456">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-457">특성 노드에만이 속성이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-457">This property applies only to attribute nodes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-458">현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-458">Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</span></span></summary>
        <value><span data-ttu-id="0b4ac-459"><see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-459"><see langword="true" /> if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) that ends with <c>/&gt;</c>; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-460">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-460">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-461">이 속성을 사용하여 다음 간의 차이를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-461">This property enables you to determine the difference between the following:</span></span>  
  
 <span data-ttu-id="0b4ac-462">`<item num="123"/>` (`IsEmptyElement` 는 `true`).</span><span class="sxs-lookup"><span data-stu-id="0b4ac-462">`<item num="123"/>` (`IsEmptyElement` is `true`).</span></span>  
  
 <span data-ttu-id="0b4ac-463">`<item num="123">` (`IsEmptyElement` 는 `false`요소 내용이 비어 있지만).</span><span class="sxs-lookup"><span data-stu-id="0b4ac-463">`<item num="123">` (`IsEmptyElement` is `false`, although element content is empty).</span></span>  
  
 <span data-ttu-id="0b4ac-464">해당 `EndElement` 빈 요소에 대 한 노드 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-464">A corresponding `EndElement` node is not generated for empty elements.</span></span>  
  
 <span data-ttu-id="0b4ac-465">`IsEmptyElement` 원본 문서의 요소 했습니다 끝 요소 태그가 있는지 여부를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-465">`IsEmptyElement` simply reports whether or not the element in the source document had an end element tag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-466">다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-466">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-467">이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-467">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="namespaceURI">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-468">현재 줄 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-468">Gets the current line number.</span></span></summary>
        <value><span data-ttu-id="0b4ac-469">현재 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-469">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-470">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-470">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-471">이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-471">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="0b4ac-472">이 속성에 대 한 값의 시작 `1`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-472">The starting value for this property is `1`.</span></span>  
  
 <span data-ttu-id="0b4ac-473">결합할 <xref:System.Xml.XmlTextReader.LinePosition%2A>, 값 `1,1` 문서의 시작을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-473">Combined with <xref:System.Xml.XmlTextReader.LinePosition%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-474">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-474">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-475">현재 줄 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-475">Gets the current line position.</span></span></summary>
        <value><span data-ttu-id="0b4ac-476">현재 줄 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-476">The current line position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-477">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-477">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-478">이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-478">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="0b4ac-479">속성의 시작 값은 `1`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-479">The property's starting value is `1`.</span></span>  
  
 <span data-ttu-id="0b4ac-480">표시 되는 위치에는 태그에서 텍스트의 첫 번째 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-480">The position indicated is the first character of text in the markup.</span></span>  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 <span data-ttu-id="0b4ac-481">앞의 XML 텍스트의 첫 번째 줄에는 `LinePosition` 의 `2` 문자에 해당 하 `r`; 두 번째 줄에는 `LinePosition` 의 `5` 문자에 해당 `t`; 및 세 번째 줄을 `LinePosition` 의 `3` 문자에 해당 `r`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-481">On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.</span></span>  
  
 <span data-ttu-id="0b4ac-482">결합할 <xref:System.Xml.XmlTextReader.LineNumber%2A>, 값 `1,1` 문서의 시작을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-482">Combined with <xref:System.Xml.XmlTextReader.LineNumber%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-483">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-483">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-484">현재 노드의 로컬 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-484">Gets the local name of the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-485">접두사를 제거한 현재 노드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-485">The name of the current node with the prefix removed.</span></span> <span data-ttu-id="0b4ac-486">예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-486">For example, <see langword="LocalName" /> is <see langword="book" /> for the element <c>&lt;bk:book&gt;</c>.</span></span>  
  
<span data-ttu-id="0b4ac-487">이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우 이 속성은 <see langword="String.Empty" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-487">For node types that do not have a name (like <see langword="Text" />, <see langword="Comment" />, and so on), this property returns <see langword="String.Empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-488">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-488">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-489">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-489">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-490">이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-490">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlTextReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="0b4ac-491">확인할 네임스페이스 URI의 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-491">The prefix whose namespace URI you want to resolve.</span></span> <span data-ttu-id="0b4ac-492">기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-492">To match the default namespace, pass an empty string.</span></span> <span data-ttu-id="0b4ac-493">이 문자열은 원자화할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-493">This string does not have to be atomized.</span></span></param>
        <summary><span data-ttu-id="0b4ac-494">현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-494">Resolves a namespace prefix in the current element's scope.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-495">접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-495">The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-496">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-496">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-497">다음 XML에 판독기가 배치 하는 경우에 `href` 특성을 접두사 `a` 호출 하 여 해결 될 `reader.LookupNamespace("a")`.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-497">In the following XML, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace("a")`.</span></span> <span data-ttu-id="0b4ac-498">반환 된 문자열은 `urn:456`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-498">The returned string is `urn:456`.</span></span>  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-499"><see cref="P:System.Xml.XmlTextReader.Namespaces" /> 속성이 <see langword="true" />로 설정되어 있고 <paramref name="prefix" /> 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-499">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b4ac-500">지정된 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-500">Moves to the specified attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-501">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-501">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlTextReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="0b4ac-502">특성의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-502">The index of the attribute.</span></span></param>
        <summary><span data-ttu-id="0b4ac-503">지정된 인덱스가 있는 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-503">Moves to the attribute with the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-504">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-504">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-505">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-505">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-506"><paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlReader.AttributeCount" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-506">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlTextReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b4ac-507">특성의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-507">The qualified name of the attribute.</span></span></param>
        <summary><span data-ttu-id="0b4ac-508">지정된 이름이 있는 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-508">Moves to the attribute with the specified name.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-509">특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-509"><see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-510"><see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-510">If <see langword="false" />, the reader's position does not change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-511">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-511">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-512">호출한 후 `MoveToAttribute`의 <xref:System.Xml.XmlTextReader.Name%2A>를 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성에는 해당 특성의 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-512">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlTextReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="0b4ac-513">특성의 로컬 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-513">The local name of the attribute.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="0b4ac-514">특성의 네임스페이스 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-514">The namespace URI of the attribute.</span></span></param>
        <summary><span data-ttu-id="0b4ac-515">지정된 로컬 이름과 네임스페이스 URI가 있는 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-515">Moves to the attribute with the specified local name and namespace URI.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-516">특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-516"><see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-517"><see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-517">If <see langword="false" />, the reader's position does not change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-518">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-518">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-519">호출한 후 `MoveToAttribute`의 <xref:System.Xml.XmlTextReader.Name%2A>를 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성에는 해당 특성의 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-519">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlTextReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-520">현재 특성 노드가 포함된 요소로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-520">Moves to the element that contains the current attribute node.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-521">판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-521"><see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-522">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-522">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-523">이 메서드를 사용 하 여 해당 특성을 통해 이동한 후 요소 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-523">Use this method to return to an element after navigating through its attributes.</span></span> <span data-ttu-id="0b4ac-524">이 메서드는 다음 노드 형식 중 하나에 판독기를 이동 합니다. `Element`, `DocumentType`, 또는 `XmlDeclaration`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-524">This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-525">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-525">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-526">첫 번째 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-526">Moves to the first attribute.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-527">특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-527"><see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-528">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-528">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-529">다음 예제에서는 루트 노드의 첫 번째 특성의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-529">The following example gets the value of the first attribute of the root node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-530">이 예제에서는 파일을 사용 하 여 `attrs.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-530">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-531">다음 특성으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-531">Moves to the next attribute.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-532">다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-532"><see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-533">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-533">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-534">현재 노드가 요소 노드인 경우이 메서드는 <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-534">If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>.</span></span> <span data-ttu-id="0b4ac-535">하는 경우 `MoveToNextAttribute` 반환 `true`, 판독기의 위치가 바뀌지 않으면이 고, 그렇지 않으면 다음 특성으로 판독기를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-535">If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-536">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-536">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-537">현재 노드의 정규화된 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-537">Gets the qualified name of the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-538">현재 노드의 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-538">The qualified name of the current node.</span></span> <span data-ttu-id="0b4ac-539">예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-539">For example, <see langword="Name" /> is <see langword="bk:book" /> for the element <c>&lt;bk:book&gt;</c>.</span></span>  
  
<span data-ttu-id="0b4ac-540">반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-540">The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span></span> <span data-ttu-id="0b4ac-541">다음 노드 형식은 나열된 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-541">The following node types return the listed values.</span></span> <span data-ttu-id="0b4ac-542">기타 모든 노드 형식은 빈 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-542">All other node types return an empty string.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="0b4ac-543">노드 형식</span><span class="sxs-lookup"><span data-stu-id="0b4ac-543">Node Type</span></span> 
 </term><description> <span data-ttu-id="0b4ac-544">name</span><span class="sxs-lookup"><span data-stu-id="0b4ac-544">Name</span></span> 
 </description></listheader><item><term><see langword="Attribute" /></term><description> <span data-ttu-id="0b4ac-545">특성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-545">The name of the attribute.</span></span>  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> <span data-ttu-id="0b4ac-546">문서 형식 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-546">The document type name.</span></span>  
  
 </description></item><item><term><see langword="Element" /></term><description> <span data-ttu-id="0b4ac-547">태그 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-547">The tag name.</span></span>  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> <span data-ttu-id="0b4ac-548">참조된 엔터티의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-548">The name of the entity referenced.</span></span>  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> <span data-ttu-id="0b4ac-549">처리 명령의 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-549">The target of the processing instruction.</span></span>  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> <span data-ttu-id="0b4ac-550">리터럴 문자열 <see langword="xml" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-550">The literal string <see langword="xml" />.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-551">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-551">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-552">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-552">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-553">파일을 사용 하는 샘플 `items.xml`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-553">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-554">네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-554">Gets or sets a value indicating whether to do namespace support.</span></span></summary>
        <value><span data-ttu-id="0b4ac-555">네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-555"><see langword="true" /> to do namespace support; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-556">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-556">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-557">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-557">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-558">이 속성은 판독기 www.w3.org/TR/REC-xml-names 위치한 XML 권장 사항의 W3C 네임 스페이스를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-558">This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</span></span>  
  
 <span data-ttu-id="0b4ac-559">`Namespaces` 읽기 작업이 발생 한 후 속성을 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-559">The `Namespaces` property cannot be set after a read operation has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-560">읽기 작업이 발생한 후 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Initial" />이 아닌 경우)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-560">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not <see langword="ReadState.Initial" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-561">W3C 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-561">Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</span></span></summary>
        <value><span data-ttu-id="0b4ac-562">현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-562">The namespace URI of the current node; otherwise an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-563">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-563">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-564">이 속성이 관련이 `Element` 고 `Attribute` 노드만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-564">This property is relevant to `Element` and `Attribute` nodes only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-565">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-565">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-566">이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-566">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-567">이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-567">Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</span></span></summary>
        <value><span data-ttu-id="0b4ac-568">노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-568">The <see langword="XmlNameTable" /> enabling you to get the atomized version of a string within the node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-569">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-569">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-570">반환 된 모든 노드 및 특성 이름은 <xref:System.Xml.XmlTextReader> 를 사용 하 여 원자화 되는 `NameTable`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-570">All node and attribute names returned from <xref:System.Xml.XmlTextReader> are atomized using the `NameTable`.</span></span> <span data-ttu-id="0b4ac-571">이름이 같은 여러 번에 반환 될 때 (예를 들어 `Customer`), 한 다음 동일한 `String` 해당 이름의 개체가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-571">When the same name is returned multiple times (for example, `Customer`), then the same `String` object is returned for that name.</span></span> <span data-ttu-id="0b4ac-572">이렇게 하면 개체에 비용이 많이 드는 문자열 비교 대신 이러한 문자열 비교를 수행 하는 효율적인 코드를 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-572">This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-573">현재 노드의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-573">Gets the type of the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-574">현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-574">One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-575">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-575">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-576">이 속성은 다음을 반환 하지 않습니다 `XmlNodeType` 형식: `Document`, `DocumentFragment`, `Entity`합니다 `EndEntity`, 또는 `Notation`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-576">This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, `EndEntity`, or `Notation`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-577">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-577">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-578">파일을 사용 하는 샘플 `items.xml`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-578">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Normalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Normalization : bool with get, set" Usage="System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-579">공백과 특성 값을 정규화할지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-579">Gets or sets a value indicating whether to normalize white space and attribute values.</span></span></summary>
        <value><span data-ttu-id="0b4ac-580">정규화하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-580"><see langword="true" /> to normalize; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-581">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-581">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-582">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-582">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-583">이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-583">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-584">경우는 <xref:System.Xml.XmlTextReader> 생성 하는 데 사용 되는 <xref:System.Xml.XmlValidatingReader>특성 값을 정규화 하 `Normalization` 로 설정 되어야 합니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-584">If the <xref:System.Xml.XmlTextReader> is used to construct an <xref:System.Xml.XmlValidatingReader>, to normalize attribute values, `Normalization` must be set to `true`.</span></span>  
  
 <span data-ttu-id="0b4ac-585">하는 경우 `Normalization` 로 설정 된 `false`, 문자 범위 숫자 엔터티에 대 한 확인 비활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-585">If `Normalization` is set to `false`, this also disables character range checking for numeric entities.</span></span> <span data-ttu-id="0b4ac-586">결과적으로, 엔터티를 같은 문자 `&#0;`, 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-586">As a result, character entities, such as `&#0;`, are allowed.</span></span>  
  
 <span data-ttu-id="0b4ac-587">다음은 특성 값 표준화에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-587">The following describes attribute value normalization:</span></span>  
  
-   <span data-ttu-id="0b4ac-588">문자 참조의 경우 참조된 문자를 특성 값에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-588">For a character reference, append the referenced character to the attribute value.</span></span>  
  
-   <span data-ttu-id="0b4ac-589">엔터티 참조 경우 엔터티의 대체 텍스트를 재귀적으로 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-589">For an entity reference, recursively process the replacement text of the entity.</span></span>  
  
-   <span data-ttu-id="0b4ac-590">공백 문자 (#x20 #xD, #xA, #x9)에 대 한 표준화 된 값에 #x20을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-590">For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</span></span> <span data-ttu-id="0b4ac-591">(만 단일 #x20 구문 분석 된 외부 엔터티의 일부 또는 구문 분석 된 내부 엔터티의 리터럴 엔터티 값인 "#xD #xA" 시퀀스에 대 한 추가 됩니다.)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-591">(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</span></span>  
  
-   <span data-ttu-id="0b4ac-592">표준화된 값에 기타 문자를 추가하여 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-592">Process other characters by appending them to the normalized value.</span></span>  
  
-   <span data-ttu-id="0b4ac-593">선언 된 값을 CDATA 없는 경우에 선행 및 후행 공백 (#x20) 문자를 삭제 하 고 (#x20) 공백 문자의 시퀀스를 단일 공백 (#x20) 문자로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-593">If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</span></span>  
  
 <span data-ttu-id="0b4ac-594">`XmlTextReader` 만 특성 또는 CDATA 정규화를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-594">The `XmlTextReader` only performs attribute or CDATA normalization.</span></span> <span data-ttu-id="0b4ac-595">내에서 래핑된 경우가 아니면 DTD 별 정규화를 수행 하지 않습니다는 `XmlValidatingReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-595">It does not do DTD-specific normalization unless wrapped within an `XmlValidatingReader`.</span></span>  
  
 <span data-ttu-id="0b4ac-596">자세한 내용은 정규화에 대 한 W3C XML 1.0 권장 사항을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-596">Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-597">다음 예제에서는 설정 정규화를 사용 하 여 판독기 동작을 보여 줍니다. 한 다음 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-597">The following example shows reader behavior with normalization turned on and then off.</span></span>  
  
 [!code-cpp[XmlTextReader.Normalization#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-598">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Closed" />인 경우)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-598">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-599">현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-599">Gets the namespace prefix associated with the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-600">현재 노드와 관련된 네임스페이스 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-600">The namespace prefix associated with the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-601">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-601">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-602">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-602">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-603">이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-603">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.Obsolete("Use DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-604">DTD 처리를 허용할지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-604">Gets or sets a value indicating whether to allow DTD processing.</span></span> <span data-ttu-id="0b4ac-605">이 속성은 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-605">This property is obsolete.</span></span> <span data-ttu-id="0b4ac-606">대신 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />를 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-606">Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</span></span></summary>
        <value><span data-ttu-id="0b4ac-607">DTD 처리를 허용하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-607"><see langword="true" /> to disallow DTD processing; otherwise <see langword="false" />.</span></span> <span data-ttu-id="0b4ac-608">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-608">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-609">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-609">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-610">DTD 처리는 기본적으로 사용에 대 한 이전 버전과 호환성.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-610">DTD processing is enabled by default for backwards compatibility.</span></span> <span data-ttu-id="0b4ac-611">그러나 애플리케이션에 DTD 처리가 필요한 경우가 아니면이 설정을 비활성화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-611">However, unless your application requires DTD processing, you should disable this setting.</span></span> <span data-ttu-id="0b4ac-612">DTD 처리를 비활성화하면 특정 서비스 거부(Denial of service) 공격을 차단하는 데 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-612">Disabling DTD processing can be useful in preventing certain denial of service attacks.</span></span> <span data-ttu-id="0b4ac-613">경우로 `true`, 판독기 throw는 <xref:System.Xml.XmlException> DTD 내용이 발생 시.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-613">If set to `true`, the reader throws an <xref:System.Xml.XmlException> when any DTD content is encountered.</span></span>  
  
 <span data-ttu-id="0b4ac-614">DTD 처리를 사용 하는 경우 가능한 서비스 거부 공격 및 신뢰할 수 없는 소스에서 Dtd를 포함 하 여 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-614">If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</span></span> <span data-ttu-id="0b4ac-615">사용 하 여는 <xref:System.Xml.XmlSecureResolver> 리소스를 제한 하는 <xref:System.Xml.XmlTextReader> 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-615">Use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="0b4ac-616">또한 애플리케이션을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-616">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="0b4ac-617">예를 들어, ASP.NET 애플리케이션에서 제한 시간 구성</span><span class="sxs-lookup"><span data-stu-id="0b4ac-617">For example, configure time-out limits in your ASP.NET application</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-618">특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-618">Gets the quotation mark character used to enclose the value of an attribute node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-619">특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-619">The quotation mark character (" or ') used to enclose the value of an attribute node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-620">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-620">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-621">특성 노드에만이 속성이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-621">This property applies only to an attribute node.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlTextReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-622">스트림에서 다음 노드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-622">Reads the next node from the stream.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-623">다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-623"><see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-624">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-624">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-625">먼저 판독기가 만들어지고 초기화 됩니다을 하는 경우 정보가 없는 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-625">When a reader is first created and initialized, there is no information available.</span></span> <span data-ttu-id="0b4ac-626">호출 해야 `Read` 첫 번째 노드를 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-626">You must call `Read` to read the first node.</span></span>  
  
 <span data-ttu-id="0b4ac-627">이 메서드는 데이터 스트림에서 4 바이트 이상 구문 분석을 시작 하기 위해 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-627">This method requires at least four bytes from the data stream in order to begin parsing.</span></span> <span data-ttu-id="0b4ac-628">4 바이트 미만인 반환 됩니다 스트림의 데이터가 더 이상 없는 경우 메서드가 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-628">If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</span></span> <span data-ttu-id="0b4ac-629">스트림에서 더 많은 데이터를 네 번째 바이트가 수신 될 때까지 구문 분석 메서드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-629">If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-630">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-630">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-631">파일을 사용 하는 샘플 `items.xml`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-631">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-632">XML을 구문 분석하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-632">An error occurred while parsing the XML.</span></span></exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlTextReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-633">특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-633">Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-634">반환할 노드가 있는 경우 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-634"><see langword="true" /> if there are nodes to return.</span></span>  
  
 <span data-ttu-id="0b4ac-635">처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-635"><see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</span></span>  
  
<span data-ttu-id="0b4ac-636"><c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 <see langword="String.Empty" />의 값을 갖는 것을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-636">An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of <see langword="String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-637">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-637">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-638">이 메서드를 사용 하 여 호출한 후 `MoveToAttribute` 특성 값을 구성 하는 텍스트 또는 엔터티 참조 노드를 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-638">Use this method after calling `MoveToAttribute` to read through the text or entity reference nodes that make up the attribute value.</span></span> <span data-ttu-id="0b4ac-639"><xref:System.Xml.XmlReader.Depth%2A> 특성 값 노드 1을 더한 특성 노드의 깊이 증가 하 고 내부 및 외부로 일반 엔터티 참조를 단계별로 실행할 때 1 씩 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-639">The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-640">다음 예제에서는 텍스트와 엔터티 노드를 사용 하 여 특성을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-640">The following example reads an attribute with text and entity nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBase64 (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBase64(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBase64 (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="0b4ac-641">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-641">The array of characters that serves as the buffer to which the text contents are written.</span></span></param>
        <param name="offset"><span data-ttu-id="0b4ac-642">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-642">The zero-based index into the array specifying where the method can begin to write to the buffer.</span></span></param>
        <param name="len"><span data-ttu-id="0b4ac-643">버퍼에 쓸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-643">The number of bytes to write into the buffer.</span></span></param>
        <summary><span data-ttu-id="0b4ac-644">Base64를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-644">Decodes Base64 and returns the decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-645">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-645">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-646">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-646">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-647">같은 <xref:System.Xml.XmlTextReader.ReadChars%2A>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속 해 서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-647">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="0b4ac-648">Base64 콘텐츠 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-648">It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="0b4ac-649">1521 RFC를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-649">See RFC 1521.</span></span> <span data-ttu-id="0b4ac-650">(에서 Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org).)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-650">(You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-651">다음 예에서는 Base64 및 BinHex 데이터가 포함 된 파일을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-651">The following example reads a file containing Base64 and BinHex data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-652">파일을 사용 하는 샘플 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="0b4ac-652">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-653">Base64 시퀀스가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-653">The Base64 sequence is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-654"><paramref name="array" /> 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-654">The value of <paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-655"><paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-655"><paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBinHex (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBinHex(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBinHex (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="0b4ac-656">디코딩된 이진 바이트를 쓸 버퍼 역할을 하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-656">The byte array that serves as the buffer to which the decoded binary bytes are written.</span></span></param>
        <param name="offset"><span data-ttu-id="0b4ac-657">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-657">The zero-based index into the array specifying where the method can begin to write to the buffer.</span></span></param>
        <param name="len"><span data-ttu-id="0b4ac-658">버퍼에 쓸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-658">The number of bytes to write into the buffer.</span></span></param>
        <summary><span data-ttu-id="0b4ac-659"><see langword="BinHex" />를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-659">Decodes <see langword="BinHex" /> and returns the decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-660">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-660">The number of bytes written to your buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-661">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-661">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-662">같은 <xref:System.Xml.XmlTextReader.ReadChars%2A>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속 해 서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-662">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="0b4ac-663">해당 디코딩합니다 `BinHex` 콘텐츠 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-663">It decodes `BinHex` content and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-664">다음 예제에서는 포함 된 파일을 읽고 `Base64` 고 `BinHex` 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-664">The following example reads a file containing `Base64` and `BinHex` data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-665">파일을 사용 하는 샘플 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="0b4ac-665">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-666"><see langword="BinHex" /> 시퀀스가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-666">The <see langword="BinHex" /> sequence is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-667"><paramref name="array" /> 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-667">The value of <paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-668"><paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-668"><paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChars (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadChars : char[] * int * int -&gt; int" Usage="xmlTextReader.ReadChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="0b4ac-669">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-669">The array of characters that serves as the buffer to which the text contents are written.</span></span></param>
        <param name="index"><span data-ttu-id="0b4ac-670">메서드가 텍스트 콘텐츠 쓰기를 시작할 수 있는 <paramref name="buffer" /> 내 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-670">The position within <paramref name="buffer" /> where the method can begin writing text contents.</span></span></param>
        <param name="count"><span data-ttu-id="0b4ac-671"><paramref name="buffer" />로 쓸 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-671">The number of characters to write into <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="0b4ac-672">요소의 텍스트 콘텐츠를 문자 버퍼로 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-672">Reads the text contents of an element into a character buffer.</span></span> <span data-ttu-id="0b4ac-673">이 메서드는 뒤이어 호출하면 포함된 텍스트의 큰 스트림을 읽도록 디자인되었습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-673">This method is designed to read large streams of embedded text by calling it successively.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-674">읽을 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-674">The number of characters read.</span></span> <span data-ttu-id="0b4ac-675">판독기가 요소에 배치되지 않았거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 반환 값은 <see langword="0" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-675">This can be <see langword="0" /> if the reader is not positioned on an element or if there is no more text content to return in the current context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-676">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-676">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-677">이것이 매우 큰 XML 문서에 포함 된 텍스트 스트림을 처리 하는 데 가장 효율적인 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-677">This is the most efficient way to process very large streams of text embedded in an XML document.</span></span> <span data-ttu-id="0b4ac-678">큰 문자열 개체를 할당 하는 대신 `ReadChars` 한 번에 텍스트 콘텐츠 버퍼를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-678">Rather than allocating large string objects, `ReadChars` returns text content a buffer at a time.</span></span> <span data-ttu-id="0b4ac-679">이 메서드가 요소 노드에 대해서만 작동 하도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-679">This method is designed to work only on element nodes.</span></span> <span data-ttu-id="0b4ac-680">다른 노드 형식을 사용 하면 `ReadChars` 반환할 `0`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-680">Other node types cause `ReadChars` to return `0`.</span></span>  
  
 <span data-ttu-id="0b4ac-681">다음 xml 시작 태그에 판독기가 배치 되 면 `ReadChars` 반환 `test` 끝 태그 뒤 판독기를 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-681">In the following XML, if the reader is positioned on the start tag, `ReadChars` returns `test` and positions the reader after the end tag.</span></span>  
  
```xml  
<Item>test</Item>  
```  
  
 <span data-ttu-id="0b4ac-682">`ReadChars` 다음 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-682">`ReadChars` has the following functionality:</span></span>  
  
-   <span data-ttu-id="0b4ac-683">이 메서드는 요소 노드만에서 작동 하도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-683">This method is designed to work on element nodes only.</span></span> <span data-ttu-id="0b4ac-684">다른 노드 형식을 사용 하면 `ReadChars` 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-684">Other node types cause `ReadChars` to return 0.</span></span>  
  
-   <span data-ttu-id="0b4ac-685">이 메서드는 실제 문자 내용이 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-685">This method returns the actual character content.</span></span> <span data-ttu-id="0b4ac-686">엔터티, CDATA 또는 다른 태그를 확인 하지가 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-686">There is no attempt to resolve entities, CDATA, or any other markup encountered.</span></span> <span data-ttu-id="0b4ac-687">`ReadChars` 모든 시작 태그와 태그를 포함 한 끝 태그 사이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-687">`ReadChars` returns everything between the start tag and the end tag, including markup.</span></span>  
  
-   <span data-ttu-id="0b4ac-688">`ReadChars` 제대로 구성 되지 않은 XML 태그를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-688">`ReadChars` ignores XML markup that is not well-formed.</span></span> <span data-ttu-id="0b4ac-689">예를 들어, 다음 XML 문자열을 때 읽기 `<A>1<A>2</A>`, `ReadChars` 반환 `1<A>2</A>`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-689">For example, when reading the following XML string `<A>1<A>2</A>`, `ReadChars` returns `1<A>2</A>`.</span></span> <span data-ttu-id="0b4ac-690">(일치 하는 요소 쌍에서 태그를 반환 하 고 나머지는 무시 합니다.)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-690">(It returns markup from the matching element pair and ignores others.)</span></span>  
  
-   <span data-ttu-id="0b4ac-691">이 메서드는 정규화를 수행 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-691">This method does not do any normalization.</span></span>  
  
-   <span data-ttu-id="0b4ac-692">때 `ReadChars` 끝에 도달한 문자 스트림 값 0을 반환 하 고 끝 태그 뒤 판독기가 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-692">When `ReadChars` has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</span></span>  
  
-   <span data-ttu-id="0b4ac-693">특성을 사용 하는 동안 메서드를 사용할 수 없는 읽을 `ReadChars`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-693">Attribute read methods are not available while using `ReadChars`.</span></span>  
  
 <span data-ttu-id="0b4ac-694">예를 들어, 다음 XML을 사용 하 여:</span><span class="sxs-lookup"><span data-stu-id="0b4ac-694">For example, using the following XML:</span></span>  
  
```xml  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 <span data-ttu-id="0b4ac-695">판독기가 `<item>` while의 끝에 있는 요소를 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-695">The reader is positioned on the `<item>` element at the end of the while loop.</span></span>  
  
```csharp  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-696">다음 예제에서는 사용 하 여 XML 읽습니다 `ReadChars`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-696">The following example reads in XML using `ReadChars`.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-697">이 예제에서는 `items.xml` 파일을 입력으로 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-697">The example uses the `items.xml` file as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0b4ac-698"><paramref name="count" />가 <paramref name="buffer" />에 지정된 공간(버퍼 크기 - <paramref name="index" />)보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-698"><paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-699"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-699">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-700"><paramref name="index" />
          <see langword="&lt; 0" /> 또는 <paramref name="count" /><see langword="&lt; 0" /></span><span class="sxs-lookup"><span data-stu-id="0b4ac-700"><paramref name="index" />
          <see langword="&lt; 0" /> or <paramref name="count" /><see langword="&lt; 0" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="0b4ac-701">결과 텍스트를 복사해 넣을 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-701">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="0b4ac-702">이 값은 <see langword="null" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-702">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="0b4ac-703">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-703">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="0b4ac-704">버퍼에 복사할 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-704">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="0b4ac-705">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-705">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="0b4ac-706">콘텐츠를 읽고 <see langword="Base64" /> 디코딩된 이진 바이트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-706">Reads the content and returns the <see langword="Base64" /> decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-707">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-707">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-708">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-708">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-709">이 메서드는 콘텐츠를 스트리밍하는 `Base64` content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `Base64`-인코딩된 GIF 이미지) 버퍼에 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-709">This method streams the content, decodes the `Base64` content, and returns the decoded binary bytes (for example, an inline `Base64`-encoded GIF image) into the buffer.</span></span> <span data-ttu-id="0b4ac-710">포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-710">This method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="0b4ac-711">자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1:를 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 메커니즘".</span><span class="sxs-lookup"><span data-stu-id="0b4ac-711">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="0b4ac-712">Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-712">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-713">에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 메서드 값 0을 반환할 때까지 메서드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-713">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="0b4ac-714">이 메서드에 다음과 같은 동작이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-714">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="0b4ac-715"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-715"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="0b4ac-716">판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-716">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="0b4ac-717">더 적은 묻는 경우 남아 있는 것 보다는 스트림 판독기 바이트의 정확한 수를 현재 위치에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-717">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="0b4ac-718"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 다음 XML 노드 형식에서 지원 되지 않습니다: `Element`, `XmlDeclaration`, `None`, `Document`를 `DocumentType`를 `Notation`, `Entity`, `DocumentFragment`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-718"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-719"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-719">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-720">현재 노드에서 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />를 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-720"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported in the current node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-721">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-721">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="0b4ac-722">결과 텍스트를 복사해 넣을 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-722">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="0b4ac-723">이 값은 <see langword="null" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-723">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="0b4ac-724">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-724">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="0b4ac-725">버퍼에 복사할 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-725">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="0b4ac-726">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-726">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="0b4ac-727">콘텐츠를 읽고 <see langword="BinHex" /> 디코딩된 이진 바이트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-727">Reads the content and returns the <see langword="BinHex" /> decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-728">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-728">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-729">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-729">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-730">이 메서드는 콘텐츠를 스트리밍하는 `BinHex` content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-730">This method streams the content, decodes the `BinHex` content, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span> <span data-ttu-id="0b4ac-731">포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-731">This method can be called successively to read large streams of embedded text.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-732">에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 메서드 값 0을 반환할 때까지 메서드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-732">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="0b4ac-733">이 메서드에 다음과 같은 동작이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-733">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="0b4ac-734"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-734"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="0b4ac-735">판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-735">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="0b4ac-736">더 적은 묻는 경우 남아 있는 것 보다는 스트림 판독기 바이트의 정확한 수를 현재 위치에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-736">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="0b4ac-737"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 다음 XML 노드 형식에서 지원 되지 않습니다: `Element`, `XmlDeclaration`, `None`, `Document`를 `DocumentType`를 `Notation`, `Entity`, `DocumentFragment`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-737"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-738"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-738">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-739"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-739"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-740">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-740">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0b4ac-741">구현된 <see cref="T:System.Xml.XmlTextReader" />에서 이 메서드를 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-741">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="0b4ac-742">결과 텍스트를 복사해 넣을 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-742">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="0b4ac-743">이 값은 <see langword="null" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-743">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="0b4ac-744">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-744">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="0b4ac-745">버퍼에 복사할 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-745">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="0b4ac-746">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-746">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="0b4ac-747">요소를 읽고 Base64 콘텐츠를 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-747">Reads the element and decodes the Base64 content.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-748">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-748">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-749">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-749">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-750">이 메서드는 요소 내용을 읽고 Base64 인코딩을 사용 하 여 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-750">This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="0b4ac-751">자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1:를 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 메커니즘".</span><span class="sxs-lookup"><span data-stu-id="0b4ac-751">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="0b4ac-752">Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-752">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
 <span data-ttu-id="0b4ac-753">이 메서드는 단순 콘텐츠 요소를 읽을 수만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-753">This method can only read simple-content elements.</span></span> <span data-ttu-id="0b4ac-754">요소는 텍스트, 공백, 유효 공백 문자를 CDATA 섹션, 주석과 처리 명령을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-754">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="0b4ac-755">이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-755">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="0b4ac-756">요소는 자식 요소를 가질 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-756">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="0b4ac-757">이 메서드는 매우 비슷합니다는 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 한다는 점을 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-757">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="0b4ac-758">경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlTextReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-758">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="0b4ac-759">다음 <xref:System.Xml.XmlTextReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-759">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="0b4ac-760">호출 하는 경우 <xref:System.Xml.XmlTextReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlTextReader.Read%2A> 메서드를 호출한 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-760">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="0b4ac-761">즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-761">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="0b4ac-762">다음 끝 태그 노드를 읽고, 다음 노드를 읽고 후속 노드에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-762">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-763">참조 <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> 에이 메서드를 사용 하는 예제를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-763">See <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-764"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-764">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-765">현재 노드가 요소 노드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-765">The current node is not an element node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-766">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-766">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0b4ac-767">구현된 <see cref="T:System.Xml.XmlTextReader" />에서 이 메서드를 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-767">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-768">요소가 혼합 콘텐츠를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-768">The element contains mixed-content.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="0b4ac-769">요소를 요청한 형식으로 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-769">The content cannot be converted to the requested type.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="0b4ac-770">결과 텍스트를 복사해 넣을 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-770">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="0b4ac-771">이 값은 <see langword="null" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-771">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="0b4ac-772">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-772">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="0b4ac-773">버퍼에 복사할 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-773">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="0b4ac-774">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-774">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="0b4ac-775">요소를 읽고 <see langword="BinHex" /> 콘텐츠를 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-775">Reads the element and decodes the <see langword="BinHex" /> content.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-776">버퍼에 쓴 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-776">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-777">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-777">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-778">이 메서드는 요소 내용을 읽고, 사용 하 여 디코딩 `BinHex` 인코딩 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-778">This method reads the element content, decodes it using `BinHex` encoding, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
 <span data-ttu-id="0b4ac-779">이 메서드는 단순 콘텐츠 요소를 읽을 수만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-779">This method can only read simple-content elements.</span></span> <span data-ttu-id="0b4ac-780">요소는 텍스트, 공백, 유효 공백 문자를 CDATA 섹션, 주석과 처리 명령을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-780">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="0b4ac-781">이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-781">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="0b4ac-782">요소는 자식 요소를 가질 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-782">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="0b4ac-783">이 메서드는 매우 비슷합니다는 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 한다는 점을 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-783">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="0b4ac-784">경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlTextReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-784">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="0b4ac-785">다음 <xref:System.Xml.XmlTextReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-785">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="0b4ac-786">호출 하는 경우 <xref:System.Xml.XmlTextReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlTextReader.Read%2A> 메서드를 호출한 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-786">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="0b4ac-787">즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-787">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="0b4ac-788">다음 끝 태그 노드를 읽고, 다음 노드를 읽고 후속 노드에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-788">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-789">참조 <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> 에이 메서드를 사용 하는 예제를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-789">See <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b4ac-790"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-790">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-791">현재 노드가 요소 노드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-791">The current node is not an element node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-792">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-792">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="0b4ac-793">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-793">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-794">요소가 혼합 콘텐츠를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-794">The element contains mixed-content.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="0b4ac-795">요소를 요청한 형식으로 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-795">The content cannot be converted to the requested type.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-796">판독기의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-796">Gets the state of the reader.</span></span></summary>
        <value><span data-ttu-id="0b4ac-797"><see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-797">One of the <see cref="T:System.Xml.ReadState" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-798">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-798">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlTextReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-799">요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-799">Reads the contents of an element or a text node as a string.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-800">요소 또는 텍스트 노드의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-800">The contents of the element or text node.</span></span> <span data-ttu-id="0b4ac-801">판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-801">This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</span></span>  
  
 <span data-ttu-id="0b4ac-802"><see langword="Note:" /> 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-802"><see langword="Note:" /> The text node can be either an element or an attribute text node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-803">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-803">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-804">요소에 배치 되 면 `ReadString` 모든 텍스트, 유효 공백 문자, 공백, 연결 및 `CData` 섹션 노드 함께 형식 및 요소 내용으로 연결 된 데이터를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-804">If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and `CData` section node types together and returns the concatenated data as the element content.</span></span> <span data-ttu-id="0b4ac-805">처리 명령 및 메모를 포함 하 여 모든 태그가 발생 하면 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-805">It stops when any markup is encountered, including comments and processing instructions.</span></span> <span data-ttu-id="0b4ac-806">이러한 동작은 혼합 내용 모델에서 발생하거나 요소 끝 태그를 읽을 때 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-806">This could occur in a mixed content model, or when an element end tag is read.</span></span>  
  
 <span data-ttu-id="0b4ac-807">텍스트 노드에 있을 경우 `ReadString` 요소 끝 태그를 텍스트 노드에서 동일한 연결을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-807">If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag.</span></span> <span data-ttu-id="0b4ac-808">판독기가 특성 텍스트 노드에 있을 경우 `ReadString`에는 판독기가 요소 시작 태그에 있을 때와 같은 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-808">If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag.</span></span> <span data-ttu-id="0b4ac-809">연결된 모든 요소 텍스트 노드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-809">It returns all the concatenated element text nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-810">다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-810">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-811">이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-811">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-812">XML을 구문 분석하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-812">An error occurred while parsing the XML.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-813">잘못된 작업을 시도한 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-813">An invalid operation was attempted.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberSignature Language="F#" Value="member this.ResetState : unit -&gt; unit" Usage="xmlTextReader.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-814">판독기의 상태를 ReadState.Initial로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-814">Resets the state of the reader to ReadState.Initial.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-815">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-815">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-816">이 메서드를 사용 하면 단일 스트림의 여러 XML 문서를 구문 분석할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-816">This method enables you to parse multiple XML documents in a single stream.</span></span> <span data-ttu-id="0b4ac-817">호출할 수는 XML 문서의 끝에 도달 하면 `ResetState` 를 다음 XML 문서에 대 한 준비 판독기의 상태를 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-817">When you reach the end of an XML document, you can call `ResetState` to reset the state of the reader in preparation for the next XML document.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0b4ac-818">스트림에서 문서 인코딩이 동일한 공유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-818">The documents in the stream must share the same encoding.</span></span> <span data-ttu-id="0b4ac-819">이 경우 없는 경우 때 `ResetState` 라고는 <xref:System.Xml.XmlException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-819">If this is not the case, when `ResetState` is called an <xref:System.Xml.XmlException> is thrown.</span></span> <span data-ttu-id="0b4ac-820">(.NET Framework 버전 1.1 및 이전 버전에서에서 동작 변경입니다).</span><span class="sxs-lookup"><span data-stu-id="0b4ac-820">(This is a change in behavior from .NET Framework version 1.1 and earlier).</span></span>  
  
 <span data-ttu-id="0b4ac-821">다음 속성을 받지 않으므로 `ResetState`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-821">The following properties are not affected by `ResetState`.</span></span>  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-822">다음 예제에서는 단일 스트림의 두 개의 XML 문서 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-822">The following example parses two XML documents in a single stream.</span></span>  
  
 [!code-cpp[XmlTextReader.ResetState#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-823"><see cref="T:System.Xml.XmlParserContext" />를 사용하여 판독기를 생성한 상태에서 <see langword="ResetState" />를 호출하는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-823">Calling <see langword="ResetState" /> if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="0b4ac-824">단일 스트림의 여러 문서가 동일한 인코딩을 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-824">Documents in a single stream do not share the same encoding.</span></span></exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlTextReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-825"><see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-825">Resolves the entity reference for <see langword="EntityReference" /> nodes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-826">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-826">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-827">판독기가 위치에 `EntityReference` 노드 (`XmlNodeType.EntityReference`) 이면 <xref:System.Xml.XmlTextReader.Read%2A> 이 메서드를 엔터티 대체 텍스트를 구문 분석 하는 호출 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-827">If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlTextReader.Read%2A> is called after calling this method, the entity replacement text is parsed.</span></span> <span data-ttu-id="0b4ac-828">엔터티 대체 텍스트를 마치면는 `EndEntity` 노드가 엔터티 참조 범위를 닫습니다 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-828">When the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-829">이 메서드를 호출한 후 엔터티를 특성 값의 일부인 경우 호출 해야 <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> 엔터티 한 단계씩 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-829">After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> to step into the entity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlTextReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-830">이 <see cref="T:System.Xml.XmlTextReader" /> 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlReaderSettings" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-830">Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance.</span></span></summary>
        <value><span data-ttu-id="0b4ac-831">이 <see cref="T:System.Xml.XmlTextReader" /> 인스턴스를 만드는 데 사용된 <see cref="T:System.Xml.XmlReaderSettings" /> 개체이거나, <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하여 판독기를 만들지 않은 경우에는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-831">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance; <see langword="null" /> if the reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> <span data-ttu-id="0b4ac-832">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]에서는 <xref:System.Xml.XmlReader> 클래스와 <xref:System.Xml.XmlReaderSettings> 메서드를 사용하여 <xref:System.Xml.XmlReader.Create%2A> 인스턴스를 만드는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-832">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the recommended practice is to create <xref:System.Xml.XmlReader> instances using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method.</span></span> <span data-ttu-id="0b4ac-833">그러면 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]의 새로운 기능을 모두 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-833">This allows you to take full advantage of all the new features introduced in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="0b4ac-834">자세한 내용은 주의 섹션을 참조 합니다 <xref:System.Xml.XmlReader> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-834">For more information, see the Remarks section in the <xref:System.Xml.XmlReader> reference page.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Skip();" />
      <MemberSignature Language="F#" Value="override this.Skip : unit -&gt; unit" Usage="xmlTextReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-835">현재 노드의 자식을 건너뜁니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-835">Skips the children of the current node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-836">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-836">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-837">다음 xml에서에 판독기가 배치 하는 경우을 입력 합니다 `<a>` 노드 또는 해당 특성, 호출 `Skip` 판독기가 `<b>` 노드.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-837">In the following XML input if the reader is positioned on the `<a>` node or any of its attributes, calling `Skip` positions the reader to the `<b>` node.</span></span>  
  
 <span data-ttu-id="0b4ac-838">경우 판독기가 리프 노드에 이미 (같은 합니다 `<x>` 노드 또는 텍스트 노드의 `abc`)를 호출 `Skip` 호출 하는 것 같습니다 <xref:System.Xml.XmlTextReader.Read%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-838">If the reader is positioned on a leaf node already (such as the `<x>` node or the text node `abc`), calling `Skip` is the same as calling <xref:System.Xml.XmlTextReader.Read%2A>.</span></span>  
  
```xml  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 <span data-ttu-id="0b4ac-839">이 메서드는 올바른 형식의 XML에 대 한 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-839">This method checks for well-formed XML.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b4ac-840">이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-840">For a description of this member, see <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-841"><see cref="P:System.Xml.IXmlLineInfo.LineNumber" />, <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-841"><see langword="true" /> if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="0b4ac-842">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="0b4ac-842">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0b4ac-843"><xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlLineInfo> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-843">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlLineInfo> interface.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="0b4ac-844">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-844">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span></span></param>
        <summary><span data-ttu-id="0b4ac-845">이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-845">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-846">현재 범위 내의 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-846">An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b4ac-847">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="0b4ac-847">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0b4ac-848"><xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-848">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="0b4ac-849">찾을 네임스페이스 URI의 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-849">The prefix whose namespace URI you wish to find.</span></span></param>
        <summary><span data-ttu-id="0b4ac-850">이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-850">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-851">접두사에 매핑된 네임스페이스 URI이거나, 접두사가 네임스페이스 URI에 매핑되지 않은 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-851">The namespace URI that is mapped to the prefix; <see langword="null" /> if the prefix is not mapped to a namespace URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b4ac-852">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="0b4ac-852">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0b4ac-853"><xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-853">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="0b4ac-854">찾을 접두사의 네임스페이스 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-854">The namespace URI whose prefix you wish to find.</span></span></param>
        <summary><span data-ttu-id="0b4ac-855">이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-855">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="0b4ac-856">네임스페이스 URI에 매핑된 접두사이거나, 네임스페이스 URI가 접두사에 매핑되지 않은 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-856">The prefix that is mapped to the namespace URI; <see langword="null" /> if the namespace URI is not mapped to a prefix.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-857">현재 노드의 텍스트 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-857">Gets the text value of the current node.</span></span></summary>
        <value><span data-ttu-id="0b4ac-858">노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 반환되는 값이 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-858">The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span></span> <span data-ttu-id="0b4ac-859">다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-859">The following table lists node types that have a value to return.</span></span> <span data-ttu-id="0b4ac-860">다른 모든 노드 형식은 <see langword="String.Empty" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-860">All other node types return <see langword="String.Empty" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="0b4ac-861">노드 형식</span><span class="sxs-lookup"><span data-stu-id="0b4ac-861">Node Type</span></span> 
 </term><description> <span data-ttu-id="0b4ac-862">값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-862">Value</span></span> 
 </description></listheader><item><term><see langword="Attribute" /></term><description> <span data-ttu-id="0b4ac-863">특성 값</span><span class="sxs-lookup"><span data-stu-id="0b4ac-863">The value of the attribute.</span></span>  
  
 </description></item><item><term><see langword="CDATA" /></term><description> <span data-ttu-id="0b4ac-864">CDATA 섹션 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-864">The content of the CDATA section.</span></span>  
  
 </description></item><item><term><see langword="Comment" /></term><description> <span data-ttu-id="0b4ac-865">주석의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-865">The content of the comment.</span></span>  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> <span data-ttu-id="0b4ac-866">내부 하위 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-866">The internal subset.</span></span>  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> <span data-ttu-id="0b4ac-867">대상을 제외한 전체 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-867">The entire content, excluding the target.</span></span>  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> <span data-ttu-id="0b4ac-868"><see langword="xml:space" />= 'preserve' 범위 내의 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-868">The white space within an <see langword="xml:space" />= 'preserve' scope.</span></span>  
  
 </description></item><item><term><see langword="Text" /></term><description> <span data-ttu-id="0b4ac-869">텍스트 노드의 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-869">The content of the text node.</span></span>  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> <span data-ttu-id="0b4ac-870">태그 사이의 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-870">The white space between markup.</span></span>  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> <span data-ttu-id="0b4ac-871">선언 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-871">The content of the declaration.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-872">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-872">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-873">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-873">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="0b4ac-874">파일을 사용 하는 샘플 `items.xml`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-874">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property WhitespaceHandling As WhitespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::WhitespaceHandling WhitespaceHandling { System::Xml::WhitespaceHandling get(); void set(System::Xml::WhitespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.WhitespaceHandling : System.Xml.WhitespaceHandling with get, set" Usage="System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-875">공백이 처리되는 방법을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-875">Gets or sets a value that specifies how white space is handled.</span></span></summary>
        <value><span data-ttu-id="0b4ac-876"><see cref="T:System.Xml.WhitespaceHandling" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-876">One of the <see cref="T:System.Xml.WhitespaceHandling" /> values.</span></span> <span data-ttu-id="0b4ac-877">기본값은 <see langword="WhitespaceHandling.All" />이고 <see langword="Whitespace" /> <see langword="SignificantWhitespace" /> 노드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-877">The default is <see langword="WhitespaceHandling.All" /> (returns <see langword="Whitespace" /> and <see langword="SignificantWhitespace" /> nodes).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-878">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-878">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-879">이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-879">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
 <span data-ttu-id="0b4ac-880">때문에 `XmlTextReader` DTD 정보를 사용할 수 없는 `SignificantWhitepsace` 내만 반환 되는 노드가 `xml:space='preserve'` 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-880">Because the `XmlTextReader` does not have DTD information available to it, `SignificantWhitepsace` nodes are only returned within an `xml:space='preserve'` scope.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-881">다음 예제에서는 XML 조각을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-881">The following example reads an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0b4ac-882">잘못된 값이 지정된 경우</span><span class="sxs-lookup"><span data-stu-id="0b4ac-882">Invalid value specified.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b4ac-883">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Closed" />인 경우)</span><span class="sxs-lookup"><span data-stu-id="0b4ac-883">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-884">현재 <see langword="xml:lang" /> 범위를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-884">Gets the current <see langword="xml:lang" /> scope.</span></span></summary>
        <value><span data-ttu-id="0b4ac-885">현재 <see langword="xml:lang" /> 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-885">The current <see langword="xml:lang" /> scope.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-886">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-886">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-887">이 속성을 나타냅니다는 `xml:lang` 내 현재 노드에 있는 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-887">This property represents the `xml:lang` scope within which the current node resides.</span></span> <span data-ttu-id="0b4ac-888">예를 들어, 사용 하 여 XML 조각을 같습니다 `xml:lang` 루트 요소에서 영어 (미국)로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-888">For example, here is an XML fragment with `xml:lang` set to US English in the root element:</span></span>  
  
 <span data-ttu-id="0b4ac-889">\<root xml:lang="en-us"></span><span class="sxs-lookup"><span data-stu-id="0b4ac-889">\<root xml:lang="en-us"></span></span>  
  
 <span data-ttu-id="0b4ac-890">\<name>Fred\</name></span><span class="sxs-lookup"><span data-stu-id="0b4ac-890">\<name>Fred\</name></span></span>  
  
 <span data-ttu-id="0b4ac-891">\</root></span><span class="sxs-lookup"><span data-stu-id="0b4ac-891">\</root></span></span>  
  
 <span data-ttu-id="0b4ac-892">판독기가 배치 하는 경우는 `name` 요소에는 영어 (미국)의 범위에는이 속성을 사용할 수 있습니다 `xml:lang` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-892">When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a US English `xml:lang` attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-893">다음 예제에서는 표시 된 `xml:lang` 각 노드의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-893">The following example displays the `xml:lang` value for each of the nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlLang#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlTextReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-894">DTD 참조를 확인하는 데 사용된 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-894">Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</span></span></summary>
        <value><span data-ttu-id="0b4ac-895">사용할 <see langword="XmlResolver" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-895">The <see langword="XmlResolver" /> to use.</span></span> <span data-ttu-id="0b4ac-896"><see langword="null" />로 설정되면 외부 리소스는 확인되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-896">If set to <see langword="null" />, external resources are not resolved.</span></span>  
  
<span data-ttu-id="0b4ac-897">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-897">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the caller must be fully trusted in order to specify an <see langword="XmlResolver" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-898">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-898">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="0b4ac-899">판독기를 사용 하 여 `XmlResolver` 판독기로 로드할 파일의 위치를 확인 하 고 DTD 참조를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-899">The reader uses `XmlResolver` to resolve the location of the file loaded into the reader and also to resolve DTD references.</span></span> <span data-ttu-id="0b4ac-900">예를 들어 XML에 포함 된 DOCTYPE 선언 `<!DOCTYPE book SYSTEM book.dtd>` 판독기가이 외부 파일을 확인 하 고 잘 구성 된 DTD 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-900">For example, if your XML included the DOCTYPE declaration, `<!DOCTYPE book SYSTEM book.dtd>` the reader resolves this external file and ensures that the DTD is well-formed.</span></span> <span data-ttu-id="0b4ac-901">판독기는 유효성 검사에 대 한 DTD를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-901">The reader does not use the DTD for validation.</span></span>  
  
 <span data-ttu-id="0b4ac-902">이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-902">This property can be changed at any time and takes effect on the next read operation.</span></span> <span data-ttu-id="0b4ac-903">이 속성 설정 된 경우 `null`, 판독기에서 발생 한 모든 외부 DTD 참조는 확인 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-903">If this property is set to `null`, any external DTD references encountered by the reader are not resolved.</span></span>  
  
 <span data-ttu-id="0b4ac-904">버전 1.1에에서는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)],이 속성을 설정 하지 않으면 애플리케이션의 신뢰 수준을 기본 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-904">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], if this property is not set, the trust level of the application determines the default behavior.</span></span>  
  
 <span data-ttu-id="0b4ac-905">`Fully trusted code:` 기본값을 사용 하 여 판독기 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-905">`Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials.</span></span> <span data-ttu-id="0b4ac-906">사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요 합니다 `XmlResolver` 속성에 지정할는 `XmlResolver` 에 필요한 자격 증명입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-906">If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.</span></span>  
  
 <span data-ttu-id="0b4ac-907">`Semi-trusted code:` 합니다 `XmlResolver` 속성이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-907">`Semi-trusted code:` The `XmlResolver` property is set to `null`.</span></span> <span data-ttu-id="0b4ac-908">외부 리소스가 확인 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-908">External resources are not resolved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-909">다음 예제에서는 `XmlResolver` 속성 네트워크로 연결 된 파일에 액세스 하는 데 필요한 자격 증명을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-909">The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked file.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b4ac-910">현재 <see langword="xml:space" /> 범위를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-910">Gets the current <see langword="xml:space" /> scope.</span></span></summary>
        <value><span data-ttu-id="0b4ac-911"><see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-911">One of the <see cref="T:System.Xml.XmlSpace" /> values.</span></span> <span data-ttu-id="0b4ac-912"><see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-912">If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b4ac-913">사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-913">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4ac-914">다음 예제에서는 파일을 구문 분석 하 고 경우에 유효 공백 문자를 반환 합니다는 `xml:space='preserve'` 범위를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-914">The following example parses a file and returns significant white space if an `xml:space='preserve'` scope is found.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlSpace#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 <span data-ttu-id="0b4ac-915">이 예제에서는 파일을 사용 하 여 `authors.xml`입력으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0b4ac-915">The example uses the file, `authors.xml`, as input.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>