<Type Name="XmlDataDocument" FullName="System.Xml.XmlDataDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a872d47691c98843f9f659a22162f58817b7cecc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57934862" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataDocument : System.Xml.XmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataDocument extends System.Xml.XmlDocument" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlDataDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataDocument&#xA;Inherits XmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataDocument : System::Xml::XmlDocument" />
  <TypeSignature Language="F#" Value="type XmlDataDocument = class&#xA;    inherit XmlDocument" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlDocument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.Obsolete("XmlDataDocument class will be removed in a future release.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e1779-101">관계형 <see cref="T:System.Data.DataSet" />을 통해 구조적 데이터를 저장, 검색 및 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-101">Allows structured data to be stored, retrieved, and manipulated through a relational <see cref="T:System.Data.DataSet" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-102">이 클래스 확장 <xref:System.Xml.XmlDocument>합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-102">This class extends <xref:System.Xml.XmlDocument>.</span></span> <span data-ttu-id="e1779-103">XML 데이터 나 관계형 데이터를 로드 하 고 World Wide Web Consortium (W3C) 문서 개체 모델 (DOM)를 사용 하 여 해당 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-103">It enables you to load either relational data or XML data and manipulate that data using the World Wide Web Consortium (W3C) Document Object Model (DOM).</span></span> <span data-ttu-id="e1779-104">DOM 노드 개체의 계층으로 데이터를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-104">The DOM presents data as a hierarchy of node objects.</span></span> <span data-ttu-id="e1779-105">때문에 `XmlDataDocument` 구현 합니다 <xref:System.Xml.XPath.IXPathNavigable> 인터페이스에 대 한 소스 문서로 사용할 수도 있습니다는 <xref:System.Xml.Xsl.XslTransform> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-105">Because `XmlDataDocument` implements the <xref:System.Xml.XPath.IXPathNavigable> interface, it can also be used as the source document for the <xref:System.Xml.Xsl.XslTransform> class.</span></span>  
  
 <span data-ttu-id="e1779-106">`XmlDataDocument` 사용 하 여 닫기 정보에는 `DataSet` 로드 된 XML 데이터의 관계형 뷰를 제공 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-106">`XmlDataDocument` has a close affiliation with the `DataSet` class, which provides a relational view of the loaded XML data.</span></span> <span data-ttu-id="e1779-107">변경 내용이 `XmlDataDocument` 에 반영 됩니다는 `DataSet` 그 반대로 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-107">Any changes made to the `XmlDataDocument` are reflected in the `DataSet` and vice versa.</span></span>  
  
 <span data-ttu-id="e1779-108">로드 하는 `DataSet` XML 데이터를 사용 하 여 <xref:System.Data.DataSet.ReadXmlSchema%2A> 관계형 매핑을 만들려는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-108">To load a `DataSet` with XML data, use <xref:System.Data.DataSet.ReadXmlSchema%2A> to build a relational mapping.</span></span> <span data-ttu-id="e1779-109">XML 데이터 로드를 사용 하 여 <xref:System.Xml.XmlDataDocument.Load%2A> 또는 <xref:System.Xml.XmlDocument.LoadXml%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-109">The XML data can then be loaded using <xref:System.Xml.XmlDataDocument.Load%2A> or <xref:System.Xml.XmlDocument.LoadXml%2A>.</span></span>  
  
 <span data-ttu-id="e1779-110">관계형 데이터를 로드 하려면 지정 합니다 `DataSet` 관계형 데이터에서 매개 변수로 포함 하는 <xref:System.Xml.XmlDataDocument.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-110">To load relational data, specify the `DataSet` containing the relational data as the parameter in the <xref:System.Xml.XmlDataDocument.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e1779-111"><see cref="T:System.Xml.XmlDataDocument" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-111">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e1779-112"><see cref="T:System.Xml.XmlDataDocument" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-112">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-113">빈 <xref:System.Data.DataSet> 생성 되 고 연관 된 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-113">An empty <xref:System.Data.DataSet> is created and associated with the `XmlDataDocument`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataDocument (System.Data.DataSet dataset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.DataSet dataset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataDocument(System::Data::DataSet ^ dataset);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlDataDocument : System.Data.DataSet -&gt; System.Xml.XmlDataDocument" Usage="new System.Xml.XmlDataDocument dataset" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataset" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataset"><span data-ttu-id="e1779-114"><see langword="DataSet" />에 로드할 <see langword="XmlDataDocument" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-114">The <see langword="DataSet" /> to load into <see langword="XmlDataDocument" />.</span></span></param>
        <summary><span data-ttu-id="e1779-115">지정된 <see cref="T:System.Xml.XmlDataDocument" />를 사용하여 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-115">Initializes a new instance of the <see cref="T:System.Xml.XmlDataDocument" /> class with the specified <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-116">합니다 `XmlDataDocument` 동기화가 지정 된 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-116">The `XmlDataDocument` is synchronized with the specified `DataSet`.</span></span> <span data-ttu-id="e1779-117">모든 데이터를 `DataSet` 를 통해 즉시 사용할 수는 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-117">Any data in the `DataSet` is immediately available through the `XmlDataDocument`.</span></span> <span data-ttu-id="e1779-118">모든 변경 내용을 합니다 `DataSet` 전파 됩니다는 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-118">Any changes in the `DataSet` are propagated in the `XmlDataDocument`.</span></span> <span data-ttu-id="e1779-119">모든 변경 내용을 `XmlDataDocument`일치 하는 경우는 `DataSet` 스키마 전파 됩니다는 `DataSet`.</span><span class="sxs-lookup"><span data-stu-id="e1779-119">Any changes made in the `XmlDataDocument`, provided they match the `DataSet` schema, are propagated in the `DataSet`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1779-120">다음 예제에는 customer 테이블 로드는 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-120">The following example loads a customer table into an `XmlDataDocument`.</span></span>  
  
 <span data-ttu-id="e1779-121">이 예제에서는 SQL Server 2000의 Northwind 데이터베이스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-121">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.XmlDataDocument1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlConnection" />
        <altmember cref="T:System.Data.SqlClient.SqlDataAdapter" />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNode ^ CloneNode(bool deep);" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; System.Xml.XmlNode" Usage="xmlDataDocument.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep"><span data-ttu-id="e1779-122">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-122"><see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</span></span></param>
        <summary><span data-ttu-id="e1779-123">현재 노드의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-123">Creates a duplicate of the current node.</span></span></summary>
        <returns><span data-ttu-id="e1779-124">복제된 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-124">The cloned node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-125">복제는 `XmlDataDocument` 도 복제는 <xref:System.Data.DataSet> 스키마입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-125">Cloning the `XmlDataDocument` also clones the <xref:System.Data.DataSet> schema.</span></span>  
  
 <span data-ttu-id="e1779-126">하는 경우 `deep` 로 설정 된 `false`, 복제 된 `DataSet` 에 없는 데이터, 행이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-126">If `deep` is set to `false`, the cloned `DataSet` has no data; that is, no rows.</span></span>  
  
 <span data-ttu-id="e1779-127">하는 경우 `deep` 로 설정 된 `true`, 복제 된 `DataSet` 스키마를 사용 하 여 설정 되며 그런 다음 데이터로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-127">If `deep` is set to `true`, the cloned `DataSet` is set with the schema and then populated with the data.</span></span>  
  
 <span data-ttu-id="e1779-128">참조 <xref:System.Xml.XmlNode.CloneNode%2A> 에 `XmlNode` 클래스를이 메서드를 다른 노드 형식을 사용 하는 방법을 설명 하는 테이블을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e1779-128">See <xref:System.Xml.XmlNode.CloneNode%2A> in the `XmlNode` class to see a table describing how this method behaves with each of the different node types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1779-129">다음 예제에서는 로드를 `DataSet` 에 `XmlDataDocument` shallow clone을 만듭니다는 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-129">The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.</span></span>  
  
 <span data-ttu-id="e1779-130">이 예제에서는 SQL Server 2000의 Northwind 데이터베이스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-130">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.CloneNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateElement (prefix As String, localName As String, namespaceURI As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ CreateElement(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.CreateElement : string * string * string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.CreateElement (prefix, localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="e1779-131">새 요소의 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-131">The prefix of the new element.</span></span> <span data-ttu-id="e1779-132">String.Empty 또는 <see langword="null" />인 경우에는 접두사가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-132">If String.Empty or <see langword="null" />, there is no prefix.</span></span></param>
        <param name="localName"><span data-ttu-id="e1779-133">새 요소의 로컬 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-133">The local name of the new element.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="e1779-134">새 요소의 네임스페이스 URI(Uniform Resource Identifier)입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-134">The namespace Uniform Resource Identifier (URI) of the new element.</span></span> <span data-ttu-id="e1779-135">String.Empty 또는 <see langword="null" />인 경우에는 namespaceURI가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-135">If String.Empty or <see langword="null" />, there is no namespaceURI.</span></span></param>
        <summary><span data-ttu-id="e1779-136">지정된 <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-136">Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> , and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</span></span></summary>
        <returns><span data-ttu-id="e1779-137">새 <see cref="T:System.Xml.XmlElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-137">A new <see cref="T:System.Xml.XmlElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-138">`Note to Inheritors` 이 함수를 오버 로드 하는 경우에 확장성을 위해 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-138">`Note to Inheritors` If you overload this function, it cannot be used for extensibility.</span></span> <span data-ttu-id="e1779-139">대신,이 경우 기본 클래스를 만든 요소를 반환할 수 있습니다 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-139">Instead, you can return an element created by the base class, in this case, `XmlDataDocument`.</span></span> <span data-ttu-id="e1779-140">다음 예제를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="e1779-140">See the following example.</span></span>  
  
```csharp  
class MyXmlDataDocument : XmlDataDocument {  
 public override XmlElement CreateElement(string prefix, string localName, string nsURI) {  
   //Ensure we are returning the base class implementation of element.  
   XmlElement e = base.CreateElement(prefix, localName, nsURI);  
   //Add additional code here.  
   return e;    //Return the element created by XmlDataDocument.  
 }      
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityReference">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlEntityReference CreateEntityReference (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlEntityReference CreateEntityReference(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateEntityReference (name As String) As XmlEntityReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlEntityReference ^ CreateEntityReference(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.CreateEntityReference : string -&gt; System.Xml.XmlEntityReference" Usage="xmlDataDocument.CreateEntityReference name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlEntityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e1779-141">엔터티 참조의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-141">The name of the entity reference.</span></span></param>
        <summary><span data-ttu-id="e1779-142">지정된 이름을 가진 <see cref="T:System.Xml.XmlEntityReference" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-142">Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</span></span></summary>
        <returns><span data-ttu-id="e1779-143">지정된 이름의 <see cref="T:System.Xml.XmlEntityReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-143">An <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-144"><xref:System.Xml.XmlEntityReference> 에 대 한 노드를 만들 수 없습니다 <xref:System.Xml.XmlDataDocument> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-144"><xref:System.Xml.XmlEntityReference> nodes cannot be created for <xref:System.Xml.XmlDataDocument> objects.</span></span> <span data-ttu-id="e1779-145">이 메서드를 호출하면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-145">Calling this method throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e1779-146">이 메서드를 호출하는 경우</span><span class="sxs-lookup"><span data-stu-id="e1779-146">Calling this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator(class System.Xml.XmlNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateNavigator (node As XmlNode) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Xml::XPath::XPathNavigator ^ CreateNavigator(System::Xml::XmlNode ^ node);" />
      <MemberSignature Language="F#" Value="override this.CreateNavigator : System.Xml.XmlNode -&gt; System.Xml.XPath.XPathNavigator" Usage="xmlDataDocument.CreateNavigator node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node"><span data-ttu-id="e1779-147">검색기를 맨 처음 배치할 <see cref="T:System.Xml.XmlNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-147">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on.</span></span></param>
        <summary><span data-ttu-id="e1779-148">이 문서를 탐색하기 위한 새로운 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-148">Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</span></span> <span data-ttu-id="e1779-149"><see langword="XPathNavigator" />는 <paramref name="node" /> 매개 변수에서 지정된 노드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-149">The <see langword="XPathNavigator" /> is positioned on the node specified in the <paramref name="node" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="e1779-150">문서를 탐색하는 데 사용되는 <see langword="XPathNavigator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-150">An <see langword="XPathNavigator" /> used to navigate the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-151">`XPathNavigator` 읽기 전용, 임의 데이터 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-151">The `XPathNavigator` provides read-only, random access to data.</span></span> <span data-ttu-id="e1779-152">XSLT 변형에 최적화 되어 있어 하려면 입력된 메커니즘으로 사용 하는 경우 성능상의 이점을 제공 합니다 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-152">Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1779-153">사용 하 여 XSLT 변환을 `XmlDataDocument` 와 `XPathNavigator`를 참조 합니다 <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-153">To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDataDocument.DataSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSet As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSet ^ DataSet { System::Data::DataSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSet : System.Data.DataSet" Usage="System.Xml.XmlDataDocument.DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1779-154"><see langword="XmlDataDocument" />에서 데이터의 관계형 표현을 제공하는 <see cref="T:System.Data.DataSet" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-154">Gets a <see cref="T:System.Data.DataSet" /> that provides a relational representation of the data in the <see langword="XmlDataDocument" />.</span></span></summary>
        <value><span data-ttu-id="e1779-155">관계형 모델을 사용하여 <see langword="DataSet" />의 데이터에 액세스하는 데 사용할 수 있는 <see langword="XmlDataDocument" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-155">A <see langword="DataSet" /> that can be used to access the data in the <see langword="XmlDataDocument" /> using a relational model.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-156">합니다 `DataSet` 데이터에 액세스할 수 있습니다는 `XmlDataDocument` 관계형 모델을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-156">The `DataSet` enables you to access the data in the `XmlDataDocument` using a relational model.</span></span> <span data-ttu-id="e1779-157">즉, 테이블, 뷰, 행 및 열, 관계 등으로 데이터를 처리할 수 있습니다 및 등입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-157">This means that you can handle the data as tables and views, rows and columns, relations, and so on.</span></span> <span data-ttu-id="e1779-158">변경한 내용을 합니다 `DataSet` 에서 바로 볼 수는 `XmlDataDocument`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-158">Changes made in the `DataSet` are immediately visible in the `XmlDataDocument`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1779-159">다음 예제에서는 사용 하 여 책 가격을 수정 합니다 `DataSet` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-159">The following example modifies the price of a book using the `DataSet` methods.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e1779-160">이 예제에서는 입력으로 다음 두 파일을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-160">The example uses the following two files as input.</span></span>  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlElement GetElementById (string elemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlElement GetElementById(string elemId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementById (elemId As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlElement ^ GetElementById(System::String ^ elemId);" />
      <MemberSignature Language="F#" Value="override this.GetElementById : string -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementById elemId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elemId"><span data-ttu-id="e1779-161">일치시킬 특성 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-161">The attribute ID to match.</span></span></param>
        <summary><span data-ttu-id="e1779-162">지정된 ID의 <see cref="T:System.Xml.XmlElement" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-162">Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</span></span> <span data-ttu-id="e1779-163">이 메서드는 <see cref="T:System.Xml.XmlDataDocument" /> 클래스에서 지원하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-163">This method is not supported by the <see cref="T:System.Xml.XmlDataDocument" /> class.</span></span> <span data-ttu-id="e1779-164">이 메서드를 호출하면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-164">Calling this method throws an exception.</span></span></summary>
        <returns><span data-ttu-id="e1779-165">지정된 ID의 <see cref="T:System.Xml.XmlElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-165">An <see cref="T:System.Xml.XmlElement" /> with the specified ID.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-166">이 메서드는 <xref:System.Xml.XmlDataDocument> 클래스에서 지원하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-166">This method is not supported by the <xref:System.Xml.XmlDataDocument> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e1779-167">이 메서드를 호출하는 경우</span><span class="sxs-lookup"><span data-stu-id="e1779-167">Calling this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromRow">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement GetElementFromRow(class System.Data.DataRow r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementFromRow (r As DataRow) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ GetElementFromRow(System::Data::DataRow ^ r);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromRow : System.Data.DataRow -&gt; System.Xml.XmlElement" Usage="xmlDataDocument.GetElementFromRow r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="e1779-168">검색할 관련 <see langword="DataRow" />가 있는 <see langword="XmlElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-168">The <see langword="DataRow" /> whose associated <see langword="XmlElement" /> you want to retrieve.</span></span></param>
        <summary><span data-ttu-id="e1779-169">지정된 <see cref="T:System.Xml.XmlElement" />와 관련된 <see cref="T:System.Data.DataRow" />를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-169">Retrieves the <see cref="T:System.Xml.XmlElement" /> associated with the specified <see cref="T:System.Data.DataRow" />.</span></span></summary>
        <returns><span data-ttu-id="e1779-170">지정된 <see langword="XmlElement" />의 표현이 포함된 <see langword="DataRow" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-170">The <see langword="XmlElement" /> containing a representation of the specified <see langword="DataRow" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e1779-171">다음 예제에서는 로드를 `DataSet` 에 `XmlDataDocument` 만듭니다는 `XmlElement` 첫 번째 고객 레코드를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-171">The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.</span></span>  
  
 <span data-ttu-id="e1779-172">이 예제에서는 SQL Server 2000의 Northwind 데이터베이스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-172">The example uses the SQL Server 2000 Northwind database.</span></span>  
  
 [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDataDocument.GetElementFromRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeList GetElementsByTagName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementsByTagName (name As String) As XmlNodeList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNodeList ^ GetElementsByTagName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetElementsByTagName : string -&gt; System.Xml.XmlNodeList" Usage="xmlDataDocument.GetElementsByTagName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e1779-173">일치시킬 정규화된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-173">The qualified name to match.</span></span> <span data-ttu-id="e1779-174">일치하는 노드의 <see cref="P:System.Xml.XmlDocument.Name" /> 속성과 일치합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-174">It is matched against the <see cref="P:System.Xml.XmlDocument.Name" /> property of the matching node.</span></span> <span data-ttu-id="e1779-175">특수 값 "\*"은 모든 태그와 일치합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-175">The special value "\*" matches all tags.</span></span></param>
        <summary><span data-ttu-id="e1779-176">지정된 <see cref="P:System.Xml.XmlDocument.Name" />과 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-176">Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</span></span></summary>
        <returns><span data-ttu-id="e1779-177">일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-177">An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e1779-178">사용 하는 것이 좋습니다.는 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> 하거나 <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> 메서드 대신를 <xref:System.Xml.XmlDataDocument.GetElementsByTagName%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-178">It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> method instead of the <xref:System.Xml.XmlDataDocument.GetElementsByTagName%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowFromElement">
      <MemberSignature Language="C#" Value="public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow GetRowFromElement(class System.Xml.XmlElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowFromElement (e As XmlElement) As DataRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataRow ^ GetRowFromElement(System::Xml::XmlElement ^ e);" />
      <MemberSignature Language="F#" Value="member this.GetRowFromElement : System.Xml.XmlElement -&gt; System.Data.DataRow" Usage="xmlDataDocument.GetRowFromElement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e1779-179">검색할 관련 <see langword="XmlElement" />가 있는 <see langword="DataRow" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-179">The <see langword="XmlElement" /> whose associated <see langword="DataRow" /> you want to retrieve.</span></span></param>
        <summary><span data-ttu-id="e1779-180">지정된 <see cref="T:System.Data.DataRow" />와 관련된 <see cref="T:System.Xml.XmlElement" />를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-180">Retrieves the <see cref="T:System.Data.DataRow" /> associated with the specified <see cref="T:System.Xml.XmlElement" />.</span></span></summary>
        <returns><span data-ttu-id="e1779-181"><see langword="DataRow" />의 표현이 포함된 <see langword="XmlElement" />입니다. <see langword="null" />와 관련된 <see langword="DataRow" />가 없으면 <see langword="XmlElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-181">The <see langword="DataRow" /> containing a representation of the <see langword="XmlElement" />; <see langword="null" /> if there is no <see langword="DataRow" /> associated with the <see langword="XmlElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e1779-182">다음 예제에서는 첫 번째 책의 가격을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-182">The following example modifies the price of the first book.</span></span>  
  
 [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CPP/getrow.cpp#1)]
 [!code-csharp[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/CS/getrow.cs#1)]
 [!code-vb[XmlDataDocument.GetRowFromElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.GetRowFromElement/VB/getrow.vb#1)]  
  
 <span data-ttu-id="e1779-183">이 예제에서는 다음 입력된 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-183">The example uses the following input files:</span></span>  
  
 `2books.xml`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDataDocument.DataSet Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e1779-184">지정된 데이터 원본을 사용하여 <see langword="XmlDataDocument" />를 로드하고, <see cref="T:System.Data.DataSet" />을 로드된 데이터와 동기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-184">Loads the <see langword="XmlDataDocument" /> using the specified data source and synchronizes the <see cref="T:System.Data.DataSet" /> with the loaded data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e1779-185">XML 데이터를 관계형으로 보려면 먼저 데이터 매핑에 사용 하는 스키마를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-185">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="e1779-186">이렇게 하려면 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드 또는 테이블 및 열 내에서 만들어를 `DataSet` 수동으로.</span><span class="sxs-lookup"><span data-stu-id="e1779-186">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="e1779-187">이 단계를 호출 하기 전에 해야 `Load`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-187">This step must be done before calling `Load`.</span></span>  
  
 <span data-ttu-id="e1779-188">`XmlDataDocument` 엔터티 참조를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-188">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="e1779-189">데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드 확인 하 고 모든 엔터티 참조를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-189">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span> <span data-ttu-id="e1779-190">그러나 사용 중인 경우는 `Load` 오버 로드를 <xref:System.Xml.XmlReader> 인수로 지정 해야 합니다는 `XmlReader` 엔터티를 확인할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-190">However, if you are using the `Load` overload that takes a <xref:System.Xml.XmlReader> as an argument, you must specify an `XmlReader` that can resolve entities.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.Stream inStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.Stream inStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (inStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::Stream ^ inStream);" />
      <MemberSignature Language="F#" Value="override this.Load : System.IO.Stream -&gt; unit" Usage="xmlDataDocument.Load inStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inStream"><span data-ttu-id="e1779-191">로드할 XML 문서가 포함된 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-191">The stream containing the XML document to load.</span></span></param>
        <summary><span data-ttu-id="e1779-192">지정된 스트림에서 <see langword="XmlDataDocument" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-192">Loads the <see langword="XmlDataDocument" /> from the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-193">`XmlDataDocument` 엔터티 참조를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-193">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="e1779-194">데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드 확인 하 고 모든 엔터티 참조를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-194">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e1779-195">XML 데이터를 관계형으로 보려면 먼저 데이터 매핑에 사용 하는 스키마를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-195">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="e1779-196">이렇게 하려면 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드 또는 테이블 및 열 내에서 만들어를 `DataSet` 수동으로.</span><span class="sxs-lookup"><span data-stu-id="e1779-196">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="e1779-197">이 단계를 호출 하기 전에 해야 `Load`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-197">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.IO.TextReader txtReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.IO.TextReader txtReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (txtReader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::IO::TextReader ^ txtReader);" />
      <MemberSignature Language="F#" Value="override this.Load : System.IO.TextReader -&gt; unit" Usage="xmlDataDocument.Load txtReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txtReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="txtReader"><span data-ttu-id="e1779-198">XML 데이터를 문서에 제공하기 위해 사용하는 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-198">The <see langword="TextReader" /> used to feed the XML data into the document.</span></span></param>
        <summary><span data-ttu-id="e1779-199">지정된 <see cref="T:System.IO.TextReader" />에서 <see langword="XmlDataDocument" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-199">Loads the <see langword="XmlDataDocument" /> from the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-200">`XmlDataDocument` 엔터티 참조를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-200">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="e1779-201">데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드 확인 하 고 모든 엔터티 참조를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-201">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e1779-202">XML 데이터를 관계형으로 보려면 먼저 데이터 매핑에 사용 하는 스키마를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-202">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="e1779-203">이렇게 하려면 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드 또는 테이블 및 열 내에서 만들어를 `DataSet` 수동으로.</span><span class="sxs-lookup"><span data-stu-id="e1779-203">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="e1779-204">이 단계를 호출 하기 전에 해야 `Load`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-204">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="override this.Load : string -&gt; unit" Usage="xmlDataDocument.Load filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="e1779-205">로드할 XML 문서가 포함된 파일의 URL입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-205">The URL of the file containing the XML document to load.</span></span></param>
        <summary><span data-ttu-id="e1779-206">지정된 URL을 사용하여 <see langword="XmlDataDocument" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-206">Loads the <see langword="XmlDataDocument" /> using the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-207">`XmlDataDocument` 엔터티 참조를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-207">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="e1779-208">데이터 엔터티 참조를 포함 하는 경우는 `Load` 메서드 확인 하 고 모든 엔터티 참조를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-208">If the data includes entity references, the `Load` method resolves and expands any entity references.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e1779-209">XML 데이터를 관계형으로 보려면 먼저 데이터 매핑에 사용 하는 스키마를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-209">In order to view the XML data relationally, you must first specify a schema to use for data mapping.</span></span> <span data-ttu-id="e1779-210">이렇게 하려면 호출 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드 또는 테이블 및 열 내에서 만들어를 `DataSet` 수동으로.</span><span class="sxs-lookup"><span data-stu-id="e1779-210">This can be done either by calling the <xref:System.Data.DataSet.ReadXmlSchema%2A> method or by creating the tables and columns within the `DataSet` manually.</span></span> <span data-ttu-id="e1779-211">이 단계를 호출 하기 전에 해야 `Load`합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-211">This step must be done before calling `Load`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Xml.XmlReader -&gt; unit" Usage="xmlDataDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="e1779-212">로드할 XML 문서가 포함된 <see langword="XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-212">The <see langword="XmlReader" /> containing the XML document to load.</span></span></param>
        <summary><span data-ttu-id="e1779-213">지정된 <see cref="T:System.Xml.XmlReader" />에서 <see langword="XmlDataDocument" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-213">Loads the <see langword="XmlDataDocument" /> from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1779-214">`XmlDataDocument` 엔터티 참조를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-214">`XmlDataDocument` does not support creating entity references.</span></span> <span data-ttu-id="e1779-215">데이터 원본에 엔터티 참조가 경우 만들어야 합니다는 <xref:System.Xml.XmlValidatingReader> 사용 하 여를 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> 속성 (이 기본 동작) EntityHandling.ExpandEntities로 설정 하 고 전달 합니다 `XmlValidatingReader` 에 `Load` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-215">If the data source contains entity references, you must create an <xref:System.Xml.XmlValidatingReader> with the <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property set to EntityHandling.ExpandEntities (this is the default behavior) and pass the `XmlValidatingReader` to the `Load` method.</span></span> <span data-ttu-id="e1779-216">사용 하지 않는 경우는 `XmlValidatingReader`, `Load` 메서드에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-216">If you do not use an `XmlValidatingReader`, the `Load` method throws an exception.</span></span>  
  
 <span data-ttu-id="e1779-217">`Load` 메서드는 항상 유효 공백 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-217">The `Load` method always preserves significant white space.</span></span> <span data-ttu-id="e1779-218"><xref:System.Xml.XmlDocument.PreserveWhitespace%2A> 속성 공백이 유지 되 고 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-218">The <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> property determines whether or not white space is preserved.</span></span> <span data-ttu-id="e1779-219">기본값은 `false`, 공백이 유지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-219">The default is `false`, white space is not preserved.</span></span>  
  
 <span data-ttu-id="e1779-220">초기 상태 (즉, ReadState=ReadState.Initial) 판독기가 있으면 `Load` 판독기의 전체 내용을 사용 하 고 찾은 내용에서 DOM을 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-220">If the reader is in the initial state (that is, ReadState=ReadState.Initial), `Load` consumes the entire contents of the reader and builds the DOM from what it finds.</span></span>  
  
 <span data-ttu-id="e1779-221">판독기가 이미 "n" 깊이가 일부 노드에 배치 됩니다을 하는 경우 해당 노드 및 모든 후속 형제 "n" 수준을 닫는 끝 태그까지이 메서드 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-221">If the reader is already positioned on some node at depth "n", then this method loads that node and all subsequent siblings up to the end tag that closes depth "n".</span></span> <span data-ttu-id="e1779-222">이 다음과 같은 결과가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-222">This has the following results.</span></span>  
  
 <span data-ttu-id="e1779-223">현재 노드 및 다음 형제 다음과 유사한 살펴보기:</span><span class="sxs-lookup"><span data-stu-id="e1779-223">If the current node and its following siblings look similar to the following:</span></span>  
  
```xml  
<!--comment--><element1>one</element1><element2>two</element2>  
```  
  
 <span data-ttu-id="e1779-224">`Load` 문서 루트 수준의 요소가 두 개를 포함할 수 없으므로 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-224">`Load` throws an exception, because a document cannot have two root-level elements.</span></span> <span data-ttu-id="e1779-225">현재 노드 및 다음 형제 다음과 유사한 살펴보기:</span><span class="sxs-lookup"><span data-stu-id="e1779-225">If the current node and its following siblings look similar to the following:</span></span>  
  
```xml  
<!--comment--><?process  
    instruction?><!--comment--></endtag>  
```  
  
 <span data-ttu-id="e1779-226">`Load` 성공 합니다. 그러나 해야는 불완전 한 DOM 트리를 루트 수준 요소가 없기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-226">`Load` will succeed; however, you will have an incomplete DOM tree, because there is no root-level element.</span></span> <span data-ttu-id="e1779-227">문서를 저장 하기 전에 루트 수준 요소를 추가 해야 합니다. 그렇지 않은 경우는 <xref:System.Xml.XmlDocument.Save%2A> 메서드에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-227">You have to add a root-level element before you save the document; otherwise, the <xref:System.Xml.XmlDocument.Save%2A> method throws an exception.</span></span>  
  
 <span data-ttu-id="e1779-228">공백이나 특성 노드 등 문서의 루트 수준으로 적합하지 않은 리프 노드에 판독기가 있을 경우 판독기는 루트로 사용할 수 있는 노드에 도달할 때까지 계속해서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-228">If the reader is positioned on a leaf node that is invalid for the root level of a document (for example, a white space or attribute node), the reader continues to read until it is positioned on a node that can be used for the root.</span></span> <span data-ttu-id="e1779-229">이때 문서가 로드되기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-229">The document begins loading at this point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1779-230">다음 예제에서는 사용 하 여 책 가격을 수정 합니다 `DataSet` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1779-230">The following example modifies the price of a book using the `DataSet` methods.</span></span>  
  
 [!code-cpp[XmlDataDocument.Load#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDataDocument.Load/CPP/loadrdr.cpp#1)]
 [!code-csharp[XmlDataDocument.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.Load/CS/loadrdr.cs#1)]
 [!code-vb[XmlDataDocument.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.Load/VB/loadrdr.vb#1)]  
  
 <span data-ttu-id="e1779-231">이 예제에서는 다음 두 개의 입력된 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-231">The example uses the following two input files.</span></span>  
  
 `2books.xml`  
  
 [!code-xml[XmlDataDocument.Load#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/2books.xml#2)]  
  
 `store.xsd`  
  
 [!code-xml[XmlDataDocument.Load#3](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.Load/XML/test.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e1779-232">로드되는 XML에 엔터티 참조가 포함되어 있으나 판독기에서 엔터티를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e1779-232">The XML being loaded contains entity references, and the reader cannot resolve entities.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>