<Type Name="Extensions" FullName="System.Xml.Linq.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9522c83ae86035dfa094da1de16e6a1d9f1dc435" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58740114" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="00288-101">LINQ to XML 확장 메서드를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-101">Contains the LINQ to XML extension methods.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-102">대부분의 합니다 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 확장 메서드는에서 사용 되는 축 메서드 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 쿼리 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-102">Most of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] extension methods are axis methods that are used in [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries.</span></span> <span data-ttu-id="00288-103">이 클래스의 메서드는 컬렉션에 대해 작동 하 고 컬렉션을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-103">The methods in this class operate on collections and return collections.</span></span> <span data-ttu-id="00288-104">이러한 메서드는 소스 컬렉션을 열거, 컬렉션의 각 항목에 적절 한 축 메서드를 호출 및 결과 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-104">These methods enumerate the source collection, call the appropriate axis method on each item in the collection, and concatenate the results.</span></span>  
  
 <span data-ttu-id="00288-105">하지만 두 <xref:System.Xml.Linq.Extensions.Remove%2A> 확장 메서드는 축 메서드가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="00288-105">The two <xref:System.Xml.Linq.Extensions.Remove%2A> extension methods are not axis methods, however.</span></span> <span data-ttu-id="00288-106">이러한 메서드는 XML 트리에서 노드 또는 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-106">These methods remove attributes or nodes from the XML tree.</span></span>  
  
 <span data-ttu-id="00288-107">축 메서드를 구현 하는 다른 범주는 합니다 <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XDocument>, 및 <xref:System.Xml.Linq.XNode> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-107">Note that there is another category of axis methods, implemented in the <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XDocument>, and <xref:System.Xml.Linq.XNode> classes.</span></span> <span data-ttu-id="00288-108">이러한 다른 축 메서드는 단일 개체에 대해 작동 하 고 컬렉션을 반환 <xref:System.Xml.Linq.XElement>하십시오 <xref:System.Xml.Linq.XAttribute>, 또는 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-108">These other axis methods operate on a single object, and return a collection of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XAttribute>, or <xref:System.Xml.Linq.XNode> objects.</span></span>  
  
 <span data-ttu-id="00288-109">모든 축 확장 메서드는 지연 된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-109">All of the axis extension methods use deferred execution.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-110">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-110">LINQ to XML</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/86ff2c9f-2ea1-43fc-bea3-6a9cc85f41ef"><span data-ttu-id="00288-111">LINQ to XML 축</span><span class="sxs-lookup"><span data-stu-id="00288-111">LINQ to XML Axes</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c9b5ad2-dffc-47c4-a76f-a39815ecc7ec"><span data-ttu-id="00288-112">XML 트리에서 요소, 특성 및 노드 제거</span><span class="sxs-lookup"><span data-stu-id="00288-112">Removing Elements, Attributes, and Nodes from an XML Tree</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/175ce3ff-9bbf-4e64-8421-faeb81a0bb51"><span data-ttu-id="00288-113">확장명 메서드(C# 프로그래밍 가이드)</span><span class="sxs-lookup"><span data-stu-id="00288-113">Extension Methods (C# Programming Guide)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Ancestors&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-114">소스 컬렉션에 있는 모든 노드의 상위 항목이 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-114">Returns a collection of elements that contains the ancestors of every node in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-115">소스 컬렉션의 여러 노드에서 동일한 상위에 있는 경우 상위 결과 컬렉션에 여러 번 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-115">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="00288-116">이 문제를 방지 하려면 사용 된 <xref:System.Linq.Enumerable.Distinct%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00288-116">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="00288-117">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-117">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Ancestors&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Ancestors(Of T As XNode) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Ancestors : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Ancestors source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-118"><see cref="T:System.Xml.Linq.XNode" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-118">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-119">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-119">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-120">소스 컬렉션에 있는 모든 노드의 상위 항목이 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-120">Returns a collection of elements that contains the ancestors of every node in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-121">소스 컬렉션에 있는 모든 노드의 상위 항목이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-121">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-122">소스 컬렉션의 여러 노드에서 동일한 상위에 있는 경우 상위 결과 컬렉션에 여러 번 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-122">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="00288-123">이 문제를 방지 하려면 사용 된 <xref:System.Linq.Enumerable.Distinct%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00288-123">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="00288-124">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-124">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-125">다음 예제에서는 유용한 손자 요소 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-125">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="00288-126">그런 다음이 축 메서드를 사용 하 여 컬렉션에 있는 모든 요소의 모든 상위 항목을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-126">It then uses this axis method to retrieve all ancestors of all elements in the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
```  
  
 <span data-ttu-id="00288-127">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-127">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors  
----  
GrandChild1  
Child1  
Root  
GrandChild2  
Child2  
```  
  
 <span data-ttu-id="00288-128">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-128">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-129">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-129">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="00288-130">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-130">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors  
----  
{http://www.adventure-works.com}GrandChild1  
{http://www.adventure-works.com}Child1  
{http://www.adventure-works.com}Root  
{http://www.adventure-works.com}GrandChild2  
{http://www.adventure-works.com}Child2  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-131">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-131">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Ancestors&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Ancestors(Of T As XNode) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Ancestors : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Ancestors (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-132"><see cref="T:System.Xml.Linq.XNode" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-132">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-133">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-134">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-134">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-135">소스 컬렉션에 있는 모든 노드의 상위 항목이 들어 있는 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-135">Returns a filtered collection of elements that contains the ancestors of every node in the source collection.</span></span> <span data-ttu-id="00288-136">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-136">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-137">소스 컬렉션에 있는 모든 노드의 상위 항목이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-137">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</span></span> <span data-ttu-id="00288-138">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-138">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-139">소스 컬렉션에 있는 여러 노드의 상위 항목이 같은 일치 하는 경우 <xref:System.Xml.Linq.XName>, 상위 결과 컬렉션에 여러 번 포함 될 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-139">If multiple nodes in the source collection have the same ancestor with a matching <xref:System.Xml.Linq.XName>, the ancestor will be included multiple times in the result collection.</span></span>  
  
 <span data-ttu-id="00288-140">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-140">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-141">다음 예제에서는 유용한 손자 요소 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-141">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="00288-142">그런 다음 모든 상위 항목 컬렉션의 지정 된 일치 하는 모든 요소를 검색 하려면이 축 메서드를 사용 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-142">It then uses this axis method to retrieve all ancestors of all elements in the collection that match a specified <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors("Child1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.Ancestors("Child1") _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="00288-143">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-143">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors  
----  
Child1  
```  
  
 <span data-ttu-id="00288-144">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-144">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-145">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-145">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors(aw + "Child1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.Ancestors(GetXmlNamespace() + "Child1") _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-146">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-146">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors  
----  
{http://www.adventure-works.com}Child1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-147">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-147">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-148">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 상위 항목이 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-148">Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-149">소스 컬렉션의 여러 노드에서 동일한 상위에 있는 경우 상위 결과 컬렉션에 여러 번 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-149">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="00288-150">이 문제를 방지 하려면 사용 된 <xref:System.Linq.Enumerable.Distinct%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00288-150">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="00288-151">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-151">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-152">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-152">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AncestorsAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AncestorsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.AncestorsAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-153">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-153">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-154">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 상위 항목이 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-154">Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-155">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 상위 항목이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-155">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-156">소스 컬렉션의 여러 노드에서 동일한 상위에 있는 경우 상위 결과 컬렉션에 여러 번 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-156">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="00288-157">이 문제를 방지 하려면 사용 된 <xref:System.Linq.Enumerable.Distinct%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00288-157">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="00288-158">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-158">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-159">다음 예제에서는 유용한 손자 요소 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-159">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="00288-160">그런 다음이 축 메서드를 사용 하 여 모든 상위 항목 및 자체는 컬렉션의 모든 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-160">It then uses this axis method to retrieve all ancestors and self of all elements in the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors and Self")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="00288-161">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-161">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors and Self  
----  
GreatGrandChild1  
GrandChild1  
Child1  
Root  
GreatGrandChild2  
GrandChild2  
Child2  
```  
  
 <span data-ttu-id="00288-162">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-162">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-163">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-163">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors and Self")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-164">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-164">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors and Self  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GrandChild1  
{http://www.adventure-works.com}Child1  
{http://www.adventure-works.com}Root  
{http://www.adventure-works.com}GreatGrandChild2  
{http://www.adventure-works.com}GrandChild2  
{http://www.adventure-works.com}Child2  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-165">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-165">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AncestorsAndSelf (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member AncestorsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.AncestorsAndSelf (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-166">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-166">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-167">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-167">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-168">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 상위 항목이 들어 있는 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-168">Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span></span> <span data-ttu-id="00288-169">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-169">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-170">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 상위 항목이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-170">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</span></span> <span data-ttu-id="00288-171">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-171">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-172">소스 컬렉션에 있는 여러 노드의 상위 항목이 같은 일치 하는 경우 <xref:System.Xml.Linq.XName>, 상위 결과 컬렉션에 여러 번 포함 될 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-172">If multiple nodes in the source collection have the same ancestor with a matching <xref:System.Xml.Linq.XName>, the ancestor will be included multiple times in the result collection.</span></span>  
  
 <span data-ttu-id="00288-173">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-173">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-174">다음 예제에서는 유용한 손자 요소 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-174">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="00288-175">그런 다음 모든 자체를 검색 하려면이 축 메서드를 사용 하 고 지정 된 일치 하는 컬렉션의 모든 요소 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-175">It then uses this axis method to retrieve all self and ancestors of all elements in the collection that match a specified <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf("GreatGrandChild1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf("GreatGrandChild1") _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors and Self")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="00288-176">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-176">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors and Self  
----  
GreatGrandChild1  
```  
  
 <span data-ttu-id="00288-177">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-177">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-178">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-178">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf(aw + "GreatGrandChild1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf(GetXmlNamespace() + "GreatGrandChild1") _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors and Self")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-179">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-179">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors and Self  
----  
{http://www.adventure-works.com}GreatGrandChild1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-180">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-180">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-181">소스 컬렉션에 있는 모든 요소의 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-181">Returns a collection of the attributes of every element in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-182">Visual Basic 사용자 통합된 특성 축을 사용 하 여 요소 컬렉션에서 특정 이름 가진 특성을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-182">Visual Basic users can use the integrated attribute axis to retrieve attributes with a particular name from a collection of elements.</span></span>  
  
 <span data-ttu-id="00288-183">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-183">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-184">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-184">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Attributes (source As IEnumerable(Of XElement)) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Attributes : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="System.Xml.Linq.Extensions.Attributes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-185">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-185">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-186">소스 컬렉션에 있는 모든 요소의 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-186">Returns a collection of the attributes of every element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-187">소스 컬렉션에 있는 모든 요소의 특성이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-187">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of every element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-188">일부 다른 XML 달리 프로그래밍 인터페이스에 확인 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], 네임 스페이스 특성으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-188">Note that unlike some other XML programming interfaces, in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], namespaces are surfaced as attributes.</span></span>  
  
 <span data-ttu-id="00288-189">Visual Basic 사용자를 사용할 수 있지만 통합된 특성 축 요소 컬렉션에서 지정한 이름 가진 특성을 검색할 수 없는 통합된 Visual Basic 축 컬렉션에 있는 모든 요소의 모든 특성을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-189">Although Visual Basic users can use the integrated attribute axis to retrieve attributes with a specified name from a collection of elements, there is no integrated Visual Basic axis to retrieve all attributes of all elements in a collection.</span></span>  
  
 <span data-ttu-id="00288-190">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-190">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-191">다음 예제에서는 요소의 컬렉션을 검색 한 다음 컬렉션에 있는 모든 요소의 모든 특성의 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-191">The following example retrieves a collection of elements, and then retrieves a collection of all attributes of all elements in the collection.</span></span> <span data-ttu-id="00288-192">결과 컬렉션의 특성에만 포함 됩니다는 `Child1` 하 고 `Child2` 요소 및 특성이 아닌는 `Root` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-192">Note that the resulting collection includes only the attributes of the `Child1` and `Child2` elements, and not the attributes of the `Root` element.</span></span>  
  
 <span data-ttu-id="00288-193">네임 스페이스 특성은이 메서드에서 반환 되는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-193">Note that the namespace attribute is returned by this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XElement("Child1",  
        new XAttribute("Att1", "content3"),  
        new XAttribute("Att2", "content4")  
    ),  
    new XElement("Child2",  
        new XAttribute("Att1", "content5"),  
        new XAttribute("Att2", "content6")  
    )  
);  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
IEnumerable<XAttribute> attList =  
    from att in xmlTree.DescendantsAndSelf().Attributes()  
    select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root xmlns:aw="http://www.adventure-works.com" Att1="content1" Att2="content2">  
        <Child1 Att1="content3" Att2="content4"/>  
        <Child2 Att1="content5" Att2="content6"/>  
    </Root>  
  
Dim attList = _  
    From att In xmlTree.DescendantsAndSelf.Attributes _  
    Select att  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
For Each att As XAttribute In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="00288-194">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-194">This example produces the following output:</span></span>  
  
```  
<Root xmlns:aw="http://www.adventure-works.com" Att1="content1" Att2="content2">  
  <Child1 Att1="content3" Att2="content4" />  
  <Child2 Att1="content5" Att2="content6" />  
</Root>  
-----  
xmlns:aw="http://www.adventure-works.com"  
Att1="content1"  
Att2="content2"  
Att1="content3"  
Att2="content4"  
Att1="content5"  
Att2="content6"  
```  
  
 <span data-ttu-id="00288-195">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-195">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-196">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-196">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span> <span data-ttu-id="00288-197">네임 스페이스 특성이 반환 되는 컬렉션에 포함 되어 있는지를 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-197">Note that the namespace attribute is included in the returned collection.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XElement(aw + "Child1",  
        new XAttribute(aw + "Att1", "content3"),  
        new XAttribute(aw + "Att2", "content4")  
    ),  
    new XElement(aw + "Child2",  
        new XAttribute(aw + "Att1", "content5"),  
        new XAttribute(aw + "Att2", "content6")  
    )  
);  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
IEnumerable<XAttribute> attList =  
    from att in xmlTree.DescendantsAndSelf().Attributes()  
    select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root xmlns:aw="http://www.adventure-works.com" aw:Att1="content1" aw:Att2="content2">  
                <aw:Child1 aw:Att1="content3" aw:Att2="content4"/>  
                <aw:Child2 aw:Att1="content5" aw:Att2="content6"/>  
            </aw:Root>  
  
        Dim attList = _  
            From att In xmlTree.DescendantsAndSelf.Attributes _  
            Select att  
  
        Console.WriteLine(xmlTree)  
        Console.WriteLine("-----")  
  
        For Each att As XAttribute In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="00288-198">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-198">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com" aw:Att1="content1" aw:Att2="content2">  
  <aw:Child1 aw:Att1="content3" aw:Att2="content4" />  
  <aw:Child2 aw:Att1="content5" aw:Att2="content6" />  
</aw:Root>  
-----  
xmlns:aw="http://www.adventure-works.com"  
aw:Att1="content1"  
aw:Att2="content2"  
aw:Att1="content3"  
aw:Att2="content4"  
aw:Att1="content5"  
aw:Att2="content6"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-199">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-199">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Attributes (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Attributes : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="System.Xml.Linq.Extensions.Attributes (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-200">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-200">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-201">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-201">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-202">소스 컬렉션에 있는 모든 요소의 필터링된 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-202">Returns a filtered collection of the attributes of every element in the source collection.</span></span> <span data-ttu-id="00288-203">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-203">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-204">소스 컬렉션에 있는 모든 요소의 필터링된 특성 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-204">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains a filtered collection of the attributes of every element in the source collection.</span></span> <span data-ttu-id="00288-205">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-205">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-206">일부 다른 XML 달리 프로그래밍 인터페이스에 확인 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], 네임 스페이스 특성으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-206">Note that unlike some other XML programming interfaces, in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], namespaces are surfaced as attributes.</span></span>  
  
 <span data-ttu-id="00288-207">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-207">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-208">다음 예제에서는 경우에 요소의 컬렉션을 검색 합니다 `Child1` 고 `Child2` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-208">The following example retrieves a collection of elements, which in this case includes the `Child1` and `Child2` elements.</span></span> <span data-ttu-id="00288-209">그런 다음 해당 자식 컬렉션의 모든 특성의 이름으로 검색 `Att1`합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-209">It then retrieves all attributes of that child collection with a name of `Att1`.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XElement("Child1",  
        new XAttribute("Att1", "content3"),  
        new XAttribute("Att2", "content4")  
    ),  
    new XElement("Child2",  
        new XAttribute("Att1", "content5"),  
        new XAttribute("Att2", "content6")  
    )  
);  
  
IEnumerable<XAttribute> attList = from att in xmlTree.Elements().Attributes("Att1")  
                                  select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="content1" Att2="content2">  
        <Child1 Att1="content3" Att2="content4">  
        </Child1>  
        <Child2 Att1="content5" Att2="content6">  
        </Child2>  
    </Root>  
  
Dim attList = From att In xmlTree.Elements.Attributes("Att1") _  
                          Select att  
  
For Each att As XAttribute In attList  
    Console.WriteLine(att)  
Next  
  
```  
  
 <span data-ttu-id="00288-210">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-210">This example produces the following output:</span></span>  
  
```  
Att1="content3"  
Att1="content5"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-211">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-211">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantNodes(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantNodes : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.DescendantNodes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-212"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-212">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-213">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XContainer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-213">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-214">소스 컬렉션에 있는 모든 문서 및 요소의 하위 노드 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-214">Returns a collection of the descendant nodes of every document and element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-215">소스 컬렉션에 있는 모든 문서 및 요소의 하위 노드에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-215">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the descendant nodes of every document and element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-216">이 축을 확장 메서드를 사용할 경우 <xref:System.Xml.Linq.XDocument> 고 <xref:System.Xml.Linq.XElement> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-216">This axis extension method is used on <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement> objects.</span></span> <span data-ttu-id="00288-217">이러한 형식에서 파생 <xref:System.Xml.Linq.XContainer>이므로이 메서드가 작동을 <xref:System.Collections.Generic.IEnumerable%601> 의 <xref:System.Xml.Linq.XContainer> 소스 컬렉션을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-217">Both of these types derive from <xref:System.Xml.Linq.XContainer>, so this method operates on an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XContainer> that contains the source collection.</span></span>  
  
 <span data-ttu-id="00288-218">Visual Basic XML 하위 요소에 대 한 통합된 축에는 있지만 하위 노드에 대 한 통합된 축 없음 하므로 Visual Basic 사용자는 명시적으로이 축 메서드를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-218">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-219">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-219">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-220">다음 예제에서는 두 요소의 컬렉션을 검색 한 다음 소스 컬렉션에 있는 모든 요소에 대 한 모든 하위 노드의 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-220">The following example retrieves a collection of two elements, and then retrieves a collection of all descendant nodes for every element in the source collection.</span></span> <span data-ttu-id="00288-221">특성을 `GrandChild` 노드로 요소를 노출 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-221">Note that the attribute of the `GrandChild` element is not surfaced as a node.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>");  
IEnumerable<XNode> nodes =  
    from node in xmlTree.Elements("Child").DescendantNodes()  
    select node;  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
        case XmlNodeType.Comment:  
            Console.WriteLine("Comment: {0}", ((XComment)node).Value);  
            break;  
        case XmlNodeType.ProcessingInstruction:  
            Console.WriteLine("PI: {0}", ((XProcessingInstruction)node).Data);  
            break;  
    }  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
<Root>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>  
  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In xmlTree.<Child>.DescendantNodes _  
    Select node  
  
For Each node As XNode In nodes  
    Select Case node.NodeType  
        Case XmlNodeType.Element  
            Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
        Case XmlNodeType.Text  
            Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
        Case XmlNodeType.Comment  
            Console.WriteLine("Comment: {0}", DirectCast(node, XComment).Value)  
        Case XmlNodeType.ProcessingInstruction  
            Console.WriteLine("PI: {0}", DirectCast(node, XProcessingInstruction).Data)  
    End Select  
Next  
```  
  
 <span data-ttu-id="00288-222">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-222">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: GrandChild  
Text: Text  
Comment: a comment  
PI: type='text/xsl' href='test.xsl'  
Text: ccc  
Element: GrandChild  
Text: Text  
Text: ddd  
```  
  
 <span data-ttu-id="00288-223">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-223">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-224">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-224">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>");  
IEnumerable<XNode> nodes =  
    from node in xmlTree.Elements(aw + "Child").DescendantNodes()  
    select node;  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
        case XmlNodeType.Comment:  
            Console.WriteLine("Comment: {0}", ((XComment)node).Value);  
            break;  
        case XmlNodeType.ProcessingInstruction:  
            Console.WriteLine("PI: {0}", ((XProcessingInstruction)node).Data);  
            break;  
    }  
}  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
        <Root>  
            <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
                <!--a comment-->  
                <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
            </Child>  
            <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
        </Root>  
  
        Dim nodes As IEnumerable(Of XNode) = _  
            From node In xmlTree.<Child>.DescendantNodes _  
            Select node  
  
        For Each node As XNode In nodes  
            Select Case node.NodeType  
                Case XmlNodeType.Element  
                    Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
                Case XmlNodeType.Text  
                    Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
                Case XmlNodeType.Comment  
                    Console.WriteLine("Comment: {0}", DirectCast(node, XComment).Value)  
                Case XmlNodeType.ProcessingInstruction  
                    Console.WriteLine("PI: {0}", DirectCast(node, XProcessingInstruction).Data)  
            End Select  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="00288-225">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-225">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: {http://www.adventure-works.com}GrandChild  
Text: Text  
Comment: a comment  
PI: type='text/xsl' href='test.xsl'  
Text: ccc  
Element: {http://www.adventure-works.com}GrandChild  
Text: Text  
Text: ddd  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-226">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-226">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantNodesAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantNodesAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="System.Xml.Linq.Extensions.DescendantNodesAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-227">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-227">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-228">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 노드가 들어 있는 노드 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-228">Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-229">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 노드가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-229">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-230">Visual Basic XML 하위 요소에 대 한 통합된 축에는 있지만 하위 노드에 대 한 통합된 축 없음 하므로 Visual Basic 사용자는 명시적으로이 축 메서드를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-230">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-231">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-231">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-232">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-232">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-233">소스 컬렉션에 있는 모든 요소 및 문서의 하위 요소가 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-233">Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-234">Visual Basic 사용자 통합된 XML descendant 축을 사용 하 여 하위 요소의 컬렉션을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-234">Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection.</span></span> <span data-ttu-id="00288-235">그러나 통합된 축 지정된 된 이름 가진 하위만 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-235">However, the integrated axis only retrieves descendants with a specified name.</span></span> <span data-ttu-id="00288-236">Visual Basic 사용자를 모든 하위 항목을 검색 하려면 다음 사용 해야이 축 메서드를 명시적으로.</span><span class="sxs-lookup"><span data-stu-id="00288-236">If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-237">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-237">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Descendants : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Descendants source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-238"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-238">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-239">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XContainer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-239">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-240">소스 컬렉션에 있는 모든 요소 및 문서의 하위 요소가 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-240">Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-241">소스 컬렉션에 있는 모든 요소 및 문서의 하위 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-241">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-242">Visual Basic 사용자 통합된 XML descendant 축을 사용 하 여 하위 요소의 컬렉션을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-242">Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection.</span></span> <span data-ttu-id="00288-243">그러나 통합된 축 지정된 된 이름 가진 하위만 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-243">However, the integrated axis only retrieves descendants with a specified name.</span></span> <span data-ttu-id="00288-244">Visual Basic 사용자를 모든 하위 항목을 검색 하려면 다음 사용 해야이 축 메서드를 명시적으로.</span><span class="sxs-lookup"><span data-stu-id="00288-244">If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-245">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-245">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-246">다음 예제에서는 요소의 컬렉션을 검색 한 다음이 축 메서드를 사용 하 여 요소 컬렉션에 있는 모든 항목의 모든 하위 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-246">The following example retrieves a collection of elements, and then uses this axis method to retrieve all descendent elements of every item in the collection of elements.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
IEnumerable<XElement> elList =  
    from el in xmlTree.Elements("Para").Descendants()  
    select el;  
  
foreach (XElement el in elList)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Para>  
            <t>This is some text </t>  
            <b>  
                <t>where</t>  
            </b>  
            <t> all of the nodes must be concatenated. </t>  
        </Para>  
  
        <Para>  
            <t>This is a second sentence.</t>  
        </Para>  
    </Root>  
  
Dim elList = From el In xmlTree.<Para>.Descendants _  
                        Select el  
  
For Each el As XElement In elList  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="00288-247">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-247">This example produces the following output:</span></span>  
  
```  
<t>This is some text </t>  
<b>  
  <t>where</t>  
</b>  
<t>where</t>  
<t> all of the nodes must be concatenated. </t>  
<t>This is a second sentence.</t>  
```  
  
 <span data-ttu-id="00288-248">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-248">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-249">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-249">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
IEnumerable<XElement> elList =  
    from el in xmlTree.Elements(aw + "Para").Descendants()  
    select el;  
  
foreach (XElement el in elList)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Para>  
                    <t>This is some text </t>  
                    <b>  
                        <t>where</t>  
                    </b>  
                    <t> all of the nodes must be concatenated. </t>  
                </Para>  
  
                <Para>  
                    <t>This is a second sentence.</t>  
                </Para>  
            </Root>  
  
        Dim elList = From el In xmlTree.<Para>.Descendants _  
                                Select el  
  
        For Each el As XElement In elList  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-250">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-250">This example produces the following output:</span></span>  
  
```  
<t xmlns="http://www.adventure-works.com">This is some text </t>  
<b xmlns="http://www.adventure-works.com">  
  <t>where</t>  
</b>  
<t xmlns="http://www.adventure-works.com">where</t>  
<t xmlns="http://www.adventure-works.com"> all of the nodes must be concatenated. </t>  
<t xmlns="http://www.adventure-works.com">This is a second sentence.</t>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-251">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-251">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Descendants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants(Of T As XContainer) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Descendants : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Descendants (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-252"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-252">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-253">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XContainer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-253">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-254">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-254">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-255">소스 컬렉션에 있는 모든 요소 및 문서의 하위 요소가 들어 있는 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-255">Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection.</span></span> <span data-ttu-id="00288-256">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-256">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-257">소스 컬렉션에 있는 모든 요소 및 문서의 하위 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-257">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</span></span> <span data-ttu-id="00288-258">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-259">Visual Basic 사용자가 사용할 수는 [Visual Basic (LINQ to XML)의 Language-Integrated 축](https://msdn.microsoft.com/library/4143c385-eb50-4286-a7fd-a50f466c7af0) 이 축 메서드를 명시적으로 사용 하는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-259">Visual Basic users can use the [Language-Integrated Axes in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/4143c385-eb50-4286-a7fd-a50f466c7af0) instead of using this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-260">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-260">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-261">다음 예제에서는 두 요소의 컬렉션을 검색 한 다음 지정 된 요소 이름을 가진 두 요소의 모든 하위 항목의 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-261">The following example retrieves a collection of two elements, and then retrieves a collection of all descendants of the two elements that have the specified element name.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the text nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
string str =  
    (from el in xmlTree.Elements("Para").Descendants("t")  
    select (string)el)  
    .Aggregate(new StringBuilder(),  
        (sb, i) => sb.Append(i),  
        sb => sb.ToString());  
  
Console.WriteLine(str);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Para>  
            <t>This is some text </t>  
            <b>  
                <t>where</t>  
            </b>  
            <t> all of the text nodes must be concatenated. </t>  
        </Para>  
        <Para>  
            <t>This is a second sentence.</t>  
        </Para>  
    </Root>  
  
Dim str As String = _  
    ( _  
        From el In xmlTree.<Para>...<t> _  
        Select CStr(el) _  
    ) _  
    .Aggregate(New StringBuilder(), _  
               Function(ByVal sb, ByVal i) sb.Append(i), _  
               Function(ByVal sb) sb.ToString())  
  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="00288-262">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-262">This example produces the following output:</span></span>  
  
```  
This is some text where all of the text nodes must be concatenated. This is a second sentence.  
```  
  
 <span data-ttu-id="00288-263">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-263">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-264">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-264">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the text nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
string str =  
    (from el in xmlTree.Elements(aw + "Para").Descendants(aw + "t")  
     select (string)el)  
    .Aggregate(new StringBuilder(),  
        (sb, i) => sb.Append(i),  
        sb => sb.ToString());  
  
Console.WriteLine(str);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Para>  
                    <t>This is some text </t>  
                    <b>  
                        <t>where</t>  
                    </b>  
                    <t> all of the text nodes must be concatenated. </t>  
                </Para>  
                <Para>  
                    <t>This is a second sentence.</t>  
                </Para>  
            </Root>  
  
        Dim str As String = _  
            ( _  
                From el In xmlTree.<Para>...<t> _  
                Select CStr(el) _  
            ) _  
            .Aggregate(New StringBuilder(), _  
                       Function(sb, i) sb.Append(i), _  
                       Function(sb) sb.ToString())  
  
        Console.WriteLine(str)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="00288-265">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-265">This example produces the following output:</span></span>  
  
```  
This is some text where all of the text nodes must be concatenated. This is a second sentence.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-266">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-266">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-267">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 모든 하위 요소가 들어 있는 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-267">Returns a collection of every element in the source collection, and all descendant elements for every element in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-268">Visual Basic XML 하위 요소에 대 한 통합된 축에는 있지만이 메서드의 의미 체계는 통합된 축 없음.</span><span class="sxs-lookup"><span data-stu-id="00288-268">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method.</span></span>  
  
 <span data-ttu-id="00288-269">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-269">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-270">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-270">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.DescendantsAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-271">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-271">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-272">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 요소가 들어 있는 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-272">Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-273">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendent elements of every element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-274">Visual Basic XML 하위 요소에 대 한 통합된 축에는 있지만이 메서드의 의미 체계가 있으므로 Visual Basic 사용자는 명시적으로이 축 메서드를 사용 해야 하는 통합된 축 없음.</span><span class="sxs-lookup"><span data-stu-id="00288-274">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-275">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-275">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-276">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-276">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.DescendantsAndSelf (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-277">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-278">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-278">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-279">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 항목이 들어 있는 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-279">Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection.</span></span> <span data-ttu-id="00288-280">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-280">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-281">소스 컬렉션의 모든 요소와 소스 컬렉션에 있는 모든 요소의 하위 항목이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-281">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection.</span></span> <span data-ttu-id="00288-282">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-282">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-283">Visual Basic XML 하위 요소에 대 한 통합된 축에는 있지만이 메서드의 의미 체계가 있으므로 Visual Basic 사용자는 명시적으로이 축 메서드를 사용 해야 하는 통합된 축 없음.</span><span class="sxs-lookup"><span data-stu-id="00288-283">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="00288-284">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-284">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-285">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-285">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00288-286">소스 컬렉션에 있는 모든 요소 및 문서의 자식 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-286">Returns a collection of the child elements of every element and document in the source collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-287">Visual Basic에 지정 된 모든 자식 요소를 찾을 수 있는 통합된 요소 축을 <xref:System.Xml.Linq.XName> 소스 컬렉션에 있는 모든 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-287">Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <xref:System.Xml.Linq.XName> for every element in the source collection.</span></span>  
  
 <span data-ttu-id="00288-288">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-288">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Elements(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Elements : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Elements source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-289"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-289">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-290">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-290">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-291">소스 컬렉션에 있는 모든 요소 및 문서의 자식 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-291">Returns a collection of the child elements of every element and document in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-292">소스 컬렉션에 있는 모든 요소 또는 문서의 자식 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-292">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-293">Visual Basic에는 지정 된 모든 자식 요소를 찾을 수 있는 통합된 요소 축을 포함 되어 있지만 <xref:System.Xml.Linq.XName> 에 소스 컬렉션에 있는 모든 요소의 컬렉션을 검색할 수 있는 통합된 요소 축 없음가 모든 소스 컬렉션에 있는 모든 요소에 대 한 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-293">Although Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <xref:System.Xml.Linq.XName> for every element in the source collection, there is no integrated elements axis that allows you to retrieve a collection of every child element for every element in the source collection.</span></span>  
  
 <span data-ttu-id="00288-294">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-294">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-295">요소 이름의 요소의 컬렉션을 검색 하는 다음 예제에서는 `Child`합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-295">The following example retrieves a collection of elements with the element name of `Child`.</span></span> <span data-ttu-id="00288-296">그런 다음이 축 메서드를 사용 하 여 컬렉션의 모든 자식 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-296">It then uses this axis method to retrieve all child elements of the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild1", 1),  
        new XElement("GrandChild2", 2)  
    ),  
    new XElement("Child",  
        new XElement("GrandChild3", 3),  
        new XElement("GrandChild4", 4)  
    ),  
    new XElement("Child",  
        new XElement("GrandChild5", 5),  
        new XElement("GrandChild6", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements("Child").Elements()  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
     <Root>  
          <Child>  
              <GrandChild1>1</GrandChild1>  
              <GrandChild2>2</GrandChild2>  
          </Child>  
  
          <Child>  
              <GrandChild3>3</GrandChild3>  
              <GrandChild4>4</GrandChild4>  
          </Child>  
  
          <Child>  
              <GrandChild5>5</GrandChild5>  
              <GrandChild6>6</GrandChild6>  
          </Child>  
      </Root>  
  
Dim allGrandChildren = From el In xmlTree.<Child>.Elements _  
                       Select el  
  
For Each el As XElement In allGrandChildren  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="00288-297">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-297">This example produces the following output:</span></span>  
  
```  
<GrandChild1>1</GrandChild1>  
<GrandChild2>2</GrandChild2>  
<GrandChild3>3</GrandChild3>  
<GrandChild4>4</GrandChild4>  
<GrandChild5>5</GrandChild5>  
<GrandChild6>6</GrandChild6>  
```  
  
 <span data-ttu-id="00288-298">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-298">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-299">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-299">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild1", 1),  
        new XElement(aw + "GrandChild2", 2)  
    ),  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild3", 3),  
        new XElement(aw + "GrandChild4", 4)  
    ),  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild5", 5),  
        new XElement(aw + "GrandChild6", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements(aw + "Child").Elements()  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
             <Root>  
                 <Child>  
                     <GrandChild1>1</GrandChild1>  
                     <GrandChild2>2</GrandChild2>  
                 </Child>  
  
                 <Child>  
                     <GrandChild3>3</GrandChild3>  
                     <GrandChild4>4</GrandChild4>  
                 </Child>  
  
                 <Child>  
                     <GrandChild5>5</GrandChild5>  
                     <GrandChild6>6</GrandChild6>  
                 </Child>  
             </Root>  
  
        Dim allGrandChildren = From el In xmlTree.<Child>.Elements _  
                               Select el  
  
        For Each el As XElement In allGrandChildren  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-300">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-300">This example produces the following output:</span></span>  
  
```  
<GrandChild1 xmlns="http://www.adventure-works.com">1</GrandChild1>  
<GrandChild2 xmlns="http://www.adventure-works.com">2</GrandChild2>  
<GrandChild3 xmlns="http://www.adventure-works.com">3</GrandChild3>  
<GrandChild4 xmlns="http://www.adventure-works.com">4</GrandChild4>  
<GrandChild5 xmlns="http://www.adventure-works.com">5</GrandChild5>  
<GrandChild6 xmlns="http://www.adventure-works.com">6</GrandChild6>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-301">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-301">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Elements&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Elements(Of T As XContainer) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Elements : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Elements (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-302"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-302">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-303">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-303">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span></span></param>
        <param name="name"><span data-ttu-id="00288-304">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-304">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="00288-305">소스 컬렉션에 있는 모든 요소 및 문서의 필터링된 자식 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-305">Returns a filtered collection of the child elements of every element and document in the source collection.</span></span> <span data-ttu-id="00288-306">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-306">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="00288-307">소스 컬렉션에 있는 모든 요소 및 문서의 자식 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-307">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection.</span></span> <span data-ttu-id="00288-308">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-308">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-309">Visual Basic 사용자 컬렉션에 있는 모든 요소의 자식 요소를 검색 하는 통합된 요소 축을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-309">Visual Basic users can use the integrated elements axis to retrieve the child elements of every element in a collection.</span></span>  
  
 <span data-ttu-id="00288-310">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-310">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-311">이 확장 메서드는 특정 깊이에서 지정 된 이름의 모든 요소를 검색 하려고 할 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-311">This extension method is useful when you want to retrieve all elements with a specified name at a particular depth.</span></span> <span data-ttu-id="00288-312">이 문서는 매우 일반적인 경우 문서를 일반 없는 경우 좀 더 어려울 수 있습니다 쉽습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-312">This is easy if the document is very regular, but if the document is irregular, it can be a bit more difficult.</span></span> <span data-ttu-id="00288-313">다음 예제에서는 모든 검색 하고자 `aaa` 자식 요소 `Item` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-313">In the following example, we want to retrieve all `aaa` elements that are children of `Item` elements.</span></span> <span data-ttu-id="00288-314">지정 된 `Item` 요소가 포함 되거나 포함 되지 않을 수 있습니다는 `aaa` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-314">A given `Item` element may or may not contain an `aaa` element.</span></span> <span data-ttu-id="00288-315">이 검사는 다음과 같이이 확장 메서드를 사용 하 여 쉽게 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00288-315">This is easily accomplished using this extension method, as follows:</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Item",  
        new XElement("aaa", 1),  
        new XElement("bbb", 2)  
    ),  
    new XElement("Item",  
        new XElement("ccc", 3),  
        new XElement("aaa", 4)  
    ),  
    new XElement("Item",  
        new XElement("ddd", 5),  
        new XElement("eee", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements("Item").Elements("aaa")  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Item>  
            <aaa>1</aaa>  
            <bbb>2</bbb>  
        </Item>  
  
        <Item>  
            <ccc>3</ccc>  
            <aaa>4</aaa>  
        </Item>  
  
        <Item>  
            <ddd>5</ddd>  
            <eee>6</eee>  
        </Item>  
    </Root>  
  
Dim allGrandChildren = From el In xmlTree.<Item>.<aaa> _  
                       Select el  
  
For Each el As XElement In allGrandChildren  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="00288-316">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-316">This example produces the following output:</span></span>  
  
```  
<aaa>1</aaa>  
<aaa>4</aaa>  
```  
  
 <span data-ttu-id="00288-317">다음은 동일한 예에서 이지만 경우 XML 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00288-317">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="00288-318">자세한 내용은 [XML 네임 스페이스 작업](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-318">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Item",  
        new XElement(aw + "aaa", 1),  
        new XElement(aw + "bbb", 2)  
    ),  
    new XElement(aw + "Item",  
        new XElement(aw + "ccc", 3),  
        new XElement(aw + "aaa", 4)  
    ),  
    new XElement(aw + "Item",  
        new XElement(aw + "ddd", 5),  
        new XElement(aw + "eee", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements(aw + "Item").Elements(aw + "aaa")  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Item>  
                    <aaa>1</aaa>  
                    <bbb>2</bbb>  
                </Item>  
  
                <Item>  
                    <ccc>3</ccc>  
                    <aaa>4</aaa>  
                </Item>  
  
                <Item>  
                    <ddd>5</ddd>  
                    <eee>6</eee>  
                </Item>  
            </Root>  
  
        Dim allGrandChildren = From el In xmlTree.<Item>.<aaa> _  
                               Select el  
  
        For Each el As XElement In allGrandChildren  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="00288-319">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-319">This example produces the following output:</span></span>  
  
```  
<aaa xmlns="http://www.adventure-works.com">1</aaa>  
<aaa xmlns="http://www.adventure-works.com">4</aaa>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-320">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-320">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InDocumentOrder&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; InDocumentOrder&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; InDocumentOrder&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InDocumentOrder(Of T As XNode) (source As IEnumerable(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ InDocumentOrder(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member InDocumentOrder : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.InDocumentOrder source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-321"><see cref="T:System.Xml.Linq.XNode" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-321">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-322">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-322">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-323">소스 컬렉션의 모든 노드가 문서 순으로 정렬되어 들어 있는 노드 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-323">Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</span></span></summary>
        <returns><span data-ttu-id="00288-324">소스 컬렉션의 모든 노드가 문서 순으로 정렬되어 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-324">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-325">이 축 메서드는 지연 된 실행을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-325">This axis method uses deferred execution.</span></span> <span data-ttu-id="00288-326">그러나 먼저 해당 소스 컬렉션을 문서 순서로 노드 종류를 열거 하 고 결과 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-326">However, it first enumerates its source collection, the sorts the nodes in document order, and then yields the results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-327">다음 예제에서는 문서 순서에 있지 않은 노드 컬렉션 만들고이 축을 사용 하 여이 새 컬렉션을 만드는 문서 순서에 노드가 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-327">The following example creates a collection of nodes that are not in document order, and then uses this axis to create a new collection where the nodes are in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Item",  
        new XElement("aaa", 1),  
        new XElement("bbb", 2)  
    ),  
    new XElement("Item",  
        new XElement("ccc", 3),  
        new XElement("aaa", 4)  
    ),  
    new XElement("Item",  
        new XElement("ddd", 5),  
        new XElement("eee", 6)  
    )  
);  
  
XElement[] elementList = {  
    xmlTree.Descendants("ddd").First(),  
    xmlTree.Descendants("ccc").First(),  
    xmlTree.Descendants("aaa").First()  
};  
  
IEnumerable<XElement> inDocOrder = elementList.InDocumentOrder();  
  
foreach (XElement el in inDocOrder)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Item>  
            <aaa>1</aaa>  
            <bbb>2</bbb>  
        </Item>  
  
        <Item>  
            <ccc>3</ccc>  
            <aaa>4</aaa>  
        </Item>  
  
        <Item>  
            <ddd>5</ddd>  
            <eee>6</eee>  
        </Item>  
    </Root>  
  
Dim elementList() As XElement = _  
    { _  
        xmlTree...<ddd>(0), _  
        xmlTree...<ccc>(0), _  
        xmlTree...<aaa>(0) _  
    }  
  
Dim inDocOrder = elementList.InDocumentOrder  
  
For Each el As XElement In inDocOrder  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="00288-328">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-328">This example produces the following output:</span></span>  
  
```  
<aaa>1</aaa>  
<ccc>3</ccc>  
<ddd>5</ddd>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-329">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-329">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Nodes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Nodes(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Nodes : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Nodes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.Extensions/&lt;Nodes&gt;d__1`1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.Extensions/&lt;Nodes&gt;d__6`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-330"><see cref="T:System.Xml.Linq.XContainer" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-330">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-331">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-331">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-332">소스 컬렉션에 있는 모든 문서 및 요소의 자식 노드 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-332">Returns a collection of the child nodes of every document and element in the source collection.</span></span></summary>
        <returns><span data-ttu-id="00288-333">소스 컬렉션에 있는 모든 문서 및 요소의 자식 노드에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-333">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-334">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-334">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-335">다음 예제에서는 검색의 모든 자식 노드 이름의 요소가 컬렉션의 모든 노드에 대해 `Child`합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-335">The following example retrieves all of the child nodes for every node in a collection of elements with the name of `Child`.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
    @"<Root><Child>aaa<GrandChild>Text</GrandChild>bbb</Child>" +  
    @"<Child>ccc<GrandChild>Text</GrandChild>ddd</Child></Root>");  
IEnumerable<XNode> nodes = xmlTree.Elements("Child").Nodes();  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
    }  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child>aaa<GrandChild>Text</GrandChild>bbb</Child>  
        <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
    </Root>  
  
Dim nodes = xmlTree.<Child>.Nodes()  
  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
For Each node As XNode In nodes  
    Select Case node.NodeType  
        Case XmlNodeType.Element  
            Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
        Case XmlNodeType.Text  
            Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
    End Select  
Next  
  
```  
  
 <span data-ttu-id="00288-336">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-336">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: GrandChild  
Text: bbb  
Text: ccc  
Element: GrandChild  
Text: ddd  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <altmember cref="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-337">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-337">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static void Remove (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remove(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Remove (source As IEnumerable(Of XAttribute))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Remove(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Remove : seq&lt;System.Xml.Linq.XAttribute&gt; -&gt; unit" Usage="System.Xml.Linq.Extensions.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="00288-338">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-338">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-339">부모 요소에서 소스 컬렉션의 모든 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-339">Removes every attribute in the source collection from its parent element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-340">특성을 소스 컬렉션에 있는 복사,-스냅숏 의미 체계를 사용 하는이 메서드는 <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> 부모 로부터 분리 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-340">This method uses snapshot semantics - that is, it copies the attributes in the source collection to a <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> before disconnecting them from their parents.</span></span> <span data-ttu-id="00288-341">이 선언적/명령적 코드가 혼합된 된 문제를 방지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-341">This is required to avoid issues with mixed imperative/declarative code.</span></span> <span data-ttu-id="00288-342">자세한 내용은 [혼합 된 선언적 코드/명령적 코드 버그 (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-342">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-343">다음 예제에서는 특성의 컬렉션을 검색 한 다음 해당 부모 요소에서 제거 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-343">The following example retrieves a collection of attributes, and then calls this method to remove them from their parent elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4),  
    new XAttribute("Att5", 5)  
);  
  
IEnumerable<XAttribute> atList =  
    from at in root.Attributes()  
    where (int)at >= 3  
    select at;  
  
atList.Remove();  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4" Att5="5"/>  
  
Dim atList = From at In root.Attributes _  
             Where at.Value >= 3 _  
             Select at  
  
atList.Remove()  
  
Console.WriteLine(root)  
  
```  
  
 <span data-ttu-id="00288-344">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-344">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.XAttribute.Remove" />
        <altmember cref="M:System.Xml.Linq.XNode.Remove" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-345">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-345">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Remove&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Remove&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remove&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Remove(Of T As XNode) (source As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static void Remove(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Remove : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; unit (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="00288-346"><see cref="T:System.Xml.Linq.XNode" />로 제한된 <paramref name="source" />의 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-346">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="00288-347">소스 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00288-347">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span></span></param>
        <summary><span data-ttu-id="00288-348">부모 노드에서 소스 컬렉션의 모든 노드를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-348">Removes every node in the source collection from its parent node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00288-349">특성을 소스 컬렉션에 있는 복사,-스냅숏 의미 체계를 사용 하는이 메서드는 `List<T>` 부모 로부터 분리 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-349">This method uses snapshot semantics - that is, it copies the attributes in the source collection to a `List<T>` before disconnecting them from their parents.</span></span> <span data-ttu-id="00288-350">이 선언적/명령적 코드가 혼합된 된 문제를 방지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-350">This is required to avoid issues with mixed imperative/declarative code.</span></span> <span data-ttu-id="00288-351">자세한 내용은 [혼합 된 선언적 코드/명령적 코드 버그 (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-351">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00288-352">다음 예제에서는 요소의 컬렉션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-352">The following example retrieves a collection of elements.</span></span> <span data-ttu-id="00288-353">그런 다음 해당 부모 요소에서 요소를 제거 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-353">It then calls this method to remove the elements from their parent element.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
IEnumerable<XElement> elList =  
    from el in root.Elements()  
    where (int)el >= 3  
    select el;  
  
elList.Remove();  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Dim elList = From el In root.Elements _  
             Where el.Value >= 3 _  
             Select el  
  
elList.Remove()  
  
Console.WriteLine(root)  
  
```  
  
 <span data-ttu-id="00288-354">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="00288-354">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.XAttribute.Remove" />
        <altmember cref="M:System.Xml.Linq.XNode.Remove" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="00288-355">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="00288-355">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>