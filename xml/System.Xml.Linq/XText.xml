<Type Name="XText" FullName="System.Xml.Linq.XText">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7da66e518fc292fb1e273bc05b8e5d7343073f4f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58728483" /></Metadata><TypeSignature Language="C#" Value="public class XText : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XText extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XText" />
  <TypeSignature Language="VB.NET" Value="Public Class XText&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XText : System::Xml::Linq::XNode" />
  <TypeSignature Language="F#" Value="type XText = class&#xA;    inherit XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b5cb1-101">텍스트 노드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-101">Represents a text node.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-102">XML 요소의 텍스트 콘텐츠를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-102">XML elements can contain text content.</span></span> <span data-ttu-id="b5cb1-103">경우에 따라 콘텐츠는 (요소만을 포함 텍스트 콘텐츠), 간단 하며 콘텐츠를 혼합 하는 경우가 있습니다 (요소의 내용을 텍스트와 다른 요소에 포함 하는 데 사용).</span><span class="sxs-lookup"><span data-stu-id="b5cb1-103">Sometimes the content is simple (the element only contains text content), and sometimes the content is mixed (the contents of the element contains both text and other elements).</span></span> <span data-ttu-id="b5cb1-104">두 경우 모두 텍스트의 각 청크 구조로 표시 됩니다는 <xref:System.Xml.Linq.XText> 노드.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-104">In either case, each chunk of text is represented as an <xref:System.Xml.Linq.XText> node.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="b5cb1-105">개발자는 임의의 사용 하는 코드를 쓸 경우가 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 만들지 않은 트리.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-105">developers will often have to write code to work with arbitrary [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] trees that they did not create.</span></span> <span data-ttu-id="b5cb1-106">사용 하는 코드를 작성 하는 경우 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 제어할 수 없는 만들기는 트리 수의 특정 동작 <xref:System.Xml.Linq.XText> 노드.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-106">If you are writing code that has to work with [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] trees that you have no control over creating, you should be aware of certain behaviors of <xref:System.Xml.Linq.XText> nodes.</span></span>  
  
 <span data-ttu-id="b5cb1-107">노드 수준에서 XML 트리의 내용을 처리 하는 경우 준비를 해야 여러 <xref:System.Xml.Linq.XText> 노드가 서로 인접 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-107">When processing the contents of an XML tree at the node level, you should be prepared for multiple <xref:System.Xml.Linq.XText> nodes to be adjacent to each other.</span></span> <span data-ttu-id="b5cb1-108">또한에 대비해 야 <xref:System.Xml.Linq.XText> 없는 텍스트를 포함 하는 노드.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-108">Further, you should be prepared for <xref:System.Xml.Linq.XText> nodes that contain no text.</span></span> <span data-ttu-id="b5cb1-109">통해 있기 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 텍스트 노드의 콘텐츠를 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-109">It is possible through [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] methods to remove the content of a text node.</span></span> <span data-ttu-id="b5cb1-110">그러나 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 노드를 자동으로 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-110">However, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not automatically delete the node.</span></span> <span data-ttu-id="b5cb1-111">노드는 id가 있으며 따라서 주석이 있을 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 길이가 0 인 트리의 노드 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-111">The node has identity, and might have annotations, so [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] allows for zero-length nodes in the tree.</span></span>  
  
 <span data-ttu-id="b5cb1-112">자세한 내용은 [노드를 사용한 프로그래밍](https://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f)합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-112">For more information, see [Programming with Nodes](https://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-113">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-113">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5cb1-114"><see cref="T:System.Xml.Linq.XText" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-114">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-115">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-115">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XText(System::String ^ value);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XText : string -&gt; System.Xml.Linq.XText" Usage="new System.Xml.Linq.XText value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b5cb1-116"><see cref="T:System.String" /> 노드의 값이 들어 있는 <see cref="T:System.Xml.Linq.XText" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-116">The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.</span></span></param>
        <summary><span data-ttu-id="b5cb1-117"><see cref="T:System.Xml.Linq.XText" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-117">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-118">일반적으로 만들지 않도록 텍스트 노드를 사용 하 여는 <xref:System.Xml.Linq.XText> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-118">You typically do not create text nodes by using the <xref:System.Xml.Linq.XText> constructors.</span></span> <span data-ttu-id="b5cb1-119">생성할 때 텍스트 콘텐츠 전달 하는 경우는 <xref:System.Xml.Linq.XElement>, 텍스트 노드가 자동으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-119">When you pass text content when constructing an <xref:System.Xml.Linq.XElement>, text nodes are automatically created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5cb1-120">다음 예제에서는 텍스트 노드를 포함 하는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-120">The following example creates an element that contains a text node.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root>Some text</Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="b5cb1-121">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-121">This example produces the following output:</span></span>  
  
```xml  
<Root>Some text</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-122">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-122">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (System.Xml.Linq.XText other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XText(System::Xml::Linq::XText ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XText : System.Xml.Linq.XText -&gt; System.Xml.Linq.XText" Usage="new System.Xml.Linq.XText other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XText" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b5cb1-123">복사할 <see cref="T:System.Xml.Linq.XText" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-123">The <see cref="T:System.Xml.Linq.XText" /> node to copy from.</span></span></param>
        <summary><span data-ttu-id="b5cb1-124">다른 <see cref="T:System.Xml.Linq.XText" /> 개체를 사용하여 <see cref="T:System.Xml.Linq.XText" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-124">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-125">이 생성자는 주로 XML 트리의 전체 복사본을 만들기를 내부적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-125">This constructor is primarily used internally to make a deep copy of an XML tree.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-126">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-126">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XText.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5cb1-127">이 노드에 대한 노드 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-127">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="b5cb1-128">노드 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-128">The node type.</span></span> <span data-ttu-id="b5cb1-129"><see cref="T:System.Xml.Linq.XText" /> 개체의 경우 이 값은 <see cref="F:System.Xml.XmlNodeType.Text" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-129">For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-130">파생 하는 모든 클래스 <xref:System.Xml.Linq.XObject> 포함 된 <xref:System.Xml.Linq.XObject.NodeType%2A> 속성 컬렉션의 구체적인 서브 클래스에 대해 작동 하는 코드를 작성할 수 있습니다 <xref:System.Xml.Linq.XObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-130">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="b5cb1-131">컬렉션에서 각 노드의 노드 유형에 대 한 코드 테스트할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-131">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5cb1-132">다음 예제에서는 다양 한 유형의 노드를 포함 하는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-132">The following example creates an XML tree that contains a number of types of nodes.</span></span> <span data-ttu-id="b5cb1-133">그런 다음 각 노드의 노드 유형을 출력 트리를 통해 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-133">It then iterates through the tree, outputting the node type of each node.</span></span>  
  
 <span data-ttu-id="b5cb1-134">사실은 `Child2` 포함는 <xref:System.Xml.Linq.XText> 노드를 문자열 콘텐츠에서 암시적으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-134">Note that `Child2` contains an <xref:System.Xml.Linq.XText> node, implicitly converted from the string content.</span></span>  
  
```csharp  
// Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2", "Text content")  
    )  
);  
  
foreach (XNode node in xmlTree.DescendantNodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
    }  
}  
```  
  
```vb  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0'?>  
    <!-- a comment -->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1>  
            <![CDATA[CDATA content]]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-135">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-135">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Xml.Linq.XText.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5cb1-136">이 노드의 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-136">Gets or sets the value of this node.</span></span></summary>
        <value><span data-ttu-id="b5cb1-137">이 노드의 값이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-137">A <see cref="T:System.String" /> that contains the value of this node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-138">이 속성에서 발생 하는 설정 된 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-138">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5cb1-139">다음 예와 가져오기 및이 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-139">The following example shows getting and setting this property.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "Some text");  
XText txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
txtNode.Value = "New text";  
Console.WriteLine(txtNode.Value);  
  
root.Value = "Newer text";  
txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
```  
  
```vb  
Dim root As XElement = <Root>Some text</Root>  
Dim txtNode As XText = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
txtNode.Value = "New text"  
Console.WriteLine(txtNode.Value)  
  
root.Value = "Newer text"  
txtNode = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
```  
  
 <span data-ttu-id="b5cb1-140">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-140">This example produces the following output:</span></span>  
  
```  
Some text  
New text  
Newer text  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-141">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-141">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xText.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="b5cb1-142">이 메서드가 쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-142">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="b5cb1-143">이 노드를 <see cref="T:System.Xml.XmlWriter" />로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-143">Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5cb1-144">이 메서드는 주로 내부적으로 XML 트리를 작성 하는 메서드에서 <xref:System.Xml.XmlWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="b5cb1-144">This method is primarily used internally by the methods that write an XML tree to an <xref:System.Xml.XmlWriter>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="b5cb1-145">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="b5cb1-145">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xText.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>