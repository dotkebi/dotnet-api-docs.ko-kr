<Type Name="EventBindingService" FullName="System.ComponentModel.Design.EventBindingService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f360f69528699ec15d4f659003285be62b276be8" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58718769" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventBindingService : System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventBindingService extends System.Object implements class System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.EventBindingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventBindingService&#xA;Implements IEventBindingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBindingService abstract : System::ComponentModel::Design::IEventBindingService" />
  <TypeSignature Language="F#" Value="type EventBindingService = class&#xA;    interface IEventBindingService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IEventBindingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="da434-101"><see cref="T:System.ComponentModel.Design.IEventBindingService" /> 인터페이스의 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-101">A default implementation of the <see cref="T:System.ComponentModel.Design.IEventBindingService" /> interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-102">구성 요소 이벤트에 대 한 이벤트 처리기를 등록에 대 한 서비스를 제공 하 여 <xref:System.ComponentModel.Design.EventBindingService> 디자이너 코드에서 구성 요소 이벤트와 이벤트 처리기를 연결 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-102">By providing a service for registering event handlers for component events, <xref:System.ComponentModel.Design.EventBindingService> provides a way to link an event handler with a component event from designer code.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="da434-103">시스템 리소스에 대 한 전체 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-103">for full access to system resources.</span></span> <span data-ttu-id="da434-104">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-104">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span></span> <span data-ttu-id="da434-105">연결 된 상태:</span><span class="sxs-lookup"><span data-stu-id="da434-105">Associated state:</span></span></permission>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBindingService (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventBindingService(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.EventBindingService : IServiceProvider -&gt; System.ComponentModel.Design.EventBindingService" Usage="new System.ComponentModel.Design.EventBindingService provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="da434-106"><see cref="T:System.ComponentModel.Design.EventBindingService" />가 서비스를 쿼리할 서비스 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-106">The service provider from which <see cref="T:System.ComponentModel.Design.EventBindingService" /> will query for services.</span></span></param>
        <summary><span data-ttu-id="da434-107"><see cref="T:System.ComponentModel.Design.EventBindingService" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-107">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.EventBindingService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-108"><paramref name="provider" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-108"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="protected abstract string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueMethodName : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor -&gt; string" Usage="eventBindingService.CreateUniqueMethodName (component, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-109">메서드 이름을 만들 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-109">The component for which the method name will be created.</span></span></param>
        <param name="e"><span data-ttu-id="da434-110">이름을 만들 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-110">The event to create a name for.</span></span></param>
        <summary><span data-ttu-id="da434-111">고유한 메서드 이름을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="da434-111">Creates a unique method name.</span></span></summary>
        <returns><span data-ttu-id="da434-112">고유한 메서드 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-112">The unique method name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-113">반환한 이름을 <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> 메서드 사용 되는 스크립트 언어와 호환 되어야 하 고 코드에서 다른 이름과 충돌 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-113">The name returned by the <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> method must be compatible with the script language being used and it must not conflict with any other name in your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-114"><paramref name="component" /> 또는 <paramref name="e" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="da434-114"><paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="FreeMethod">
      <MemberSignature Language="C#" Value="protected virtual void FreeMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FreeMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FreeMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.FreeMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-115">메서드가 바인딩될 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-115">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="da434-116">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-116">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="da434-117">해제할 메서드 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-117">The name of the method to be freed.</span></span></param>
        <summary><span data-ttu-id="da434-118">이벤트 처리기에서 특정 메서드를 더 이상 사용하지 않는다는 알림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-118">Provides a notification that a particular method is no longer being used by an event handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-119">일부 구현에서는 이벤트가 사용 하는 경우 이벤트 처리기를 제거 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-119">Some implementations may intend to remove the event handler when no events are using it.</span></span> <span data-ttu-id="da434-120">재정의 하 여 <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> 고 <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, 구현 메서드를 더 이상 필요 없는 유추할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-120">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCompatibleMethods">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCompatibleMethods (e As EventDescriptor) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::ICollection ^ GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GetCompatibleMethods : System.ComponentModel.EventDescriptor -&gt; System.Collections.ICollection" Usage="eventBindingService.GetCompatibleMethods e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="da434-121">호환되는 대리자가 포함된 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-121">The <see cref="T:System.ComponentModel.EventDescriptor" /> containing the compatible delegate.</span></span></param>
        <summary><span data-ttu-id="da434-122">호환되는 메서드의 이름 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-122">Returns a collection of names of compatible methods.</span></span></summary>
        <returns><span data-ttu-id="da434-123">호환되는 메서드의 이름인 문자열의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-123">A collection of strings that are names of compatible methods.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-124">컬렉션에서 반환 된 각 문자열은 메서드 시그니처가 있는 대리자와 호환 되는 메서드 이름 `e`합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-124">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="da434-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> 이름이 없습니다. 호환 되는 경우에 빈 컬렉션을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-126"><paramref name="e" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-126"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="eventBindingService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="da434-127">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-127">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="da434-128">서비스 공급자에서 요청한 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="da434-128">Gets the requested service from the service provider.</span></span></summary>
        <returns><span data-ttu-id="da434-129"><paramref name="serviceType" />에 의해 지정된 서비스에 대한 참조이거나, 요청한 서비스를 사용할 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-129">A reference to the service specified by <paramref name="serviceType" />, or <see langword="null" /> if the requested service is not available.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="da434-130">사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-130">Displays user code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode();" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : unit -&gt; bool" Usage="eventBindingService.ShowCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da434-131">사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-131">Displays user code.</span></span></summary>
        <returns><span data-ttu-id="da434-132">코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-132"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-133"><xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> 메서드는 특정 코드를 표시 하지 않습니다; 그리고 일반적으로 사용자가 입력 한 마지막 코드가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="da434-133">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method does not display any particular code; generally it displays the last code the user typed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (lineNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(int lineNumber);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : int -&gt; bool" Usage="eventBindingService.ShowCode lineNumber" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="da434-134">표시할 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-134">The line number to show.</span></span></param>
        <summary><span data-ttu-id="da434-135">제공된 줄 번호에 있는 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-135">Displays the user code at the given line number.</span></span></summary>
        <returns><span data-ttu-id="da434-136">코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-136"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-137">줄 번호는 1부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-137">Line numbers are one-based.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (component As IComponent, e As EventDescriptor, methodName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; bool" Usage="eventBindingService.ShowCode (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-138">메서드가 바인딩될 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-138">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="da434-139">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-139">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="da434-140">코드를 표시할 메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-140">The name of the method for which to display code.</span></span></param>
        <summary><span data-ttu-id="da434-141">지정된 메서드에 대한 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-141">Displays the user code for the specified method.</span></span></summary>
        <returns><span data-ttu-id="da434-142">코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-142"><see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-143"><xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> 메서드는 지정 된 메서드 이름 사용 하 여 사용자 코드의 본문을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-143">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method displays the body of the user code with the given method name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="string IEventBindingService.CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String Implements IEventBindingService.CreateUniqueMethodName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-144">이벤트가 연결된 구성 요소 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-144">The component instance the event is connected to.</span></span></param>
        <param name="e"><span data-ttu-id="da434-145">이름을 만들 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-145">The event to create a name for.</span></span></param>
        <summary><span data-ttu-id="da434-146">지정된 구성 요소와 이벤트에 대한 이벤트 처리기 메서드의 고유 이름을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="da434-146">Creates a unique name for an event-handler method for the specified component and event.</span></span></summary>
        <returns><span data-ttu-id="da434-147">이 이벤트에 대한 이벤트 처리기의 권장 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-147">The recommended name for the event-handler method for this event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-148"><paramref name="component" /> 또는 <paramref name="e" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="da434-148"><paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IEventBindingService.GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetCompatibleMethods (e As EventDescriptor) As ICollection Implements IEventBindingService.GetCompatibleMethods" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="da434-149">호환되는 이벤트 처리기 메서드를 가져올 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-149">The event to get the compatible event-handler methods for.</span></span></param>
        <summary><span data-ttu-id="da434-150">지정된 이벤트와 호환되는 메서드 시그니처를 가진 이벤트 처리기 메서드의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="da434-150">Gets a collection of event-handler methods that have a method signature compatible with the specified event.</span></span></summary>
        <returns><span data-ttu-id="da434-151">호환되는 메서드의 이름인 문자열의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-151">A collection of strings that are names of compatible methods.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-152">컬렉션에서 반환 된 각 문자열은 메서드 시그니처가 있는 대리자와 호환 되는 메서드 이름 `e`합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-152">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="da434-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> 이름이 없습니다. 호환 되는 경우에 빈 컬렉션을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-154"><paramref name="e" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-154"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEvent">
      <MemberSignature Language="C#" Value="System.ComponentModel.EventDescriptor IEventBindingService.GetEvent (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEvent (property As PropertyDescriptor) As EventDescriptor Implements IEventBindingService.GetEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::EventDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEvent(System::ComponentModel::PropertyDescriptor ^ property) = System::ComponentModel::Design::IEventBindingService::GetEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="da434-155">이벤트를 표시하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-155">The property that represents an event.</span></span></param>
        <summary><span data-ttu-id="da434-156">이벤트를 표시하는 경우 지정된 속성 설명자가 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="da434-156">Gets an <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the specified property descriptor represents, if it represents an event.</span></span></summary>
        <returns><span data-ttu-id="da434-157">속성이 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 속성이 이벤트를 표시하지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-157">An <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the property represents, or <see langword="null" /> if the property does not represent an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection IEventBindingService.GetEventProperties (System.ComponentModel.EventDescriptorCollection events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(class System.ComponentModel.EventDescriptorCollection events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperties (events As EventDescriptorCollection) As PropertyDescriptorCollection Implements IEventBindingService.GetEventProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.IEventBindingService.GetEventProperties(System::ComponentModel::EventDescriptorCollection ^ events) = System::ComponentModel::Design::IEventBindingService::GetEventProperties;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.ComponentModel.EventDescriptorCollection" />
      </Parameters>
      <Docs>
        <param name="events"><span data-ttu-id="da434-158">속성으로 변환할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-158">The events to convert to properties.</span></span></param>
        <summary><span data-ttu-id="da434-159">일련의 이벤트 설명자를 일련의 속성 설명자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-159">Converts a set of event descriptors to a set of property descriptors.</span></span></summary>
        <returns><span data-ttu-id="da434-160">이벤트 집합을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-160">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that describe the event set.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-161"><paramref name="events" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-161"><paramref name="events" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperty">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptor IEventBindingService.GetEventProperty (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperty (e As EventDescriptor) As PropertyDescriptor Implements IEventBindingService.GetEventProperty" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEventProperty(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetEventProperty;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="da434-162">변환할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-162">The event to convert.</span></span></param>
        <summary><span data-ttu-id="da434-163">단일 이벤트 설명자를 속성 설명자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-163">Converts a single event descriptor to a property descriptor.</span></span></summary>
        <returns><span data-ttu-id="da434-164">이벤트를 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-164">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-165"><paramref name="e" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-165"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="da434-166">디자이너에 대한 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-166">Displays the user code for the designer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode () As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode() = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da434-167">디자이너에 대한 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-167">Displays the user code for the designer.</span></span></summary>
        <returns><span data-ttu-id="da434-168">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-168"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (lineNumber As Integer) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="da434-169">캐럿을 놓을 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-169">The line number to place the caret on.</span></span></param>
        <summary><span data-ttu-id="da434-170">지정된 줄에서 디자이너에 대한 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-170">Displays the user code for the designer at the specified line.</span></span></summary>
        <returns><span data-ttu-id="da434-171">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-171"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (component As IComponent, e As EventDescriptor) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-172">이벤트가 연결된 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-172">The component that the event is connected to.</span></span></param>
        <param name="e"><span data-ttu-id="da434-173">표시할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-173">The event to display.</span></span></param>
        <summary><span data-ttu-id="da434-174">지정된 이벤트에 대한 사용자 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-174">Displays the user code for the specified event.</span></span></summary>
        <returns><span data-ttu-id="da434-175">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-175"><see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da434-176"><paramref name="events" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-176"><paramref name="events" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseMethod">
      <MemberSignature Language="C#" Value="protected virtual void UseMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.UseMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="da434-177">메서드가 바인딩될 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-177">The component to which the method is bound.</span></span></param>
        <param name="e"><span data-ttu-id="da434-178">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-178">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span></span></param>
        <param name="methodName"><span data-ttu-id="da434-179">메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-179">The name of the method.</span></span></param>
        <summary><span data-ttu-id="da434-180">이벤트 처리기에서 특정 메서드를 사용하고 있다는 알림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-180">Provides a notification that a particular method is being used by an event handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-181">일부 구현에서는 이벤트가 사용 하는 경우 이벤트 처리기를 제거 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-181">Some implementations may intend to remove the event handler when no events are using it.</span></span> <span data-ttu-id="da434-182">재정의 하 여 <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> 고 <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, 구현 메서드를 더 이상 필요 없는 유추할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-182">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="ValidateMethodName">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMethodName (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMethodName(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMethodName (methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMethodName(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ValidateMethodName : string -&gt; unit&#xA;override this.ValidateMethodName : string -&gt; unit" Usage="eventBindingService.ValidateMethodName methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName"><span data-ttu-id="da434-183">유효성을 검사할 메서드 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="da434-183">The method name to validate.</span></span></param>
        <summary><span data-ttu-id="da434-184">제공된 메서드 이름이 사용 중인 언어나 스크립트에 유효한지 검사합니다.</span><span class="sxs-lookup"><span data-stu-id="da434-184">Validates that the provided method name is valid for the language or script being used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da434-185">기본 구현은 아무 작업도 수행하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-185">The default implementation does nothing.</span></span> <span data-ttu-id="da434-186">이 재정의 하 고 이름 사용에 대 한 유효 하지 않은 경우 예외를 throw 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="da434-186">You may override this and throw an exception if the name is invalid for your use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>