<Type Name="ServiceContainer" FullName="System.ComponentModel.Design.ServiceContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="76fb7da126ec2dfa0179d176443fd2884a2176c1" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57929519" /></Metadata><TypeSignature Language="C#" Value="public class ServiceContainer : IDisposable, IServiceProvider, System.ComponentModel.Design.IServiceContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceContainer extends System.Object implements class System.ComponentModel.Design.IServiceContainer, class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ServiceContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceContainer&#xA;Implements IDisposable, IServiceContainer, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceContainer : IDisposable, IServiceProvider, System::ComponentModel::Design::IServiceContainer" />
  <TypeSignature Language="F#" Value="type ServiceContainer = class&#xA;    interface IServiceContainer&#xA;    interface IDisposable&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IServiceContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d7690-101"><see cref="T:System.ComponentModel.Design.IServiceContainer" /> 인터페이스의 기본 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-101">Provides a simple implementation of the <see cref="T:System.ComponentModel.Design.IServiceContainer" /> interface.</span></span> <span data-ttu-id="d7690-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7690-103"><xref:System.ComponentModel.Design.ServiceContainer> 개체를 사용 하 여 저장 하 고 서비스를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-103">The <xref:System.ComponentModel.Design.ServiceContainer> object can be used to store and provide services.</span></span> <span data-ttu-id="d7690-104"><xref:System.ComponentModel.Design.ServiceContainer>는 <xref:System.ComponentModel.Design.IServiceContainer> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-104"><xref:System.ComponentModel.Design.ServiceContainer> implements the <xref:System.ComponentModel.Design.IServiceContainer> interface.</span></span>  
  
 <span data-ttu-id="d7690-105">합니다 <xref:System.ComponentModel.Design.ServiceContainer> 부모를 추가 하는 생성자를 사용 하 여 개체를 만들 수 있습니다 <xref:System.ComponentModel.Design.IServiceContainer> 는 서비스 수 필요에 따라 추가 하거나 모든 부모에서 제거를 통해 <xref:System.ComponentModel.Design.IServiceContainer> 직계 부모를 포함 하 여 개체 <xref:System.ComponentModel.Design.IServiceContainer>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-105">The <xref:System.ComponentModel.Design.ServiceContainer> object can be created using a constructor that adds a parent <xref:System.ComponentModel.Design.IServiceContainer> through which services can be optionally added to or removed from all parent <xref:System.ComponentModel.Design.IServiceContainer> objects, including the immediate parent <xref:System.ComponentModel.Design.IServiceContainer>.</span></span> <span data-ttu-id="d7690-106">추가 하거나 서비스를 모두 제거할 <xref:System.ComponentModel.Design.IServiceContainer> 이 연결 되는 구현을 <xref:System.ComponentModel.Design.IServiceContainer> 부모/자식 관리를 통해 호출 합니다 <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A> 또는 <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> 서비스 요청을 승격 여부를 나타내는 부울 값을 허용 하는 메서드 오버 로드 .</span><span class="sxs-lookup"><span data-stu-id="d7690-106">To add or remove a service from all <xref:System.ComponentModel.Design.IServiceContainer> implementations that are linked to this <xref:System.ComponentModel.Design.IServiceContainer> through parenting, call the <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A> or <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> method overload that accepts a Boolean value indicating whether to promote the service request.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7690-107">합니다 <xref:System.Security.Permissions.HostProtectionAttribute> 이 클래스에 적용 된 특성에는 다음과 같은 <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> 속성 값: <xref:System.Security.Permissions.HostProtectionResource.SharedState>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-107">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.SharedState>.</span></span> <span data-ttu-id="d7690-108"><xref:System.Security.Permissions.HostProtectionAttribute>는 대개 아이콘을 두 번 클릭하거나, 명령을 입력하거나, 브라우저에서 URL을 입력하여 시작되는 데스크톱 애플리케이션에 영향을 미치지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-108">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="d7690-109">자세한 내용은 참조는 <xref:System.Security.Permissions.HostProtectionAttribute> 클래스 또는 [SQL Server 프로그래밍 및 호스트 보호 특성](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-109">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7690-110">다음 예제 프로그램 서비스 체 이닝을 보여 주고 결과 서비스 가용성의 체인을 연결 <xref:System.ComponentModel.Design.ServiceContainer> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-110">The following example program demonstrates service chaining and the resultant service availability of a chain of linked <xref:System.ComponentModel.Design.ServiceContainer> objects.</span></span> <span data-ttu-id="d7690-111">프로그램에 연결 된 서비스의 체인 내에서 서비스의 가용성을 확인할 수 있습니다를 사용 하 여 사용자 인터페이스를 제공 합니다 <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A>, <xref:System.ComponentModel.Design.ServiceContainer.GetService%2A>, 및 <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> 메서드 뿐만 아니라 연결 된 서비스 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-111">The program provides a user interface that allows you to see the availability of services within a chain of linked services, and uses the <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A>, <xref:System.ComponentModel.Design.ServiceContainer.GetService%2A>, and <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> methods as well as linked service containers.</span></span>  
  
 [!code-cpp[ServiceArchitectureExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceArchitectureExample/CPP/serviceform.cpp#1)]
 [!code-csharp[ServiceArchitectureExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceArchitectureExample/CS/serviceform.cs#1)]
 [!code-vb[ServiceArchitectureExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceArchitectureExample/VB/serviceform.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
    <altmember cref="T:System.ComponentModel.Design.ServiceCreatorCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7690-112"><see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-112">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContainer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7690-113"><see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-113">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer (IServiceProvider parentProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parentProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContainer(IServiceProvider ^ parentProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.ServiceContainer : IServiceProvider -&gt; System.ComponentModel.Design.ServiceContainer" Usage="new System.ComponentModel.Design.ServiceContainer parentProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="parentProvider"><span data-ttu-id="d7690-114">부모 서비스 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-114">A parent service provider.</span></span></param>
        <summary><span data-ttu-id="d7690-115">지정된 부모 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class using the specified parent service provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7690-116">서비스 컨테이너는 컨테이너에서 로컬로 사용할 수 없는 경우 서비스를 검색 하려면이 서비스 개체 공급자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-116">The service container uses this service object provider to retrieve services, if they are not available locally in the container.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddService">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7690-117">지정된 서비스를 서비스 컨테이너에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-117">Adds the specified service to the service container.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (serviceType As Type, callback As ServiceCreatorCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddService(Type ^ serviceType, System::ComponentModel::Design::ServiceCreatorCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member AddService : Type * System.ComponentModel.Design.ServiceCreatorCallback -&gt; unit&#xA;override this.AddService : Type * System.ComponentModel.Design.ServiceCreatorCallback -&gt; unit" Usage="serviceContainer.AddService (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-118">추가할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-118">The type of service to add.</span></span></param>
        <param name="callback"><span data-ttu-id="d7690-119">서비스를 만들 수 있는 콜백 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-119">A callback object that can create the service.</span></span> <span data-ttu-id="d7690-120">이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-120">This allows a service to be declared as available, but delays creation of the object until the service is requested.</span></span></param>
        <summary><span data-ttu-id="d7690-121">지정된 서비스를 서비스 컨테이너에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-121">Adds the specified service to the service container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7690-122">다음 예제에서는 서비스를 추가 하는 방법을 보여 줍니다는 <xref:System.ComponentModel.Design.ServiceContainer>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-122">The following example illustrates how to add a service to a <xref:System.ComponentModel.Design.ServiceContainer>.</span></span>  
  
 [!code-cpp[ServiceContainerExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#3)]
 [!code-csharp[ServiceContainerExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#3)]
 [!code-vb[ServiceContainerExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-123"><paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-123"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7690-124"><paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-124">A service of type <paramref name="serviceType" /> already exists in the container.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddService(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberSignature Language="F#" Value="abstract member AddService : Type * obj -&gt; unit&#xA;override this.AddService : Type * obj -&gt; unit" Usage="serviceContainer.AddService (serviceType, serviceInstance)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-125">추가할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-125">The type of service to add.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="d7690-126">추가할 서비스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-126">An instance of the service to add.</span></span> <span data-ttu-id="d7690-127">이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-127">This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter.</span></span></param>
        <summary><span data-ttu-id="d7690-128">지정된 서비스를 서비스 컨테이너에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-128">Adds the specified service to the service container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7690-129">다음 예제에서는 서비스를 추가 하는 방법을 보여 줍니다는 <xref:System.ComponentModel.Design.ServiceContainer>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-129">The following example illustrates how to add a service to a <xref:System.ComponentModel.Design.ServiceContainer>.</span></span>  
  
 [!code-cpp[ServiceContainerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#2)]
 [!code-csharp[ServiceContainerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#2)]
 [!code-vb[ServiceContainerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-130"><paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-130"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7690-131"><paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-131">A service of type <paramref name="serviceType" /> already exists in the container.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddService (serviceType As Type, callback As ServiceCreatorCallback, promote As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddService(Type ^ serviceType, System::ComponentModel::Design::ServiceCreatorCallback ^ callback, bool promote);" />
      <MemberSignature Language="F#" Value="abstract member AddService : Type * System.ComponentModel.Design.ServiceCreatorCallback * bool -&gt; unit&#xA;override this.AddService : Type * System.ComponentModel.Design.ServiceCreatorCallback * bool -&gt; unit" Usage="serviceContainer.AddService (serviceType, callback, promote)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-132">추가할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-132">The type of service to add.</span></span></param>
        <param name="callback"><span data-ttu-id="d7690-133">서비스를 만들 수 있는 콜백 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-133">A callback object that can create the service.</span></span> <span data-ttu-id="d7690-134">이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-134">This allows a service to be declared as available, but delays creation of the object until the service is requested.</span></span></param>
        <param name="promote"><span data-ttu-id="d7690-135">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-135"><see langword="true" /> if this service should be added to any parent service containers; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d7690-136">지정된 서비스를 서비스 컨테이너에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-136">Adds the specified service to the service container.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-137"><paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-137"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7690-138"><paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-138">A service of type <paramref name="serviceType" /> already exists in the container.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, object serviceInstance, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddService (serviceType As Type, serviceInstance As Object, promote As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddService(Type ^ serviceType, System::Object ^ serviceInstance, bool promote);" />
      <MemberSignature Language="F#" Value="abstract member AddService : Type * obj * bool -&gt; unit&#xA;override this.AddService : Type * obj * bool -&gt; unit" Usage="serviceContainer.AddService (serviceType, serviceInstance, promote)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-139">추가할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-139">The type of service to add.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="d7690-140">추가할 서비스 형식의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-140">An instance of the service type to add.</span></span> <span data-ttu-id="d7690-141">이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-141">This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter.</span></span></param>
        <param name="promote"><span data-ttu-id="d7690-142">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-142"><see langword="true" /> if this service should be added to any parent service containers; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d7690-143">지정된 서비스를 서비스 컨테이너에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-143">Adds the specified service to the service container.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-144"><paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-144"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7690-145"><paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="d7690-145">A service of type <paramref name="serviceType" /> already exists in the container.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="DefaultServices">
      <MemberSignature Language="C#" Value="protected virtual Type[] DefaultServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] DefaultServices" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.ServiceContainer.DefaultServices" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultServices As Type()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property cli::array &lt;Type ^&gt; ^ DefaultServices { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultServices : Type[]" Usage="System.ComponentModel.Design.ServiceContainer.DefaultServices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7690-146"><see cref="T:System.ComponentModel.Design.ServiceContainer" />에 의해 직접 구현된 기본 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-146">Gets the default services implemented directly by <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</span></span></summary>
        <value><span data-ttu-id="d7690-147">기본 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-147">The default services.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7690-148">이 속성에 직접 구현 되는 기본 서비스를 반환 합니다. <xref:System.ComponentModel.Design.IServiceContainer>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-148">This property returns the default services that are implemented directly on this <xref:System.ComponentModel.Design.IServiceContainer>.</span></span> <span data-ttu-id="d7690-149">이 속성의 기본 구현을 반환 하는 것은 <xref:System.ComponentModel.Design.IServiceContainer> 및 <xref:System.ComponentModel.Design.ServiceContainer> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-149">the default implementation of this property is to return the <xref:System.ComponentModel.Design.IServiceContainer> and <xref:System.ComponentModel.Design.ServiceContainer> types.</span></span> <span data-ttu-id="d7690-150">이 속성을 재정의 하 고 반환 형식을 사용자의 기본 동작을 수정할 수 있습니다 <xref:System.ComponentModel.Component.GetService%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-150">You may override this property and return your own types, modifying the default behavior of <xref:System.ComponentModel.Component.GetService%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7690-151">이 서비스 컨테이너를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-151">Disposes this service container.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="serviceContainer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7690-152">이 서비스 컨테이너를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-152">Disposes this service container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7690-153"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> 컨테이너에서 인스턴스화된 모든 서비스에 설명 하 고 구현 하는 모든 삭제 <xref:System.IDisposable>를 하 고 서비스 목록을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-153"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> walks all instantiated services within the container and disposes any that implement <xref:System.IDisposable>, and clears the service list.</span></span>  
  
 <span data-ttu-id="d7690-154"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> 사용을 마치면 <xref:System.ComponentModel.Design.ServiceContainer>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-154">Call <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.ServiceContainer>.</span></span> <span data-ttu-id="d7690-155"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> 메서드를 사용하면 <xref:System.ComponentModel.Design.ServiceContainer>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-155">The <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.ServiceContainer> in an unusable state.</span></span> <span data-ttu-id="d7690-156">호출한 후 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A>에 대 한 모든 참조를 해제 해야 합니다 <xref:System.ComponentModel.Design.ServiceContainer> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.ComponentModel.Design.ServiceContainer> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-156">After calling <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.ServiceContainer> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.ServiceContainer> was occupying.</span></span> <span data-ttu-id="d7690-157">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-157">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7690-158"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.ComponentModel.Design.ServiceContainer>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="d7690-158">Always call <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.ServiceContainer>.</span></span> <span data-ttu-id="d7690-159">이렇게 하지 않으면 가비지 컬렉션이 <xref:System.ComponentModel.Design.ServiceContainer> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-159">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.ServiceContainer> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="serviceContainer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="d7690-160"><see cref="T:System.ComponentModel.Design.ServiceContainer" />가 삭제되는 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-160"><see langword="true" /> if the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> is in the process of being disposed of; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d7690-161">이 서비스 컨테이너를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-161">Disposes this service container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7690-162"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> 컨테이너에서 인스턴스화된 모든 서비스에 설명 하 고 구현 하는 모든 삭제 <xref:System.IDisposable>를 하 고 서비스 목록을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-162"><xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> walks all instantiated services within the container and disposes any that implement <xref:System.IDisposable>, and clears the service list.</span></span>  
  
 <span data-ttu-id="d7690-163">이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7690-163">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="d7690-164">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-164">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="d7690-165"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-165"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="d7690-166">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.ComponentModel.Design.ServiceContainer> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-166">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.ServiceContainer> references.</span></span> <span data-ttu-id="d7690-167">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-167">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d7690-168">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-168">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="d7690-169">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-169">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="d7690-170">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-170">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="d7690-171">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-171">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="serviceContainer.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-172">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-172">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="d7690-173">요청한 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-173">Gets the requested service.</span></span></summary>
        <returns><span data-ttu-id="d7690-174">서비스를 찾을 수 있으면 해당 서비스의 인스턴스이고, 찾을 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-174">An instance of the service if it could be found, or <see langword="null" /> if it could not be found.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveService">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7690-175">지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-175">Removes the specified service type from the service container.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (serviceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member RemoveService : Type -&gt; unit&#xA;override this.RemoveService : Type -&gt; unit" Usage="serviceContainer.RemoveService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-176">제거할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-176">The type of service to remove.</span></span></param>
        <summary><span data-ttu-id="d7690-177">지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-177">Removes the specified service type from the service container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7690-178">다음 예제에서 서비스를 제거 하는 방법에는 <xref:System.ComponentModel.Design.ServiceContainer>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-178">The following example illustrates how to remove a service from a <xref:System.ComponentModel.Design.ServiceContainer>.</span></span>  
  
 [!code-cpp[ServiceContainerExample#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#4)]
 [!code-csharp[ServiceContainerExample#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#4)]
 [!code-vb[ServiceContainerExample#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-179"><paramref name="serviceType" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-179"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public virtual void RemoveService (Type serviceType, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveService (serviceType As Type, promote As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveService(Type ^ serviceType, bool promote);" />
      <MemberSignature Language="F#" Value="abstract member RemoveService : Type * bool -&gt; unit&#xA;override this.RemoveService : Type * bool -&gt; unit" Usage="serviceContainer.RemoveService (serviceType, promote)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="d7690-180">제거할 서비스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-180">The type of service to remove.</span></span></param>
        <param name="promote"><span data-ttu-id="d7690-181">이 서비스가 부모 서비스 컨테이너에서 제거되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-181"><see langword="true" /> if this service should be removed from any parent service containers; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d7690-182">지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-182">Removes the specified service type from the service container.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7690-183"><paramref name="serviceType" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7690-183"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
  </Members>
</Type>