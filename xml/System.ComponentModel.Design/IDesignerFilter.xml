<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="240f72dd2638187f7f384e3fa7c4053213d1ff96" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719104" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4b38f-101">구성 요소 디자이너에서 디자인 타임 환경에 노출될 수 있는 속성, 특성 및 이벤트 설명자가 저장되어 있는 <see cref="T:System.ComponentModel.TypeDescriptor" />의 사전을 디자이너에서 액세스하고 필터링할 수 있도록 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-101">Provides an interface that enables a designer to access and filter the dictionaries of a <see cref="T:System.ComponentModel.TypeDescriptor" /> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-102"><xref:System.ComponentModel.Design.IDesignerFilter> 디자이너가 그 관련된 구성 요소를 통해 제공 하는 속성, 특성 및 이벤트 설명자의 집합을 필터링 할 수 있도록 한 <xref:System.ComponentModel.TypeDescriptor>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-102"><xref:System.ComponentModel.Design.IDesignerFilter> enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span> <span data-ttu-id="4b38f-103">이 인터페이스의 메서드를 사용 하 여 시작 하는 `Pre` 으로 시작 하는 이름의 메서드 바로 앞 이라고 `Post`.</span><span class="sxs-lookup"><span data-stu-id="4b38f-103">The methods of this interface whose names begin with `Pre` are called immediately before the methods whose names begin with `Post`.</span></span>  
  
 <span data-ttu-id="4b38f-104">특성, 이벤트 또는 속성 설명자를 추가 하려는 경우에 사용 하는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 방법.</span><span class="sxs-lookup"><span data-stu-id="4b38f-104">If you want to add attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> method.</span></span>  
  
 <span data-ttu-id="4b38f-105">변경 또는 특성, 이벤트 또는 속성 설명자를 사용 하 여 제거 하려는 경우는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> 방법.</span><span class="sxs-lookup"><span data-stu-id="4b38f-105">If you want to change or remove attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b38f-106">다음 예제에서는 재정의 된 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 디자인 타임에 디자이너 컨트롤이 선택 될 때 속성 창에 디자이너의 속성을 추가 하는.</span><span class="sxs-lookup"><span data-stu-id="4b38f-106">The following example demonstrates an override of <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> that adds a property of the designer to the Properties window when the designer's control is selected at design time.</span></span> <span data-ttu-id="4b38f-107">예제를 참조는 <xref:System.Windows.Forms.Design.ControlDesigner> 클래스를 사용 하 여 완전 한 디자이너 예제는 <xref:System.ComponentModel.Design.IDesignerFilter> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="4b38f-107">See the example for the <xref:System.Windows.Forms.Design.ControlDesigner> class for a complete designer example that uses the <xref:System.ComponentModel.Design.IDesignerFilter> interface.</span></span>  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="4b38f-108">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-108">The <see cref="T:System.Attribute" /> objects for the class of the component.</span></span> <span data-ttu-id="4b38f-109">특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-109">The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId" /> values of the attributes.</span></span></param>
        <summary><span data-ttu-id="4b38f-110">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에서 항목을 변경하거나 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-110">When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-111">이 메서드를 통해 변경 하거나이 인터페이스를 구현 하는 디자이너의 관련 된 구성 요소를 통해 노출 하는 특성의 사전에서 항목을 제거할 수 있는 <xref:System.ComponentModel.TypeDescriptor>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-111">This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-112">특성 사전에 포함 된 키는 특성의 형식 Id입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-112">The keys in the dictionary of attributes are the type IDs of the attributes.</span></span> <span data-ttu-id="4b38f-113">형식의 개체는 <xref:System.Attribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-113">The objects are of type <xref:System.Attribute>.</span></span> <span data-ttu-id="4b38f-114">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-114">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.</span></span>  
  
 <span data-ttu-id="4b38f-115">특성의 형식 ID는 모든 개체가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-115">The type ID of an attribute can be any object.</span></span> <span data-ttu-id="4b38f-116">기본적으로 <xref:System.Attribute> 반환의 <xref:System.Type> 의 값으로는 <xref:System.Attribute.TypeId%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-116">By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property.</span></span> <span data-ttu-id="4b38f-117">확인할 수는 <xref:System.Attribute.TypeId%2A> 알려진와 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 특성을 식별 하거나, 사용에 대 한 <xref:System.Reflection> 특성 개체 자체를 식별 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="4b38f-117">You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.</span></span>  
  
 <span data-ttu-id="4b38f-118">같은 특성 <xref:System.Attribute.TypeId%2A> 기존 또는 상속 된 특성 구성 요소에 추가 되 면 새 특성 이전 특성을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-118">When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.</span></span> <span data-ttu-id="4b38f-119">많은 특성 같은 형식의 새 특성 형식의 이전 특성을 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-119">For many attributes, a new attribute of the same type will replace any previous attribute of the type.</span></span> <span data-ttu-id="4b38f-120">그러나 특성의 일부 형식은 반환 된 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는.</span><span class="sxs-lookup"><span data-stu-id="4b38f-120">However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively.</span></span> <span data-ttu-id="4b38f-121">예를 들어, 같은 형식의 동시 활성 디자이너의 다양 한 종류를 제공 하기 위해 전자 <xref:System.ComponentModel.Design.IRootDesigner> 및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 특성과 기본 디자이너 고유 하 게 식별 하는 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-121">For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type.</span></span> <span data-ttu-id="4b38f-122"><xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 디자이너의 특정 한 형식 외에도 기본 디자이너 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute> 반환는 <xref:System.Attribute.TypeId%2A> 이 반영 하.</span><span class="sxs-lookup"><span data-stu-id="4b38f-122">The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this.</span></span> <span data-ttu-id="4b38f-123">따라서 추가 하면 새 <xref:System.ComponentModel.DesignerAttribute> 같은 기본 디자이너 형식 기존 형식의 기본 디자이너 형식을 사용 하 여 <xref:System.ComponentModel.DesignerAttribute>, 오래 된 특성이 새 특성으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-123">Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-124">직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="attributes" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-124">You can directly filter the dictionary that is accessible through the <paramref name="attributes" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-125">이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-125">If you are overriding this method, call the base implementation after you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><span data-ttu-id="4b38f-126">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-126">The <see cref="T:System.ComponentModel.EventDescriptor" /> objects that represent the events of the class of the component.</span></span> <span data-ttu-id="4b38f-127">이벤트의 사전에 포함된 키는 이벤트 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-127">The keys in the dictionary of events are event names.</span></span></param>
        <summary><span data-ttu-id="4b38f-128">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에서 항목을 변경하거나 제거하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-128">When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-129">이 메서드를 통해 변경 하거나를 통해 노출 된 이벤트의 사전 내에서 항목을 제거할 수 있는 <xref:System.ComponentModel.TypeDescriptor>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-129">This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-130">이벤트의 사전에 키는 이벤트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-130">The keys in the dictionary of events are the names of the events.</span></span> <span data-ttu-id="4b38f-131">형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-131">The objects are of type <xref:System.ComponentModel.EventDescriptor>.</span></span> <span data-ttu-id="4b38f-132">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-132">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-133">직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="events" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-133">You can directly filter the dictionary that is accessible through the <paramref name="events" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-134">이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-134">If you are overriding this method, call the base implementation after you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><span data-ttu-id="4b38f-135">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-135">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that represent the properties of the class of the component.</span></span> <span data-ttu-id="4b38f-136">속성의 사전에 포함된 키는 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-136">The keys in the dictionary of properties are property names.</span></span></param>
        <summary><span data-ttu-id="4b38f-137">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에서 항목을 변경하거나 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-137">When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-138">이 방법을 통해 노출 되는 속성의 사전 내에서 항목을 변경 하거나 제거할 수 있습니다는 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-138">This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-139">속성 사전의 키는 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-139">The keys in the dictionary of properties are the names of the properties.</span></span> <span data-ttu-id="4b38f-140">형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-140">The objects are of type <xref:System.ComponentModel.PropertyDescriptor>.</span></span> <span data-ttu-id="4b38f-141">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-141">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-142">직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="properties" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-142">You can directly filter the dictionary that is accessible through the <paramref name="properties" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-143">이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-143">If you are overriding this method, call the base implementation after you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="4b38f-144">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-144">The <see cref="T:System.Attribute" /> objects for the class of the component.</span></span> <span data-ttu-id="4b38f-145">특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-145">The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId" /> values of the attributes.</span></span></param>
        <summary><span data-ttu-id="4b38f-146">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에 항목을 추가하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-146">When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-147">이 메서드를 통해이 인터페이스를 구현 하는 디자이너의 관련 된 구성 요소를 통해 노출 하는 특성의 사전에 항목을 추가할 수 있는 <xref:System.ComponentModel.TypeDescriptor>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-147">This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-148">특성 사전에 포함 된 키는 특성의 형식 Id입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-148">The keys in the dictionary of attributes are the type IDs of the attributes.</span></span> <span data-ttu-id="4b38f-149">형식의 개체는 <xref:System.Attribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-149">The objects are of type <xref:System.Attribute>.</span></span> <span data-ttu-id="4b38f-150">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-150">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.</span></span>  
  
 <span data-ttu-id="4b38f-151">특성의 형식 ID는 모든 개체가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-151">The type ID of an attribute can be any object.</span></span> <span data-ttu-id="4b38f-152">기본적으로 <xref:System.Attribute> 반환의 <xref:System.Type> 의 값으로는 <xref:System.Attribute.TypeId%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-152">By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property.</span></span> <span data-ttu-id="4b38f-153">확인할 수는 <xref:System.Attribute.TypeId%2A> 알려진와 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 특성을 식별 하거나, 사용에 대 한 <xref:System.Reflection> 특성 개체 자체를 식별 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="4b38f-153">You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.</span></span>  
  
 <span data-ttu-id="4b38f-154">같은 특성 <xref:System.Attribute.TypeId%2A> 기존 또는 상속 된 특성 구성 요소에 추가 되 면 새 특성 이전 특성을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-154">When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.</span></span> <span data-ttu-id="4b38f-155">많은 특성 같은 형식의 새 특성 형식의 이전 특성을 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-155">For many attributes, a new attribute of the same type will replace any previous attribute of the type.</span></span> <span data-ttu-id="4b38f-156">그러나 특성의 일부 형식은 반환 된 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는.</span><span class="sxs-lookup"><span data-stu-id="4b38f-156">However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively.</span></span> <span data-ttu-id="4b38f-157">예를 들어, 같은 형식의 동시 활성 디자이너의 다양 한 종류를 제공 하기 위해 전자 <xref:System.ComponentModel.Design.IRootDesigner> 및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 특성과 기본 디자이너 고유 하 게 식별 하는 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-157">For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type.</span></span> <span data-ttu-id="4b38f-158"><xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 디자이너의 특정 한 형식 외에도 기본 디자이너 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute> 반환는 <xref:System.Attribute.TypeId%2A> 이 반영 하.</span><span class="sxs-lookup"><span data-stu-id="4b38f-158">The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this.</span></span> <span data-ttu-id="4b38f-159">따라서 추가 하면 새 <xref:System.ComponentModel.DesignerAttribute> 같은 기본 디자이너 형식 기존 형식의 기본 디자이너 형식을 사용 하 여 <xref:System.ComponentModel.DesignerAttribute>, 오래 된 특성이 새 특성으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-159">Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-160">직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="attributes" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-160">You can directly filter the dictionary that is accessible through the <paramref name="attributes" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-161">이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-161">If you are overriding this method, call the base implementation after you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><span data-ttu-id="4b38f-162">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-162">The <see cref="T:System.ComponentModel.EventDescriptor" /> objects that represent the events of the class of the component.</span></span> <span data-ttu-id="4b38f-163">이벤트의 사전에 포함된 키는 이벤트 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-163">The keys in the dictionary of events are event names.</span></span></param>
        <summary><span data-ttu-id="4b38f-164">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에 항목을 추가하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-164">When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-165">이 메서드는 디자이너를 통해 노출 하는 이벤트의 사전에 항목을 추가 하는 방법을 제공을 <xref:System.ComponentModel.TypeDescriptor>입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-165">This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-166">이벤트의 사전에 키는 이벤트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-166">The keys in the dictionary of events are the names of the events.</span></span> <span data-ttu-id="4b38f-167">형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-167">The objects are of type <xref:System.ComponentModel.EventDescriptor>.</span></span> <span data-ttu-id="4b38f-168">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-168">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-169">통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="events" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-169">You can directly modify the dictionary that is accessible through the <paramref name="events" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-170">이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-170">If you are overriding this method, call the base implementation before you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><span data-ttu-id="4b38f-171">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-171">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that represent the properties of the class of the component.</span></span> <span data-ttu-id="4b38f-172">속성의 사전에 포함된 키는 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-172">The keys in the dictionary of properties are property names.</span></span></param>
        <summary><span data-ttu-id="4b38f-173">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에 항목을 추가하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-173">When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b38f-174">이 메서드는 디자이너를 통해 노출 되는 속성의 사전에 항목을 추가 하는 방법을 제공을 <xref:System.ComponentModel.TypeDescriptor>입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-174">This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="4b38f-175">속성 사전의 키는 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-175">The keys in the dictionary of properties are the names of the properties.</span></span> <span data-ttu-id="4b38f-176">형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-176">The objects are of type <xref:System.ComponentModel.PropertyDescriptor>.</span></span> <span data-ttu-id="4b38f-177">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.</span><span class="sxs-lookup"><span data-stu-id="4b38f-177">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4b38f-178">통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="properties" /> 하거나 매개 변수를 그대로 둘 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-178">You can directly modify the dictionary that is accessible through the <paramref name="properties" /> parameter, or you can leave it unchanged.</span></span> <span data-ttu-id="4b38f-179">이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b38f-179">If you are overriding this method, call the base implementation before you perform your own filtering.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>