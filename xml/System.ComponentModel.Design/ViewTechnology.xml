<Type Name="ViewTechnology" FullName="System.ComponentModel.Design.ViewTechnology">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d4bba1eee80fc5ae1e8bcc53c6d0e389e6addee" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733421" /></Metadata><TypeSignature Language="C#" Value="public enum ViewTechnology" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ViewTechnology extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ViewTechnology" />
  <TypeSignature Language="VB.NET" Value="Public Enum ViewTechnology" />
  <TypeSignature Language="C++ CLI" Value="public enum class ViewTechnology" />
  <TypeSignature Language="F#" Value="type ViewTechnology = " />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="94c39-101">디자이너 호스트가 지원하는 기술 세트에 대한 식별자를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-101">Defines identifiers for a set of technologies that designer hosts support.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94c39-102">그러나 뷰 어댑터 모델을 대체 하 고 기능을 추가 합니다 <xref:System.ComponentModel.Design.ViewTechnology> ; 기능는 <xref:System.ComponentModel.Design.ViewTechnology> 기능 선택 하면 이전 버전과 호환성 및 향후 사용을 위해 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-102">The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose.</span></span>
  
 <span data-ttu-id="94c39-103"><xref:System.ComponentModel.Design.ViewTechnology> 디자이너 호스팅 문서 표시를 제어 하기 위한 사용 하는 모드를 나타낼 수 있는 식별자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-103"><xref:System.ComponentModel.Design.ViewTechnology> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.</span></span>  
  
 <span data-ttu-id="94c39-104">디자이너 호스팅 환경에 기본값만 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-104">You should only use the Default value in your designer hosting environment.</span></span> <span data-ttu-id="94c39-105">이전 버전의 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], <xref:System.ComponentModel.Design.ViewTechnology.Default> 열거형 루트 디자이너에서 지 원하는 UI 모델의 형식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-105">In previous versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeration specified the type of UI model supported by a root designer.</span></span> <span data-ttu-id="94c39-106">이 모델을 확장할 수 있는 아니므로 대신 사용 해야는 *view 어댑터* 모델입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-106">Because this model is not extensible, you should instead use a *view adapter* model.</span></span> <span data-ttu-id="94c39-107">뷰 어댑터는 다른 형식으로의 개체를 조정 하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-107">A view adapter is a type that adapts an object of one type to another.</span></span>  
  
 <span data-ttu-id="94c39-108">예를 들어, HTML 디자이너를 반환할 수 있습니다는 `DemoDOM` 트리를 뷰로 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-108">For example, an HTML designer might return a `DemoDOM` tree as its view.</span></span> <span data-ttu-id="94c39-109">HTML 디자이너의 기본 뷰 기술을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-109">The HTML designer returns a view technology of Default.</span></span> <span data-ttu-id="94c39-110">호스팅 환경에 Windows Forms에 사용할 수 있는 뷰 어댑터 클래스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-110">A Windows Forms hosting environment would have one or more view adapter classes available.</span></span> <span data-ttu-id="94c39-111">이러한 클래스는 하나의 변환 수를 `DemoDOM` 호스팅 응용 프로그램을 Windows Forms 컨트롤에이 유형의 디자이너를 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-111">If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer.</span></span> <span data-ttu-id="94c39-112">어댑터가 없습니다 디자이너에서 반환 된 데이터 형식을 처리할 수 있는지 <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> 메서드를 디자이너의 로드가 실패 하 고 사용자가 오류와 함께 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-112">If no adapter can handle the data type returned from the designer's <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.</span></span>  
  
 <span data-ttu-id="94c39-113">Visual Studio에는 모든 UI 기술에 적응할 수 있도록 뷰 어댑터를 제공 하기 위한 확장 가능한 스키마를 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-113">Visual Studio has an extensible scheme for providing view adapters, so it can adapt to any UI technology.</span></span> <span data-ttu-id="94c39-114">타사 기술 공급자는 적절 한 뷰 어댑터를 제공할 수도 있습니다 및 해당 개체 모델은 즉시 사용 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-114">Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.</span></span>
  
## Examples  
 <span data-ttu-id="94c39-115">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.ComponentModel.Design.ViewTechnology.Default> 디자이너에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-115">The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology.Default> class in a designer.</span></span> <span data-ttu-id="94c39-116">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-116">This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> interface.</span></span>  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Default = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 2" Usage="System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94c39-117">기본 뷰 기술 지원을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-117">Specifies the default view technology support.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94c39-118">루트 디자이너 개체의 모든 형식을 반환할 수 있지만 개체는 호스트의 기술에 대 한 어댑터와 호환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-118">The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host.</span></span> <span data-ttu-id="94c39-119">Visual Studio와 같은 호스팅 환경에는 새로운 뷰 기술 어댑터에 연결 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-119">Hosting environments such as Visual Studio provide a way to plug in new view technology adapters.</span></span> <span data-ttu-id="94c39-120">Windows Forms 디자이너의 기본 뷰 개체를 <xref:System.Windows.Forms.Control?displayProperty=nameWithType> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="94c39-120">The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=nameWithType> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94c39-121">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.ComponentModel.Design.ViewTechnology> 디자이너에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-121">The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology> class in a designer.</span></span> <span data-ttu-id="94c39-122">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.Design.IRootDesigner> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-122">This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.</span></span>  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Passthrough">
      <MemberSignature Language="C#" Value="Passthrough" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Passthrough = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberSignature Language="VB.NET" Value="Passthrough" />
      <MemberSignature Language="C++ CLI" Value="Passthrough" />
      <MemberSignature Language="F#" Value="Passthrough = 0" Usage="System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94c39-123">뷰 개체가 개발 환경에 직접 전달되는 모드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-123">Represents a mode in which the view object is passed directly to the development environment.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94c39-124">뷰 개체가 개발 환경에 필요한 모든 인터페이스를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-124">The view object must implement any interfaces the development environment requires.</span></span> <span data-ttu-id="94c39-125">Visual Studio 개발 환경에서는 ActiveX 컨트롤, 액티브 문서 또는 Visual Studio VSI (Visual Studio 통합) 프로그램을 통해 사용할 수 있는 IVsWindowPane 인터페이스를 구현 하는 개체에 있는 뷰 개체를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-125">The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through Visual Studio VSI (Visual Studio Integration) program.</span></span> <span data-ttu-id="94c39-126">Visual Studio 개발 환경에서는이 뷰 기술에 대 한 지원을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-126">The Visual Studio development environment provides support for this view technology.</span></span> <span data-ttu-id="94c39-127">이 뷰 기술에 대 한 지원이 모든 개발 환경에서 반드시 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="94c39-127">Support for this view technology is not necessarily available in all development environments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsForms">
      <MemberSignature Language="C#" Value="WindowsForms" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology WindowsForms = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberSignature Language="VB.NET" Value="WindowsForms" />
      <MemberSignature Language="C++ CLI" Value="WindowsForms" />
      <MemberSignature Language="F#" Value="WindowsForms = 1" Usage="System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="94c39-128">Windows Forms 컨트롤 개체가 루트 디자이너를 위한 디스플레이를 제공하는 모드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-128">Represents a mode in which a Windows Forms control object provides the display for the root designer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94c39-129">디자이너 호스트를 Windows Forms 컨트롤을 사용 하 여 개발 환경 문서 창을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-129">The designer host fills the development environment document window with the Windows Forms control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94c39-130">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.ComponentModel.Design.ViewTechnology> 디자이너에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-130">The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology> class in a designer.</span></span> <span data-ttu-id="94c39-131">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.Design.LocalizationExtenderProvider> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="94c39-131">This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.LocalizationExtenderProvider> class.</span></span>  
  
 [!code-cpp[LocalizationExtenderProviderExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CPP/class1.cpp#1)]
 [!code-csharp[LocalizationExtenderProviderExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CS/class1.cs#1)]
 [!code-vb[LocalizationExtenderProviderExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LocalizationExtenderProviderExample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>