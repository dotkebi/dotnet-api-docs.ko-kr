<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29624fae597644e3fae1c16dd4d9a165a85e3f15" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59349185" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eaad7-101">소비자 역할을 하는 서버 컨트롤에서 공급자와의 연결을 설정할 수 있도록 하는 연결 지점 개체를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-101">Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaad7-102">두 서버 컨트롤 간의 모든 웹 파트 연결에서 각 컨트롤 있어야 합니다 (다른 요구 사항) 간에 다른 컨트롤에 연결 하 고 제공 하거나 여부에 따라 데이터를 사용할 수 있도록 하는 연결 지점 개체가 컨트롤 공급자 또는 소비자 연결용으로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="eaad7-103"><xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 개체 일반적 컨트롤을 공유할 수 있는 데이터의 형식과 다른 컨트롤에 연결할 수는 방법에 대 한 세부 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="eaad7-104">연결에서 소비자 역할을 컨트롤의 경우 해당 연결점은 되어야를 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-104">For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span> <span data-ttu-id="eaad7-105">웹 파트 연결 및 연결 지점에 대 한 내용은 아래 참고 항목 섹션에 나열 된 항목을 읽어보세요.</span><span class="sxs-lookup"><span data-stu-id="eaad7-105">For details on Web Parts connections and connection points, read the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="eaad7-106">만들려는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체, 몇 가지 단계가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-106">To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="eaad7-107">인터페이스 인스턴스를 참조 하는 소비자 컨트롤을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-107">Enable a consumer control to reference an interface instance.</span></span> <span data-ttu-id="eaad7-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기타 서버 컨트롤 (추가할 수 있는 서버 컨트롤의 모든 형식은 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용할 수 있습니다) 특정 인터페이스 인스턴스에서 데이터를 사용할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance.</span></span> <span data-ttu-id="eaad7-109">컨트롤의 인터페이스를 구현할 필요가 없습니다. 공급자만 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-109">The control need not implement the interface; only the provider must implement it.</span></span> <span data-ttu-id="eaad7-110">소비자는 공급자가 제공 정확한 인터페이스 형식으로 하거나 사용할 수 또는 하지 않는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 소비자가 인식할 수 있는 형식에 데이터 공급자의 인터페이스 형식에서 변환할 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-110">The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer.</span></span> <span data-ttu-id="eaad7-111">소비자를 사용 하도록 설정 하는 일반적인 방법은 원하는 인터페이스의 형식에 대 한 참조를 포함 하는 개인 필드를 선언 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-111">A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.</span></span>  
  
2.  <span data-ttu-id="eaad7-112">콜백 메서드를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-112">Identify a callback method.</span></span> <span data-ttu-id="eaad7-113">소비자의 메서드는 공급자를 사용 하 여 연결의 콜백 메서드로 식별 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-113">A method in the consumer must be identified as the callback method to establish a connection with the provider.</span></span> <span data-ttu-id="eaad7-114">이 메서드는 공급자 구현 및 할당 (예를 들어) 개인 필드에이 단계에서 만든 첫 번째 인터페이스의 인스턴스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-114">This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.</span></span> <span data-ttu-id="eaad7-115">소비자의 콜백 메서드를 식별 하기 위한 웹 파트는 방법은 추가 하는 것을 `ConnectionConsumer` 메타 데이터 특성 (정의한는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 클래스) 인터페이스 인스턴스를 수신 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-115">The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance.</span></span> <span data-ttu-id="eaad7-116">특성을 추가할 때 유일한 필수 매개 변수는 소비자 연결 지점에 사용할 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-116">When the attribute is added, the only required parameter is a display name to use for the consumer connection point.</span></span> <span data-ttu-id="eaad7-117">선택적 매개 변수 추가할 수도 있습니다, ID 등</span><span class="sxs-lookup"><span data-stu-id="eaad7-117">Optional parameters can also be added, such as an ID.</span></span>  
  
3.  <span data-ttu-id="eaad7-118">프로세스 및 인터페이스 인스턴스에서 데이터를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-118">Process and output the data from the interface instance.</span></span> <span data-ttu-id="eaad7-119">데이터에 대해 필요에 따라 내부 처리를 수행 하 고 일반적으로 소비자 컨트롤은 렌더링 데이터 페이지를 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-119">Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.</span></span> <span data-ttu-id="eaad7-120">이 작업을 수행 하는 일반적인 방법은 컨트롤의 재정의 <xref:System.Web.UI.Control.OnPreRender%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eaad7-120">A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="eaad7-121">동기 요청을 하는 동안 소비자 데이터를 요청 해야 공급자에서 직접 중 이나 직후는 <xref:System.Web.UI.Control.PreRender> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-121">During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event.</span></span> <span data-ttu-id="eaad7-122">비동기 요청을 하는 동안 렌더링 하는 동안 언제 든 지 공급자의 콜백 메서드를 호출 하지 않는 경우 개발자 가정할 수 없는 데이터는 소비자에 게 전송 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-122">During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.</span></span>  
  
 <span data-ttu-id="eaad7-123">컨트롤 소비자 역할을 하도록 설정 된 후 컨트롤 (공급자 컨트롤 구비 하 고 사용 가능한도 이라고 가정) 연결에 참여할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-123">After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).</span></span> <span data-ttu-id="eaad7-124">웹 페이지의 태그에서 선언적 정적 연결을 만들려는 개발자가 사용할 수는 `<asp:webpartconnection>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-124">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="eaad7-125">경우는 `ConnectionConsumer` 연결 지점에 대 한 ID를 지정 하는 콜백 메서드를 식별 하는 소비자 소스 코드에서 특성 값에 할당 되어야 합니다는 `ConsumerConnectionPointID` 특성을 `<asp:webpartconnection>` 페이지에 요소.</span><span class="sxs-lookup"><span data-stu-id="eaad7-125">If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="eaad7-126">개발자는 소비자 연결 지점의 ID를 지정 하는 이유 소비자 컨트롤에 정의 된 연결 지점이 여러 개 있기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-126">A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.</span></span> <span data-ttu-id="eaad7-127">소비자 컨트롤의 소비자 연결점에 대 한 ID를 지정 하지 않으면 값 없는 경우에 할당할 합니다 `ConsumerConnectionPointID` 페이지에서에서는 연결에서 가져온 값을 사용 하 여 만들어지기 때문에 특성을 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-127">If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="eaad7-128">코드에서 연결을 만들려는 개발자는 새 만들어야 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 를 호출 하 여 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 메서드와 함께 ID 또는 인덱스의 정의 된 소비자 컨트롤의 ID를 전달 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 컨트롤의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-128">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control.</span></span> <span data-ttu-id="eaad7-129">반환 된 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 컨트롤에 대 한 참조와 함께 해당 공급자 컨트롤에 대 한 참조 개체 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체를 모두 전달할 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드를 만들기 위한 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체.</span><span class="sxs-lookup"><span data-stu-id="eaad7-129">The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="eaad7-130">개발자를 사용할 수 있지만 소비자 연결 지점의 선언적으로 또는 프로그래밍 방식으로 연결 설정의 일부로 사용자가 소비자 연결 지점의 사용자 인터페이스 (UI)를 통해 연결을 설정할 수 상호 작용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-130">Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="eaad7-131">개발자가 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤이 웹 페이지에서 연결을 만드는 사용자에 대 한 런타임 UI를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-131">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="eaad7-132">사용자가 클릭 하 여 연결을 설정 하는 것에 대 한 시작 점으로 공급자 컨트롤을 선택 하는 경우 해당 연결 동사 (소비자를 선택할 수도 있습니다; 결과 연결에서 차이가), UI에 있는 드롭다운 목록 컨트롤이 나타납니다는 사용 가능한 소비자 연결 지점 (또는 여러 세션에 있는 경우 지점)의 이름을 표시 합니다. 공급자가 데이터를 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-132">If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.</span></span> <span data-ttu-id="eaad7-133">사용자는 연결할 소비자 연결 지점을 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-133">Users must select a consumer connection point to establish a connection.</span></span>  
  
 <span data-ttu-id="eaad7-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 특정 소비자 컨트롤을 사용 하 여 직접 연결 하 고 기본에서 상속 된 속성에 연결 하는 방법에 대 한 세부 정보를 저장 하는 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="eaad7-135">예를 들어, 상속 된에서 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 속성인 소비자 연결 지점을 사용 하 여 인터페이스의 형식을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-135">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses.</span></span> <span data-ttu-id="eaad7-136">인터페이스 형식 이해 모두는 공급자 및 연결에서 소비자는 컨트롤은 호환 되며 직접 연결을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-136">If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="eaad7-137">공급자 및 소비자를 동일한 인터페이스 형식을 사용할 수 없는, 하는 경우 호환 되지 않는 하며 사용 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 공급자 연결 지점의 변환할 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 소비자가 사용할 수 있는 형식으로 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-137">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with.</span></span> <span data-ttu-id="eaad7-138">다른 중요 한 상속 된 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 연결을 만들 때 소비자 연결을 선택 하는 사용자에 대 한 UI에 표시 하기 위한 이름을 제공 하는 속성을 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-138">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.</span></span> <span data-ttu-id="eaad7-139">표시 이름은 필수 매개 변수 추가 하는 개발자는 `ConnectionConsumer` 소비자 컨트롤의 콜백 메서드 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-139">The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control.</span></span> <span data-ttu-id="eaad7-140">상속 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 소비자에 여러 연결 지점이 소비자 연결 지점의 고유 식별자를 제공 하기 때문에, 앞서 설명한 대로 속성 유용 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-140">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.</span></span> <span data-ttu-id="eaad7-141">소비자는 여러 개 있을 수 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개발자가 추가 후에이 예에서 정의 된 개체는 `ConnectionConsumer` 특성 메서드에 각 연결점을 구별 하는 ID 값을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-141">A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="eaad7-142">상속 된 또 하나의 주요 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 소비자 연결 지점에서 동시에 여러 공급자에 연결할 수 있는지 여부를 나타내는 속성도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-142">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.</span></span> <span data-ttu-id="eaad7-143">이 속성 값이 `false` 소비자 연결 지점에 대해 기본적으로 (기본적으로 반면 `true` 공급자 연결 지점에 대 한).</span><span class="sxs-lookup"><span data-stu-id="eaad7-143">This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).</span></span>  
  
 <span data-ttu-id="eaad7-144">합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 몇 가지 고유한 메서드를 추가 하는 클래스에서 상속 된 멤버에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-144">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="eaad7-145"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> 메서드 공급자 로부터 인터페이스 인스턴스를 검색할 소비자의 자체 정의 된 콜백 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-145">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.</span></span> <span data-ttu-id="eaad7-146"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> 메서드 연결점은 연결 된 소비자 컨트롤의 현재 상태에 따라 연결을 설정할 수 있는지 여부를 나타내는 부울 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-146">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaad7-147">다음 코드 예제에서는 선언적으로 연결을 만들고, 프로그래밍 방식으로 또는 각 사례 때에서 UI를 통해 소비자 연결 지점을 사용 하는 간단한 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-147">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.</span></span>  
  
 <span data-ttu-id="eaad7-148">예제에는 네 가지 부분이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-148">The example has four parts:</span></span>  
  
-   <span data-ttu-id="eaad7-149">웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-149">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="eaad7-150">소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-150">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="eaad7-151">모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-151">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="eaad7-152">예제 페이지를 실행 하는 방법 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-152">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="eaad7-153">이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-153">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="eaad7-154">에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-154">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="eaad7-155">이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-155">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="eaad7-156">코드 예제의 두 번째 부분은 인터페이스 및 컨트롤에 대 한 소스 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-156">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="eaad7-157">이라는 간단한 인터페이스를 포함 하는 소스 파일 `IZipCode`합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-157">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="eaad7-158">이기도 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `ZipCodeWebPart` 인터페이스를 구현 하 고 공급자 컨트롤의 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-158">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="eaad7-159">다른 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 이름은 `WeatherWebPart`, 연결에 대 한 소비자 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-159">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="eaad7-160">이 클래스에 메서드가 `GetZipCode` 의 인스턴스를 가져오는 `IZipCode` 공급자 컨트롤에서 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-160">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="eaad7-161">이 메서드는 사용 하는 소비자 연결 지점 메서드로 표시는 `ConnectionConsumer` 해당 메타 데이터의 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-161">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="eaad7-162">소비자 컨트롤의 연결 지점 메서드를 식별 하기 위한 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-162">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="eaad7-163">코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-163">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="eaad7-164">명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-164">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="eaad7-165">또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-165">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="eaad7-166">이 코드 예제에서는 동적 컴파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-166">This code example uses dynamic compilation.</span></span> <span data-ttu-id="eaad7-167">컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-167">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="eaad7-168">코드 예제에서는 세 번째 부분에는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-168">The third part of the code example is the Web page.</span></span> <span data-ttu-id="eaad7-169">위쪽은 `Register` 페이지의 디스플레이 모드 연결을 구성 하는 사용자 지정 컨트롤 및 사용자가 변경할 수 있는 사용자 정의 컨트롤을 등록 하는 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-169">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="eaad7-170">연결 자체 내에서 선언적으로 만들어집니다는 `<staticconnections>` 페이지의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-170">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="eaad7-171">이 연결을 만드는 방법을 보여 줍니다-참고 합니다 `ConsumerConnectionPointID` 특성을 `<asp:webpartconnection>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-171">This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="eaad7-172">연결을 프로그래밍 방식으로 실현할 수 있습니다. 작업을 수행 하는 코드는 `Button1_Click` 메서드.</span><span class="sxs-lookup"><span data-stu-id="eaad7-172">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="eaad7-173">이 경우에 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체가 생성 되 고 실제 연결을 만드는 메서드로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-173">In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="eaad7-174">연결이 선언적으로 또는 프로그래밍 방식으로 생성 하는지 여부를 연결점 공급자와 소비자 모두에 대해 항상 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-174">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="eaad7-175">합니다 `Button2_Click` 메서드 액세스를 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 공급자와 소비자 모두에 대 한 개체 및 레이블을 페이지에서 해당 속성 값의 일부를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-175">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="eaad7-176">브라우저에서 페이지를 로드 한 후 클릭 합니다 **연결 지점 정보** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-176">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="eaad7-177">선언적 연결에 설정 된 공급자 및 소비자 연결 지점에 대 한 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-177">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="eaad7-178">다음을 사용 하 여 합니다 **디스플레이 모드** 드롭다운 컨트롤을 페이지에 연결 전환 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-178">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="eaad7-179">동사 메뉴에서를 **ZIP Code 공급자** <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨) 연결 동사를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-179">On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="eaad7-180">UI가 나타나고 연결이 자동으로 생성 된 `<asp:connectionszone>` 컨트롤이 페이지에 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-180">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="eaad7-181">앞에서 설명한 선언적 방법과 프로그래밍 방법을 함께 (UI)를 통해 연결을 만드는 다른 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-181">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="eaad7-182">클릭 합니다 **연결 끊기** 단추 기존 정적 연결을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-182">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="eaad7-183">클릭 합니다 **소비자에 대 한 연결을 만들** 링크 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-183">Click the **Create a Connection to a Consumer** link.</span></span> <span data-ttu-id="eaad7-184">UI는 소비자 연결 지점 표시 이름을 나열 하는 드롭다운 목록 컨트롤에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-184">The UI now displays a drop-down control that lists the consumer connection point display name.</span></span> <span data-ttu-id="eaad7-185">드롭다운 목록에서 연결 지점을 선택 하 고 클릭 **Connect** 연결을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-185">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="eaad7-186">다음으로, 클릭 **연결 끊기** 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-186">Next, click **Disconnect** again.</span></span> <span data-ttu-id="eaad7-187">클릭 합니다 **동적 연결** 단추를 프로그래밍 방식으로 연결을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-187">Click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="eaad7-188">사용 합니다 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-188">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="eaad7-189">클릭 합니다 **연결 지점 세부 정보** 나타내기 위해 단추를 다시 세부 정보는 소비자 연결 지점 개체에 대 한 한 번 더 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-189">Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.</span></span>  
  
 <span data-ttu-id="eaad7-190">이 예제에서는 연결을 설정 하 고 소비자 연결점을 사용 하 여 세 가지 방법으로 살펴보았습니다.; 웹 페이지 태그에 선언 된 정적 연결 사용 하는 코드에서 만든 연결을 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체 및 UI 연결을 통해 사용자가 만든 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-190">The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="eaad7-191">ASP.NET 웹 파트 컨트롤</span><span class="sxs-lookup"><span data-stu-id="eaad7-191">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="eaad7-192">웹 파트 연결 개요</span><span class="sxs-lookup"><span data-stu-id="eaad7-192">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="eaad7-193">연결을 설정하기 위해 소비자에게 인터페이스 인스턴스를 반환하는 소비자 컨트롤의 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-193">The method in the consumer control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="eaad7-194">소비자가 공급자로부터 받는 인터페이스의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-194">The <see cref="T:System.Type" /> of the interface that the consumer receives from a provider.</span></span></param>
        <param name="controlType"><span data-ttu-id="eaad7-195">소비자 연결 지점과 관련된 소비자 컨트롤의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-195">The <see cref="T:System.Type" /> of the consumer control with which the consumer connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="eaad7-196">연결 UI(사용자 인터페이스)에서 사용자에게 표시되는 소비자 연결 지점의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-196">A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="eaad7-197">소비자 연결 지점의 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-197">A unique identifier for the consumer connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="eaad7-198">소비자 연결 지점에 공급자와의 연결이 동시에 여러 개 있을 수 있는지 여부를 나타내는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-198">A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.</span></span></param>
        <summary><span data-ttu-id="eaad7-199"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-199">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaad7-200">합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> 에 대 한 생성자는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 클래스 기본 생성자, 다양 한 매개 변수를 전달 하 고 기본 클래스 초기화를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-200">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="eaad7-201">기본 클래스 생성자는 연결 지점에 대 한 매개 변수 개수를 확인 하 고 몇 가지 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-201">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="eaad7-202">가능한 예외 목록은 예외 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="eaad7-202">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="eaad7-203">호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> 의 고유한 인스턴스를 만드는 생성자는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-203">You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="eaad7-204">그러나 단순히 연결을 설정 하 고 클래스를 확장 하지 않는 경우에 호출 해야 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 공급자에서 연결 지점 개체를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-204">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaad7-205">다음 코드 예제에서 파생 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 클래스 사용자 지정 공급자 연결 지점 만들기를 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-205">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="eaad7-206">이 코드 예제는 세 부분으로 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-206">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="eaad7-207">공급자를 포함 하는 원본 파일 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-207">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="eaad7-208">정적 연결에서 컨트롤을 호스팅하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-208">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="eaad7-209">예제 코드를 실행 하는 방법 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-209">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="eaad7-210">코드 예제의 첫 번째 부분은 공급자와 소비자에 대 한 원본 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 이라는 클래스가 `TableConsumerConnectionPoint`합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-210">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`.</span></span> <span data-ttu-id="eaad7-211">생성자는 `TableConsumerConnectionPoint` 클래스 매개 변수 섹션에 표시 된 대로 필요한 매개 변수를 전달 하 고 기본 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-211">Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="eaad7-212">에 유의 합니다 `TableConsumer` 클래스를 `SetConnectionInterface` 메서드는 연결에 대 한 콜백 메서드로 지정 됩니다 및 `ConnectionConsumer` 특성은 사용자 지정 선언 `TableConsumerConnectionPoint` 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-212">Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter.</span></span> <span data-ttu-id="eaad7-213">이 사용자 지정 소비자 연결 지점을 만들고 소비자 컨트롤을 사용 하 여 연결 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-213">This demonstrates how to create a custom consumer connection point and then associate it with a consumer control.</span></span> <span data-ttu-id="eaad7-214">이 예제에서는 소스 코드를 동적으로 컴파일할 소스 코드 파일을 웹 응용 프로그램의 App_Code 하위 폴더에 배치 해야 하므로</span><span class="sxs-lookup"><span data-stu-id="eaad7-214">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="eaad7-215">코드 예제의 두 번째 부분은 정적 웹 파트 연결에서 사용자 지정 컨트롤을 호스트 하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-215">The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection.</span></span> <span data-ttu-id="eaad7-216">페이지의 맨 위에는 `Register` 접두사 및 사용자 지정 컨트롤에 대 한 네임 스페이스를 선언 하는 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-216">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="eaad7-217">연결이 사용 하 여 선언 되는 `<asp:webpartconnection>` 요소, 공급자 및 소비자 컨트롤 내에서 선언 된는 `<asp:webpartzone>` 요소.</span><span class="sxs-lookup"><span data-stu-id="eaad7-217">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="eaad7-218">브라우저에서 페이지를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-218">Load the page in a browser.</span></span> <span data-ttu-id="eaad7-219">이미 컨트롤 간의 연결이 있고 연결 된 페이지에 정적 연결으로 선언 되었으므로 소비자 공급자에서 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-219">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> <span data-ttu-id="eaad7-220"><see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-220">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eaad7-221">또는</span><span class="sxs-lookup"><span data-stu-id="eaad7-221">-or-</span></span> 
 <paramref name="interfaceType" /> <span data-ttu-id="eaad7-222"><see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-222">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eaad7-223">또는</span><span class="sxs-lookup"><span data-stu-id="eaad7-223">-or-</span></span> 
 <paramref name="controlType" /> <span data-ttu-id="eaad7-224"><see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-224">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="eaad7-225">또는</span><span class="sxs-lookup"><span data-stu-id="eaad7-225">-or-</span></span> 
 <paramref name="displayName" /> <span data-ttu-id="eaad7-226"><see langword="null" />이거나 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-226">is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> <span data-ttu-id="eaad7-227">소비자 컨트롤 또는 이 컨트롤에서 파생된 유효한 클래스의 형식과 동일하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="eaad7-227">is not the same type as the consumer control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="eaad7-228">ASP.NET 웹 파트 컨트롤</span><span class="sxs-lookup"><span data-stu-id="eaad7-228">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eaad7-229">소비자 연결 지점과 관련된 소비자 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-229">The consumer control associated with a consumer connection point.</span></span></param>
        <param name="data"><span data-ttu-id="eaad7-230">공급자 컨트롤에서 반환된 인터페이스 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-230">The interface instance returned from a provider control.</span></span></param>
        <summary><span data-ttu-id="eaad7-231">소비자 컨트롤의 콜백 메서드를 호출하고 공급자 컨트롤에서 인터페이스 인스턴스를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-231">Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaad7-232">이 메서드는 소비자 컨트롤에 대 한 데이터를 포함 하는 공급자 로부터 인터페이스 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-232">This method receives an interface instance from a provider that contains data for the consumer control.</span></span>  
  
 <span data-ttu-id="eaad7-233">합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체는 연결을 활성화 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-233">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="eaad7-234">이 연결을 시작 하 고 데이터를 공유 하는 두 개의 컨트롤을 사용 하도록 설정의 일부인 중요 한 단계입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-234">This is a critical step that is part of initiating a connection and enabling two controls to share data.</span></span>  
  
 <span data-ttu-id="eaad7-235">연결에서 소비자 컨트롤과 공급자와 같은 유형의 인터페이스를 사용 하 여 작업에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-235">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="eaad7-236">그렇지 않은 경우 컨트롤을 호환 되지 않습니다 및 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체를 사용 하 여 연결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-236">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> <span data-ttu-id="eaad7-237"><see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-237">is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="eaad7-238"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />와 관련된 소비자 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-238">The consumer control associated with the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</span></span></param>
        <param name="secondaryInterfaces"><span data-ttu-id="eaad7-239">연결에 사용되는 모든 보조 인터페이스의 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-239">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of any secondary interfaces that participate in a connection.</span></span></param>
        <summary><span data-ttu-id="eaad7-240">소비자 연결 지점에서 현재 연결을 설정할 수 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-240">Determines whether a consumer connection point is currently capable of establishing a connection.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="eaad7-241">연결 지점에서 현재 연결을 설정할 수 있는 경우, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-241">if a connection point can currently establish a connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="eaad7-242">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-242">The default is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaad7-243">합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> 메서드 구현 되는 항상 반환 `true` 에 대 한 모든 경우에는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-243">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="eaad7-244">이 메서드에 대 한 목적은의 상태를 확인 하 게 하는 것 `control` 및 `secondaryInterfaces` 결정할 특정 중요 시점에서 여부를 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체는 현재 연결을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-244">The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.</span></span>  
  
 <span data-ttu-id="eaad7-245">시나리오가 있을 수 있는 `control` 하기가 불가능 한 연결을 형성 하는 상태 또는 where `secondaryInterfaces` 있어야 연결을 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-245">There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed.</span></span> <span data-ttu-id="eaad7-246">이러한 경우 개발자가에서 상속할 수는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 클래스를 재정의 합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> 연결점은 연결을 지원 하도록 준비가 되었는지 확인 하려면 사용자 지정 구현을 제공 하는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaad7-246">In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>