<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="575da1e985d2a34222cb6c445b73da8de19944c0" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59352318" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2f813-101">공급자 역할을 하는 서버 컨트롤에서 소비자와의 연결을 설정할 수 있도록 하는 연결 지점 개체를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f813-102">두 서버 컨트롤 간의 모든 웹 파트 연결에서 각 컨트롤 있어야 합니다 (다른 요구 사항) 간에 다른 컨트롤에 연결 하 고 제공 하거나 여부에 따라 데이터를 사용할 수 있도록 하는 연결 지점 개체가 컨트롤 공급자 또는 소비자 연결용으로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="2f813-103"><xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 개체 일반적 컨트롤을 공유할 수 있는 데이터의 형식과 다른 컨트롤에 연결할 수는 방법에 대 한 세부 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="2f813-104">연결에서 공급자 역할을 하는 컨트롤에 대 한 해당 연결 지점이 있어야를 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="2f813-105">웹 파트 연결 및 연결 지점에 대 한 자세한 내용은 참고 항목 섹션 아래에 나열 된 항목을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="2f813-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="2f813-106">만들려는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체, 몇 가지 단계가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="2f813-107">인터페이스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-107">Create an interface.</span></span> <span data-ttu-id="2f813-108">공급자는 소비자를 사용 하 여 데이터를 공유 하면 인터페이스의 인스턴스를 시작 하 고 해당 인스턴스는 소비자에 게 반환 하 여 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="2f813-109">공급자에서 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-109">Implement the interface in a provider.</span></span> <span data-ttu-id="2f813-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기타 서버 컨트롤 (에서 서버 컨트롤의 모든 형식은 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용할 수 있습니다) 공급자는 첫 번째 단계에서 만든 인터페이스를 구현 해야 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="2f813-111">콜백 메서드를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-111">Identify a callback method.</span></span> <span data-ttu-id="2f813-112">공급자의 메서드에 연결할 콜백 메서드로 식별 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="2f813-113">이 메서드는 소비자에 게 구현된 된 인터페이스의 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="2f813-114">공급자에서 콜백 메서드를 식별 하기 위한 웹 파트는 방법은 추가 하는 것을 `ConnectionProvider` 메타 데이터 특성 (정의한는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 클래스) 인터페이스 인스턴스를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="2f813-115">특성을 추가할 때 유일한 필수 매개 변수는 공급자 연결 지점에 사용할 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="2f813-116">선택적 매개 변수는 연결점에 대 한 ID 같은 추가할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="2f813-117">컨트롤을 공급자 역할을 하도록 설정 된 후 컨트롤 (구비 하 고 사용 가능한 소비자 컨트롤 마찬가지로 것으로 간주) 연결에 참여할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="2f813-118">웹 페이지의 태그에서 선언적 정적 연결을 만들려는 개발자가 사용할 수는 `<asp:webpartconnection>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="2f813-119">경우는 `ConnectionProvider` 연결 지점에 대 한 ID를 지정 하는 콜백 메서드를 식별 하는 공급자 소스 코드에서 특성 값에 할당 되어야 합니다는 `ProviderConnectionPointID` 특성을 `<asp:webpartconnection>` 페이지에 요소.</span><span class="sxs-lookup"><span data-stu-id="2f813-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="2f813-120">개발자는 공급자 연결 지점의 ID를 지정 하는 이유 중 하나는 공급자 컨트롤에서 연결 지점이 여러 개 있기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="2f813-121">값 공급자 컨트롤의 공급자 연결 지점에 대 한 ID를 지정 하지 않으면를 할당할 필요가 없습니다 합니다 `ProviderConnectionPointID` 페이지에서, 연결에서 가져온 값을 사용 하 여 만들어지기 때문에 특성을 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="2f813-122">코드에서 연결을 만들려는 개발자는 새 만들어야 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 를 호출 하 여 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드와 함께 ID 또는 인덱스의 정의 된 공급자 컨트롤의 ID를 전달 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="2f813-123">반환 된 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤에 대 한 참조와 함께 해당 소비자 컨트롤에 대 한 참조 개체 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체를 모두 전달할 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드를 만들기 위한 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체.</span><span class="sxs-lookup"><span data-stu-id="2f813-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="2f813-124">개발자를 사용할 수 있지만 공급자 연결 지점의 선언적으로 또는 프로그래밍 방식으로 연결 설정의 일부로 사용자 공급자 연결 지점의 사용자 인터페이스 (UI)를 통해 연결을 설정할 수 상호 작용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="2f813-125">개발자가 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤이 웹 페이지에서 연결을 만드는 사용자에 대 한 런타임 UI를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="2f813-126">사용자가 클릭 하 여 연결을 설정 하기 위한 시작 지점으로 소비자 컨트롤을 선택 하는 경우 해당 연결 동사 (공급자를 선택할 수도 있습니다; 결과 연결에서 차이가), UI에 있는 드롭다운 목록 컨트롤이 나타납니다는 사용 가능한 공급자 연결 지점 (또는 여러 세션에 있는 경우 지점)의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="2f813-127">사용자 연결을 만들려면 공급자 연결 지점을 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="2f813-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 특정 공급자 컨트롤을 사용 하 여 직접 연결 하 고 기본에서 상속 된 속성에 연결 하는 방법에 대 한 세부 정보를 저장 하는 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="2f813-129">예를 들어, 상속 된에서 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 속성 공급자 연결 지점이 계속 공급자가 반환 하는 인터페이스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="2f813-130">공급자와 같은 작업 둘 다 연결에서 소비자 인터페이스 형식, 해당 컨트롤은 호환 되며 직접 연결을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="2f813-131">공급자 및 소비자를 동일한 인터페이스 형식을 사용할 수 없는, 하는 경우 호환 되지 않는 하며 사용 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 공급자 연결 지점의 변환할 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 소비자가 사용할 수 있는 형식으로 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="2f813-132">다른 중요 한 상속 된 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 연결을 만들 때 속성 공급자 연결을 선택 하는 사용자에 대 한 UI에 표시 하기 위한 이름을 제공 하는 지점입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="2f813-133">표시 이름은 필수 매개 변수 추가 하는 개발자는 `ConnectionProvider` 공급자 컨트롤의 콜백 메서드 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="2f813-134">상속 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 공급자에 연결 지점이 여러 개 공급자 연결 지점의 고유 식별자를 제공 하기 때문에, 앞서 설명한 대로 속성 유용 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="2f813-135">공급자를 여러 개 있을 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개발자가 추가 후에이 예에서 정의 된 개체는 `ConnectionProvider` 특성 메서드에 각 연결점을 구별 하는 ID 값을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="2f813-136">상속 된 또 하나의 주요 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 공급자 연결 지점에서 동시에 여러 소비자에 게 연결할 수 있는지 여부를 나타내는 속성도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="2f813-137">이 속성 값이 `true` 공급자 연결 지점에 대해 기본적으로 (기본적으로 반면 `false` 소비자 연결 지점에 대 한).</span><span class="sxs-lookup"><span data-stu-id="2f813-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="2f813-138">합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 몇 가지 고유한 메서드를 추가 하는 클래스에서 상속 된 멤버에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="2f813-139"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드 콜백 메서드를 소비자에 게 반환 하는 인터페이스의 인스턴스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="2f813-140"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드는 기존 연결의 일부인 추가 소비자 인터페이스를 검색 하지만 연결을 설정 하는 인터페이스가 아닌 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f813-141">다음 코드 예제에서는 선언적으로 연결을 만들고, 프로그래밍 방식으로 또는 각 사례 때에서 UI를 통해 공급자 연결 지점을 사용 하는 간단한 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="2f813-142">예제에는 네 가지 부분이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="2f813-143">웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="2f813-144">소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="2f813-145">모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="2f813-146">예제 페이지를 실행 하는 방법 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="2f813-147">이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="2f813-148">에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="2f813-149">이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="2f813-150">코드 예제의 두 번째 부분은 인터페이스 및 컨트롤에 대 한 소스 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="2f813-151">이라는 간단한 인터페이스를 포함 하는 소스 파일 `IZipCode`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="2f813-152">이기도 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `ZipCodeWebPart` 인터페이스를 구현 하 고 공급자 컨트롤의 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="2f813-153">해당 `ProvideIZipCode` 메서드는 인터페이스의 전용 멤버를 구현 하는 콜백 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="2f813-154">메서드는 단순히 인터페이스의 인스턴스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="2f813-155">메서드를 사용 하 여 표시 된 참고는 `ConnectionProvider` 해당 메타 데이터의 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="2f813-156">공급자의 연결점에 대 한 콜백 메서드로 메서드를 식별 하기 위한 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="2f813-157">다른 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 이름은 `WeatherWebPart`, 연결에 대 한 소비자 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="2f813-158">이 클래스에 메서드가 `GetZipCode` 의 인스턴스를 가져오는 `IZipCode` 공급자 컨트롤에서 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="2f813-159">이 메서드는 사용 하는 소비자 연결 지점 메서드로 표시는 `ConnectionConsumer` 해당 메타 데이터의 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="2f813-160">소비자 컨트롤의 연결 지점 메서드를 식별 하기 위한 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="2f813-161">코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="2f813-162">명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="2f813-163">또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="2f813-164">이 코드 예제에서는 동적 컴파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="2f813-165">컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="2f813-166">코드 예제에서는 세 번째 부분에는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="2f813-167">위쪽은 `Register` 페이지의 디스플레이 모드 연결을 구성 하는 사용자 지정 컨트롤 및 사용자가 변경할 수 있는 사용자 정의 컨트롤을 등록 하는 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="2f813-168">연결 자체 내에서 선언적으로 만들어집니다는 `<staticconnections>` 페이지의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="2f813-169">이 연결을 만드는 방법을 보여 줍니다-참고 합니다 `ProviderConnectionPointID` 특성을 `<asp:webpartconnection>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="2f813-170">연결을 프로그래밍 방식으로 실현할 수 있습니다. 작업을 수행 하는 코드는 `Button1_Click` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2f813-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="2f813-171">이 경우에 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체가 생성 되 고 실제 연결을 만드는 메서드로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="2f813-172">연결이 선언적으로 또는 프로그래밍 방식으로 생성 하는지 여부를 연결점 공급자와 소비자 모두에 대해 항상 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="2f813-173">합니다 `Button2_Click` 메서드 액세스를 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 공급자와 소비자 모두에 대 한 개체 및 레이블을 페이지에서 해당 속성 값의 일부를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="2f813-174">브라우저에서 페이지를 로드 한 후 클릭 합니다 **연결 지점 정보** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="2f813-175">선언적 연결에 설정 된 공급자 및 소비자 연결 지점에 대 한 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="2f813-176">다음을 사용 하 여 합니다 **디스플레이 모드** 드롭다운 컨트롤을 페이지에 연결 전환 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="2f813-177">동사 메뉴에서를 **ZIP Code 소비자** <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨) 연결 동사를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="2f813-178">UI가 나타나고 연결이 자동으로 생성 된 `<asp:connectionszone>` 컨트롤이 페이지에 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="2f813-179">앞에서 설명한 선언적 방법과 프로그래밍 방법을 함께 (UI)를 통해 연결을 만드는 다른 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="2f813-180">클릭 합니다 **연결 끊기** 단추 기존 정적 연결을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="2f813-181">클릭 합니다 **공급자에 연결할** 링크.</span><span class="sxs-lookup"><span data-stu-id="2f813-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="2f813-182">UI는 공급자 연결 지점 표시 이름을 나열 하는 드롭다운 목록 컨트롤에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="2f813-183">드롭다운 목록에서 연결 지점을 선택 하 고 클릭 **Connect** 연결을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="2f813-184">다음으로, 클릭 **연결 끊기** 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="2f813-185">클릭 합니다 **동적 연결** 프로그래밍 방식으로 연결을 설정 하는 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="2f813-186">사용 합니다 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="2f813-187">클릭 합니다 **연결 지점 세부 정보** 단추를 다시 한 번 더 공급자 연결 지점 개체에 대 한 정보를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="2f813-188">이 예제에서는 연결 및 공급자 연결 지점을 사용 하 여 세 가지 방법으로 살펴보았습니다.; 웹 페이지 태그에 선언 된 정적 연결 사용 하는 코드에서 만든 연결을 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체 및 UI 연결을 통해 사용자가 만든 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="2f813-189">ASP.NET 웹 파트 컨트롤</span><span class="sxs-lookup"><span data-stu-id="2f813-189">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="2f813-190">웹 파트 연결 개요</span><span class="sxs-lookup"><span data-stu-id="2f813-190">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="2f813-191">연결을 설정하기 위해 소비자에게 인터페이스 인스턴스를 반환하는 공급자 컨트롤의 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-191">The method in the provider control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="2f813-192">공급자가 소비자에게 제공하는 인터페이스의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-192">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span></span></param>
        <param name="controlType"><span data-ttu-id="2f813-193">공급자 연결 지점과 관련된 공급자 컨트롤의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-193">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="2f813-194">연결 UI(사용자 인터페이스)에서 사용자에게 표시되는 공급자 연결 지점의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-194">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="2f813-195">공급자 연결 지점의 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-195">A unique identifier for the provider connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="2f813-196">공급자 연결 지점에 소비자와의 연결이 동시에 여러 개 있을 수 있는지 여부를 나타내는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-196">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span></span></param>
        <summary><span data-ttu-id="2f813-197"><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-197">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f813-198">합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 에 대 한 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스 기본 생성자, 다양 한 매개 변수를 전달 하 고 기본 클래스 초기화를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-198">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="2f813-199">기본 클래스 생성자는 연결 지점에 대 한 매개 변수 개수를 확인 하 고 몇 가지 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-199">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="2f813-200">가능한 예외 목록은 예외 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="2f813-200">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="2f813-201">호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 의 고유한 인스턴스를 만드는 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-201">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="2f813-202">그러나 단순히 연결을 설정 하 고 클래스를 확장 하지 않는 경우에 호출 해야 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 공급자에서 기존 연결 지점 개체를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-202">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f813-203">다음 코드 예제에서 파생 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스 사용자 지정 공급자 연결 지점 만들기를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-203">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="2f813-204">이 코드 예제는 세 부분으로 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-204">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="2f813-205">공급자를 포함 하는 원본 파일 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-205">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="2f813-206">정적 연결에서 컨트롤을 호스팅하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-206">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="2f813-207">예제 코드를 실행 하는 방법 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-207">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="2f813-208">코드 예제의 첫 번째 부분은 공급자와 소비자에 대 한 원본 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 이라는 클래스가 `TableProviderConnectionPoint`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-208">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="2f813-209">생성자는 `TableProviderConnectionPoint` 클래스 매개 변수 섹션에 표시 된 대로 필요한 매개 변수를 전달 하 고 기본 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-209">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="2f813-210">에 유의 합니다 `TableProviderWebPart` 클래스를 `GetConnectionInterface` 메서드는 연결에 대 한 콜백 메서드로 지정 됩니다 및 `ConnectionProvider` 특성은 사용자 지정 선언 `TableProviderConnectionPoint` 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-210">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="2f813-211">이 사용자 지정 공급자 연결 지점 만들기 공급자 컨트롤을 사용 하 여 연결 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-211">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="2f813-212">이 예제에서는 소스 코드를 동적으로 컴파일할 소스 코드 파일을 웹 응용 프로그램의 App_Code 하위 폴더에 배치 해야 하므로</span><span class="sxs-lookup"><span data-stu-id="2f813-212">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="2f813-213">코드 예제의 두 번째 부분은 정적 웹 파트 연결에서 사용자 지정 컨트롤을 호스트 하는 웹 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-213">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="2f813-214">페이지의 맨 위에는 `Register` 접두사 및 사용자 지정 컨트롤에 대 한 네임 스페이스를 선언 하는 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-214">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="2f813-215">연결이 사용 하 여 선언 되는 `<asp:webpartconnection>` 요소, 공급자 및 소비자 컨트롤 내에서 선언 된는 `<asp:webpartzone>` 요소.</span><span class="sxs-lookup"><span data-stu-id="2f813-215">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="2f813-216">브라우저에서 페이지를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-216">Load the page in a browser.</span></span> <span data-ttu-id="2f813-217">이미 컨트롤 간의 연결이 있고 연결 된 페이지에 정적 연결으로 선언 되었으므로 소비자 공급자에서 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-217">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f813-218"><paramref name="callbackMethod" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-218"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2f813-219">또는</span><span class="sxs-lookup"><span data-stu-id="2f813-219">-or-</span></span> 
 <span data-ttu-id="2f813-220"><paramref name="interfaceType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2f813-220"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2f813-221">또는</span><span class="sxs-lookup"><span data-stu-id="2f813-221">-or-</span></span> 
 <span data-ttu-id="2f813-222"><paramref name="controlType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2f813-222"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2f813-223">또는</span><span class="sxs-lookup"><span data-stu-id="2f813-223">-or-</span></span> 
 <span data-ttu-id="2f813-224"><paramref name="displayName" />이 <see langword="null" /> 또는 빈 문자열("")인 경우</span><span class="sxs-lookup"><span data-stu-id="2f813-224"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f813-225"><paramref name="controlType" />이 공급자 컨트롤 또는 이 컨트롤에서 파생된 유효한 클래스의 형식과 동일하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2f813-225"><paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="2f813-226">ASP.NET 웹 파트 컨트롤</span><span class="sxs-lookup"><span data-stu-id="2f813-226">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="2f813-227">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-227">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="2f813-228">인터페이스 인스턴스를 가져와 소비자에게 반환하는 공급자 컨트롤의 콜백 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-228">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span></span></summary>
        <returns><span data-ttu-id="2f813-229">공급자가 연결을 설정하기 위해 소비자에게 반환하는 인터페이스의 인스턴스인 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-229">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f813-230">이 메서드는 연결을 설정 하는 데 사용 하는 인터페이스의 인스턴스는 공급자 컨트롤에서 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-230">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="2f813-231">개체의 형식에 구현된 된 인터페이스의 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-231">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="2f813-232">예를 들어 두 구현 되는 인터페이스를 웹 파트 컨트롤 집합에서에서 연결에 대 한 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 고 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-232">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="2f813-233">경우는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드가 호출 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체에 연결 된 공급자 이러한 인터페이스를 구현 하는 경우 반환된 된 개체는 동일한 형식의.</span><span class="sxs-lookup"><span data-stu-id="2f813-233">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="2f813-234">합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체는 연결을 활성화 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-234">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="2f813-235">이것이 실제로 연결을 시작 하 고 두 개의 컨트롤이 데이터를 공유할 수 있도록 하는 프로세스를 시작 하는 중요 한 단계입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-235">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="2f813-236">연결에서 소비자 컨트롤과 공급자와 같은 유형의 인터페이스를 사용 하 여 작업에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-236">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="2f813-237">그렇지 않은 경우 컨트롤을 호환 되지 않습니다 및 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체를 사용 하 여 연결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-237">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f813-238"><paramref name="control" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-238"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="2f813-239">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-239">The control acting as the provider in a Web Parts connection.</span></span></param>
        <summary><span data-ttu-id="2f813-240">공급자 연결 지점에서 지원할 수 있는 보조 인터페이스의 선택적 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-240">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span></span></summary>
        <returns><span data-ttu-id="2f813-241">공급자 역할을 하는 컨트롤에서 제공하는 추가 인터페이스의 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-241">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f813-242">공급자 연결 지점 개체는 항상 소비자와의 연결을 설정 하는 데 사용 되는 기본 인터페이스를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-242">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="2f813-243">기본 인터페이스의 인스턴스를 호출 하 여 검색 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-243">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="2f813-244">그러나 일부 공급자 컨트롤 연결의 일부분으로 소비자에 게 제공 하는 여러 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-244">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="2f813-245">이러한 인터페이스를 하지 않은 연결에 사용 되는 기본, 보조 인터페이스 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-245">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="2f813-246"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드 처럼 보조 인터페이스에 대 한 참조의 컬렉션을 반환 하는 방법을 제공 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드 기본 인터페이스에 대 한 참조를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-246">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2f813-247">합니다 <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> 의 메서드는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 구현이 포함 되지 않으며 않으면 보조 인터페이스의 빈 컬렉션을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-247">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span></span> <span data-ttu-id="2f813-248">상속 해야이 메서드를 구현 하는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 및 보조 인터페이스의 특정 집합에서 반환 하는이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f813-248">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>