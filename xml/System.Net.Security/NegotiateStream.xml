<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d525bc672bac1f9e8322fe3609ac7a7bfff4ee84" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56389370" /></Metadata><TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d7689-101">클라이언트-서버 통신에서 협상 보안 프로토콜을 사용하여 클라이언트를 인증하고 선택적으로 서버를 인증하는 스트림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-101">Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-102">사용 된 <xref:System.Net.Security.NegotiateStream> 클라이언트와 서버 간에 전송 되는 인증에 대 한 정보를 보호 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-102">Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server.</span></span> <span data-ttu-id="d7689-103">사용 하 여 <xref:System.Net.Security.NegotiateStream>, 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-103">Using <xref:System.Net.Security.NegotiateStream>, you can do the following.</span></span>  
  
-   <span data-ttu-id="d7689-104">가장 또는 위임에 대 한 서버에 클라이언트의 자격 증명을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-104">Send the client's credentials to the server for Impersonation or Delegation.</span></span>  
  
-   <span data-ttu-id="d7689-105">서버 인증을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-105">Request server authentication.</span></span>  
  
-   <span data-ttu-id="d7689-106">암호화 및/또는 전송 하기 전에 데이터에 서명</span><span class="sxs-lookup"><span data-stu-id="d7689-106">Encrypt and/or sign data before transmitting it.</span></span>  
  
 <span data-ttu-id="d7689-107">인증 정보를 전송 하기 전에 수행 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-107">Authentication must be performed before transmitting information.</span></span> <span data-ttu-id="d7689-108">클라이언트 요청 인증을 사용 하 여 동기 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 인증 완료 될 때까지 차단 하는 메서드 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드는 인증이 완료 되기를 기다리는 동안 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-108">Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete.</span></span> <span data-ttu-id="d7689-109">서버에서 동기를 사용 하 여 인증을 요청할 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-109">Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span> <span data-ttu-id="d7689-110">클라이언트와 서버를 필요에 따라 보안 협상 프로토콜을 사용 하 여 인증 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-110">The client, and optionally the server, is authenticated using the Negotiate security protocol.</span></span> <span data-ttu-id="d7689-111">Windows 95/98 시스템에서 Windows NT LAN Manager (NTLM) 인증에 사용 되는 프로토콜입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-111">On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.</span></span> <span data-ttu-id="d7689-112">다른 플랫폼 Kerberos 프로토콜은 인증에 대 한 클라이언트와 서버 모두에서 지 원하는 경우; 그렇지 않으면 NTLM이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-112">On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.</span></span> <span data-ttu-id="d7689-113">에 대 한 자세한 설명은 이러한 프로토콜을 msdn.microsoft.com/library/에 MSDN의 Platform SDK 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-113">For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.</span></span> <span data-ttu-id="d7689-114"><xref:System.Net.Security.NegotiateStream> 클래스 보안 지원 공급자 인터페이스 (SSPI)를 사용 하 여 인증을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-114">The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).</span></span>  
  
 <span data-ttu-id="d7689-115">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용할 보안 서비스를 결정 하는 속성은 <xref:System.Net.Security.NegotiateStream> 전송 중 데이터를 보호 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="d7689-115">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission.</span></span> <span data-ttu-id="d7689-116">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-116">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span> <span data-ttu-id="d7689-117">원격 클라이언트를 사용 하 여 서버에 대 한 정보를 얻을 수는 <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-117">You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.</span></span>  
  
 <span data-ttu-id="d7689-118">인증에 실패 하는 경우 받게를 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-118">If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-119">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-119">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="d7689-120">동기 버전을 사용 하 여 데이터를 보낼 <xref:System.Net.Security.NegotiateStream.Write%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-120">You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods.</span></span> <span data-ttu-id="d7689-121">동기 버전을 사용 하 여 데이터를 수신할 <xref:System.Net.Security.NegotiateStream.Read%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-121">You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods.</span></span> <span data-ttu-id="d7689-122">보안에는 암호화 또는 서명 사용 하도록 설정 같은 서비스를 이러한는 자동으로 적용 하 여 데이터를 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-122">If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-123">합니다 <xref:System.Net.Security.NegotiateStream> 를 만들 때 제공 하는 스트림을 사용 하 여 데이터를 전송 합니다 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-123">The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-124">지정 하는 옵션이 있는이 내부 스트림을 입력 하면 닫는 지 여부를 <xref:System.Net.Security.NegotiateStream> 기본 스트림도 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-124">When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-125">다음 코드 예제에서는 사용 하는 클라이언트-서버 연결의 클라이언트측을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-125">The following code example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-126">클라이언트를 인증 하 고 서버로 메시지를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-126">The client authenticates and sends a message to the server asynchronously.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 <span data-ttu-id="d7689-127">다음 코드 예제에서는 사용 하는 클라이언트-서버 연결의 서버 쪽의 <xref:System.Net.Security.NegotiateStream> 클라이언트에서 보낸 메시지를 읽고 클라이언트를 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-127">The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a"><span data-ttu-id="d7689-128">버전 3.5 SP1에서에서 HTTPWebRequest에 대 한 NTLM 인증 변경 내용</span><span class="sxs-lookup"><span data-stu-id="d7689-128">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-129"><see cref="T:System.Net.Security.NegotiateStream" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-129">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-130">방지 하기 위해 합니다 <xref:System.Net.Security.NegotiateStream> 에서 제공 하는 스트림을 닫는 사용 하 여는 <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-130">To prevent the <xref:System.Net.Security.NegotiateStream> from closing the stream that you supply, use the <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="d7689-131"><see cref="T:System.IO.Stream" />에서 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Security.NegotiateStream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-131">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <summary><span data-ttu-id="d7689-132">지정된 <see cref="T:System.Net.Security.NegotiateStream" />를 사용하여 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-132">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7689-133">다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-133">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="d7689-134"><see cref="T:System.IO.Stream" />에서 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Security.NegotiateStream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-134">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <param name="leaveInnerStreamOpen"><span data-ttu-id="d7689-135">이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫아도 <paramref name="innerStream" />에 영향을 주지 않으려면 <see langword="true" />로 설정하고, 이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫을 때 <paramref name="innerStream" />도 함께 닫으려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-135"><see langword="true" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> has no effect on <paramref name="innerStream" />; <see langword="false" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> also closes <paramref name="innerStream" />.</span></span></param>
        <summary><span data-ttu-id="d7689-136">지정된 <see cref="T:System.Net.Security.NegotiateStream" />과 스트림 닫기 동작을 사용해서 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-136">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" /> and stream closure behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-137">지정 하는 경우 `true` 에 대 한는 `leaveStreamOpen` 매개 변수를 닫는 합니다 <xref:System.Net.Security.NegotiateStream> 영향을 주지 않습니다를 `innerStream` 스트림이 명시적으로 닫아야 `innerStream` 이상 필요할 때.</span><span class="sxs-lookup"><span data-stu-id="d7689-137">When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-138">다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-138">The following code example demonstrates calling this constructor.</span></span> <span data-ttu-id="d7689-139">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-139">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-140"><paramref name="innerStream" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-140"><paramref name="innerStream" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-141">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-141">-or-</span></span> 
 <span data-ttu-id="d7689-142"><paramref name="innerStream" />가 <see cref="F:System.IO.Stream.Null" />와 같은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-142"><paramref name="innerStream" /> is equal to <see cref="F:System.IO.Stream.Null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-143">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-143">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7689-144">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-144">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-145">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-145">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-146">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-146">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-147">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-147">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-148"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-148">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-149">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-149">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-150">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-150">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-151">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-151">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-152">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-152">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-153">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-153">The authentication failed.</span></span> <span data-ttu-id="d7689-154">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-154">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-155">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-155">The authentication failed.</span></span> <span data-ttu-id="d7689-156">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-156">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-157">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-157">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-158">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-158">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-159">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-159">-or-</span></span> 
<span data-ttu-id="d7689-160">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-160">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-161">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-161">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-162">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-162">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-163">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-163">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-164">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-164">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-165">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-165">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="d7689-166">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-166">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-167">인증 프로세스에는 지정된 클라이언트 자격 증명이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-167">The authentication process uses the specified client credential.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-168">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-168">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-169"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-169">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-170">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-170">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-171">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-171">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-172">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-172">The authentication failed.</span></span> <span data-ttu-id="d7689-173">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-173">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-174">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-174">The authentication failed.</span></span> <span data-ttu-id="d7689-175">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-175">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-176">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-176">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-177">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-177">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-178">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-178">-or-</span></span> 
<span data-ttu-id="d7689-179">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-179">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-180">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-180">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-181"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-181"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-182">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-182">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-183">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-183">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-184">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-184">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-185">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-185">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-186">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-186">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="d7689-187">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-187">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-188">인증 프로세스에는 지정된 클라이언트 자격 증명과 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-188">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-189">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-189">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-190"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-190">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-191"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 애플리케이션에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-191">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="d7689-192">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-192">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-193">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-193">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-194"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-194"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-195">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-195">-or-</span></span> 
 <span data-ttu-id="d7689-196"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-196"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-197">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-197">The authentication failed.</span></span> <span data-ttu-id="d7689-198">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-198">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-199">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-199">The authentication failed.</span></span> <span data-ttu-id="d7689-200">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-200">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-201">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-201">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-202">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-202">-or-</span></span> 
<span data-ttu-id="d7689-203">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-203">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-204">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-204">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-205">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-205">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-206">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-206">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-207">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-207">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-208">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-208">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-209">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-209">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-210">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-210">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-211">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-211">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-212">인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-212">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-213">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-213">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-214">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-214">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-215">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-215">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-216">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-216">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-217">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-217">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-218">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-218">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-219"><paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-219"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-220"><paramref name="targetName" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-220"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-221">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-221">The authentication failed.</span></span> <span data-ttu-id="d7689-222">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-222">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-223">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-223">The authentication failed.</span></span> <span data-ttu-id="d7689-224">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-224">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-225">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-225">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-226">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-226">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-227">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-227">-or-</span></span> 
<span data-ttu-id="d7689-228">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-228">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-229">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-229">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-230">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-230">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-231">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-231">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-232">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-232">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-233">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-233">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-234">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-234">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-235">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-235">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-236">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-236">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-237">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-237">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-238">인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-238">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-239">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-239">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-240">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-240">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-241">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-241">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-242">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-242">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-243"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 애플리케이션에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-243">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="d7689-244">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-244">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-245">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-245">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-246"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-246"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-247">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-247">-or-</span></span> 
 <span data-ttu-id="d7689-248"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-248"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-249"><paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-249"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-250">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-250">The authentication failed.</span></span> <span data-ttu-id="d7689-251">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-251">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-252">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-252">The authentication failed.</span></span> <span data-ttu-id="d7689-253">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-253">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-254">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-254">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-255">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-255">-or-</span></span> 
<span data-ttu-id="d7689-256">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-256">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-257">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-257">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-258">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-258">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-259">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-259">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-260">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-260">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7689-261">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-261">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="d7689-262">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-262">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-263">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-263">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-264">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-264">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-265">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-265">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-266"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-266">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-267">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-267">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-268">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-268">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-269">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-269">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-270">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-270">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-271">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-271">The authentication failed.</span></span> <span data-ttu-id="d7689-272">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-272">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-273">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-273">The authentication failed.</span></span> <span data-ttu-id="d7689-274">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-274">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-275">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-275">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-276">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-276">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-277">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-277">-or-</span></span> 
<span data-ttu-id="d7689-278">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-278">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-279">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-279">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-280">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-280">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-281">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-281">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-282">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-282">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-283">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-283">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="d7689-284">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-284">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-285">인증 프로세스에는 지정된 클라이언트 자격 증명이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-285">The authentication process uses the specified client credential.</span></span></summary>
        <returns><span data-ttu-id="d7689-286">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-286">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-287">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-287">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-288"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-288">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-289">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-289">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-290">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-290">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-291">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-291">The authentication failed.</span></span> <span data-ttu-id="d7689-292">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-292">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-293">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-293">The authentication failed.</span></span> <span data-ttu-id="d7689-294">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-294">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-295">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-295">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-296">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-296">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-297">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-297">-or-</span></span> 
<span data-ttu-id="d7689-298">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-298">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-299">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-299">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-300"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-300"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-301">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-301">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-302">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-302">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-303">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-303">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-304">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-304">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-305">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-305">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="d7689-306">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-306">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-307">인증 프로세스에는 지정된 클라이언트 자격 증명과 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-307">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <returns><span data-ttu-id="d7689-308">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-308">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-309">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-309">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="d7689-310"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-310">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-311"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 애플리케이션에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-311">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="d7689-312">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-312">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-313">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-313">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-314"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-314"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-315">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-315">-or-</span></span> 
 <span data-ttu-id="d7689-316"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-316"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-317">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-317">The authentication failed.</span></span> <span data-ttu-id="d7689-318">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-318">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-319">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-319">The authentication failed.</span></span> <span data-ttu-id="d7689-320">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-320">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-321">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-321">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-322">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-322">-or-</span></span> 
<span data-ttu-id="d7689-323">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-323">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-324">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-324">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-325">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-325">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-326">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-326">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-327">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-327">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-328">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-328">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-329">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-329">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-330">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-330">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-331">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-331">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-332">인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-332">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="d7689-333">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-333">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-334">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-334">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-335">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-335">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-336">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-336">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-337">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-337">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-338">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-338">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-339">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-339">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-340"><paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-340"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-341"><paramref name="targetName" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-341"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-342">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-342">The authentication failed.</span></span> <span data-ttu-id="d7689-343">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-343">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-344">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-344">The authentication failed.</span></span> <span data-ttu-id="d7689-345">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-345">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-346">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-346">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-347">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-347">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-348">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-348">-or-</span></span> 
<span data-ttu-id="d7689-349">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-349">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-350">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-350">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-351">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-351">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-352">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-352">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-353">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-353">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-354">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-354">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-355">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-355">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-356">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-356">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-357">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-357">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-358">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-358">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-359">인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-359">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <returns><span data-ttu-id="d7689-360">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-360">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-361">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-361">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-362">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-362">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-363">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-363">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-364">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-364">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-365"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 애플리케이션에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-365">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="d7689-366">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-366">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-367">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-367">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-368"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-368"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-369">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-369">-or-</span></span> 
 <span data-ttu-id="d7689-370"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-370"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-371"><paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-371"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-372">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-372">The authentication failed.</span></span> <span data-ttu-id="d7689-373">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-373">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-374">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-374">The authentication failed.</span></span> <span data-ttu-id="d7689-375">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-375">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-376">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-376">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-377">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-377">-or-</span></span> 
<span data-ttu-id="d7689-378">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-378">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-379">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-379">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-380">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-380">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-381">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-381">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-382">클라이언트-서버 연결의 서버측 인증을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-382">Handles the server side of an authentication for a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-383">이러한 메서드는 인증이 진행에서 되는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-383">These methods block while the authentication is in progress.</span></span> <span data-ttu-id="d7689-384">인증이 완료 되기를 기다리는 동안 차단에서 애플리케이션을 방지 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-384">To prevent the application from blocking while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7689-385">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-385">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-386">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-386">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-387">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-387">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-388">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-388">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-389">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-389">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-390">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-390">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-391">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-391">This method blocks until the operation completes.</span></span> <span data-ttu-id="d7689-392">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-392">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-393">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-393">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-394">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-394">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-395">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-395">The authentication failed.</span></span> <span data-ttu-id="d7689-396">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-396">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-397">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-397">The authentication failed.</span></span> <span data-ttu-id="d7689-398">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-398">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-399">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-399">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-400">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-400">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-401">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-401">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-402">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-402">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="d7689-403">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-403">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="d7689-404">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-404">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-405">인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-405">The authentication process uses the specified extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-406">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-406">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-407">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-407">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-408">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-408">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-409">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-409">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-410">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-410">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-411">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-411">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-412">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-412">This method blocks until the operation completes.</span></span> <span data-ttu-id="d7689-413">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-413">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-414">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-414">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-415">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-415">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-416"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-416">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-417">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-417">The authentication failed.</span></span> <span data-ttu-id="d7689-418">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-418">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-419">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-419">The authentication failed.</span></span> <span data-ttu-id="d7689-420">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-420">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-421">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-421">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-422">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-422">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-423"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-423">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-424">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-424">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-425">서버의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-425">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-426">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-426">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-427">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-427">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-428">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-428">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-429">인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-429">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-430">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-430">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-431">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-431">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-432">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-432">This method blocks until the operation completes.</span></span> <span data-ttu-id="d7689-433">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-433">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-434">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-434">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-435">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-435">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-436"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-436"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-437"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-437"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-438">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-438">The authentication failed.</span></span> <span data-ttu-id="d7689-439">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-439">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-440">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-440">The authentication failed.</span></span> <span data-ttu-id="d7689-441">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-441">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-442">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-442">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-443">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-443">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-444">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-444">-or-</span></span> 
<span data-ttu-id="d7689-445">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-445">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-446">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-446">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-447">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-447">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-448">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-448">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-449">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-449">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-450">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-450">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="d7689-451">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-451">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-452">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-452">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-453">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-453">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-454">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-454">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-455">인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-455">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-456">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-456">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-457">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-457">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-458">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-458">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-459">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-459">This method blocks until the operation completes.</span></span> <span data-ttu-id="d7689-460">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-460">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-461">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-461">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-462">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-462">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-463"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-463">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-464"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-464"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-465"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-465"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-466">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-466">The authentication failed.</span></span> <span data-ttu-id="d7689-467">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-467">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-468">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-468">The authentication failed.</span></span> <span data-ttu-id="d7689-469">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-469">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-470">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-470">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-471">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-471">-or-</span></span> 
<span data-ttu-id="d7689-472">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-472">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-473">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-473">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-474">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-474">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-475">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-475">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-476"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-476">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-477">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-477">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-478">클라이언트-서버 연결의 서버 측 인증을 비동기 작업으로 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-478">Handles the server side of an authentication for a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7689-479">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-479">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="d7689-480">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-480">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-481">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-481">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-482">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-482">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-483">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-483">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-484">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-484">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-485">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-485">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-486">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-486">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-487">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-487">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-488">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-488">The authentication failed.</span></span> <span data-ttu-id="d7689-489">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-489">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-490">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-490">The authentication failed.</span></span> <span data-ttu-id="d7689-491">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-491">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-492">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-492">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-493">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-493">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-494">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-494">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-495">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-495">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="d7689-496">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-496">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="d7689-497">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-497">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-498">인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-498">The authentication process uses the specified extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="d7689-499">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-499">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-500">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-500">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-501">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-501">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-502">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-502">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-503">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-503">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-504">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-504">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-505">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-505">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-506">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-506">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-507">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-507">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-508"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-508">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-509">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-509">The authentication failed.</span></span> <span data-ttu-id="d7689-510">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-510">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-511">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-511">The authentication failed.</span></span> <span data-ttu-id="d7689-512">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-512">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-513">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-513">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-514">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-514">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-515"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-515">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-516">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-516">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-517">서버의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-517">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-518">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-518">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-519">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-519">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-520">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-520">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-521">인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-521">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="d7689-522">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-522">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-523">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-523">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-524">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-524">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-525">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-525">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-526">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-526">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-527"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-527"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-528"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-528"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-529">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-529">The authentication failed.</span></span> <span data-ttu-id="d7689-530">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-530">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-531">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-531">The authentication failed.</span></span> <span data-ttu-id="d7689-532">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-532">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-533">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-533">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-534">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-534">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-535">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-535">-or-</span></span> 
<span data-ttu-id="d7689-536">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-536">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-537">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-537">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-538">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-538">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-539">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-539">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-540">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-540">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-541">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-541">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="d7689-542">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-542">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-543">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-543">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-544">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-544">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="d7689-545">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-545">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="d7689-546">인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-546">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="d7689-547">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-547">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-548">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-548">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-549">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-549">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-550">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-550">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-551">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-551">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-552">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-552">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-553"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-553">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-554"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-554"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-555"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-555"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-556">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-556">The authentication failed.</span></span> <span data-ttu-id="d7689-557">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-557">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-558">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-558">The authentication failed.</span></span> <span data-ttu-id="d7689-559">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-559">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-560">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-560">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-561">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-561">-or-</span></span> 
<span data-ttu-id="d7689-562">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-562">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-563">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-563">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-564">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-564">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-565">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-565">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-566"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-566">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-567">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-567">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-568">클라이언트-서버 연결의 클라이언트측을 인증하는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-568">Begins an asynchronous operation to authenticate the client side of a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-569">인증 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-569">The overloads of this method do not block while authentication is in progress.</span></span> <span data-ttu-id="d7689-570">인증이 완료 되기를 기다리는 동안 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-570">To block while waiting for the authentication to complete, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="d7689-571">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-571">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-572">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-572">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="d7689-573">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-573">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-574">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-574">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-575">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-575">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-576">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-576">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-577">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-577">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-578">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-578">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-579">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-579">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span> <span data-ttu-id="d7689-580"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-580">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-581">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-581">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-582">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-582">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-583">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-583">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="d7689-584">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-584">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-585">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-585">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-586">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-586">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-587">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-587">In this case, you can retry the authentication with a different credential.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-588">다음 코드 예제에서는 클라이언트에 대 한 비동기 인증 하려면이 메서드를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-588">The following code example demonstrates calling this method to begin an asynchronous authentication for the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-589">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-589">The authentication failed.</span></span> <span data-ttu-id="d7689-590">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-590">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-591">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-591">The authentication failed.</span></span> <span data-ttu-id="d7689-592">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-592">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-593">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-593">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-594">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-594">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-595">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-595">-or-</span></span> 
<span data-ttu-id="d7689-596">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-596">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-597">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-597">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-598">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-598">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-599">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-599">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-600">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-600">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-601">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-601">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-602">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-602">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-603">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-603">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-604">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-604">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-605">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-605">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-606">인증 프로세스에는 지정된 자격 증명이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-606">The authentication process uses the specified credentials.</span></span> <span data-ttu-id="d7689-607">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-607">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-608">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-608">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-609">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-609">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-610">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-610">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-611">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-611">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="d7689-612">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-612">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-613">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-613">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-614">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-614">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-615">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-615">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-616"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-616"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-617">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-617">-or-</span></span> 
 <span data-ttu-id="d7689-618"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-618"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-619">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-619">The authentication failed.</span></span> <span data-ttu-id="d7689-620">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-620">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-621">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-621">The authentication failed.</span></span> <span data-ttu-id="d7689-622">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-622">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-623">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-623">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-624">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-624">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-625">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-625">-or-</span></span> 
<span data-ttu-id="d7689-626">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-626">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-627">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-627">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-628">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-628">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-629">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-629">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-630">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-630">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-631">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-631">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-632">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-632">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-633">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-633">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-634">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-634">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-635">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-635">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-636">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-636">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-637">인증 프로세스에는 지정된 자격 증명과 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-637">The authentication process uses the specified credentials and channel binding.</span></span> <span data-ttu-id="d7689-638">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-638">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-639">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-639">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-640">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-640">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-641">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-641">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-642">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-642">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="d7689-643">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-643">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-644">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-644">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-645">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-645">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-646">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-646">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-647"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-647"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-648">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-648">-or-</span></span> 
 <span data-ttu-id="d7689-649"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-649"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-650">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-650">The authentication failed.</span></span> <span data-ttu-id="d7689-651">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-651">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-652">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-652">The authentication failed.</span></span> <span data-ttu-id="d7689-653">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-653">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-654">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-654">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-655">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-655">-or-</span></span> 
<span data-ttu-id="d7689-656">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-656">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-657">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-657">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-658">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-658">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-659">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-659">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-660">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-660">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-661">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-661">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-662">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-662">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-663">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-663">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-664">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-664">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-665">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-665">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-666">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-666">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-667">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-667">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-668">인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-668">The authentication process uses the specified credentials and authentication options.</span></span> <span data-ttu-id="d7689-669">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-669">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-670">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-670">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-671">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-671">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-672">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-672">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-673">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-673">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-674">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-674">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-675">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-675">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-676">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-676">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-677">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-677">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="d7689-678">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-678">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-679">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-679">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-680">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-680">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-681">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-681">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-682"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-682"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-683">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-683">-or-</span></span> 
 <span data-ttu-id="d7689-684"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-684"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-685">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-685">The authentication failed.</span></span> <span data-ttu-id="d7689-686">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-686">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-687">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-687">The authentication failed.</span></span> <span data-ttu-id="d7689-688">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-688">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-689">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-689">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-690">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-690">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-691">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-691">-or-</span></span> 
<span data-ttu-id="d7689-692">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-692">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-693">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-693">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-694">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-694">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-695">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-695">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-696">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-696">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="d7689-697">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-697">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="d7689-698">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-698">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-699">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-699">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="d7689-700">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-700">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-701">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-701">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-702">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-702">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-703">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-703">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-704">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-704">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-705">인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-705">The authentication process uses the specified credentials, authentication options, and channel binding.</span></span> <span data-ttu-id="d7689-706">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-706">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-707">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-707">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-708">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-708">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-709">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-709">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-710">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-710">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-711">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-711">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-712">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-712">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-713">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-713">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-714">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-714">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="d7689-715">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-715">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-716">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-716">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-717">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-717">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-718">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-718">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-719"><paramref name="credential" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-719"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7689-720">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-720">-or-</span></span> 
 <span data-ttu-id="d7689-721"><paramref name="targetName" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-721"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-722">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-722">The authentication failed.</span></span> <span data-ttu-id="d7689-723">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-723">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-724">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-724">The authentication failed.</span></span> <span data-ttu-id="d7689-725">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-725">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-726">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-726">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-727">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-727">-or-</span></span> 
<span data-ttu-id="d7689-728">이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-728">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="d7689-729">해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-729">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-730">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-730">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-731">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-731">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7689-732">클라이언트-서버 연결의 서버 측 인증을 처리하는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-732">Begins an asynchronous operation to handle the server side of authenticating a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-733">인증 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-733">The overloads of this method do not block while the authentication is in progress.</span></span> <span data-ttu-id="d7689-734">인증이 완료 되기를 기다리는 동안 차단 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-734">To block while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="d7689-735">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-735">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-736">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-736">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="d7689-737">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-737">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-738">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-738">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-739">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-739">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-740">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-740">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-741">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-741">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-742">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-742">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-743">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-743">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-744">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-744">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-745">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-745">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-746">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-746">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-747">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-747">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-748">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-748">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-749">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-749">The authentication failed.</span></span> <span data-ttu-id="d7689-750">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-750">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-751">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-751">The authentication failed.</span></span> <span data-ttu-id="d7689-752">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-752">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-753">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-753">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-754">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-754">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-755">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-755">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-756">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-756">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="d7689-757">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-757">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-758">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-758">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-759">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-759">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-760">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-760">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-761">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-761">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-762">인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-762">The authentication process uses the specified extended protection policy.</span></span> <span data-ttu-id="d7689-763">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-763">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-764">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-764">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-765">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-765">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="d7689-766">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-766">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="d7689-767">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-767">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="d7689-768">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-768">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-769">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-769">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-770">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-770">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-771">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-771">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-772">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-772">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-773">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-773">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-774"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-774">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-775">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-775">The authentication failed.</span></span> <span data-ttu-id="d7689-776">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-776">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-777">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-777">The authentication failed.</span></span> <span data-ttu-id="d7689-778">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-778">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-779">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-779">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-780">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-780">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-781"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-781">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-782">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-782">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-783">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-783">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-784">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-784">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-785">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-785">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-786">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-786">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-787">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-787">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="d7689-788">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-788">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-789">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-789">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-790">인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-790">The authentication process uses the specified server credentials and authentication options.</span></span> <span data-ttu-id="d7689-791">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-791">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-792">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-792">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-793">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-793">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-794">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-794">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-795">성공적으로 인증 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-795">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-796">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-796">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-797">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-797">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-798">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-798">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-799">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-799">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="d7689-800">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-800">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-801">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-801">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-802">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-802">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-803">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-803">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-804"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-804"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-805"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-805"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-806">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-806">The authentication failed.</span></span> <span data-ttu-id="d7689-807">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-807">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-808">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-808">The authentication failed.</span></span> <span data-ttu-id="d7689-809">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-809">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-810">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-810">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-811">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-811">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-812">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-812">-or-</span></span> 
<span data-ttu-id="d7689-813">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-813">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-814">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-814">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-815">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-815">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7689-816">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-816">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="d7689-817">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="d7689-817">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="d7689-818">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-818">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="d7689-819">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-819">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="d7689-820">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-820">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="d7689-821">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-821">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-822">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-822">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-823">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-823">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-824">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-824">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-825">클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-825">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="d7689-826">인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-826">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span> <span data-ttu-id="d7689-827">이 메서드는 차단되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-827">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="d7689-828">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-828">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-829">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-829">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="d7689-830">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-830">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="d7689-831">성공적으로 인증 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-831">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="d7689-832">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-832">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="d7689-833">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-833">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="d7689-834">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-834">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-835">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-835">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="d7689-836">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-836">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="d7689-837">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-837">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-838">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-838">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-839">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-839">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-840">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-840">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-841"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-841">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-842"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-842"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7689-843"><paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-843"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-844">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-844">The authentication failed.</span></span> <span data-ttu-id="d7689-845">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-845">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-846">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-846">The authentication failed.</span></span> <span data-ttu-id="d7689-847">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-847">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-848">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-848">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="d7689-849">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-849">-or-</span></span> 
<span data-ttu-id="d7689-850">이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-850">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="d7689-851">서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-851">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-852">Windows 95 및 Windows 98이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-852">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-853">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-853">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="d7689-854"><paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-854">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="d7689-855">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="d7689-855">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="d7689-856">스트림에서 읽은 바이트를 받는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-856">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="d7689-857">이 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-857">The zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="d7689-858">스트림에서 읽을 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-858">The maximum number of bytes to read from the stream.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-859">읽기 작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-859">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-860">읽기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-860">A user-defined object containing information about the read operation.</span></span> <span data-ttu-id="d7689-861">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-861">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-862">스트림에서 데이터를 읽어 지정된 배열에 저장하는 비동기 읽기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-862">Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="d7689-863">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-863">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-864">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우 읽기 작업 내부 스트림에서 데이터를 읽고, 데이터의 무결성을 검사 및 암호를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-864">If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.</span></span> <span data-ttu-id="d7689-865">보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 하는 경우이 메서드는 기본 스트림의 비동기 읽기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-865">If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="d7689-866">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-866">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-867">작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-867">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="d7689-868">호출 하 여 비동기 읽기 작업을 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-868">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method.</span></span> <span data-ttu-id="d7689-869">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-869">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-870">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-870">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-871"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 읽기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-871">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations.</span></span> <span data-ttu-id="d7689-872">읽는 동안 다른 작업 같은 스트림에서 실행 하는 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-872">If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="d7689-873">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-873">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-874">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-874">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-875">다음 코드 예제에서는 비동기 읽기 작업을 시작 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-875">The following code example demonstrates starting an asynchronous read operation.</span></span> <span data-ttu-id="d7689-876">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-876">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-877"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-877"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-878"><paramref name="offset" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-878"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="d7689-879">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-879">-or-</span></span> 
 <span data-ttu-id="d7689-880"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-880"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="d7689-881">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-881">-or-</span></span> 
 <span data-ttu-id="d7689-882"><paramref name="offset" /> + <paramref name="count" />가 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-882"><paramref name="offset" /> plus <paramref name="count" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-883">읽기 작업이 실패한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-883">The read operation failed.</span></span>  
  
<span data-ttu-id="d7689-884">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-884">-or-</span></span> 
<span data-ttu-id="d7689-885">암호화를 사용 중이지만 데이터를 해독할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-885">Encryption is in use, but the data could not be decrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-886">읽기 작업을 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-886">There is already a read operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-887">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-887">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-888">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-888">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="d7689-889">스트림에 쓸 바이트를 제공하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-889">A <see cref="T:System.Byte" /> array that supplies the bytes to be written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="d7689-890">스트림에 쓸 바이트를 읽기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-890">The zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="d7689-891"><paramref name="buffer" />에서 읽을 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-891">An <see cref="T:System.Int32" /> value that specifies the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="d7689-892">쓰기 작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-892">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="d7689-893">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-893">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="d7689-894">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-894">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="d7689-895">지정된 버퍼에서 스트림에 <see cref="T:System.Byte" />를 쓰는 비동기 쓰기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-895">Begins an asynchronous write operation that writes <see cref="T:System.Byte" />s from the specified buffer to the stream.</span></span></summary>
        <returns><span data-ttu-id="d7689-896">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-896">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-897">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우이 메서드 버퍼에서 데이터를 읽고, 암호화, 서명, 또는 암호화, 서명 및 기본 스트림을 사용 하 여 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-897">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="d7689-898">보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 하는 경우이 메서드는 기본 스트림의 비동기 쓰기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-898">If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="d7689-899">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-899">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="d7689-900">작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-900">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="d7689-901">호출 하 여 비동기 읽기 작업을 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndWrite%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-901">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method.</span></span> <span data-ttu-id="d7689-902">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-902">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="d7689-903">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="d7689-903">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="d7689-904"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-904">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="d7689-905">같은 스트림에서 다른 쓰기 작업이 이미 실행 되는 동안 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-905">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="d7689-906">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-906">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-907">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-907">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-908">다음 코드 예제에서는 비동기 쓰기 작업을 시작 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-908">The following code example demonstrates beginning an asynchronous write operation.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 <span data-ttu-id="d7689-909">다음 메서드는 작업이 완료 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-909">The following method is called when the operation completes.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-910"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-910"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-911"><paramref name="offset is less than 0" />.</span><span class="sxs-lookup"><span data-stu-id="d7689-911"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="d7689-912">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-912">-or-</span></span> 
 <span data-ttu-id="d7689-913"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-913"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="d7689-914">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-914">-or-</span></span> 
 <span data-ttu-id="d7689-915"><paramref name="offset" />과 count의 합이 <paramref name="buffer" />의 길이보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-915"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-916">쓰기 작업이 실패했습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-916">The write operation failed.</span></span>  
  
<span data-ttu-id="d7689-917">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-917">-or-</span></span> 
<span data-ttu-id="d7689-918">암호화를 사용 중이지만 데이터를 암호화할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-918">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-919">쓰기 작업을 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-919">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-920">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-920">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-921">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-921">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-922">내부 스트림을 읽을 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-922">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is readable.</span></span></summary>
        <value><span data-ttu-id="d7689-923">인증이 수행되고 내부 스트림을 읽을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-923"><see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-924">인증이 성공적으로 수행 되 면이 속성 호출에서 반환 된 값을 반환 합니다 <xref:System.IO.Stream.CanRead%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-924">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-925">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-925">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-926">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-926">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-927">내부 스트림을 검색할 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-927">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is seekable.</span></span></summary>
        <value><span data-ttu-id="d7689-928">이 속성은 항상 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-928">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-929">위치를 설정 하지 않아야 합니다 <xref:System.Net.Security.NegotiateStream> 개체 또는 해당 기본 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-929">You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream.</span></span> <span data-ttu-id="d7689-930">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-930">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-931">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-931">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-932">내부 스트림에 제한 시간을 설정할 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-932">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream supports time-outs.</span></span></summary>
        <value><span data-ttu-id="d7689-933">내부 스트림이 제한 시간을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-933"><see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-934">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.CanTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-934">This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-935">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-935">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-936">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-936">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-937">내부 스트림에 쓸 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-937">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is writable.</span></span></summary>
        <value><span data-ttu-id="d7689-938">인증이 수행되고 내부 스트림에 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-938"><see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-939">인증이 성공적으로 수행 되 면이 속성 호출에서 반환 된 값을 반환 합니다 <xref:System.IO.Stream.CanWrite%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-939">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-940">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-940">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-941">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-941">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="d7689-942">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-942"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="d7689-943"><see cref="T:System.Net.Security.NegotiateStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-943">Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-944">이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-944">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="d7689-945">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-945">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="d7689-946"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-946"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="d7689-947">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.Net.Security.NegotiateStream> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-947">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references.</span></span> <span data-ttu-id="d7689-948">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-948">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d7689-949">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-949">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="d7689-950">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-950">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="d7689-951">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-951">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="d7689-952">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-952">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="negotiateStream.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d7689-953"><see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-953">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></param>
        <summary><span data-ttu-id="d7689-954"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />를 호출하여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-954">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-955">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-955">If the operation has not completed, this method blocks until it does.</span></span> <span data-ttu-id="d7689-956">때 인증에 성공 하면 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-956">When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-957">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-957">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-958">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-958">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-959">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-959">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="d7689-960">이 작업을 동기적으로 수행 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-960">To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-961"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-961"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-962"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-962"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-963">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-963">The authentication failed.</span></span> <span data-ttu-id="d7689-964">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-964">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-965">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-965">The authentication failed.</span></span> <span data-ttu-id="d7689-966">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-966">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-967">완료할 보류 상태의 클라이언트 인증이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-967">There is no pending client authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d7689-968"><see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-968">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></param>
        <summary><span data-ttu-id="d7689-969"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />를 호출하여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-969">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-970">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-970">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="d7689-971">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-971">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="d7689-972">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-972">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="d7689-973">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-973">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="d7689-974">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-974">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="d7689-975">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-975">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-976"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-976"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-977"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-977"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="d7689-978">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-978">The authentication failed.</span></span> <span data-ttu-id="d7689-979">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-979">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="d7689-980">인증이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="d7689-980">The authentication failed.</span></span> <span data-ttu-id="d7689-981">이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-981">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-982">완료할 보류 상태의 인증이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-982">There is no pending authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d7689-983"><see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-983">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="d7689-984"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 시작한 비동기 읽기 작업을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-984">Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="d7689-985">내부 스트림에서 읽은 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-985">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-986">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-986">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="d7689-987">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-987">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="d7689-988">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-988">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-989">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-989">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-990">다음 코드 예제에서는 읽기 작업을 비동기 종료 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-990">The following code example demonstrates ending an asynchronous read operation.</span></span> <span data-ttu-id="d7689-991">작업을 시작 하는 방법을 보여 주는 예제를 참조 하세요. <xref:System.Net.Security.NegotiateStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-991">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-992"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-992"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-993"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출했지만 asyncResult가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-993">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-994">완료할 보류 상태의 읽기 작업이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-994">There is no pending read operation to complete.</span></span>

<span data-ttu-id="d7689-995">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-995">-or-</span></span>

<span data-ttu-id="d7689-996">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-996">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-997">읽기 작업이 실패한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-997">The read operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d7689-998"><see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-998">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="d7689-999"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 시작한 비동기 쓰기 작업을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-999">Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1000">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1000">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="d7689-1001">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1001">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-1002">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1002">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="d7689-1003">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1003">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1004">다음 코드 예제에서는 비동기 쓰기 작업을 완료 하기 위해 호출 되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1004">The following code example demonstrates a method that is called to complete the asynchronous write operation.</span></span> <span data-ttu-id="d7689-1005">작업을 시작 하는 방법을 보여 주는 예제를 참조 하세요. <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1005">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-1006"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1006"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-1007"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출했지만 asyncResult가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1007">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-1008">완료할 보류 상태의 쓰기 작업이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1008">There is no pending write operation to complete.</span></span>

<span data-ttu-id="d7689-1009">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-1009">-or-</span></span>

<span data-ttu-id="d7689-1010">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1010">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-1011">쓰기 작업이 실패했습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1011">The write operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7689-1012">버퍼링된 모든 데이터를 내부 디바이스에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1012">Causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1013">이 메서드를 호출 <xref:System.IO.Stream.Flush%2A> 내부 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1013">This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1014">다음 코드 예제에서는 스트림을 플러시하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1014">The following code example demonstrates flushing the stream.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1015">서버에서 클라이언트의 자격 증명을 사용하는 방법을 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1015">Gets a value that indicates how the server can use the client's credentials.</span></span></summary>
        <value><span data-ttu-id="d7689-1016"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1016">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1017">이 메서드를 호출 하기 전에 성공적으로 인증 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1017">You must successfully authenticate before calling this method.</span></span> <span data-ttu-id="d7689-1018">클라이언트 중 하나를 호출 하 여 인증을 요청할 때 가장 수준을 지정 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1018">Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="d7689-1019">지정 하지 않고 인증 하는 경우는 <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1019">If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1020">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1020">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-1021">인증이 실패하거나 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1021">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1022">인증이 성공했는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1022">Gets a <see cref="T:System.Boolean" /> value that indicates whether authentication was successful.</span></span></summary>
        <value><span data-ttu-id="d7689-1023">인증이 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1023"><see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1024">호출 하 여 클라이언트를 인증 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1024">Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="d7689-1025">서버를 호출 하 여 인증 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1025">Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1026">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1026">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1027">이 <see cref="T:System.Boolean" />에서 데이터 암호화를 사용하는지 여부를 나타내는 <see cref="T:System.Net.Security.NegotiateStream" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1027">Gets a <see cref="T:System.Boolean" /> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream" /> uses data encryption.</span></span></summary>
        <value><span data-ttu-id="d7689-1028">네트워크를 통해 전송하기 전에 데이터를 암호화하고 원격 엔드포인트에 도달한 후 해독하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1028"><see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1029">암호화 된 데이터의 개인 정보를 보호할 수 있습니다. 즉,는 전송 중에 데이터를 해독할 수 없으므로 제 3 자에서 확인 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1029">Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1030">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1030">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1031">서버와 클라이언트 모두 인증되었는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1031">Gets a <see cref="T:System.Boolean" /> value that indicates whether both the server and the client have been authenticated.</span></span></summary>
        <value><span data-ttu-id="d7689-1032">서버가 인증되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1032"><see langword="true" /> if the server has been authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1033">클라이언트 인증에 대 한 자격 증명을 제공 하도록 서버를 원하는 경우 클라이언트에서 상호 인증을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1033">Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.</span></span> <span data-ttu-id="d7689-1034">기본적으로 클라이언트는 상호 인증을 요청합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1034">By default, clients request mutual authentication.</span></span>  
  
 <span data-ttu-id="d7689-1035">협상 프로토콜은 클라이언트와 서버에서 지 원하는 보안 프로토콜에 따라 NTLM 이나 Kerberos를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1035">The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.</span></span> <span data-ttu-id="d7689-1036">NTLM 상호 인증을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1036">NTLM does not support mutual authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1037">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1037">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1038">이 <see cref="T:System.Boolean" />에서 사용하는 연결의 로컬측이 서버로 인증되었는지 여부를 나타내는 <see cref="T:System.Net.Security.NegotiateStream" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1038">Gets a <see cref="T:System.Boolean" /> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream" /> was authenticated as the server.</span></span></summary>
        <value><span data-ttu-id="d7689-1039">로컬 엔드포인트가 인증된 연결의 서버측으로 인증되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1039"><see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1040">이 속성을 반환 하는 경우 인증이 실패 하거나 발생 하지 않은, `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1040">If authentication failed or did not occur, this property returns `false`.</span></span>  
  
 <span data-ttu-id="d7689-1041">서버를 인증 하려면 호출을 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1041">To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1042">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1042">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1043">이 스트림을 사용하여 보내는 데이터에 서명할지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1043">Gets a <see cref="T:System.Boolean" /> value that indicates whether the data sent using this stream is signed.</span></span></summary>
        <value><span data-ttu-id="d7689-1044">데이터를 전송하기 전에 서명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1044"><see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1045">데이터의 무결성을 보호 하는 데 도움이 데이터 서명 즉, 수신자가 데이터 전송 중에 사용 하 여 훼손 되었는지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1045">Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1046">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1046">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1047">내부 스트림의 길이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1047">Gets the length of the underlying stream.</span></span></summary>
        <value><span data-ttu-id="d7689-1048">내부 스트림의 길이를 지정하는 <see cref="T:System.Int64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1048">A <see cref="T:System.Int64" /> that specifies the length of the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1049">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Length%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1049">This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-1050">내부 스트림을 검색할 수 없는 경우이 속성은 일반적으로 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1050">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="d7689-1051">기본 스트림의 런타임 형식을 throw 되는 예외의 런타임 형식이 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1051">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1052">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1052">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-1053">내부 스트림이 <see cref="T:System.Net.Sockets.NetworkStream" />일 때 이 속성의 값을 가져올 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1053">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1054">내부 스트림 내의 현재 위치를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1054">Gets or sets the current position in the underlying stream.</span></span></summary>
        <value><span data-ttu-id="d7689-1055">내부 스트림 내의 현재 위치를 지정하는 <see cref="T:System.Int64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1055">A <see cref="T:System.Int64" /> that specifies the current position in the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1056">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Position%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1056">This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-1057">내부 스트림을 검색할 수 없는 경우이 속성은 일반적으로 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1057">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="d7689-1058">기본 스트림의 런타임 형식을 throw 되는 예외의 런타임 형식이 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1058">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-1059">이 속성 설정이 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1059">Setting this property is not supported.</span></span>  
  
<span data-ttu-id="d7689-1060">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-1060">-or-</span></span> 
<span data-ttu-id="d7689-1061">내부 스트림이 <see cref="T:System.Net.Sockets.NetworkStream" />일 때 이 속성의 값을 가져올 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1061">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="d7689-1062">스트림에서 읽은 바이트를 받는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1062">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="d7689-1063">이 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)가 포함된 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1063">A <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="d7689-1064">스트림에서 읽을 최대 바이트 수가 포함된 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1064">A <see cref="T:System.Int32" /> containing the maximum number of bytes to read from the stream.</span></span></param>
        <summary><span data-ttu-id="d7689-1065">이 스트림에서 데이터를 읽어 지정된 배열에 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1065">Reads data from this stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="d7689-1066">내부 스트림에서 읽은 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1066">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span> <span data-ttu-id="d7689-1067">읽을 데이터가 더 이상 없으면 0이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1067">When there is no more data to be read, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1068">메서드는 최대 읽습니다 `count` 현재에서는 바이트 스트림 및에 저장 합니다 `buffer` 부터 `offset`합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1068">The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.</span></span>  
  
 <span data-ttu-id="d7689-1069">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1069">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-1070">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1070">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="d7689-1071">이 작업을 비동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1071">To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1072">다음 코드 예제에서 읽는 방법을 보여 줍니다는 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1072">The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-1073">읽기 작업이 실패한 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1073">The read operation failed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-1074">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1074">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-1075"><see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1075">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operation is already in progress.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1076">읽기 작업에서 데이터 대기를 차단하는 시간을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1076">Gets or sets the amount of time a read operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="d7689-1077">읽기 작업이 실패할 때까지 걸리는 시간을 지정하는 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1077">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a read operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1078">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1078">This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-1079">이 속성을 설정 하는 경우는 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 값이 지정된 된 값으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1079">When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.</span></span>  
  
 <span data-ttu-id="d7689-1080">내부 스트림이 경우는 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> 밀리초에서 이며로 설정 된 <xref:System.Threading.Timeout.Infinite> 는 읽기 작업 시간 초과 되지 않습니다 있도록 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1080">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1081">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1081">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1082">인증된 이 스트림을 공유하는 원격 대상의 ID 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1082">Gets information about the identity of the remote party sharing this authenticated stream.</span></span></summary>
        <value><span data-ttu-id="d7689-1083">원격 엔드포인트의 ID를 설명하는 <see cref="T:System.Security.Principal.IIdentity" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1083">An <see cref="T:System.Security.Principal.IIdentity" /> object that describes the identity of the remote endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1084">클라이언트에서 액세스 하는 경우 반환을 <xref:System.Security.Principal.GenericIdentity> 주체 이름 SPN (서비스) 서버 및 사용 하는 인증 프로토콜을 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1084">When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used.</span></span> <span data-ttu-id="d7689-1085">서버에서 액세스 하는 경우 반환을 <xref:System.Security.Principal.WindowsIdentity> 는 클라이언트에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1085">When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client.</span></span> <span data-ttu-id="d7689-1086">경우는 <xref:System.Security.Principal.WindowsIdentity> 는 사용할 수 없는 클라이언트 정보를 서버에 반환 됩니다는 <xref:System.Security.Principal.GenericIdentity>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1086">If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1087">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1087">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-1088">인증이 실패하거나 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1088">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="d7689-1089">이 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1089">This value is ignored.</span></span></param>
        <param name="origin"><span data-ttu-id="d7689-1090">이 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1090">This value is ignored.</span></span></param>
        <summary><span data-ttu-id="d7689-1091"><see cref="T:System.NotSupportedException" />을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1091">Throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="d7689-1092">항상 <see cref="T:System.NotSupportedException" />을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1092">Always throws a <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1093">이 메서드를 호출 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="d7689-1093">Do not call this method.</span></span> <span data-ttu-id="d7689-1094">이 상속 되지만 지원 되지 않습니다 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1094">It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-1095"><see cref="T:System.Net.Security.NegotiateStream" />에서 검색을 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1095">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d7689-1096">스트림의 길이를 지정하는 <see cref="T:System.Int64" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1096">An <see cref="T:System.Int64" /> value that specifies the length of the stream.</span></span></param>
        <summary><span data-ttu-id="d7689-1097">내부 스트림의 길이를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1097">Sets the length of the underlying stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="d7689-1098">스트림에 쓸 바이트를 제공하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1098">A <see cref="T:System.Byte" /> array that supplies the bytes written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="d7689-1099">스트림에 쓸 바이트를 읽기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)가 포함된 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1099">An <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="d7689-1100"><paramref name="buffer" />에서 읽을 바이트 수가 포함된 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1100">A <see cref="T:System.Int32" /> containing the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="d7689-1101">지정된 버퍼와 오프셋을 사용하여 지정된 수의 <see cref="T:System.Byte" />를 내부 스트림에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1101">Write the specified number of <see cref="T:System.Byte" />s to the underlying stream using the specified buffer and offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1102">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우이 메서드 버퍼에서 데이터를 읽고, 암호화, 서명, 또는 암호화, 서명 및 기본 스트림을 사용 하 여 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1102">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="d7689-1103">이 메서드를 호출 하는 경우 보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 <xref:System.IO.Stream.Write%2A> 내부 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1103">If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.</span></span>  
  
 <span data-ttu-id="d7689-1104">이 메서드는 쓰기 작업이 완료 될 때 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1104">This method blocks while the write operation completes.</span></span> <span data-ttu-id="d7689-1105">작업이 완료 될 때까지 차단 하지 않으려면, 사용 된 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1105">To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
 <span data-ttu-id="d7689-1106">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1106">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="d7689-1107">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d7689-1107">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="d7689-1108"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1108">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="d7689-1109">같은 스트림에서 다른 쓰기 작업이 이미 실행 되는 동안 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1109">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1110">다음 코드 예제에서는 쓸은 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1110">The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7689-1111"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1111"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7689-1112"><paramref name="offset is less than 0" />.</span><span class="sxs-lookup"><span data-stu-id="d7689-1112"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="d7689-1113">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-1113">-or-</span></span> 
 <span data-ttu-id="d7689-1114"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1114"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="d7689-1115">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-1115">-or-</span></span> 
 <span data-ttu-id="d7689-1116"><paramref name="offset" />과 count의 합이 <paramref name="buffer" />의 길이보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1116"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="d7689-1117">쓰기 작업이 실패했습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1117">The write operation failed.</span></span>  
  
<span data-ttu-id="d7689-1118">또는</span><span class="sxs-lookup"><span data-stu-id="d7689-1118">-or-</span></span> 
<span data-ttu-id="d7689-1119">암호화를 사용 중이지만 데이터를 암호화할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1119">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7689-1120">쓰기 작업을 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1120">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d7689-1121">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1121">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7689-1122">인증이 수행되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="d7689-1122">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7689-1123">쓰기 작업에서 데이터 대기를 차단하는 시간을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1123">Gets or sets the amount of time a write operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="d7689-1124">쓰기 작업이 실패할 때까지 걸리는 시간을 지정하는 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1124">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a write operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7689-1125">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1125">This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="d7689-1126">집합 작업에 대 한 지정 된 값을 설정 합니다 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1126">For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.</span></span>  
  
 <span data-ttu-id="d7689-1127">기본 스트림이 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> 밀리초에서 이며로 설정 되어 <xref:System.Threading.Timeout.Infinite> 기본적으로 쓰기 작업 시간이 초과 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1127">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7689-1128">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="d7689-1128">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>