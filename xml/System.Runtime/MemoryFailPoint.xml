<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a9c2330efff55bad4b528703d46cb25d46c27bf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58714178" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3c2db-101">작업을 실행하기 전에 메모리 리소스가 충분한지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="3c2db-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3c2db-103">이 클래스는 고급 개발에 사용 하 여 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="3c2db-104">인스턴스를 만들지는 <xref:System.Runtime.MemoryFailPoint> 클래스는 메모리 게이트를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="3c2db-105">메모리 게이트는 많은 양의 메모리가 필요한 작업을 시작 하기 전에 리소스가 충분 한지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="3c2db-106">결과 검사 실패는 <xref:System.InsufficientMemoryException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="3c2db-107">이 예외는 작업을 시작 하는 것을 방지 하며 리소스 부족으로 인해 오류의 가능성을 줄여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="3c2db-108">이 사용 하도록이 설정 하면 성능을 저하 시킬 않으려면는 <xref:System.OutOfMemoryException> 예외 및 잘못 된 코드의 임의 위치에서 예외 처리에서 발생할 수 있는 상태 손상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3c2db-109">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="3c2db-110">형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="3c2db-111">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="3c2db-112">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="3c2db-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="3c2db-113">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="3c2db-114">Throw 하 여는 <xref:System.InsufficientMemoryException> 예외를 응용 프로그램 작업을 완료할 수 될 예상 사이의 응용 프로그램 상태 손상 되었을 수 있습니다는 부분적으로 완료 된 작업을 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="3c2db-115">이렇게 하면 현재 언로드 필요할 수 있는 비관적 에스컬레이션 정책의 빈도를 줄이려면 응용 프로그램 <xref:System.AppDomain> 프로세스를 재생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="3c2db-116"><xref:System.Runtime.MemoryFailPoint> 충분 한 메모리 및 연속 된 가상 주소 공간 힙 모든 가비지 컬렉션에서 사용할 수 있는 고 스왑 파일의 크기를 늘릴 수 있습니다를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="3c2db-117"><xref:System.Runtime.MemoryFailPoint> 메모리의 장기 가용성에 대 한 게이트를 하지만 호출자의 수명 동안 보장 되지 않습니다는 항상 사용 해야 합니다 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 와 관련 된 리소스를 확인 하는 방법 <xref:System.Runtime.MemoryFailPoint> 릴리스됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="3c2db-118">메모리 게이트를 사용 하려면 만들어야를 <xref:System.Runtime.MemoryFailPoint> 개체 및 메모리의 메가바이트 (MB)의 수를 지정 하면 다음 작업을 사용 하 여 예상 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="3c2db-119">충분 한 메모리를 사용할 수 없는 경우는 <xref:System.InsufficientMemoryException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="3c2db-120">생성자의 매개 변수는 양의 정수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="3c2db-121">음수 값을 발생 시킵니다는 <xref:System.ArgumentOutOfRangeException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="3c2db-122"><xref:System.Runtime.MemoryFailPoint> 16MB의 세분성에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="3c2db-123">16MB 보다 작은 모든 값은 16MB으로 처리 하 고 다른 값으로 최대 16MB의 배수로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c2db-124"><xref:System.Runtime.MemoryFailPoint> 메모리 부족으로 인 한 손상을 방지 하려면 자체를 응용 프로그램을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="3c2db-125">어휘 범위 내에서 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="3c2db-126">다음 예제에서는 작업 큐에 항목을 처리 하는 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="3c2db-127">사용 가능한 메모리 리소스를 사용 하 여이 확인은 각 스레드를 시작 하기 전에 <xref:System.Runtime.MemoryFailPoint>입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="3c2db-128">예외가 throw 되 면 main 메서드에 다음 스레드를 시작 하기 전에 사용 가능한 메모리를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3c2db-129">비관리 코드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-129">for calling unmanaged code.</span></span> <span data-ttu-id="3c2db-130">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3c2db-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="3c2db-131">보안 작업: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="3c2db-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="3c2db-132">필요한 메모리 크기(MB)입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-132">The required memory size, in megabytes.</span></span> <span data-ttu-id="3c2db-133">양수여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-133">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="3c2db-134">성공적으로 실행하는 데 필요한 메모리 양을 지정하여 <see cref="T:System.Runtime.MemoryFailPoint" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c2db-135">응용 프로그램에서 작업 항목을 처리 하는 데 사용 되는 메모리의 양은 알려지고 실험적으로 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="3c2db-136">응용 프로그램 요청을 처리 하는 데 필요한 메모리 양을 예측을 하려면 사용을 고려 합니다 <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> 작업 항목을 처리 하는 메서드를 호출 후 및 하기 전에 사용 가능한 메모리의 양을 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="3c2db-137">참조를 <xref:System.Runtime.MemoryFailPoint> 클래스에 대 한 값을 동적으로 결정 하는 코드 예제는 `sizeInMegabytes` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c2db-138">다음 예제에서는 메서드를 실행할 때 필요한 메모리 양을 결정 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="3c2db-139">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.MemoryFailPoint> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3c2db-140">지정된 메모리 크기가 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="3c2db-140">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="3c2db-141">게이트로 보호되는 코드의 실행을 시작하는 데 필요한 메모리가 부족한 경우</span><span class="sxs-lookup"><span data-stu-id="3c2db-141">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3c2db-142">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3c2db-143">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c2db-144"><see cref="T:System.Runtime.MemoryFailPoint" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c2db-145"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 사용을 마치면 <xref:System.Runtime.MemoryFailPoint>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="3c2db-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 메서드를 사용하면 <xref:System.Runtime.MemoryFailPoint>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="3c2db-147">호출한 후 <xref:System.Runtime.MemoryFailPoint>에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Runtime.MemoryFailPoint> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Runtime.MemoryFailPoint> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="3c2db-148">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3c2db-149"><xref:System.Runtime.MemoryFailPoint.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Runtime.MemoryFailPoint>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="3c2db-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="3c2db-150">이렇게 하지 않으면 가비지 컬렉션이 <xref:System.Runtime.MemoryFailPoint> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c2db-151">가비지 컬렉션기에서 <see cref="T:System.Runtime.MemoryFailPoint" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3c2db-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c2db-152">가비지 수집기가 호출 된 <xref:System.Runtime.MemoryFailPoint.Finalize%2A> 현재 개체가 종료 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="3c2db-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>