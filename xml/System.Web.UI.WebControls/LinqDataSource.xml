<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7806dfca4e32e99c40ed18a7e3648eca3e1119d6" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58875179" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ad52c-101">태그 텍스트를 통해 데이터 개체의 데이터를 검색 및 수정하기 위해 ASP.NET 웹 페이지에서 LINQ(통합 언어 쿼리)를 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-101">Enables the use of Language-Integrated Query (LINQ) in an ASP.NET Web page through markup text to retrieve and modify data from a data object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-102">항목 내용</span><span class="sxs-lookup"><span data-stu-id="ad52c-102">In this topic:</span></span>  
  
-   [<span data-ttu-id="ad52c-103">소개</span><span class="sxs-lookup"><span data-stu-id="ad52c-103">Introduction</span></span>](#introduction)  
  
-   [<span data-ttu-id="ad52c-104">작업 순서</span><span class="sxs-lookup"><span data-stu-id="ad52c-104">Order of Operations</span></span>](#order_of_operations)  
  
-   [<span data-ttu-id="ad52c-105">데이터 정렬</span><span class="sxs-lookup"><span data-stu-id="ad52c-105">Ordering Data</span></span>](#ordering_data)  
  
-   [<span data-ttu-id="ad52c-106">데이터 그룹화</span><span class="sxs-lookup"><span data-stu-id="ad52c-106">Grouping Data</span></span>](#grouping_data)  
  
-   [<span data-ttu-id="ad52c-107">데이터 수정</span><span class="sxs-lookup"><span data-stu-id="ad52c-107">Data Modifications</span></span>](#data_modifications)  
  
-   [<span data-ttu-id="ad52c-108">런타임에 값을 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-108">Evaluating Values at Run Time</span></span>](#evaluating_value_at_run_time)  
  
-   [<span data-ttu-id="ad52c-109">저장된 프로시저 사용</span><span class="sxs-lookup"><span data-stu-id="ad52c-109">Working with Stored Procedures</span></span>](#working_with_stored_procedures)  
  
-   [<span data-ttu-id="ad52c-110">선언 구문</span><span class="sxs-lookup"><span data-stu-id="ad52c-110">Declarative Syntax</span></span>](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a><span data-ttu-id="ad52c-111">소개</span><span class="sxs-lookup"><span data-stu-id="ad52c-111">Introduction</span></span>  
 <span data-ttu-id="ad52c-112">언어 통합 쿼리 (LINQ)는 탐색, 필터 및 프로젝션 작업에서 선언적 방식으로 표현할 수 있도록 하는 쿼리 연산자 집합을 정의 하는 쿼리 구문입니다. NET 기반 프로그래밍 언어입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-112">Language-Integrated Query (LINQ) is a query syntax that defines a set of query operators that enable traversal, filter, and projection operations to be expressed in a declarative way in any .NET-based programming language.</span></span> <span data-ttu-id="ad52c-113">데이터 개체는 메모리 내 데이터 컬렉션 또는 데이터베이스에서 데이터를 나타내는 개체를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-113">The data object can be an in-memory data collection or an object that represents data from a database.</span></span> <span data-ttu-id="ad52c-114">검색 하거나 각 작업에 대해 SQL 명령을 작성 하지 않고도 데이터를 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-114">You can retrieve or modify the data without having to write SQL commands for each operation.</span></span>  
  
 <span data-ttu-id="ad52c-115"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 사용 하면 태그 텍스트의 속성을 설정 하 여 ASP.NET 웹 페이지에서 LINQ를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-115">The <xref:System.Web.UI.WebControls.LinqDataSource> control enables you to use LINQ in an ASP.NET Web page by setting properties in markup text.</span></span> <span data-ttu-id="ad52c-116"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 명령을 자동으로 생성할 LINQ to SQL 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-116">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically generate the data commands.</span></span> <span data-ttu-id="ad52c-117">LINQ to SQL에 대 한 자세한 내용은 참조 하세요. [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-117">For more information about LINQ to SQL, see [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="ad52c-118">설정 하는 메모리 내 데이터 컬렉션에서 데이터를 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터 컬렉션을 포함 하는 클래스에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-118">When you are retrieving data from an in-memory data collection, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that contains the data collection.</span></span> <span data-ttu-id="ad52c-119">설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터 컬렉션을 반환 하는 필드나 속성을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-119">You set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property or field that returns the data collection.</span></span> <span data-ttu-id="ad52c-120">예를 들어, 클래스가 있을 `Person` 라는 속성을 포함 하는 `FavoriteCities` 문자열 값의 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-120">For example, you might have a class named `Person` that contains a property named `FavoriteCities` that returns an array of string values.</span></span> <span data-ttu-id="ad52c-121">설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성을 `Person` 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 `FavoriteCities`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-121">In that case, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to `Person` and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to `FavoriteCities`.</span></span>  
  
 <span data-ttu-id="ad52c-122">데이터베이스를 쿼리 하는 경우 데이터베이스와 테이블을 나타내는 엔터티 클래스를 먼저 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-122">When you are querying a database, you must first create entity classes that represent the database and its tables.</span></span> <span data-ttu-id="ad52c-123">사용할 수는 [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] 또는 SqlMetal.exe 유틸리티를 이러한 클래스를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-123">You can use the [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] or the SqlMetal.exe utility to generate these classes.</span></span> <span data-ttu-id="ad52c-124">설정한 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터베이스를 나타내는 클래스에 속성 설정 및는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터베이스 테이블을 나타내는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-124">You then set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that represents the database and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the database table.</span></span>  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a><span data-ttu-id="ad52c-125">작업 순서</span><span class="sxs-lookup"><span data-stu-id="ad52c-125">Order of Operations</span></span>  
 <span data-ttu-id="ad52c-126"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 다음 순서 대로 데이터 작업을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-126">The <xref:System.Web.UI.WebControls.LinqDataSource> control applies data operations in the following order:</span></span>  
  
1.  <span data-ttu-id="ad52c-127">위치 (데이터 레코드를 반환할 지정).</span><span class="sxs-lookup"><span data-stu-id="ad52c-127">Where (specify which data records to return).</span></span>  
  
2.  <span data-ttu-id="ad52c-128">Order By (정렬)입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-128">Order By (sort).</span></span>  
  
3.  <span data-ttu-id="ad52c-129">Group By (값을 공유 하는 집계 데이터 레코드).</span><span class="sxs-lookup"><span data-stu-id="ad52c-129">Group By (aggregate data records that share values).</span></span>  
  
4.  <span data-ttu-id="ad52c-130">(그룹화 정렬 데이터)에서 그룹을 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-130">Order Groups By (sort grouped data).</span></span>  
  
5.  <span data-ttu-id="ad52c-131">(필드 또는 반환할 속성을 지정)을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-131">Select (specify which fields or properties to return).</span></span>  
  
6.  <span data-ttu-id="ad52c-132">(사용자가 선택한 속성에 의해 정렬 데이터 레코드)을 자동으로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-132">Auto-sort (sort data records by a property that the user has selected).</span></span>  
  
7.  <span data-ttu-id="ad52c-133">자동 페이지 (사용자가 선택 된 데이터 레코드의 하위 집합 검색).</span><span class="sxs-lookup"><span data-stu-id="ad52c-133">Auto-page (retrieve a subset of data records that were selected by the user).</span></span>  
  
 <span data-ttu-id="ad52c-134">조건을 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 쿼리에서 반환 되는 데이터 레코드를 필터링 할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-134">You can add conditions to the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter the data records that are returned from a query.</span></span> <span data-ttu-id="ad52c-135">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 레코드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-135">If the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is not set, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves every record from the data object.</span></span>  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a><span data-ttu-id="ad52c-136">데이터 정렬</span><span class="sxs-lookup"><span data-stu-id="ad52c-136">Ordering Data</span></span>  
 <span data-ttu-id="ad52c-137">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성을 기준으로 정렬 하려면 반환된 된 데이터에서 속성의 이름을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-137">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify the names of properties from the returned data to sort by.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad52c-138">사용 하는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 하며 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 되어 `true`에서 값을 제공 해야 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-138">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="ad52c-139">기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-139">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="ad52c-140">값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에서.</span><span class="sxs-lookup"><span data-stu-id="ad52c-140">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a><span data-ttu-id="ad52c-141">데이터 그룹화</span><span class="sxs-lookup"><span data-stu-id="ad52c-141">Grouping Data</span></span>  
 <span data-ttu-id="ad52c-142">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 속성은 동일한 값이 있는 데이터 레코드를 통합 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-142">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used to consolidate data records that have the same values.</span></span> <span data-ttu-id="ad52c-143">데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 하 고 `It`, 동적으로 속성에서 만들어진를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-143">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-144">`Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성 값을 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-144">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="ad52c-145">예를 들어 명명 된 속성으로 그룹화 `Category`는 `Key` 속성의 모든 고유 값이 포함 됩니다는 `Category` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-145">For example, if you group by a property named `Category`, the `Key` property will contain all unique values in the `Category` property.</span></span> <span data-ttu-id="ad52c-146">`It` 속성은 데이터 그룹의 개별 레코드의 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-146">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="ad52c-147">반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-147">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="ad52c-148">예를 들어 명명 된 속성으로 그룹화 `Category`는 `It` 속성의 값을 공유 하는 모든 개별 레코드를 포함 합니다 `Category` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-148">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="ad52c-149">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 그룹화 된 데이터 정렬에 사용할 속성을 지정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-149">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify the properties to use for sorting the grouped data.</span></span> <span data-ttu-id="ad52c-150">데이터를 그룹화 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 그룹화 된 데이터 내에서 개별 레코드를 정렬 되는 방식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-150">When you group data, the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property specifies how the individual records within the grouped data are sorted.</span></span>  
  
 <span data-ttu-id="ad52c-151">기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 속성에 대 한 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-151">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves values for all the properties from a data object.</span></span> <span data-ttu-id="ad52c-152">사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 사용 가능한 속성의 하위 집합을 사용 하려는 경우 반환할 속성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-152">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to specify which properties to return if you want to work with a subset of available properties.</span></span> <span data-ttu-id="ad52c-153">Where, 후 선택 동작을 적용할 Order By, Group By 작업과 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-153">The Select operation is applied after the Where, Order By, and Group By operations.</span></span> <span data-ttu-id="ad52c-154">따라서 Select 절에는 별칭이 지정 된 이름의 만든 별칭 없으면 다른 절에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-154">Therefore, if you create an aliased name in a Select clause, the alias is not available in the other clauses.</span></span>  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a><span data-ttu-id="ad52c-155">데이터 수정</span><span class="sxs-lookup"><span data-stu-id="ad52c-155">Data Modifications</span></span>  
 <span data-ttu-id="ad52c-156">사용 하 여 데이터 수정 사용 되는지 여부를 지정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-156">You can specify whether data modifications are enabled by using the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, and <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> properties.</span></span> <span data-ttu-id="ad52c-157">데이터를 수정 하기 위한 사용자 인터페이스를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 바인딩된 컨트롤을 통해 같은 제공 일반적으로 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-157">The user interface for modifying data from a <xref:System.Web.UI.WebControls.LinqDataSource> control is typically provided through a data-bound control, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span> <span data-ttu-id="ad52c-158">설정 외에도 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 하려면 `true`, 다음과 같은 자동 데이터 수정 작업을 사용 하도록 설정 하는 데 필요한:</span><span class="sxs-lookup"><span data-stu-id="ad52c-158">In addition to setting <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> to `true`, the following conditions are required to enable automatic data modifications:</span></span>  
  
-   <span data-ttu-id="ad52c-159"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 값을 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-159">The <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="ad52c-160"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성 값을 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-160">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="ad52c-161">에 할당 되는 클래스를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-161">The class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="ad52c-162">에 할당 되는 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-162">The property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="ad52c-163">두 가지 방법으로 데이터 바인딩된 컨트롤에서 표시 되는 속성을 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-163">You can restrict which properties are displayed in a data-bound control in two ways.</span></span> <span data-ttu-id="ad52c-164">설정 하거나 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성의 속성 하위 집합을 추가 하 여 데이터 바인딩된 컨트롤에 대 한 필드를 정의할 수 <xref:System.Web.UI.WebControls.DataControlField> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-164">You can either set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties, or you can define the fields for a data-bound control by adding <xref:System.Web.UI.WebControls.DataControlField> controls.</span></span> <span data-ttu-id="ad52c-165">그러나 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성, 즉 자동 업데이트, 삽입 및 삭제 작업을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-165">However, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, it means that automatic update, insert, and delete operations cannot be enabled.</span></span> <span data-ttu-id="ad52c-166">사용 가능한 속성의 하위 집합을 사용 하는 동안 자동 데이터 수정을 활성화 하려는 경우 설정 하지 마십시오는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-166">If you want to enable automatic data modifications while you work with a subset of available properties, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-167">대신, 데이터 개체에서 모든 속성을 검색 하 고 데이터 바인딩된 컨트롤을 사용 하 여 표시 되는 작업을 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-167">Instead, retrieve all properties from the data object and manage which ones are displayed by using the data-bound control.</span></span> <span data-ttu-id="ad52c-168">사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 또는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 설정 해야 합니다 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-168">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> properties to `false`.</span></span> <span data-ttu-id="ad52c-169">이렇게 데이터 바인딩된 컨트롤을 편집 하 고 데이터를 삭제 하는 단추가 자동으로 포함 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-169">This prevents the data-bound control from automatically including buttons for editing and deleting the data.</span></span> <span data-ttu-id="ad52c-170">데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-170">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="ad52c-171">전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ad52c-171">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a><span data-ttu-id="ad52c-172">런타임에 값을 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-172">Evaluating Values at Run Time</span></span>  
 <span data-ttu-id="ad52c-173">값 순서 지정에 대해 런타임 시 평가를 필터링 또는 그룹화 값, 매개 변수를 추가할 수 있습니다 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>를 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-173">If you have to evaluate values at run time for ordering, filtering, or grouping values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collections.</span></span>  
  
 <span data-ttu-id="ad52c-174">기본값을 지정 하려는 경우에 매개 변수를 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-174">If you want to specify default values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="ad52c-175">데이터 작업이 실행 되기 전에 값을 수정 하거나 검사 하려는 경우를 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-175">If you want to examine or modify values before the data operation is executed, you can handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updating> events.</span></span> <span data-ttu-id="ad52c-176">사용자 입력을 기반으로 데이터 클래스의 속성을 설정할 때 발생 하는 유효성 검사 오류를 검사 또는 데이터 작업을 취소 하기 위해 이러한 이벤트를 처리할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-176">You can also handle these events in order to cancel the data operation or to examine validation errors that occurred when you set properties in the data class based on user input.</span></span>  
  
 <span data-ttu-id="ad52c-177">값을 검사 하려면 데이터 작업이 완료 된 후에 처리 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-177">To examine values after the data operation has finished, handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updated> events.</span></span>  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a><span data-ttu-id="ad52c-178">저장된 프로시저 사용</span><span class="sxs-lookup"><span data-stu-id="ad52c-178">Working with Stored Procedures</span></span>  
 <span data-ttu-id="ad52c-179">사용할 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 대 한 이벤트 처리기를 만들어 저장된 프로시저에서 데이터를 검색 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-179">You use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from a stored procedure by creating an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="ad52c-180">이벤트 처리기를 저장된 프로시저를 나타내는 데이터 컨텍스트 클래스의 메서드를 호출 하는 결과를 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-180">In the event handler, you call the method in the data context class that represents the stored procedure and set the result to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object.</span></span> <span data-ttu-id="ad52c-181">메서드에서 반환 되는 형식에 지정 된 형식과 일치 해야 사용 자동 업데이트, 삽입 및 데이터에 대 한 삭제 작업 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-181">If you want to enable automatic update, insert, and delete operations for the data, the type that is returned from the method must match the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="ad52c-182">데이터 컨텍스트 메서드를 만드는 방법에 대 한 자세한 내용은 참조 하세요. [방법: 저장 프로시저 및 함수에 매핑된 DataContext 메서드를 만듭니다(O/R 디자이너)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).</span><span class="sxs-lookup"><span data-stu-id="ad52c-182">For more information about creating data context methods, see [How to: Create DataContext methods mapped to stored procedures and functions (O/R Designer)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).</span></span>  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a><span data-ttu-id="ad52c-183">선언 구문</span><span class="sxs-lookup"><span data-stu-id="ad52c-183">Declarative Syntax</span></span>  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-184">다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 라는 엔터티 클래스에서 데이터를 검색 하는 컨트롤 `Products`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-184">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that retrieves data from an entity class named `Products`.</span></span> <span data-ttu-id="ad52c-185">엔터티 클래스를 사용 하 여 생성 되었는지는 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 또는 SqlMetal.exe 유틸리티입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-185">The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility.</span></span> <span data-ttu-id="ad52c-186"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성의 값이 있는 레코드만 반환는 `Price` 속성 50 자를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-186">The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50.</span></span> <span data-ttu-id="ad52c-187">A <xref:System.Web.UI.WebControls.GridView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-187">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="ad52c-188">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 업데이트, 삭제 및 데이터 원본에 레코드를 삽입할 수 있도록 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-188">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that enables users to update, delete, and insert records in the data source.</span></span> <span data-ttu-id="ad52c-189">A <xref:System.Web.UI.WebControls.DetailsView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하 고 사용자가 데이터를 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-189">A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control and enables users to see and modify the data.</span></span> <span data-ttu-id="ad52c-190">SQL 명령을 선택, 업데이트, 삭제 또는 레코드를 삽입 하기 위해 필요한 지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-190">Notice that no SQL commands are required in order to select, update, delete, or insert the records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 <span data-ttu-id="ad52c-191">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 웹 페이지에서 값을 기반으로 하는 데이터 개체를 설정 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-191">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="ad52c-192">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤로 두 열을 기준으로 그룹화 하도록 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-192">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="ad52c-193">합니다 `Key` 두 속성이 있는 개체를 참조 하는 속성 `ProductCategory` 고 `Color`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-193">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="ad52c-194">가 나타내는 개체 `It` 이름이 바뀐된 (별칭이 지정 됨)으로 `Products`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-194">The object represented by `It` is renamed (aliased) to `Products`.</span></span> <span data-ttu-id="ad52c-195">이름이 바뀐 `Products` 개체는 그룹의 개별 레코드의 컬렉션을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-195">The renamed `Products` object contains a collection of the individual records in a grouping.</span></span> <span data-ttu-id="ad52c-196">인스턴스마다에서 모든 열이 포함 됩니다는 `Products` 테이블입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-196">Each instance will contain all the columns from the `Products` table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="ad52c-197">다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.ListView> 에서 데이터를 표시 하는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 이전 예제에서 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-197">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="ad52c-198">하나의 <xref:System.Web.UI.WebControls.ListView> 그룹화 된 데이터와 다른 컨트롤이 표시 <xref:System.Web.UI.WebControls.ListView> 컨트롤 그룹에 속하는 제품의 개별 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-198">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="ad52c-199">중첩 된 데이터 바인딩된 컨트롤의 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 속성이 `Products`에 대 한 별칭인는 `It` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-199">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="ad52c-200">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="ad52c-200">LINQ to SQL</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-201"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-201">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-202"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> 컬렉션의 값에 따라 Order By 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-202">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates an Order By clause based on values in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> collection.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-203">경우는 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 Order By 절을 만들면이 고, 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-203">if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control creates the Order By clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-204">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-204">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-205">설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성을 `true`의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 값을 기준으로 하는 Order By 절을 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-205">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates an Order By clause that is based on the values in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-206"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 첫 번째 매개 변수에서 데이터를 정렬 하 고 또한 추가 각 매개 변수에 대 한 데이터를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-206">The <xref:System.Web.UI.WebControls.LinqDataSource> control sorts the data by the first parameter and then additionally sorts the data for each additional parameter.</span></span> <span data-ttu-id="ad52c-207">매개 변수가 포함 된 `null` 또는 Order By 절에 빈 값이 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-207">Parameters that contain `null` or an empty value are not included in the Order By clause.</span></span>  
  
 <span data-ttu-id="ad52c-208">설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 설정 되어 `true`파서가 Order By 절을 동적으로 만들기 때문에.</span><span class="sxs-lookup"><span data-stu-id="ad52c-208">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true`, because the parser dynamically creates the Order By clause.</span></span> <span data-ttu-id="ad52c-209">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외를 throw 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 설정 된 `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 값이 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-209">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-210">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-210">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> set to `true`.</span></span> <span data-ttu-id="ad52c-211">매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 에서 사용자 이름을 속성을 기반으로 데이터를 정렬 하는 컬렉션을 선택는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-211">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-212"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 컬렉션에 정의된 값을 기준으로 Where 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-212">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates a Where clause based on values defined in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-213">경우는 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 제어 Where 만들어집니다 절이 고, 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-213">if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control will create the Where clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-214">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-214">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-215">설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true`의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 위치를 동적으로 만듭니다 절에서 매개 변수에서는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-215">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-216">에 추가한 각 매개 변수를 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션에 있어야 해당 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 속성이 쿼리 되는 데이터 개체의 속성과 일치 하는 값으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-216">Each parameter that you add to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection must have its <xref:System.Web.UI.WebControls.Parameter.Name%2A> property set to a value that matches a property in the data object that is being queried.</span></span> <span data-ttu-id="ad52c-217">자동으로 생성 된 위치 절 값에 지정 되었는지 여부를 확인 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션 데이터 개체에 일치 하는 속성의 값과 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-217">The automatically generated Where clause will check whether the value specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection equals the value of the matching property in the data object.</span></span> <span data-ttu-id="ad52c-218">둘 이상의 매개 변수를 제공 하는 경우 매개 변수를 논리적으로 연결 됩니다 `AND` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-218">If you provide more than one parameter, the parameters are linked with a logical `AND` operation.</span></span> <span data-ttu-id="ad52c-219">매개 변수가 포함 된 `null` Where에 빈 값이 포함 되지 않습니다 또는 절.</span><span class="sxs-lookup"><span data-stu-id="ad52c-219">Parameters that contain `null` or an empty value are not included in the Where clause.</span></span>  
  
 <span data-ttu-id="ad52c-220">자동으로 생성 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 절 같음에 대해서만 테스트할 수 있으며, 매개 변수를만 연결할 수는 `AND` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-220">The automatically generated <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause can test only for equality and can link parameters only with the `AND` operation.</span></span> <span data-ttu-id="ad52c-221">설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true` 같은지 테스트 하지 않는 조건을 추가 하려면 있는 경우 또는 매개 변수를 연결 하는 경우는 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-221">Do not set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` if you have to add a condition that does not test for equality or if you have to relate parameters with the `OR` operation.</span></span> <span data-ttu-id="ad52c-222">설정 하 여 이러한 작업을 수행할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `false` 의 자리 표시자를 추가 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성에서 각 매개 변수에 대해는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-222">You can accomplish these tasks by setting the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `false` and adding placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-223">에 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 사용 하 여 각 자리 표시자 이름 앞는 @ 기호.</span><span class="sxs-lookup"><span data-stu-id="ad52c-223">In the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property, preface each placeholder name with the @ symbol.</span></span>  
  
 <span data-ttu-id="ad52c-224">설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성 때 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true`파서가 Where를 동적으로 만들기 때문에 절.</span><span class="sxs-lookup"><span data-stu-id="ad52c-224">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, because the parser dynamically creates the Where clause.</span></span> <span data-ttu-id="ad52c-225">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외를 throw 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성 값이 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-225">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-226">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-226">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> set to `true`.</span></span> <span data-ttu-id="ad52c-227">A <xref:System.Web.UI.WebControls.GridView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 쿼리에서 반환 되는 데이터를 표시 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-227">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query.</span></span> <span data-ttu-id="ad52c-228"><xref:System.Web.UI.WebControls.DropDownList> 컨트롤은 포함 된 세 가지 값으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-228">A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values.</span></span> <span data-ttu-id="ad52c-229">매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 로 설정 하는 이름 사용 하 여 컬렉션 `Category,` 와 일치 하는 데이터 개체의 속성 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-229">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object.</span></span> <span data-ttu-id="ad52c-230">해당 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 의 ID 속성은 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-230">Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="ad52c-231"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 자동으로 만듭니다.는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 에서 사용자가 선택한 값을 기준으로 레코드를 필터링 할 속성의 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="ad52c-231">The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="ad52c-232">레코드를 반환 하는 쿼리입니다 `Category` 속성에서 사용자가 선택한 값과 일치 합니다 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-232">The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-233"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 런타임에 데이터의 섹션 탐색을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-233">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports navigation through sections of the data at run time.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-234">사용자가 데이터 통해 페이징할 수 있으면 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-234">if the user can page through the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-235">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-235">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-236">설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성을 `true` 에서 페이징을 사용 하도록 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-236">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property to `true` to enable paging in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-237">사용자가 데이터를 통해 페이지를 사용 하려면 페이징에 대 한 인터페이스를 제공 하는 데이터 바인딩된 컨트롤에 연결 된 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-237">To enable the user to page through the data, connect a data-bound control that provides the interface for paging to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-238">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터 바인딩된 컨트롤에서 한 페이지에 대 한 충분 한 레코드만 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-238">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves only enough records for one page in the data-bound control.</span></span> <span data-ttu-id="ad52c-239">사용 된 <xref:System.Linq.Enumerable.Skip%2A> 및 <xref:System.Linq.Enumerable.Take%2A> 현재 페이지에 대 한 레코드를 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-239">It uses the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> methods to retrieve the records for the current page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-240">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 `true` 및 <xref:System.Web.UI.WebControls.GridView> 바인딩되는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-240">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-241">합니다 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> 의 속성을 <xref:System.Web.UI.WebControls.GridView> 로 설정 되어 `true` 데이터를 통해 사용자가 페이지 수 있게 해 주는 인터페이스를 제공 하기.</span><span class="sxs-lookup"><span data-stu-id="ad52c-241">The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-242"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 런타임에 데이터 정렬을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-242">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports sorting the data at run time.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-243">사용자가 데이터를 정렬할 수 있습니다 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-243">if the user can sort the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-244">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-244">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-245"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 정렬에 대 한 두 가지 방법을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-245">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports two approaches for sorting data.</span></span> <span data-ttu-id="ad52c-246">사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성을 런타임에 정렬 사용 설정할 수 있습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 디자인 타임에 정렬을 정의 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-246">You can use the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to enable run-time sorting or you can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to define the sorting at design time.</span></span>  
  
 <span data-ttu-id="ad52c-247">설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성을 `true` 정렬을 사용 하는 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤에서 정렬 식을 기반으로 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-247">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to `true` to enable sorting in a <xref:System.Web.UI.WebControls.LinqDataSource> control that is based on the sort expression from a data-bound control.</span></span> <span data-ttu-id="ad52c-248">데이터 바인딩된 컨트롤을 사용자가 런타임에 정렬에 사용할 속성을 선택할 수 있도록 인터페이스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-248">The data-bound control provides the interface to enable the user to select at run time which property to use for sorting.</span></span>  
  
 <span data-ttu-id="ad52c-249">설정에서 데이터를 반환 하는 순서를 프로그래밍 방식으로 설정할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성이 나 정렬에 사용 되는 속성에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-249">You can programmatically set the order in which data is returned by setting the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to the property or properties used for sorting.</span></span> <span data-ttu-id="ad52c-250">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성에 속성 및 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성은 `true`에서 식 뒤 데이터 바인딩된 컨트롤에서 정렬 식이 적용 되는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-250">When the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is set to a property and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is `true`, the sort expression from the data-bound control is applied after the expression in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="ad52c-251">따라서 최종 정렬 데이터를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-251">Therefore, this determines the final sorting of the data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-252">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성이로 설정 `true` 및 <xref:System.Web.UI.WebControls.GridView> 바인딩되는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-252">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-253">합니다 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> 의 속성을 <xref:System.Web.UI.WebControls.GridView> 로 설정 되어 `true` 사용자가 데이터를 정렬할 수 있는 인터페이스를 제공 하기.</span><span class="sxs-lookup"><span data-stu-id="ad52c-253">The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-254">컨텍스트 형식 개체의 인스턴스가 만들어진 후에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-254">Occurs after an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-255">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 컨텍스트 형식 개체를 검사 하거나 개체를 만드는 동안 발생 하는 예외를 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-255">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> event to examine the context type object or examine exceptions that are raised while the object is being created.</span></span> <span data-ttu-id="ad52c-256">컨텍스트 형식 개체를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성의는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이 이벤트와 연결 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-256">You retrieve the context type object from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is associated with this event.</span></span> <span data-ttu-id="ad52c-257">데이터 작업 중에 발생 하는 예외를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-257">You retrieve the exception that was raised during the data operation from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-258">컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 중 생성 되 고 요청이 전체에서 다시 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-258">The context type object is created during select, update, insert, and delete operations and is reused throughout the request.</span></span>  
  
 <span data-ttu-id="ad52c-259">한 시간이 방법으로 이벤트 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-259">There is one time when the event is not raised.</span></span> <span data-ttu-id="ad52c-260">프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 하는 동안 개체에 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-260">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object during the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="ad52c-261">추가 조건을 원래 값 보기 상태에 있거나 개체에 저장할 필요가 없습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성이 구현 하는 <xref:System.Data.Linq.ITable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-261">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-262">컨텍스트 형식 개체의 인스턴스가 만들어지기 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-262">Occurs before an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-263">기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 지정 된 형식의 인스턴스를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-263">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="ad52c-264"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 개체의 인스턴스를 만들 데이터 컨텍스트 개체의 기본 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-264">The <xref:System.Web.UI.WebControls.LinqDataSource> control calls the default constructor of the data context object to create an instance of the object.</span></span> <span data-ttu-id="ad52c-265">기본이 아닌 생성자를 사용 해야 하거나에서 지정 된 다른 개체를 만들 필요가 있는지를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-265">It is possible that you have to use a non-default constructor or you have to create an object that differs from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="ad52c-266">처리 하는 경우에 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 이벤트 데이터 컨텍스트 개체를 수동으로 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-266">In that case, you must handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event and manually create the data context object.</span></span>  
  
 <span data-ttu-id="ad52c-267">컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 중에 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-267">The context type object is created during select, update, insert, and delete operations.</span></span>  
  
 <span data-ttu-id="ad52c-268">한 시간이 방법으로 이벤트 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-268">There is one time when the event is not raised.</span></span> <span data-ttu-id="ad52c-269">프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성에 대 한 이벤트 처리기에서 개체를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-269">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="ad52c-270">추가 조건을 원래 값 보기 상태에 있거나 개체에 저장할 필요가 없습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성이 구현 하는 <xref:System.Data.Linq.ITable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-270">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-271">다음 예에서는 중 기본이 아닌 생성자를 사용 하 여 데이터 컨텍스트 개체를 만드는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-271">The following example shows how to create the data context object by using a non-default constructor during the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event.</span></span> <span data-ttu-id="ad52c-272">코드에서 개체를 할당 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-272">The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-273">컨텍스트 형식 개체를 삭제하기 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-273">Occurs before disposing the context type object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-274">처리 하는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> 이벤트 개체를 수동으로 삭제 하거나 개체를 제거 하기 전에 개체에 관련 된 정리를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-274">You handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> event to dispose the object manually, or to perform clean-up that is specific to the object before the object is destroyed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-275">해당 값에 검색할 데이터가 포함된 속성이 들어 있는 형식 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-275">Gets or sets the name of the type that contains the property whose value has the data that you want to retrieve.</span></span></summary>
        <value><span data-ttu-id="ad52c-276">데이터를 검색할 클래스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-276">The name of the class to retrieve data from.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-277">사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 컬렉션을 메모리 내 데이터 또는 데이터베이스에서 데이터를 검색을, 두 속성을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-277">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from either an in-memory data collection or a database, you must specify two properties.</span></span> <span data-ttu-id="ad52c-278">첫 번째는 데이터 소스를 나타내는 데이터 컨텍스트 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-278">The first is a data context class that represents the data source.</span></span> <span data-ttu-id="ad52c-279">두 번째는 데이터가 포함 된 데이터 컨텍스트 클래스의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-279">The second is a property in the data context class that contains the data.</span></span> <span data-ttu-id="ad52c-280">설정한 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터 컨텍스트 클래스의 이름으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터를 포함 하는 데이터 컬렉션을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-280">You set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the data context class and you set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the data collection that contains the data.</span></span>  
  
 <span data-ttu-id="ad52c-281">데이터베이스에서 데이터를 검색할 때 설정 하는 예를 들어를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성을 데이터베이스를 나타내는 클래스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-281">For example, when you retrieve data from a database, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that represents the database.</span></span> <span data-ttu-id="ad52c-282">설정는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터베이스에서 테이블을 나타내는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-282">Also set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the table in the database.</span></span> <span data-ttu-id="ad52c-283">데이터베이스에서 클래스를 생성 하려면 사용 된 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 또는 SqlMetal.exe 유틸리티를 자동으로 이러한 클래스를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-283">To generate classes from a database, use the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility to automatically generate those classes.</span></span>  
  
 <span data-ttu-id="ad52c-284">배열과 같은 메모리 내 데이터 컬렉션에서 데이터를 검색할 때 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성 배열 속성을 포함 하는 클래스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-284">When you retrieve data from an in-memory data collection such as an array, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that contains the array property.</span></span> <span data-ttu-id="ad52c-285">설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 속성 배열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-285">Then set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that gets the array.</span></span>  
  
 <span data-ttu-id="ad52c-286">자동 업데이트를 사용 하려면 삽입 또는 삭제 작업을 통해 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 에 할당 된 클래스를 제어 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-286">To enable automatic update, insert, or delete operations through the <xref:System.Web.UI.WebControls.LinqDataSource> control, the class assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="ad52c-287">또한 속성에는 할당 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-287">In addition, the property assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span> <span data-ttu-id="ad52c-288">하지 해야 자동 업데이트를 사용 하도록 설정 하려면 삽입 않거나 삭제 작업을 하는 경우 클래스의 모든 형식의 이름을 할당할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-288">If you do not need to enable automatic update, insert, or delete operations, you can assign the name of any type of class to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-289">클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 내용은 참조는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-289">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-290">다음 예제에서는 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성 문자열의 배열을 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-290">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to a class that contains an array of strings.</span></span> <span data-ttu-id="ad52c-291">또한 클래스에 속성을 설정 하는 방법을 보여 줍니다 (에서 생성 된 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) 데이터베이스를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-291">It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) that represents a database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="ad52c-292">이라는 클래스 `ExampleDataContext` 나타냅니다 데이터베이스 테이블은 표시 되지 않도록이 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-292">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="ad52c-293">이 예제가 작동 하려면 명명 된 Example.dbml 및 테이블을 끌어 라는 동영상을 LINQ To SQL 클래스를 추가 하 여이 클래스를 만들어야 합니다를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-293">For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="ad52c-294">클래스가 `ExampleDataContext` 라는 속성을 사용 하 여 `Movies` 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-294">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="ad52c-295">다음 예제에서는 라는 클래스를 보여 줍니다 `MovieLibrary` 에서 참조 되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-295">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="ad52c-296">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="ad52c-296">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-297">쿼리 가능한 뷰를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-297">Returns a queryable view.</span></span></summary>
        <returns><span data-ttu-id="ad52c-298">쿼리 가능한 뷰입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-298">A queryable view.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-299">이 컨트롤에 연결된 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> 클래스의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-299">Creates a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> class that is associated with this control.</span></span></summary>
        <returns><span data-ttu-id="ad52c-300">데이터 바인딩된 컨트롤에 대한 인터페이스로 사용되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-300">An object that acts as the interface for data-bound controls.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-301">사용자 지정 보기를 제공 하려면 파생된 클래스에서이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-301">To provide a custom view, you can override this method in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="ad52c-302">삭제할 레코드의 행 키 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-302">The row key values for the records to be deleted.</span></span></param>
        <param name="oldValues"><span data-ttu-id="ad52c-303">데이터 충돌을 감지하기 위해 계산하는 행 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-303">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="ad52c-304">삭제 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-304">Performs a delete operation.</span></span></summary>
        <returns><span data-ttu-id="ad52c-305">삭제 작업의 영향을 받는 레코드의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-305">The number of records affected by the delete operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-306">일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 코드에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-306">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method from your code.</span></span> <span data-ttu-id="ad52c-307">사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤을 데이터 바인딩된 컨트롤을 사용 하 여 컨트롤은 자동으로 호출 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 사용자가 레코드를 삭제 하는 작업을 수행 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-307">When you use a <xref:System.Web.UI.WebControls.LinqDataSource> control with a data-bound control, the data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when the user takes action to delete a record.</span></span> <span data-ttu-id="ad52c-308">명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 메서드 데이터를 삭제 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-308">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to create your own process for deleting data.</span></span> <span data-ttu-id="ad52c-309">예를 들어, 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 데이터 바인딩된 컨트롤 외부 이벤트를 기반으로 한 메서드는 레코드를 삭제 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="ad52c-309">For example, you can call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to delete a record based on an event outside the data-bound control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-310">삭제 작업이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-310">Occurs when a delete operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-311">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 이벤트 삭제 작업에서 예외를 catch 하거나 작업이 완료 된 후 출력 매개 변수를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-311">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event to catch any exceptions from the delete operation, or to examine output parameters after the operation has finished.</span></span> <span data-ttu-id="ad52c-312">출력 매개 변수를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-312">You can retrieve the output parameters from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-313">이 속성은 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스에서 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-313">This property is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="ad52c-314">매개 변수 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-314">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-315">삭제 작업 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-315">Occurs before a delete operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-316">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 삭제할, 삭제 작업 전에 값을 변경 또는 삭제 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-316">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event to validate the object to be deleted, to examine data validation errors from the data class, to change a value before the delete operation, or to cancel the delete operation.</span></span> <span data-ttu-id="ad52c-317"><xref:System.Web.UI.WebControls.LinqDataSource> 제어가 전달 된 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 개체에 대 한 이벤트 처리기를는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="ad52c-317">The <xref:System.Web.UI.WebControls.LinqDataSource> control passes a <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object to event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="ad52c-318"><xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 개체 데이터가 포함 된 삭제 되 고 삭제 작업을 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-318">The <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains the data that will be deleted and enables you to cancel the delete operation.</span></span> <span data-ttu-id="ad52c-319">데이터 클래스 throw 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 예외를 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 에서 해당 예외를 포함 하는 개체는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-319">If the data class throws a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> exception, the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains that exception in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-320">에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-320">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="ad52c-321">예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체).</span><span class="sxs-lookup"><span data-stu-id="ad52c-321">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="ad52c-322">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-322">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-323">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-323">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="ad52c-324">속성에 따라 삭제 작업을 취소 하는 코드는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> 속성 및 웹 페이지의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-324">The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page.</span></span> <span data-ttu-id="ad52c-325">예에서 때를 `OnSale` 속성이 `true`, 사용자 선택 해야 합니다는 <xref:System.Web.UI.WebControls.CheckBox> 레코드를 삭제 해야 함을 확인 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-325">In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-326"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 삭제할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-326">Gets or sets a value that indicates whether data records can be deleted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-327">자동 삭제 작업을 사용 합니다. 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-327">if automatic delete operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-328">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-328">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-329">설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 속성을 `true` 를 통해 데이터 레코드를 삭제할 수 있도록 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-329">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> property to `true` when you want to enable users to delete a data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-330">때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 삭제 하는 명령을 자동으로 만들려면 LINQ to SQL 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-330">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to delete the data.</span></span> <span data-ttu-id="ad52c-331">삭제와 같은 레코드를 선택할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-331">You must include an interface that lets users select a record to delete, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="ad52c-332"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 삭제 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-332">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic delete operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="ad52c-333">이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 삭제 작업을 시도 되 면 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-333">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if a delete operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-334">에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-334">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> set to `true`.</span></span> <span data-ttu-id="ad52c-335"><xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 사용자가 데이터 레코드를 삭제할 수 있는 단추를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-335">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="ad52c-336">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="ad52c-336">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-337"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 삽입할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-337">Gets or sets a value that indicates whether data records can be inserted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-338">자동 삽입 작업을 사용 하면 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-338">if automatic insert operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-339">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-339">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-340">설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 속성을 `true` 를 통해 새 데이터 레코드를 삽입 하는 사용자를 사용 하도록 설정 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-340">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> property to `true` when you want to enable users to insert a new data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-341">때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 삽입 하는 명령이 자동으로 만들려면 LINQ to SQL 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-341">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to insert the data.</span></span> <span data-ttu-id="ad52c-342">사용자가 같은 새 레코드를 삽입할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-342">You must include an interface that lets users insert a new record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="ad52c-343"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 삽입 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-343">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic insert operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="ad52c-344">이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 삽입 작업이 시도 되 면 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-344">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an insert operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-345">에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-345">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> set to `true`.</span></span> <span data-ttu-id="ad52c-346"><xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 삽입 모드 사용자 작성 하 고 새 레코드를 저장할 수 있는 컨트롤을 전환 하는 단추를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-346">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="ad52c-347">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="ad52c-347">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-348">데이터 컨텍스트 개체에 대한 변경 내용이 추적되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-348">Gets or sets the value that indicates whether changes to the data context object are tracked.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-349">변경에 대 한 데이터 컨텍스트 개체를 추적 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-349">if the data context object is tracked for changes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-350">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-350">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-351"><xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 속성은 LINQ To SQL 데이터 컨텍스트 개체에서 데이터를 선택할 때만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-351">The <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property is only used when selecting data from a LINQ To SQL data context object.</span></span>  
  
 <span data-ttu-id="ad52c-352">읽기 전용 데이터를 사용 하 여 상호 작용 하는, 하는 경우 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 속성을 `false` 변경 되었는지 여부를 결정 하는 데이터가 캐시 되지 않기 때문에 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-352">When you are interacting with read-only data, setting the <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property to `false` improves performance because the data is not cached to determine if it has changed.</span></span> <span data-ttu-id="ad52c-353">그러나 지연 된 쿼리 실행도 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-353">However, it also disables deferred query execution.</span></span> <span data-ttu-id="ad52c-354">이 속성으로 설정 되어 있어야 `true` 지연 된 쿼리 실행을 사용 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="ad52c-354">This property must be set to `true` if you want to use deferred query execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-355"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 업데이트할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-355">Gets or sets a value that indicates whether data records can be updated through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-356">자동 업데이트 작업을 사용 합니다. 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-356">if automatic update operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-357">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-357">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-358">설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 속성을 `true` 사용자가 사용 하 여 데이터 레코드를 업데이트할 수 있게 하려는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-358">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> property to `true` when you want to enable users to update a data record by using the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="ad52c-359">때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 업데이트 하는 명령을 자동으로 만들려면 LINQ to SQL 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-359">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to update the data.</span></span> <span data-ttu-id="ad52c-360">사용자가 같은 레코드를 업데이트할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-360">You must include an interface that lets users update a record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="ad52c-361"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 업데이트 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-361">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic update operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="ad52c-362">이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 업데이트 작업 시도 되 면 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-362">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an update operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-363">에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-363">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> set to `true`.</span></span> <span data-ttu-id="ad52c-364"><xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 사용자가 데이터 레코드를 업데이트할 수 있는 단추를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-364">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName"><span data-ttu-id="ad52c-365">"DefaultView"여야 하는 검색할 보기의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-365">The name of the view to retrieve, which must be "DefaultView".</span></span></param>
        <summary><span data-ttu-id="ad52c-366"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체와 연결된 데이터 원본 뷰를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-366">Returns the data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <returns><span data-ttu-id="ad52c-367"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체와 연결된 데이터 원본 뷰입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-367">The data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="ad52c-368"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 하나의 데이터 원본 뷰를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-368">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one data source view.</span></span> <span data-ttu-id="ad52c-369"><xref:System.Web.UI.WebControls.LinqDataSourceView> 개체 "defaultview"라는 기본 이름을 가진 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-369">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object has a default name of "DefaultView".</span></span> <span data-ttu-id="ad52c-370"><xref:System.Web.UI.WebControls.LinqDataSourceView> 개체 데이터 소스 컨트롤의 기능을 정의 기본 데이터베이스에서 데이터를 검색 및 정렬, insert, delete 및 update와 같은 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-370">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object defines the data source control's capabilities, retrieves data from the underlying database, and performs operations such as sort, insert, delete, and update.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p><span data-ttu-id="ad52c-371">viewName은 null(Visual Basic의 경우 Nothing) 또는 "DefaultView" 이외의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-371">viewName is null (Nothing in Visual Basic) or something other than "DefaultView".</span></span></p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="ad52c-372">LinqDataSource 웹 서버 컨트롤 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-372">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="ad52c-373">ASP.NET 데이터 액세스 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-373">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-374"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤과 연결된 뷰 개체 목록을 나타내는 이름의 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-374">Returns a collection of names that represents the list of view objects that are associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="ad52c-375">"DefaultView"라는 이름을 포함하는 요소 하나가 있는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-375">A collection with one element that contains the name "DefaultView".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="ad52c-376">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 명명 된 해당 기본 데이터에 대해 하나의 뷰만 지원 `DefaultView`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-376">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one view on its underlying data, which is named `DefaultView`.</span></span> <span data-ttu-id="ad52c-377">`GetViewNames` 메서드는 없으므로이 뷰 이름이 포함 된 하나의 요소만 있는 컬렉션을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-377">The `GetViewNames` method therefore returns a collection with only one element, which contains this view name.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="ad52c-378">LinqDataSource 웹 서버 컨트롤 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-378">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="ad52c-379">ASP.NET 데이터 액세스 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-379">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-380">검색된 데이터를 그룹화하는 데 사용되는 속성을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-380">Gets or sets a value that specifies which properties are used for grouping the retrieved data.</span></span></summary>
        <value><span data-ttu-id="ad52c-381">Group By 절을 만드는 데 사용 되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-381">A string that is used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-382">사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 속성은 동일한 값이 있는 데이터 레코드 통합 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-382">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used for consolidating data records that have the same values.</span></span> <span data-ttu-id="ad52c-383">예를 들어, 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 `Name`를 동일한 쿼리에서 모든 레코드가 `Name` 속성 값을 단일 통합 레코드로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-383">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `Name`, all the records in the query that have the same `Name` property value are returned as a single consolidated record.</span></span>  
  
 <span data-ttu-id="ad52c-384">둘 이상의 속성을 할당할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성의 모든 속성을 포함 하는 `new` 함수와 쉼표를 사용 하 여 각 속성을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-384">You can assign more than one property to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property by enclosing all the properties in the `new` function and separating each property by using a comma.</span></span> <span data-ttu-id="ad52c-385">속성을 기준으로 그룹화 하려면 예를 들어 `Name` 차례로 `Category`로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 `new(Name, Category)`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-385">For example, to group by the properties `Name` and then `Category`, set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `new(Name, Category)`.</span></span>  
  
 <span data-ttu-id="ad52c-386">그룹화에 사용 되는 속성의 값 이라는 생성 된 속성을 통해 반환 됩니다 `Key`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-386">The values in the property that are used for grouping are returned through a generated property named `Key`.</span></span> <span data-ttu-id="ad52c-387">포함 하는 `Key` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 그룹화 된 값을 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-387">You include the `Key` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve the grouped values.</span></span> <span data-ttu-id="ad52c-388">설정할 수 있습니다는 `Key` 속성을 사용 하 여 별칭을 `As` 있지만 키워드를 필요가 없습니다 별칭을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-388">You can set the `Key` property to an alias by using the `As` keyword, but you are not required to use an alias.</span></span> <span data-ttu-id="ad52c-389">예를 들어, 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 라는 속성으로 속성 `Category`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-389">For example, you might set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to a property named `Category`.</span></span> <span data-ttu-id="ad52c-390">통합된 된 값을 검색할 수 있습니다는 `Category` 설정 하 여 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(Key As ProductCategory)`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-390">You can retrieve the consolidated values from the `Category` property by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Key As ProductCategory)`.</span></span>  
  
 <span data-ttu-id="ad52c-391">그룹의 개별 레코드를 포함 하 여 액세스할 수 있습니다 합니다 `It` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-391">You can access the individual records in a grouping by including the `It` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-392">`It` 속성 그룹화 된 속성의 값을 공유 하는 레코드의 컬렉션을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-392">The `It` property contains a collection of records that share a value in the grouped property.</span></span> <span data-ttu-id="ad52c-393">반복할 수 있습니다는 `It` 개별 레코드를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-393">You can iterate over the `It` property to retrieve the individual records.</span></span>  
  
 <span data-ttu-id="ad52c-394"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성은 집계 메서드를 사용 하 여 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-394">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is often used with aggregation methods.</span></span> <span data-ttu-id="ad52c-395">다음과 같은 집계 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-395">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   `Average(` *<span data-ttu-id="ad52c-396">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-396">column</span></span>* `)`  
  
-   `Sum(` *<span data-ttu-id="ad52c-397">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-397">column</span></span>* `)`  
  
-   `Max(` *<span data-ttu-id="ad52c-398">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-398">column</span></span>* `)`  
  
-   `Min(` *<span data-ttu-id="ad52c-399">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-399">column</span></span>* `)`  
  
-   `Where(` *<span data-ttu-id="ad52c-400">조건</span><span class="sxs-lookup"><span data-stu-id="ad52c-400">condition</span></span>* `)`  
  
-   `Any()`  
  
-   `All(` *<span data-ttu-id="ad52c-401">조건</span><span class="sxs-lookup"><span data-stu-id="ad52c-401">condition</span></span>* `)`  
  
 <span data-ttu-id="ad52c-402">자세한 내용은 참조 하세요. [NIB: LinqDataSource 웹 서버 컨트롤 개요](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) 고 [방법: 데이터 그룹화 및 집계 LinqDataSource 컨트롤을 사용 하 여](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-402">For more information, see [NIB: LinqDataSource Web Server Control Overview](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-403">에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 명명 된 속성에 의해 반환된 된 데이터를 그룹화 하는 컨트롤 `Category`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-403">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`.</span></span> <span data-ttu-id="ad52c-404">공유 값을 반환 하 고 그룹화 된 레코드에 대 한 평균 가격을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-404">It returns the shared values and calculates the average price for the grouped records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 <span data-ttu-id="ad52c-405">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤로 두 열을 기준으로 그룹화 하도록 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-405">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="ad52c-406">합니다 `Key` 두 속성이 있는 개체를 참조 하는 속성 `ProductCategory` 고 `Color`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-406">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="ad52c-407">가 나타내는 개체 `It` 이름이 `Products`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-407">The object represented by `It` is renamed `Products`.</span></span> <span data-ttu-id="ad52c-408">이름이 바뀐 `Products` 개체 그룹화, 개별 레코드의 컬렉션을 포함 하며 각 인스턴스는 Products 테이블에서 모든 열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-408">The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="ad52c-409">다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.ListView> 의 데이터를 표시 하는 것에 대 한 제어를 <xref:System.Web.UI.WebControls.LinqDataSource> 이전 예제에서 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-409">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="ad52c-410">하나의 <xref:System.Web.UI.WebControls.ListView> 그룹화 된 데이터와 다른 컨트롤이 표시 <xref:System.Web.UI.WebControls.ListView> 컨트롤 그룹에 속하는 제품의 개별 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-410">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="ad52c-411">중첩 된 데이터 바인딩된 컨트롤의 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 속성이 `Products`에 대 한 별칭인는 `It` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-411">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-412">Group By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-412">Gets the collection of parameters that are used to create the Group By clause.</span></span></summary>
        <value><span data-ttu-id="ad52c-413">Group By 절을 만드는 데 사용 되는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-413">The parameters that are used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-414"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 런타임에 Group By 절을 만들 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-414">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to create the Group By clause at run time.</span></span> <span data-ttu-id="ad52c-415">일반적으로 사용 하지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 데이터를 그룹화 하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-415">Typically you will not use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data.</span></span> <span data-ttu-id="ad52c-416">대신 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-416">Instead, you can use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="ad52c-417">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 런타임 시 컬렉션 Group By 절의 경우에 설정 해야 하며 해당 값은 속성 이름이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-417">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection only when a value in the Group By clause must be set at run time and that value is not a property name.</span></span> <span data-ttu-id="ad52c-418">사용 예를 들어, 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 여부를 기준으로 데이터를 그룹화 하는 컬렉션을 `LastName` 데이터 레코드의 속성에는 사용자가 제공한 값과 같음.</span><span class="sxs-lookup"><span data-stu-id="ad52c-418">For example, use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data based on whether the `LastName` property in the data records equals a value provided by the user.</span></span>  
  
 <span data-ttu-id="ad52c-419">속성으로 데이터를 그룹화 하려는 경우 해당 속성을 런타임에 설정할 필요가 없습니다 그룹화 속성을 정의할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-419">If you want to group data by a property and that property does not have to be set at run time, you can define the grouping property in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="ad52c-420">예를 들어 데이터베이스 테이블의 값을 반환 하 여 그룹화 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 를 "LastName" 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-420">For example, to return values from a database table grouped by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> to "LastName" without any parameters.</span></span> <span data-ttu-id="ad52c-421">속성으로 데이터를 동적으로 그룹화 하려는 경우에 대 한 이벤트 처리기를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트 및 사용자 지정을 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 필요에 따라 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-421">If you want to dynamically group data by a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property as needed.</span></span>  
  
 <span data-ttu-id="ad52c-422">매개 변수에 대해 값으로 속성의 이름을 할당할 수 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-422">You cannot assign the name of a property as the value for a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-423">매개 변수를 추가 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 조건을 추가 하려는 경우 컬렉션은 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 런타임에 설정 해야 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-423">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection when you want to add a condition to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property that must be set at run time.</span></span>  
  
 <span data-ttu-id="ad52c-424">값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 컬렉션, 각 매개 변수에 이름을 할당할 추가 하는 다음에서 자리 표시자는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 명명 된 매개 변수는 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-424">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property for that named parameter.</span></span> <span data-ttu-id="ad52c-425">Group By 절에 사용 하 여 각 매개 변수 이름 앞에 @ 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-425">In the Group By clause, preface each parameter name with the @ symbol.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="ad52c-426">데이터 소스에 삽입할 행 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-426">The row values to be inserted into the data source.</span></span></param>
        <summary><span data-ttu-id="ad52c-427">삽입 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-427">Performs an insert operation.</span></span></summary>
        <returns><span data-ttu-id="ad52c-428">삽입 작업이 적용되는 행의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-428">The number of rows affected by the insert operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-429">일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 코드에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-429">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method from your code.</span></span> <span data-ttu-id="ad52c-430">데이터 바인딩된 컨트롤을 자동으로 호출 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드 사용자가 새 레코드를 삽입 하는 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-430">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when the user takes action to insert a new record.</span></span> <span data-ttu-id="ad52c-431">명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드 데이터를 삽입 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-431">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when you want to create your own process for inserting data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-432">다음 예제에서는 프로그래밍 방식으로 사용자가 단추를 클릭 한 후 데이터 원본에 새 레코드를 삽입 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-432">The following example shows how to programmatically insert a new record in the data source after the user clicks a button.</span></span> <span data-ttu-id="ad52c-433">코드를 <xref:System.Collections.Specialized.ListDictionary> 기본값을 포함 하는 개체 값을 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-433">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 <span data-ttu-id="ad52c-434">다음 예제에서는 이전 예제에 대 한 태그를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-434">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-435">삽입 작업이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-435">Occurs when an insert operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-436">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 삽입 작업이 완료 된 후 값을 확인 하려면 이벤트 삽입 작업에서 발생 한 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-436">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event to catch any exceptions from the insert operation or to examine the values after the insert operation has finished.</span></span> <span data-ttu-id="ad52c-437">통해 새 값을 검색할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-437">You can retrieve the new values through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span> <span data-ttu-id="ad52c-438">예를 들어 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 새 데이터 레코드에 대 한 데이터베이스에서 생성 된 id 속성을 검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-438">For example, you can use the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object to retrieve the identity property generated by a database for a new data record.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-439">다음 예제에 대 한 이벤트 처리기를 만드는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 예외를 확인 하 고 새 레코드에 대 한 id 속성을 검색 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-439">The following example shows how to create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event that checks for exceptions and retrieves the identity property for the new record.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-440">삽입 작업 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-440">Occurs before an insert operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-441">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 삽입할, 삽입 작업 전에 값을 변경 하려면 또는 삽입 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-441">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to validate the object to be inserted, to examine data validation errors from the data class, to change a value before the insert operation, or to cancel the insert operation.</span></span> <span data-ttu-id="ad52c-442"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 개체 데이터 소스에 삽입할 새 개체를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-442">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object passed to event handlers for this event contains the new object to insert in the data source.</span></span>  
  
 <span data-ttu-id="ad52c-443">삽입 작업 중에 유효성 검사 오류가 발생할 경우를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-443">If a validation error occurs during the insert operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="ad52c-444">유효성 검사 오류를 삽입할 값 데이터 클래스의 속성 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하는 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-444">A validation error occurs if a value to be inserted does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="ad52c-445">에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트 유효성 검사 예외를 검색 하 고 적절 한 조치를 취할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-445">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="ad52c-446">에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-446">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="ad52c-447">예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체).</span><span class="sxs-lookup"><span data-stu-id="ad52c-447">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="ad52c-448">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-448">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-449">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 삽입 작업 전에 데이터를 수정 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-449">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that modifies data before the insert operation.</span></span> <span data-ttu-id="ad52c-450">개체를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성은 명명 된 형식으로 캐스팅 됩니다 `Product`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-450">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="ad52c-451">`DateModified` 의 속성을 `Product` 개체가 현재 날짜 및 시간으로 설정 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-451">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="ad52c-452">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 유효성 검사 예외를 검색 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-452">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="ad52c-453">앞의 예제는 유효성 검사 예외를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-453">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="ad52c-454">값 속성의 형식과 일치 하지 않는 경우 예외가 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-454">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="ad52c-455">다음 예제에서와 같은 사용자 지정된 검사에서 throw 수도 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-455">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="ad52c-456">`OnAgeChanging` 메서드를 확인 하는 대 한 숫자는 `Age` 속성이 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-456">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-457">삽입 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-457">Gets the collection of parameters that are used during an insert operation.</span></span></summary>
        <value><span data-ttu-id="ad52c-458">삽입 작업 중에 사용되는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-458">The parameters that are used during an insert operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-459">삽입 작업에 필요한 값에 전달 되는 일반적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤에서 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-459">Typically the values that are needed for an insert operation are passed to the <xref:System.Web.UI.WebControls.LinqDataSource> control by the data-bound control.</span></span> <span data-ttu-id="ad52c-460">기본값을 제공 하려는 경우 삽입 매개 변수 값 또는 빈 값을 변환할지 여부를 정의할 지정할 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-460">You specify insert parameters when you want to provide a default value or define whether to convert empty values to `null`.</span></span> <span data-ttu-id="ad52c-461">사용자 값을 제공 하지 않는 경우 처리 해야 하는 값에 대해서만 삽입 되는 모든 값에 대 한 매개 변수를 제공할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-461">You do not have to provide a parameter for every value that will be inserted, only for the values that must be handled when the user does not provide a value.</span></span>  
  
 <span data-ttu-id="ad52c-462">제공 하는 값은 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 데이터 원본에 정의 되어 있지만 데이터 컨트롤에 바인딩되지 않은 필드에만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-462">The values that you provide in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection are used only for fields that are defined in the data source but that are not bound in the data control.</span></span> <span data-ttu-id="ad52c-463">예를 들어 데이터베이스 테이블에 열 이름, 주소 및 우편 번호, 명명 된 가정 하지만 <xref:System.Web.UI.WebControls.ListView> 테이블에 바인딩되는 컨트롤 이름과 주소 필드에만 바인딩되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-463">For example, suppose a database table has columns that are named Name, Address, and PostalCode, but a <xref:System.Web.UI.WebControls.ListView> control that is bound to the table is bound only to the Name and Address fields.</span></span> <span data-ttu-id="ad52c-464">값을 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 PostalCode 필드에만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-464">The values in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used only for the PostalCode field.</span></span> <span data-ttu-id="ad52c-465">이름 및 주소 필드에 대해 사용할 수 없습니다 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-465">They will not be used for the Name and Address field.</span></span> <span data-ttu-id="ad52c-466">이러한 필드에 대 한 입력 값이 없는 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-466">This is true even if no value is entered for those fields.</span></span> <span data-ttu-id="ad52c-467">원본을 하는 경우 데이터의 모든 필드에 대해 데이터 바인딩된 컨트롤에서 자동으로 생성 필드에서 값이 없는 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-467">If the data-bound control autogenerates fields for all fields in the data source, no values from the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-468">다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 에서 기본값을 제공 하는 매개 변수를 사용 하 여 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-468">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-469">사용자에 대 한 값을 제공 하지 않는 경우는 `Category` 속성인 매개 변수에서 제공 하는 기본 값을 데이터베이스에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-469">If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="ad52c-470"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-470">An object that represents the state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></param>
        <summary><span data-ttu-id="ad52c-471"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤에서 유지해야 하는 값의 상태를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-471">Loads the state of the values in the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control that must be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="ad52c-472">합니다 `LoadViewState` 메서드를 사용 하 여 이전에 저장 된 뷰 상태를 로드 하는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-472">The `LoadViewState` method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="ad52c-473">LinqDataSource 웹 서버 컨트롤 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-473">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="ad52c-474">ASP.NET 데이터 액세스 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-474">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad52c-475">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-475">The event data.</span></span></param>
        <summary><span data-ttu-id="ad52c-476"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-476">Initializes the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ad52c-477">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-477">An <see cref="T:System.EventArgs" /> object that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ad52c-478"><see cref="E:System.Web.UI.Control.Unload" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-478">Raises the <see cref="E:System.Web.UI.Control.Unload" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-479">검색된 데이터의 순서를 지정하는 데 사용되는 필드를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-479">Gets or sets a value that specifies which fields are used for ordering the retrieved data.</span></span></summary>
        <value><span data-ttu-id="ad52c-480">Order By 절을 만드는 데 사용 되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-480">A string that is used to create the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-481">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성에서 반환 되는 데이터 정렬에 사용할 속성을 지정 하려면.</span><span class="sxs-lookup"><span data-stu-id="ad52c-481">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify which properties from the returned data to use for sorting.</span></span> <span data-ttu-id="ad52c-482">데이터 원본에서 데이터를 정렬 하는 것에 대 한 속성이 있어야 하지만에 포함 될 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-482">The property for sorting the data must exist in the original data source, but it does not have to be included in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-483">공간을 추가할 수 있습니다 하 고 `Ascending`, `ASC`, `Descending`, 또는 `DESC` 속성에 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 정렬 된 데이터 반환 되는 방법을 지정 하기 위해 문자열.</span><span class="sxs-lookup"><span data-stu-id="ad52c-483">You can add a space and `Ascending`, `ASC`, `Descending`, or `DESC` to a property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> string in order to specify how the ordered data is returned.</span></span>  
  
 <span data-ttu-id="ad52c-484">둘 이상의 속성을 제공할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 쉼표를 사용 하 여 각 속성을 구분 하 여 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-484">You can provide more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property by separating each property by using a comma.</span></span> <span data-ttu-id="ad52c-485">라는 속성을 기준으로 정렬 하려면 예를 들어 `LastName` 하 고 `FirstName`설정는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 "LastName, FirstName"을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-485">For example, to order by properties named `LastName` and `FirstName`, set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to "LastName, FirstName".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad52c-486">사용 하는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 하며 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 되어 `true`에서 값을 제공 해야 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-486">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with [!INCLUDE[ss2k](~/includes/ss2k-md.md)] or [!INCLUDE[ssEW](~/includes/ssew-md.md)] and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="ad52c-487">기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-487">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="ad52c-488">값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에서.</span><span class="sxs-lookup"><span data-stu-id="ad52c-488">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
 <span data-ttu-id="ad52c-489">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성이로 설정 된 `true`, 데이터 바인딩된 컨트롤에 정렬 식을 전달할 수는 <xref:System.Web.UI.WebControls.LinqDataSource> 런타임 시 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-489">If the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is set to `true`, a data-bound control can pass a sort expression to the <xref:System.Web.UI.WebControls.LinqDataSource> control at run time.</span></span> <span data-ttu-id="ad52c-490">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 적용 한 후 제어 된 데이터 바인딩된 컨트롤에서 정렬 식을 적용 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-490">The <xref:System.Web.UI.WebControls.LinqDataSource> control will apply the sort expression from the data-bound control after it applies the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="ad52c-491">따라서 데이터는 정렬 식에 따라 데이터 바인딩된 컨트롤에서 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-491">Therefore, the data is returned according to the sort expression from the data-bound control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-492">다음 예에서는 역방향 사전순 값에 따라 데이터를 반환 합니다 `Category` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-492">The following example returns data in reverse alphabetical order based on values in the `Category` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-493">Order By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-493">Gets the collection of parameters that are used to create the Order By clause.</span></span></summary>
        <value><span data-ttu-id="ad52c-494">Order By 절을 만드는 데 사용 되는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-494">The parameters that are used for creating the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-495"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 런타임에 Order By 절을 만들 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-495">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection to create the Order By clause at run time.</span></span> <span data-ttu-id="ad52c-496">일반적으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성을 `true` 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-496">Typically you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true` when you add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-497">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성이로 설정 되어 `true`, 각 매개 변수에 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션이 Order By 절에 지정 된 시퀀스에 추가 되는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="ad52c-497">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is set to `true`, each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection is added to the Order By clause in the sequence that they are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-498">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성은 `true`, 매개 변수를 순서 대로 적용 됩니다 하 고 자리 표시자와 일치 하지 않습니다 하기 때문에 이름을 지정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-498">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is `true`, the parameters do not have to be named because they are applied in sequence and are not matched to a placeholder.</span></span>  
  
 <span data-ttu-id="ad52c-499">Order By 절에서 런타임 시 값을 설정 해야 하는 경우 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-499">If you do not have to set a value at run time in the Order By clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-500">데이터 정렬에 사용할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-500">You can define the fields to use for ordering the data in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="ad52c-501">예를 들어 데이터베이스 테이블의 값을 반환 하 여 정렬 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 를 "LastName" 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-501">For example, to return values from a database table ordered by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> to "LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="ad52c-502">매개 변수를 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션의 자리 표시자에 매개 변수와 일치 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성인 있지만이 방법은 응용 프로그램을 제한적입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-502">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property, but this approach has limited application.</span></span> <span data-ttu-id="ad52c-503">이 방법은 매개 변수를 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션에 열 이름을 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-503">When you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection cannot represent a column name.</span></span> <span data-ttu-id="ad52c-504">매개 변수 값으로 설정 하 고 속성의 값에 해당 값을 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-504">You can set a parameter to a value and then compare that value to values in a property.</span></span> <span data-ttu-id="ad52c-505">예를 들어 속성에 값 매개 변수가 나타내는 런타임 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-505">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-506">다음 예제에서는 <xref:System.Web.UI.WebControls.LinqDataSource> 속성이 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>로 설정된 `true` 컨트롤을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-506">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`.</span></span> <span data-ttu-id="ad52c-507">매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 에서 사용자 이름을 속성을 기반으로 데이터를 정렬 하는 컬렉션을 선택는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-507">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-508">그룹화된 데이터의 순서를 지정하는 데 사용되는 필드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-508">Gets or sets the fields that are used for ordering grouped data.</span></span></summary>
        <value><span data-ttu-id="ad52c-509">Order Groups By 절을 만드는 데 사용 되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-509">A string that is used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-510">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 데이터 그룹의 정렬 방식을 지정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-510">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify how the groups of data are sorted.</span></span> <span data-ttu-id="ad52c-511">예를 들어 그룹화 할 수 있습니다 합니다 `CategoryID` 속성 및 각 범주 ID의 평균을 그룹화 한 다음 정렬 된 `Price` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-511">For example, you can group by the `CategoryID` property and then sort each category ID group by the average of the `Price` property.</span></span>  
  
 <span data-ttu-id="ad52c-512">설정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성 데이터를 그룹화 한 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-512">You can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property only when you have grouped the data.</span></span> <span data-ttu-id="ad52c-513">설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성을 설정 하지 않고는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성인은 <xref:System.Web.UI.WebControls.LinqDataSource> 예외를 throw 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-513">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property without setting the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception.</span></span>  
  
 <span data-ttu-id="ad52c-514">데이터를 그룹화 하는 데 사용 되는 속성이 나 그룹화 된 데이터에 집계 함수 결과 데이터를 정렬 하는 데 사용 되는 속성 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-514">The property that is used to sort the data must be either a property that is used to group the data, or the result of an aggregation function on the grouped data.</span></span> <span data-ttu-id="ad52c-515">데이터를 정렬 하는 방법을 사용 하지 않으려면 및 추가할 수 있습니다 공백을 "오름차순", "ASC", "Descending" 또는 "DESC" 문자열에서 속성 이름에는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-515">To specify how the data is sorted, you can add a space and the string "Ascending", "ASC", "Descending", or "DESC" to a property name in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> string.</span></span>  
  
 <span data-ttu-id="ad52c-516">둘 이상의 속성을 지정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-516">You can specify more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="ad52c-517">쉼표를 사용 하 여 각 속성을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-517">Separate each property by using a comma.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-518">다음 예제에서는 두 개의 속성을 사용 하 여 데이터를 그룹화 하는 방법 및 이러한 속성 중 하나를 사용 하 여 그룹화 된 데이터를 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-518">The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties.</span></span> <span data-ttu-id="ad52c-519">라는 테이블을 데이터로 `Products` 라는 속성을 사용 하 여 그룹화 `CategoryID` 및 `Discontinued`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-519">The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`.</span></span> <span data-ttu-id="ad52c-520">그룹화 된 데이터를 정렬할 때는 `CategoryID` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-520">The grouped data is sorted by the `CategoryID` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="ad52c-521">다음 예제에서는 속성을 사용 하 여 데이터를 그룹화 하는 방법 및 집계 함수 결과에 따라 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-521">The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function.</span></span> <span data-ttu-id="ad52c-522">데이터를 `Products` 표를 사용 하 여 그룹화를 `CategoryID` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-522">The data from the `Products` table is grouped by using the `CategoryID` property.</span></span> <span data-ttu-id="ad52c-523">평균을 기준으로 정렬 되는 `UnitPrice` 각 그룹 내의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-523">It is sorted based on the average of the `UnitPrice` property within each group.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-524">Order Groups By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-524">Gets the collection of parameters that are used to create the Order Groups By clause.</span></span></summary>
        <value><span data-ttu-id="ad52c-525">Order Groups By 절을 만드는 데 사용 되는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-525">The parameters that are used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-526"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 런타임에 Order Groups By 절을 만들 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-526">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection to create the Order Groups By clause at run time.</span></span>  
  
 <span data-ttu-id="ad52c-527">값을 추가 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 런타임에 Order Groups By 절에 값을 설정 해야 하는 경우에 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-527">You add values to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection only when you must set values at run time in the Order Groups By clause.</span></span> <span data-ttu-id="ad52c-528">사용 하 여 데이터를 정렬 하는 데 사용 되는 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-528">You can define the fields that are used to order the data by using the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-529">매개 변수를 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 컬렉션의 자리 표시자에 매개 변수와 일치 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-529">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="ad52c-530">그러나 사용 하는 경우이 방법은 매개 변수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 컬렉션에 열 이름을 나타낼 수 없는; 값을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-530">However, when you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection cannot represent a column name; they must represent values.</span></span> <span data-ttu-id="ad52c-531">매개 변수 값으로 설정 하 고 속성에 해당 값을 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-531">You can set a parameter to a value and then compare that value to a property.</span></span> <span data-ttu-id="ad52c-532">예를 들어 속성에 값 매개 변수가 나타내는 런타임 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-532">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-533"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 현재 뷰 상태를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-533">Saves the current view state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="ad52c-534"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤에 대해 저장된 컨트롤 상태 값이 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-534">An object that contains the saved state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="ad52c-535">LinqDataSource 웹 서버 컨트롤 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-535">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="ad52c-536">ASP.NET 데이터 액세스 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-536">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-537">검색된 데이터에 포함되는 속성 및 계산된 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-537">Gets or sets the properties and calculated values that are included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="ad52c-538">Select 절을 만드는 데 사용되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-538">A string that is used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-539">설정 하지 않은 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 속성 (데이터 열)을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-539">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves all the properties (data columns) from the data object.</span></span> <span data-ttu-id="ad52c-540">사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 개체의 속성 하위 집합을 검색 하거나 데이터를 검색 하는 경우 새 값을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-540">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve a subset of properties from the object or to calculate new values when the data is being retrieved.</span></span>  
  
 <span data-ttu-id="ad52c-541">속성을 설정 하 여 검색할 지정 된 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 반환된 된 데이터에 포함 하려는 속성의 이름에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-541">You specify which properties to retrieve by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the names of the properties that you want to include in the returned data.</span></span>  
  
 <span data-ttu-id="ad52c-542">데이터 개체에서 속성의 하위 집합을 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 지정 하는 속성만 포함 하는 클래스를 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-542">If you retrieve a subset of properties from the data object, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates a class that contains only the properties that you specify in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-543">데이터 개체의 속성을 하지 않은 속성을 계산 하는 경우 클래스를 동적으로 만들 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-543">A class is also created dynamically if you calculate properties that are not properties in the data object.</span></span> <span data-ttu-id="ad52c-544">이러한 경우 쿼리에서 반환 된 개체가 없습니다에 지정 된 클래스의 인스턴스는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-544">In these cases, the object returned from the query is not an instance of the class that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="ad52c-545">대신 사용 해야 합니다는 `new` 의 메서드는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 새 클래스는 쿼리에서 반환 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-545">Instead, you must use the `new` method in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to indicate that a new class is returned from the query.</span></span> <span data-ttu-id="ad52c-546">예를 들어만 반환 하는 `FirstName` 및 `LastName` 포함 하는 개체의 속성을 두 개 이상의 이러한 속성을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(FirstName, LastName)`.</span><span class="sxs-lookup"><span data-stu-id="ad52c-546">For example, to return only the `FirstName` and `LastName` properties from an object that contains more than these properties, set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(FirstName, LastName)`.</span></span> <span data-ttu-id="ad52c-547">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 지정 된 새 클래스를 동적으로 만들는 `new` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-547">The <xref:System.Web.UI.WebControls.LinqDataSource> control will dynamically create the new class that you specified in the `new` method.</span></span>  
  
 <span data-ttu-id="ad52c-548">사용할 수는 `As` 선택한 값에 별칭을 지정 하는 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-548">You can use the `As` keyword to assign an alias to a selected value.</span></span> <span data-ttu-id="ad52c-549">별칭에 할당 된 속성을 포함 해야 합니다는 `new` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-549">If you assign an alias, you must include the aliased properties in the `new` method.</span></span> <span data-ttu-id="ad52c-550">결과에 바인딩하는 모든 데이터 바인딩된 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 속성의 별칭으로 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-550">Any data-bound control that binds to the results from the <xref:System.Web.UI.WebControls.LinqDataSource> control must refer to the property by the alias.</span></span> <span data-ttu-id="ad52c-551">예를 들어, 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`에 데이터 바인딩된 컨트롤을 두 개의 속성에 액세스할 수 있습니다 `SalesRegion` 및 `RevenueThousands`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-551">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, the data-bound control can access two properties, `SalesRegion` and `RevenueThousands`.</span></span>  
  
 <span data-ttu-id="ad52c-552">사용할 합니다 `new` 함수는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 다음 표에 나열 된 조건에 따라 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-552">You use the `new` function in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property according to the conditions listed in the following table.</span></span>  
  
|<span data-ttu-id="ad52c-553">선택</span><span class="sxs-lookup"><span data-stu-id="ad52c-553">Select</span></span>|<span data-ttu-id="ad52c-554">새 사용</span><span class="sxs-lookup"><span data-stu-id="ad52c-554">Use of new</span></span>|<span data-ttu-id="ad52c-555">예제</span><span class="sxs-lookup"><span data-stu-id="ad52c-555">Example</span></span>|  
|------------|----------------|-------------|  
|<span data-ttu-id="ad52c-556">단일 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-556">Single property.</span></span>|`new` <span data-ttu-id="ad52c-557">필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-557">not needed.</span></span>|`Select="Category"`|  
|<span data-ttu-id="ad52c-558">여러 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-558">Multiple properties.</span></span>|`new` <span data-ttu-id="ad52c-559">필요합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-559">needed.</span></span>|`Select="new(Category, Name)"`|  
|<span data-ttu-id="ad52c-560">단일 또는 별칭이 있는 여러 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-560">Single or multiple properties that have an alias.</span></span>|`new` <span data-ttu-id="ad52c-561">필요합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-561">needed.</span></span>|`Select="new(Category As CategoryGroup)"`|  
  
 <span data-ttu-id="ad52c-562">자동 데이터 수정 작업을 사용 하도록 설정 하려는 경우 데이터 개체에서 모든 속성을 표시 하지 않으려는 경우, 설정 하지 마십시오는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-562">If you want to enable automatic data modifications, but you do not want to display all the properties from the data object, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-563">대신 데이터 바인딩된 컨트롤을 통해 표시를 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-563">Instead, manage the display through the data-bound control.</span></span> <span data-ttu-id="ad52c-564">사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 또는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 설정 해야 합니다 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-564">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `false`.</span></span> <span data-ttu-id="ad52c-565">데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-565">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="ad52c-566">전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ad52c-566">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
 <span data-ttu-id="ad52c-567">쿼리에서 데이터를 그룹화 하는 경우에 집계 메서드를 포함할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-567">When you group data in the query, you can include aggregate methods in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-568">다음과 같은 집계 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-568">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   `Average(` *<span data-ttu-id="ad52c-569">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-569">column</span></span>* `)`  
  
-   `Sum(` *<span data-ttu-id="ad52c-570">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-570">column</span></span>* `)`  
  
-   `Max(` *<span data-ttu-id="ad52c-571">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-571">column</span></span>* `)`  
  
-   `Min(` *<span data-ttu-id="ad52c-572">column</span><span class="sxs-lookup"><span data-stu-id="ad52c-572">column</span></span>* `)`  
  
-   `Where(` *<span data-ttu-id="ad52c-573">조건</span><span class="sxs-lookup"><span data-stu-id="ad52c-573">condition</span></span>* `)`  
  
-   `Any()`  
  
-   `All(` *<span data-ttu-id="ad52c-574">조건</span><span class="sxs-lookup"><span data-stu-id="ad52c-574">condition</span></span>* `)`  
  
 <span data-ttu-id="ad52c-575">자세한 내용은 참조 하세요. [NIB: LinqDataSource 웹 서버 컨트롤 개요](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) 고 [방법: 데이터 그룹화 및 집계 LinqDataSource 컨트롤을 사용 하 여](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-575">For more information, see [NIB: LinqDataSource Web Server Control Overview](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).</span></span>  
  
 <span data-ttu-id="ad52c-576">데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 하 고 `It`, 동적으로 속성에서 만들어진를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-576">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-577">`Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성 값을 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-577">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="ad52c-578">예를 들어 명명 된 속성으로 그룹화 `Category`는 `Key` 속성에서 각 고유 값이 포함 됩니다는 `Category` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-578">For example, if you group by a property named `Category`, the `Key` property will contain each unique value in the `Category` property.</span></span> <span data-ttu-id="ad52c-579">`It` 속성은 데이터 그룹의 개별 레코드의 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-579">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="ad52c-580">반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-580">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="ad52c-581">예를 들어 명명 된 속성으로 그룹화 `Category`는 `It` 속성의 값을 공유 하는 모든 개별 레코드를 포함 합니다 `Category` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-581">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="ad52c-582">포함 하는 경우는 `It` 키워드를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 데이터를 그룹화 할 때 별칭을 할당 해야 합니다는 `It` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-582">If you include the `It` keyword in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property when you group data, you must assign an alias to the `It` keyword.</span></span> <span data-ttu-id="ad52c-583">합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외가 throw 됩니다 `It` 별칭이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-583">The <xref:System.Web.UI.WebControls.LinqDataSource> control will throw an exception if `It` does not have an alias.</span></span> <span data-ttu-id="ad52c-584">에 대 한 별칭을 할당할 수는 `Key` 키워드, 하지만이 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-584">You can assign an alias to the `Key` keyword, but this is not required.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-585">다음 예제에서는 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 데이터 개체의 속성 하위 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-585">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties in the data object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 <span data-ttu-id="ad52c-586">다음 예제에서는 데이터를 그룹화에 사용 된 속성의 값을 검색 하 고 그룹화 된 레코드에 대 한 평균 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-586">The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records.</span></span> <span data-ttu-id="ad52c-587">`Key` 키워드 데이터를 그룹화 하는 데 사용 된 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-587">The `Key` keyword contains the property that has been used for grouping data.</span></span> <span data-ttu-id="ad52c-588">이 예에서 `Key` 에서 공유 값이 포함 됩니다는 `ProductCategory` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-588">In this example, `Key` will contain the shared values from the `ProductCategory` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-589">데이터 검색 작업이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-589">Occurs when a data retrieval operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-590">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트 데이터 검색 작업에서 예외를 catch 하거나 검색 작업이 완료 된 후 데이터 개체를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-590">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event to catch any exceptions from the data retrieval operation or to examine the data object after the retrieval operation has finished.</span></span> <span data-ttu-id="ad52c-591">개체에서 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-591">The object is available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-592">데이터 검색 작업 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-592">Occurs before a data-retrieval operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-593">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 다음 작업을 수행 하기 위해 이벤트:</span><span class="sxs-lookup"><span data-stu-id="ad52c-593">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event in order to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="ad52c-594">데이터 검색에 대 한 매개 변수를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-594">Modify parameters for data retrieval.</span></span>  
  
-   <span data-ttu-id="ad52c-595">프로그래밍 방식으로 쿼리를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-595">Generate the query programmatically.</span></span>  
  
-   <span data-ttu-id="ad52c-596">정렬 또는 페이징에 대 한 값을 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-596">Modify the values for sorting or paging.</span></span>  
  
-   <span data-ttu-id="ad52c-597">사용자 지정 정렬 또는 페이징 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-597">Perform custom sorting or paging.</span></span>  
  
-   <span data-ttu-id="ad52c-598">데이터 검색 작업을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-598">Cancel the data-retrieval operation.</span></span>  
  
 <span data-ttu-id="ad52c-599"><xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 데이터 검색 작업에 대 한 매개 변수를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-599">The <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object that is passed to event handlers for this event contains the parameters for the data-retrieval operation.</span></span> <span data-ttu-id="ad52c-600">매개 변수를 수정할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 쿼리를 실행 하거나 새 결과 집합을 만들고 할당 하는 수 전에 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-600">You can modify the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event handler before the query executes, or you can create a new result set and assign that to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-601">사용자 지정 정렬 또는이 이벤트에 바인딩된 컨트롤에 의해 제한 될 수도 있습니다에 대 한 처리기에서 페이징을 구현 하는 능력을 <xref:System.Web.UI.WebControls.LinqDataSource>입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-601">Your ability to implement custom sorting or paging in handlers for this event might be limited by the control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource>.</span></span> <span data-ttu-id="ad52c-602">예를 들어 경우의 열 머리글을 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 클릭 하면, 컨트롤이 자동 정렬을 수행 하는 순서 대로 재정의할 설정할 수는 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-602">For example, when the column header of a <xref:System.Web.UI.WebControls.GridView> control is clicked, the control performs automatic sorting which might override whatever order you establish in the event handler.</span></span>  
  
 <span data-ttu-id="ad52c-603">에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-603">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="ad52c-604">예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체).</span><span class="sxs-lookup"><span data-stu-id="ad52c-604">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="ad52c-605">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-605">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-606">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-606">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="ad52c-607">처리기는 웹 페이지에 있는 문자열 값의 배열에서 값을 검색 하는 쿼리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-607">The handler creates a query that retrieves values from an array of string values in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="ad52c-608">다음 예제에서는 할당 하는 방법의 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 저장된 프로시저를 나타내는 메서드에서 반환 되는 개체에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-608">The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-609">데이터 검색 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-609">Gets the collection of parameters that are used during a data-retrieval operation.</span></span></summary>
        <value><span data-ttu-id="ad52c-610">Select 절을 만드는 데 사용되는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-610">The parameters that are used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-611"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 런타임에 Select 절을 만들 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-611">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to create the Select clause at run time.</span></span> <span data-ttu-id="ad52c-612">매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> Select 절의 런타임 값을 사용 하려는 경우에 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-612">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection when you want to use run-time values in the Select clause.</span></span> <span data-ttu-id="ad52c-613">예를 들어, 매개 변수를 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 사용자 프로필의 속성을 나타내는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-613">For example, you can add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property in the user's profile.</span></span> <span data-ttu-id="ad52c-614">새 값을 계산 하는 데이터 소스에서 해당 속성 및 값 다음 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-614">You can then use that property and a value from the data source to calculate a new value.</span></span>  
  
 <span data-ttu-id="ad52c-615">Select 절에서 런타임에 값을 설정 해야 하는 경우 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-615">If you do not have to set a value at run time in the Select clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-616">검색할 속성을 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-616">You can define the properties to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="ad52c-617">예를 들어, 반환 하는 `FirstName` 및 `LastName` 데이터베이스 테이블에서 값이 설정 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> "firstname, LastName" 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-617">For example, to return the `FirstName` and `LastName` values from a database table, set <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> to "FirstName, LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="ad52c-618">값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 에서 자리 표시자를 추가 컬렉션은 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 명명 된 매개 변수에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-618">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection, you add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property for the named parameter.</span></span> <span data-ttu-id="ad52c-619">Select 절에서 사용 하 여 각 매개 변수 이름 앞에 @ 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-619">In the Select clause, preface each parameter name with the @ symbol.</span></span>  
  
 <span data-ttu-id="ad52c-620">매개 변수를 사용할 수 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 속성 이름을 나타내는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-620">You cannot use a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property name.</span></span> <span data-ttu-id="ad52c-621">동적으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 속성의 이름에 대 한 이벤트 처리기를 만듭니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트 및 사용자 지정을 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 필요에 따라 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-621">To dynamically set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the name of a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property as needed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-622">다음 예제에서는 반환 된 데이터에서 값을 계산 하는 사용자가 제공한 값을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-622">The following example shows how to use a user-supplied value to calculate a value in the returned data.</span></span> <span data-ttu-id="ad52c-623">값을 제조 일 수를 나타내는 텍스트 상자에 입력할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-623">The user can enter a value in the text box that represents the number of manufacturing days.</span></span> <span data-ttu-id="ad52c-624">제품을 제조 하는 일 수를 나타내는 데이터베이스의 값에서이 값을 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-624">That value is divided by a value from a database that represents the number of days to manufacture a product.</span></span> <span data-ttu-id="ad52c-625">반환 된 값을 지정 된 기간 (일) 동안 얼마나 많은 제품을 생산할 수 있는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-625">The returned value indicates how many products can be manufactured during the specified number of days.</span></span> <span data-ttu-id="ad52c-626">통해 선택 명령에 포함 된 사용자의 입력을 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-626">The user's input is included in the Select command through the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-627">데이터를 업데이트 또는 삭제하기 전에 다른 프로세스에서 변경하지 않았음을 확인하기 위해 데이터 소스의 데이터를 뷰 상태에 저장해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-627">Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that the data has not been changed by another process before it is updated or deleted.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="ad52c-628">상태 값 보기에 저장 되는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-628">if the values will be stored in view state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ad52c-629">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-629">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-630">기본적으로 업데이트 및 삭제 작업을 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 모든 레코드의 뷰 상태에 대 한 원래 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-630">By default, when update and delete operations have been enabled, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values for all the records in view state.</span></span> <span data-ttu-id="ad52c-631"><xref:System.Web.UI.WebControls.LinqDataSource> 모든 기본 키에 대 한 값을 저장 하는 컨트롤 및 모든 속성으로 표시 되어 있지 `UpdateCheck.Never` 에 `Column` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-631">The <xref:System.Web.UI.WebControls.LinqDataSource> control stores values for all primary keys and all properties not marked with `UpdateCheck.Never` in the `Column` attribute.</span></span> <span data-ttu-id="ad52c-632">설정한 합니다 `UpdateCheck` 의 속성을 `Column` 특성를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span><span class="sxs-lookup"><span data-stu-id="ad52c-632">You set the `UpdateCheck` property of the `Column` attribute in the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span>  
  
 <span data-ttu-id="ad52c-633">LINQ to SQL 업데이트 또는 데이터를 삭제 하기 전에 데이터 소스의 현재 값에 대 한 뷰 상태 값을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-633">Before LINQ to SQL updates or deletes data, it checks the values in view state against the current values in the data source.</span></span> <span data-ttu-id="ad52c-634">값이 일치 하지 않는 경우 데이터 원본 레코드 변경 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-634">If the values do not match, the data source record has changed.</span></span> <span data-ttu-id="ad52c-635">이 경우 LINQ to SQL 예외를 throw 및 않습니다 업데이트를 사용 하 여 계속 하거나 삭제 하지 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-635">In that case, LINQ to SQL throws an exception and does not continue with the update or delete operation.</span></span> <span data-ttu-id="ad52c-636">LINQ to SQL에 대 한 자세한 내용은 참조 하세요. [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-636">For more information about LINQ to SQL, see [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).</span></span>  
  
 <span data-ttu-id="ad52c-637">보기에서 원래 값을 저장 상태 페이지 크기를 불필요 하 게 커질를 일으킬 수 있으며 악의적인 사용자에 게 중요 한 데이터를 노출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-637">Storing the original values in view state can cause the page size to become unnecessarily large and can expose sensitive data to a malicious user.</span></span> <span data-ttu-id="ad52c-638">뷰 상태 값을 설정 하 여 저장 하지 않으려면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-638">You can disable storing values in view state by setting the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`.</span></span> <span data-ttu-id="ad52c-639">이 작업을 수행 하는 경우 데이터가 변경 되지 않은 되도록 고유한 방법을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-639">If you do this, you must provide your own way to make sure that the data has not changed.</span></span> <span data-ttu-id="ad52c-640">설정한 경우에 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 속성을 `false`, 원래 값을 데이터 바인딩된 컨트롤의 뷰 상태에 저장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-640">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`, the original values are not persisted in view state for the data-bound control.</span></span> <span data-ttu-id="ad52c-641">이 경우 LINQ to SQL 데이터의 무결성을 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-641">In that case, LINQ to SQL cannot verify the integrity of the data.</span></span> <span data-ttu-id="ad52c-642">LINQ to SQL 데이터 소스의 데이터가 실제로 변경 되지 않은 경우에 데이터 충돌을 나타내는 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-642">LINQ to SQL will throw an exception that indicates a data conflict even if the data in the data source has not actually changed.</span></span>  
  
 <span data-ttu-id="ad52c-643">데이터 원본 업데이트 중 자동으로 업데이트 되는 타임 스탬프 필드에 있으면 뷰 상태 값만 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-643">If the underlying data source contains a timestamp field that is automatically updated during an update, you can store only that value in view state.</span></span> <span data-ttu-id="ad52c-644">이런 경우는 타임 스탬프 엔터티 클래스의 속성 `IsVersion=true` 모든 속성으로 설정 됩니다 `UpdateCheck.Never`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-644">In that case, the timestamp property in the entity class is set to `IsVersion=true` and all the properties are set to `UpdateCheck.Never`.</span></span> <span data-ttu-id="ad52c-645">타임 스탬프 필드는 자동으로 업데이트 되므로 데이터베이스에서 해당 레코드에 해당 데이터가 변경 될 때마다 LINQ to SQL은 데이터가 변경 된 경우 해당 값에서 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-645">Because a timestamp field is automatically updated by the database every time that data in that record changes, LINQ to SQL determines from that value if data has changed.</span></span> <span data-ttu-id="ad52c-646">보기 상태 크기를 줄일 수 있습니다 하 고 중요 한 데이터가 노출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-646">This helps reduce the size of view state, and no sensitive data is exposed.</span></span> <span data-ttu-id="ad52c-647">LINQ to SQL은 상태를 확인할 데이터 일관성에 대 한 보기에 타임 스탬프 값을 비교 하 여 데이터베이스의 타임 스탬프 값으로.</span><span class="sxs-lookup"><span data-stu-id="ad52c-647">LINQ to SQL will check for data consistency by comparing the timestamp value in view state with the timestamp value in the database.</span></span> <span data-ttu-id="ad52c-648">자세한 내용은 [연습: LinqDataSource 컨트롤을 사용 하 여 타임 스탬프를 사용 하 여 데이터 무결성을 검사할](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-648">For more information, see [Walkthrough: Using a Timestamp with the LinqDataSource Control to Check Data Integrity](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="ad52c-649">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="ad52c-649">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-650">이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ad52c-650">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="ad52c-651">클래스와 연결된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-651">The type that is associated with the class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-652">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ad52c-652">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ad52c-653"><xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-653">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-654">이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ad52c-654">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="ad52c-655">엔터티의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-655">The name of the entity.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-656">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ad52c-656">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ad52c-657"><xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-657">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-658">이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ad52c-658">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-659">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ad52c-659">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ad52c-660"><xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-660">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-661">데이터 컬렉션을 나타내는 데이터 컨텍스트 클래스의 속성 또는 필드 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-661">Gets or sets the name of the property or field in the data context class that represents a data collection.</span></span></summary>
        <value><span data-ttu-id="ad52c-662">데이터 컬렉션이 들어 있는 속성의 이름을 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-662">A string that contains the name of the property that contains the data collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-663">설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 검색 하려는 데이터를 나타내는 필드나 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-663">Set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that represents the data that you want to retrieve.</span></span> <span data-ttu-id="ad52c-664">데이터베이스 테이블에 연결 하는 경우 속성의 이름은 일반적으로 테이블의 이름과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-664">When you are connecting to a database table, the name of the property is usually the same as the name of the table.</span></span> <span data-ttu-id="ad52c-665">메모리 내 데이터 컬렉션에 연결 하는 경우 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터 컬렉션을 반환 하는 필드나 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-665">When you are connecting to an in-memory data collection, set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that returns the data collection.</span></span>  
  
 <span data-ttu-id="ad52c-666">모든 형식을 반환 하는 속성을 할당할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 검색 작업에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-666">You can assign a property that returns any type to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property for retrieval operations.</span></span> <span data-ttu-id="ad52c-667">속성으로 표현 되는 개체를 구현 하지 않는 경우 <xref:System.Collections.IEnumerable>는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 자동으로 줄 바꿈됩니다 개체 인스턴스의 <xref:System.Collections.IEnumerable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-667">If the object that is represented by the property does not implement <xref:System.Collections.IEnumerable>, the <xref:System.Web.UI.WebControls.LinqDataSource> control will automatically wrap the object in an instance of an <xref:System.Collections.IEnumerable> object.</span></span>  
  
 <span data-ttu-id="ad52c-668">자동 업데이트를 사용 하려면 삽입 또는 삭제 작업의 경우에 할당 되는 클래스를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext> 에 할당 되는 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>.</span><span class="sxs-lookup"><span data-stu-id="ad52c-668">To enable automatic update, insert, or delete operations, the class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext> and the property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="ad52c-669">클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 내용은 참조는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-669">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-670">다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-670">The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls.</span></span> <span data-ttu-id="ad52c-671">하나로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 클래스에서 속성을 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-671">In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property in a class.</span></span> <span data-ttu-id="ad52c-672">해당 속성에는 문자열의 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-672">That property returns an array of strings.</span></span> <span data-ttu-id="ad52c-673">다른 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 데이터베이스 테이블을 나타내는 속성에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-673">In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property that represents a database table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="ad52c-674">이라는 클래스 `ExampleDataContext` 나타냅니다 데이터베이스 테이블은 표시 되지 않도록이 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-674">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="ad52c-675">이 예제가 작동 하려면 LINQ to SQL 클래스 명명된 Example.dbml 및 테이블을 끌어 라는 동영상을 추가 하 여이 클래스를 만들어야 합니다를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-675">For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].</span></span> <span data-ttu-id="ad52c-676">클래스가 `ExampleDataContext` 라는 속성을 사용 하 여 `Movies` 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-676">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="ad52c-677">다음 예제에서는 라는 클래스를 보여 줍니다 `MovieLibrary` 에서 참조 되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-677">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad52c-678"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 뷰 상태 변경 내용을 컨트롤의 <see cref="T:System.Web.UI.StateBag" /> 개체에 저장할 수 있도록 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-678">Tracks view state changes to the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control so that the changes can be stored in the <see cref="T:System.Web.UI.StateBag" /> object for the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="ad52c-679">LinqDataSource 웹 서버 컨트롤 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-679">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="ad52c-680">ASP.NET 데이터 액세스 개요</span><span class="sxs-lookup"><span data-stu-id="ad52c-680">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="ad52c-681">업데이트할 레코드의 행 키 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-681">The row key values for the records to be updated.</span></span></param>
        <param name="values"><span data-ttu-id="ad52c-682">데이터 소스에서 업데이트할 행 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-682">The row values to be updated in the data source.</span></span></param>
        <param name="oldValues"><span data-ttu-id="ad52c-683">데이터 충돌을 감지하기 위해 계산하는 행 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-683">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="ad52c-684">업데이트 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-684">Performs an update operation.</span></span></summary>
        <returns><span data-ttu-id="ad52c-685">업데이트 작업의 영향을 받는 레코드의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-685">The number of records affected by the update operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-686">일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 코드에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-686">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method from your code.</span></span> <span data-ttu-id="ad52c-687">데이터 바인딩된 컨트롤을 자동으로 호출 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드 사용자가 레코드를 업데이트 하는 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-687">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when the user takes action to update a record.</span></span> <span data-ttu-id="ad52c-688">명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드 데이터를 업데이트 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-688">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when you want to create your own process for updating data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-689">다음 예제에서는 프로그래밍 방식으로 사용자가 단추를 클릭 한 후 데이터 원본에서 레코드를 업데이트 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-689">The following example shows how to programmatically update a record in the data source after the user clicks a button.</span></span> <span data-ttu-id="ad52c-690">코드를 <xref:System.Collections.Specialized.ListDictionary> 키 값을 포함 하는 개체를 <xref:System.Collections.Specialized.ListDictionary> 원래 값이 포함 된 개체 및 <xref:System.Collections.Specialized.ListDictionary> 새 값을 포함 하는 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ad52c-690">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 <span data-ttu-id="ad52c-691">다음 예제에서는 이전 예제에 대 한 태그를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-691">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-692">업데이트 작업이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-692">Occurs when an update operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-693">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 업데이트 작업이 완료 된 후 출력 매개 변수 값을 확인 또는 업데이트 작업에서 발생 한 예외를 catch 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-693">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event to catch any exceptions from the update operation or to examine the values of output parameters after the update operation has finished.</span></span> <span data-ttu-id="ad52c-694">출력 매개 변수에서 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-694">The output parameters are available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-695">이 컬렉션은 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스에서 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-695">This collection is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="ad52c-696">매개 변수 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-696">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-697">업데이트 작업 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-697">Occurs before an update operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-698">처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 업데이트, 업데이트 작업 전의 값을 변경 또는 업데이트 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-698">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to validate the object to be updated, to examine data validation errors from the data class, to change a value before the update operation, or to cancel the update operation.</span></span> <span data-ttu-id="ad52c-699"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> 원래 개체와 업데이트 된 개체 이벤트 처리기에 전달 되는 개체에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-699">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object that is passed to event handlers contains both the original object and the updated object.</span></span>  
  
 <span data-ttu-id="ad52c-700">업데이트 작업 중에 유효성 검사 오류가 발생할 경우를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-700">If a validation error occurs during the update operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="ad52c-701">유효성 검사 오류를 업데이트할 값 데이터 클래스의 속성 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하는 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-701">A validation error occurs if a value to be updated does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="ad52c-702">에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트 유효성 검사 예외를 검색 하 고 적절 한 조치를 취할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-702">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="ad52c-703">에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-703">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="ad52c-704">예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체).</span><span class="sxs-lookup"><span data-stu-id="ad52c-704">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="ad52c-705">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-705">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-706">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-706">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="ad52c-707">코드에서 속성을 비교 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성 값이 변경 되었는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-707">The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed.</span></span> <span data-ttu-id="ad52c-708">값이 변경의 값을 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-708">If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="ad52c-709">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 유효성 검사 예외를 검색 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-709">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="ad52c-710">앞의 예제는 유효성 검사 예외를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-710">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="ad52c-711">값 속성의 형식과 일치 하지 않는 경우 예외가 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-711">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="ad52c-712">다음 예제에서와 같은 사용자 지정된 검사에서 throw 수도 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-712">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="ad52c-713">`OnAgeChanging` 메서드를 확인 하는 대 한 숫자는 `Age` 속성이 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-713">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-714">레코드가 검색되는 데이터에 포함되기 위해 충족해야 하는 조건을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-714">Gets or sets a value that specifies what conditions must be true for a record to be included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="ad52c-715">Where 절을 만드는 데 사용되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-715">A string that is used to create the Where clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-716">사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 쿼리에서 반환 하는 레코드에 대 한 조건을 지정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-716">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to specify the conditions for the record to be returned from a query.</span></span> <span data-ttu-id="ad52c-717">구문은 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성은 C#의 LINQ Where 절에 대 한 구문과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-717">The syntax for the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is the same as the syntax for a LINQ Where clause in C#.</span></span>  
  
 <span data-ttu-id="ad52c-718">부울 값을 초래 하는 식을 지정 식이 계산 되는 경우 `true` 지정된 된 행에 대 한 행은 결과 집합에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-718">You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set.</span></span> <span data-ttu-id="ad52c-719">다음 예제에서와 같이, 비교할 열 이름, 비교 연산자 및 값의 식으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-719">Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 <span data-ttu-id="ad52c-720">논리적으로 연결 하는 여러 개의 식을 지정할 `AND` 또는 `OR` 연산자를 사용할 `&&` 논리 AND 연산자로 및 `||` 다음 예와에서 같이, 논리 OR 연산자로:</span><span class="sxs-lookup"><span data-stu-id="ad52c-720">To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 <span data-ttu-id="ad52c-721">리터럴 문자열 값에 대 한 속성을 테스트 하려는 경우에 리터럴 문자열 값을 큰따옴표로 묶어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-721">If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks.</span></span> <span data-ttu-id="ad52c-722">태그에서이 작업을 수행 하려면 묶습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 단일 따옴표 안에 다음 예와에서 같이 절 값:</span><span class="sxs-lookup"><span data-stu-id="ad52c-722">To do this in markup, enclose the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause value in single quotation marks, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 <span data-ttu-id="ad52c-723">코드의 리터럴 문자열 값을 테스트 하려면 다음 예제에서와 같이 큰따옴표를 삽입 하기 위해 사용 중인 언어에 적합 한 이스케이프 문자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-723">To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:</span></span>  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 <span data-ttu-id="ad52c-724">다른 문자열 보다 작거나 보다 큰 문자열 인지 여부를 테스트 하려는 경우의 메서드를 사용 해야 합니다는 <xref:System.String> 클래스를 사용 하는 대신 `<` 또는 `>` 열 이름은 문자열 값 사이의 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-724">If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value.</span></span> <span data-ttu-id="ad52c-725">다음 예제에서는 보다 큼, 보다 크거나 "Sports" 같음, 보다 작거나 같거나, 작은 범주 값이 있는 행 선택 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-725">The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to "Sports":</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 <span data-ttu-id="ad52c-726">다른 메서드를 사용할 수도 있습니다는 <xref:System.String> 클래스와 같이 <xref:System.String.StartsWith%2A>를 <xref:System.String.EndsWith%2A>, 및 <xref:System.String.Contains%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-726">You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="ad52c-727">문자열을 비교 하는 방법에 대 한 자세한 내용은 참조 하세요. [문자열 비교](~/docs/standard/base-types/comparing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-727">For more information about how to compare strings, see [Comparing Strings](~/docs/standard/base-types/comparing.md).</span></span> <span data-ttu-id="ad52c-728">위치에 대 한 자세한 내용은 절 구문을 참조 하세요 [C# 연산자](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) 및 [여기서 절](~/docs/csharp/language-reference/keywords/where-clause.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-728">For more information about Where clause syntax, see [C# Operators](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) and [where clause](~/docs/csharp/language-reference/keywords/where-clause.md).</span></span>  
  
 <span data-ttu-id="ad52c-729">웹 페이지를 만들 때 정의 하는 정적 값을 기준으로 필터링 하는 것 외에도 런타임에 평가 되는 동적 값에 따라 필터링 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-729">In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time.</span></span> <span data-ttu-id="ad52c-730">명명 된 매개 변수를 포함 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 값에 대 한 자리 표시자로 사용 되는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-730">In that case, you include a named parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property that acts as a placeholder for the value.</span></span> <span data-ttu-id="ad52c-731">다음에 일치 하는 이름을 가진 매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-731">You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="ad52c-732">설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true` 매개 변수를 정의 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-732">Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-733">경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true`, 명명 된 매개 변수를 포함할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-733">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="ad52c-734">대신 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 위치를 자동으로 생성 절에서 매개 변수에서의 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-734">Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.</span></span>  
  
 <span data-ttu-id="ad52c-735">데이터를 필터링 하는 방법에 대 한 자세한 내용은 참조 하세요. [연습: 선택 및 LinqDataSource 및 GridView 컨트롤을 사용 하 여 데이터의 하위 집합을 필터링](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-735">For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-736">다음 예제에서는 정적 조건에 따라 쿼리에서 반환 된 데이터를 필터링 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-736">The following example shows how to filter the data returned from a query based on a static condition.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="ad52c-737">다음 예제에서는 런타임 시 사용자가 제공 되는 값을 기준으로 데이터를 필터링 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-737">The following example shows how to filter the data based on a value that is provided by the user at run time.</span></span> <span data-ttu-id="ad52c-738">이 예제는 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 페이지에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-738">In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page.</span></span> <span data-ttu-id="ad52c-739">사용자의 값 중 하나를 선택 하면를 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 선택 하는 `Products` 포함 된 행만 테이블 `UserPrice` 선택한 값과 같으면 값.</span><span class="sxs-lookup"><span data-stu-id="ad52c-739">When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value.</span></span> <span data-ttu-id="ad52c-740"><xref:System.Web.UI.WebControls.GridView> 컨트롤에는 다음 필터링 된 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-740">The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad52c-741">Where 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-741">Gets the collection of parameters that is used to create the Where clause.</span></span></summary>
        <value><span data-ttu-id="ad52c-742"><see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> 속성에서 Where 절을 만드는 데 사용되는 매개 변수 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-742">A collection of the parameters that are used to create the Where clause in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad52c-743"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where 만들 컬렉션 런타임에 절.</span><span class="sxs-lookup"><span data-stu-id="ad52c-743">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to create the Where clause at run time.</span></span> <span data-ttu-id="ad52c-744">매개 변수를 추가 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> where에서 조건 중 하나 이상의 작업을 프로그래밍 방식으로 설정 하려는 경우 컬렉션 절.</span><span class="sxs-lookup"><span data-stu-id="ad52c-744">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection when you want to programmatically set one or more of the conditions in the Where clause.</span></span> <span data-ttu-id="ad52c-745">데이터베이스 테이블의 값과 같으면 성 가진 레코드를 검색 하는 예를 들어, 한 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-745">For example, you might search a database table for records with a last name equal to the value of a <xref:System.Web.UI.WebControls.TextBox> control.</span></span> <span data-ttu-id="ad52c-746">매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 입력란 값에 대 한 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-746">In that case, you add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection for the text box value.</span></span>  
  
 <span data-ttu-id="ad52c-747">Where에서 런타임에 값을 설정 하지 않은 경우 절 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-747">If you do not have to set a value at run time in the Where clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="ad52c-748">검색할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-748">You can define the fields to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="ad52c-749">예를 들어 데이터베이스 테이블에서 값을 반환할 위치 `LastName` equals "Adams" 태그에서 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 `'LastName = "Adams"'` 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="ad52c-749">For example, to return values from a database table where `LastName` equals "Adams" in markup, set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to `'LastName = "Adams"'` without any parameters.</span></span>  
  
 <span data-ttu-id="ad52c-750">값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션, 각 매개 변수에 이름을 할당할 추가 하는 다음에서 자리 표시자는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 해당 매개 변수에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ad52c-750">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for that parameter.</span></span> <span data-ttu-id="ad52c-751">Where에서 절을 사용 하 여 각 매개 변수 이름 앞에 @ 기호.</span><span class="sxs-lookup"><span data-stu-id="ad52c-751">In the Where clause, preface each parameter name with the @ symbol.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad52c-752">다음 예제에서는 사용 하는 방법의 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where를 동적으로 만들려는 컬렉션 절.</span><span class="sxs-lookup"><span data-stu-id="ad52c-752">The following example shows how to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to dynamically create the Where clause.</span></span> <span data-ttu-id="ad52c-753"><xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 값을 사용 하 여 모든 레코드를 반환 합니다 `Price` 에서 사용자가 선택한 값 보다 큰 열을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="ad52c-753">The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>