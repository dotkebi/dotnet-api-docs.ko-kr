<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9511afa8d5aeec0589b889a0879e1941f38526e2" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56361414" /></Metadata><TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.5.25.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
    <AssemblyVersion>4.6.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b5953-101">데이터 흐름 블록으로 작업하기 위한 static(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-102">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-102">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-103">래핑할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-103">The source to wrap.</span></span></param>
        <summary><span data-ttu-id="b5953-104"><see cref="T:System.IObservable`1" /> 위에 새 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 추상화를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="b5953-105">관찰자가 소스를 구독할 수 있도록 하는 <see cref="T:System.IObservable`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-106"><paramref name="source" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-106">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-107">대상 블록에서 허용하는 입력 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-107">Specifies the type of input accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b5953-108">래핑할 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-108">The target to wrap.</span></span></param>
        <summary><span data-ttu-id="b5953-109"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 위에 새 <see cref="T:System.IObserver`1" /> 추상화를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="b5953-110">대상 블록을 래핑하는 관찰자입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-110">An observer that wraps the target block.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="b5953-111">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-111">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="b5953-112">두 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-112">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="b5953-113">첫 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-113">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="b5953-114">첫 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-114">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="b5953-115">두 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-115">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="b5953-116">두 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-116">The handler to execute on data from the second source.</span></span></param>
        <summary><span data-ttu-id="b5953-117">두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="b5953-118">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="b5953-119">선택이 완료되기 전에 두 소스가 완료되면 결과 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="b5953-120">소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="b5953-121">또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span>  
  
<span data-ttu-id="b5953-122">이 메서드는 두 데이터 소스의 요소를 모두 사용하는 것이 아니라 둘 중 한 소스의 요소만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-122">This method will only consume an element from one of the two data sources, never both.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-123"><paramref name="source1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-123">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-124">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-124">-or-</span></span> 
<span data-ttu-id="b5953-125"><paramref name="action1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-125">The  <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-126">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-126">-or-</span></span> 
<span data-ttu-id="b5953-127"><paramref name="source2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-127">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-128">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-128">-or-</span></span> 
<span data-ttu-id="b5953-129"><paramref name="action2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-129">The <paramref name="action2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="b5953-130">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-130">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="b5953-131">두 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-131">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="b5953-132">첫 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-132">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="b5953-133">첫 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-133">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="b5953-134">두 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-134">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="b5953-135">두 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-135">The handler to execute on data from the second source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="b5953-136">이 선택을 구성하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-136">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="b5953-137">두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-137">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="b5953-138">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-138">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="b5953-139">선택을 완료하기 전에 두 소스가 모두 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-139">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="b5953-140">소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-140">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="b5953-141">또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-141">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-142"><paramref name="source1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-142">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-143">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-143">-or-</span></span> 
<span data-ttu-id="b5953-144"><paramref name="action1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-144">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-145">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-145">-or-</span></span> 
<span data-ttu-id="b5953-146"><paramref name="source2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-146">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-147">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-147">-or-</span></span> 
<span data-ttu-id="b5953-148"><paramref name="action2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-148">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-149">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-149">-or-</span></span> 
<span data-ttu-id="b5953-150"><paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-150">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="b5953-151">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-151">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="b5953-152">두 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-152">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="b5953-153">세 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-153">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="b5953-154">첫 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-154">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="b5953-155">첫 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-155">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="b5953-156">두 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-156">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="b5953-157">두 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-157">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="b5953-158">세 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-158">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="b5953-159">세번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-159">The handler to execute on data from the third source.</span></span></param>
        <summary><span data-ttu-id="b5953-160">세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-160">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="b5953-161">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-161">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="b5953-162">선택이 완료되기 전에 모든 소스가 완료되면 결과 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-162">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="b5953-163">소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-163">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="b5953-164">그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-164">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
<span data-ttu-id="b5953-165">이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-165">This method will only consume an element from one of the data sources, never more than one.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-166"><paramref name="source1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-166">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-167">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-167">-or-</span></span> 
<span data-ttu-id="b5953-168"><paramref name="action1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-168">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-169">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-169">-or-</span></span> 
<span data-ttu-id="b5953-170"><paramref name="source2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-170">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-171">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-171">-or-</span></span> 
<span data-ttu-id="b5953-172"><paramref name="action2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-172">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-173">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-173">-or-</span></span> 
<span data-ttu-id="b5953-174"><paramref name="source3" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-174">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-175">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-175">-or-</span></span> 
<span data-ttu-id="b5953-176"><paramref name="action3" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-176">The <paramref name="action3" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="b5953-177">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-177">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="b5953-178">두 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-178">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="b5953-179">세 번째 소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-179">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="b5953-180">첫 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-180">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="b5953-181">첫 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-181">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="b5953-182">두 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-182">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="b5953-183">두 번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-183">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="b5953-184">세 번째 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-184">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="b5953-185">세번째 소스에서 데이터에 실행할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-185">The handler to execute on data from the third source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="b5953-186">이 선택을 구성하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-186">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="b5953-187">세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-187">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="b5953-188">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-188">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="b5953-189">선택을 완료하기 전에 모든 소스가 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-189">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="b5953-190">소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-190">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="b5953-191">그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-191">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
<span data-ttu-id="b5953-192">이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-192">This method will only consume an element from one of the data sources, never more than one.</span></span> <span data-ttu-id="b5953-193">요소를 받은 후 취소가 요청된 경우 취소 요청이 무시되고 관련 처리기가 실행될 수 있도록 허용됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-193">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-194"><paramref name="source1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-194">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-195">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-195">-or-</span></span> 
<span data-ttu-id="b5953-196"><paramref name="action1" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-196">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-197">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-197">-or-</span></span> 
<span data-ttu-id="b5953-198"><paramref name="source2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-198">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-199">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-199">-or-</span></span> 
<span data-ttu-id="b5953-200"><paramref name="action2" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-200">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-201">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-201">-or-</span></span> 
<span data-ttu-id="b5953-202"><paramref name="source3" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-202">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-203">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-203">-or-</span></span> 
<span data-ttu-id="b5953-204"><paramref name="action3" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-204">The <paramref name="action3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-205">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-205">-or-</span></span> 
<span data-ttu-id="b5953-206"><paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-206">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-207">대상에서 필요로 하는 입력 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-207">Specifies the type of input expected by the target.</span></span></typeparam>
        <typeparam name="TOutput"><span data-ttu-id="b5953-208">소스에서 생성된 출력 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-208">Specifies the type of output produced by the source.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b5953-209">캡슐화할 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-209">The target to encapsulate.</span></span></param>
        <param name="source"><span data-ttu-id="b5953-210">캡슐화할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-210">The source to encapsulate.</span></span></param>
        <summary><span data-ttu-id="b5953-211">대상 및 소스를 단일 전파자로 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-211">Encapsulates a target and a source into a single propagator.</span></span></summary>
        <returns><span data-ttu-id="b5953-212">캡슐화된 대상 및 원본입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-212">The encapsulated target and source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-213"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> 메서드를 사용 하려면 두 개의 기존 블록: 대상 블록 (구현 하는 클래스의 인스턴스이고 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) 및 소스 블록 (구현 하는 클래스의 인스턴스 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span><span class="sxs-lookup"><span data-stu-id="b5953-213">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="b5953-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> 연결 하는 내부 클래스의 새 인스턴스를 만듭니다는 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 인터페이스 멤버를를 `target` 매개 변수 및 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> 인터페이스를 멤버는 `source` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="b5953-215">둘 다 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 하 고 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> 에서 파생 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-215">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="b5953-216">블록이 완료 명시적으로 원본에서 대상에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-216">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="b5953-217">따라서를 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> 및 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> 하는 동안 대상에 연결 된 메서드를 <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> 속성 원본에 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-217">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="b5953-218">경우에 해당 해야 절반에 다음이 완료 되 면 가장 적합 한 방식으로; 완료 될 절반 소스 대상 예를 들어:</span><span class="sxs-lookup"><span data-stu-id="b5953-218">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="b5953-219">또는 완료 유형에 전파 하려는 경우이 더 복잡 한 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-219">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="b5953-220">원본 대상에서 메시지 전파를 명시적으로 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-220">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="b5953-221">이 명시적 연결의 장점은 하 고 자유롭게 두 캡슐화 된 블록 사이의 비제한 처리를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-221">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="b5953-222">작업을 블록의 대리자 (대리자를 사용 하는 블록) 하는 경우에 필요한 처리를 인코딩 또는 서로 블록의 하위 네트워크를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-222">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="b5953-223">대리자를 사용 하는 블록을 사용 하는 쉬운 방법이 사용 예를 들어 <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (있는 경우), 또는 사용자 지정 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-223">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-224">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-224">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-225">링크할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-225">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="b5953-226">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-226">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <summary><span data-ttu-id="b5953-227"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-227">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="b5953-228"><see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-229"><paramref name="source" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-229">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-230">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-230">-or-</span></span> 
<span data-ttu-id="b5953-231"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-231">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-232">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-232">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-233">링크할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-233">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="b5953-234">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-234">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="predicate"><span data-ttu-id="b5953-235">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-235">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="b5953-236">지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-236">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="b5953-237"><see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-237">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-238"><paramref name="source" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-238">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-239">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-239">-or-</span></span> 
<span data-ttu-id="b5953-240"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-240">The <paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5953-241">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-241">-or-</span></span> 
<span data-ttu-id="b5953-242"><paramref name="predicate" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-242">The <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-243">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-243">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-244">링크할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-244">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="b5953-245">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-245">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="linkOptions"><span data-ttu-id="b5953-246">데이터 흐름 블록 사이의 링크를 구성하는 방법을 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-246">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span></span></param>
        <param name="predicate"><span data-ttu-id="b5953-247">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-247">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="b5953-248">지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-248">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="b5953-249"><see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-249">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-250"><paramref name="source" />은 null(Visual Basic에서는 Nothing)입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-250">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="b5953-251">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-251">-or-</span></span> 
<span data-ttu-id="b5953-252"><paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-252">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="b5953-253">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-253">-or-</span></span> 
<span data-ttu-id="b5953-254"><paramref name="linkOptions" />은 null(Visual Basic에서는 Nothing)입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-254">The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="b5953-255">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-255">-or-</span></span> 
<span data-ttu-id="b5953-256"><paramref name="predicate" />은 null(Visual Basic에서는 Nothing)입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-256">The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-257">이 블록에서 허용할 수 있는 메시지의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-257">The type of the messages this block can accept.</span></span></typeparam>
        <summary><span data-ttu-id="b5953-258">제공된 모든 메시지를 동기적으로 수락하고 삭제하는 대상 블록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-258">Gets a target block that synchronously accepts all messages offered to it and drops them.</span></span></summary>
        <returns><span data-ttu-id="b5953-259">제공된 모든 메시지를 수락하고 이후에 삭제하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-259">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-260">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-260">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-261">모니터링할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-261">The source to monitor.</span></span></param>
        <summary><span data-ttu-id="b5953-262">사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-262">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="b5953-263">추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-263">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="b5953-264">작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-264">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span>  
  
<span data-ttu-id="b5953-265"><see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-265">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-266">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-266">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-267">모니터링할 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-267">The source to monitor.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-268">비동기 작업을 취소하는 데 사용할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-268">The cancellation token with which to cancel the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="b5953-269">사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-269">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="b5953-270">추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-270">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="b5953-271">작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-271">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span> <span data-ttu-id="b5953-272"><see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-272">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-273">대상 블록에서 허용하는 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-273">Specifies the type of data accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b5953-274">대상 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-274">The target block.</span></span></param>
        <param name="item"><span data-ttu-id="b5953-275">대상에 제공되는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-275">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="b5953-276"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 항목을 게시합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-276">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="b5953-277">대상 블록이 해당 항목을 허용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-277"><see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-278">이 메서드는 대상 블록을 허용 하거나 거부할 항목을 했습니다. 하지만 대상 블록의 특별 한 의미 체계 받아쓰기이 고, 그렇지 않으면 실제로 처리할 항목에 대 한 기다리지 않습니다 후 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-278">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="b5953-279">예를 들어 <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> 에서 반환 됩니다 <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> 해당 입력된 큐에 게시 된 항목에 저장 되는 즉시).</span><span class="sxs-lookup"><span data-stu-id="b5953-279">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="b5953-280">블록의 처리의 관점에서 `Post` 은 비동기입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-280">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="b5953-281">대상 차단 메시지를 제공 하는 해당 지원 연기 또는 더 많은 처리에서 수행할 수 있는 블록에 대 한 해당 `Post` 구현을 사용 하는 것이 좋습니다 <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>를 즉시 반환 됩니다 하며 대상의 게시 된 메시지를 연기 하면 나중에 사용할 후 `SendAsync` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-281">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-282">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-282">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-283">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-283">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="b5953-284">지정된 소스에서 값을 동기적으로 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-284">Synchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="b5953-285">받은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-285">The received value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-286"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-286"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5953-287">항목을 소스에서 받을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-287">No item could be received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-288">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-288">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-289">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-289">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-290">받기 작업을 취소하는 데 사용할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-290">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="b5953-291">지정된 소스에서 값을 동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-291">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="b5953-292">받은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-292">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-293">원본 성공적으로이 작업에서 받은 항목을 제공 하는 경우 동시 취소 요청을 발생 하는 경우에 해당 항목이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-293">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-294"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-294"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5953-295">항목을 소스에서 받을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-295">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b5953-296">소스에서 항목을 받기 전에 작업이 취소되었습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-296">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-297">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-297">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-298">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-298">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="b5953-299">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-299">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="b5953-300">지정된 소스에서 값을 동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-300">Synchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="b5953-301">받은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-301">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-302">원본 성공적으로이 작업에서 받은 항목을 제공 하는 경우 동시 시간 제한이 발생 하는 경우에 해당 항목이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-302">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5953-303"><paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-303"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="b5953-304">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-304">-or-</span></span> 
 <span data-ttu-id="b5953-305"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-305"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-306"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-306"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5953-307">항목을 소스에서 받을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-307">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="b5953-308">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-308">The specified time-out expired before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-309">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-309">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-310">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-310">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="b5953-311">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-311">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-312">받기 작업을 취소하는 데 사용할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-312">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="b5953-313">지정된 원본에서 값을 동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-313">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="b5953-314">받은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-314">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-315">원본에 성공적으로이 작업에서 받은 항목 값 제공 되는 시간 제한 또는 취소 요청을 동시에 발생 하는 경우에 해당 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-315">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-316"><paramref name="source" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-316">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5953-317"><paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-317"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="b5953-318">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-318">-or-</span></span> 
 <span data-ttu-id="b5953-319"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-319"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5953-320">항목을 소스에서 받을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-320">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="b5953-321">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-321">The specified time-out expired before an item was received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b5953-322">소스에서 항목을 받기 전에 작업이 취소되었습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-322">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-323">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-323">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-324">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-324">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="b5953-325">지정된 소스에서 값을 비동기적으로 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-325">Asynchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="b5953-326">비동기 수신 작업을 나타내는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-326">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="b5953-327">원본으로부터 항목 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 받은 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-327">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span></span> <span data-ttu-id="b5953-328">소스가 비어 있고 완료되었기 때문에 항목 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-328">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-329"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-329"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-330">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-330">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-331">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-331">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-332">받기 작업을 취소하는 데 사용할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-332">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="b5953-333">지정된 소스에서 값을 비동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-333">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="b5953-334">비동기 수신 작업을 나타내는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-334">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="b5953-335">원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-335">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="b5953-336">취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-336">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="b5953-337">소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-337">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-338"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-338"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-339">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-339">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-340">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-340">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="b5953-341">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-341">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="b5953-342">지정된 소스에서 값을 비동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-342">Asynchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="b5953-343">비동기 수신 작업을 나타내는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-343">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="b5953-344">원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-344">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="b5953-345">시간 초과가 만료되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-345">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span></span> <span data-ttu-id="b5953-346">소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-346">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-347"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-347"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5953-348"><paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-348"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="b5953-349">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-349">-or-</span></span> 
 <span data-ttu-id="b5953-350"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-350"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-351">소스에 포함된 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-351">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-352">값을 받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-352">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="b5953-353">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-353">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-354">받기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-354">The token which may be used to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="b5953-355">지정된 원본에서 값을 비동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-355">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="b5953-356">비동기 수신 작업을 나타내는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-356">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="b5953-357">원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-357">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="b5953-358">시간 초과가 만료되었거나 취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-358">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="b5953-359">소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-359">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-360"><paramref name="source" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-360"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5953-361"><paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-361"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="b5953-362">또는</span><span class="sxs-lookup"><span data-stu-id="b5953-362">-or-</span></span> 
 <span data-ttu-id="b5953-363"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-363"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-364">대상에 게시할 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-364">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b5953-365">데이터를 게시할 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-365">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="b5953-366">대상에 제공되는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-366">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="b5953-367">대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-367">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="b5953-368">비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-368">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span> <span data-ttu-id="b5953-369">대상에서 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />을 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="true" />로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-369">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span></span> <span data-ttu-id="b5953-370">대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="false" />로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-370">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span></span> <span data-ttu-id="b5953-371">대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <see cref="P:System.Threading.Tasks.Task`1.Result" />와 함께 작업이 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-371">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span></span> <span data-ttu-id="b5953-372">대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-372">If the target never attempts to consume or release the message, the returned task will never complete.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-373"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="b5953-373">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="b5953-374">대상에 게시할 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-374">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b5953-375">데이터를 게시할 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-375">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="b5953-376">대상에 제공되는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-376">The item being offered to the target.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="b5953-377">보내기 작업의 취소를 요청하는 데 사용할 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-377">The cancellation token with which to request cancellation of the send operation.</span></span></param>
        <summary><span data-ttu-id="b5953-378">대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-378">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="b5953-379">비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-379">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span>  <span data-ttu-id="b5953-380">대상에서 SendAsync를 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 true로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-380">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span></span>  <span data-ttu-id="b5953-381">대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 false로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-381">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span></span> <span data-ttu-id="b5953-382">대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <c>Result</c>와 함께 작업이 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-382">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span></span> <span data-ttu-id="b5953-383">대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-383">If the target never attempts to consume or release the message, the returned task will never complete.</span></span>  
  
<span data-ttu-id="b5953-384">대상이 전송된 데이터를 성공적으로 사용하기 전에 취소가 요청된 경우 반환된 작업이 취소됨 상태에서 완료되고 대상에서 해당 데이터를 더 이상 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-384">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5953-385"><paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-385">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; *  -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="b5953-386">소스에 포함된 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-386">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b5953-387">받는 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-387">The source from which to receive.</span></span></param>
        <param name="item"><span data-ttu-id="b5953-388">소스에서 받은 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-388">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="b5953-389"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에서 항목을 비동기적으로 받으려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-389">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="b5953-390">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-390"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5953-391">이 메서드는 원본 제공 하는 항목까지 기다리지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-391">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="b5953-392">요소를 사용할 수 있는지 여부를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5953-392">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>