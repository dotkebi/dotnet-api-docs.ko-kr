<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b73d9b8336c688dfdf0cd71df400a5168fb8699" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56786898" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9ba56-101">이중 버퍼링에 사용할 수 있는 그래픽 버퍼를 만드는 메서드를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-101">Provides methods for creating graphics buffers that can be used for double buffering.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-102"><xref:System.Drawing.BufferedGraphicsContext> 클래스를 사용 하면 그래픽에 대 한 사용자 지정 이중 버퍼링을 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-102">The <xref:System.Drawing.BufferedGraphicsContext> class allows you to implement custom double buffering for your graphics.</span></span> <span data-ttu-id="9ba56-103">이중 버퍼링을 사용 하는 그래픽을 줄이거나 없앨 표시 화면을 그려서 발생 하는 깜박임을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-103">Graphics that use double buffering can reduce or eliminate flicker that is caused by redrawing a display surface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ba56-104">이중 버퍼링을 사용 하는 가장 간단한 방법은 설정 하는 것은 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 스타일 플래그를 사용 하 여 컨트롤을는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ba56-104">The simplest way to use double buffering is to set the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control style flag on a control using the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span> <span data-ttu-id="9ba56-105">설정 된 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 스타일 플래그를 컨트롤에 대 한 추가 코드 없이 기본 그래픽 버퍼를 통해 컨트롤에 대 한 모든 그리기를 리디렉션합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-105">Setting the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control styles flag for a control redirects all painting for the control through a default graphics buffer, without requiring any additional code.</span></span> <span data-ttu-id="9ba56-106">이 플래그를로 `true` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-106">This flag is set to `true` by default.</span></span>  
  
 <span data-ttu-id="9ba56-107"><xref:System.Drawing.BufferedGraphicsContext> 클래스 만들고 그래픽 버퍼를 구성 하기 위한 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-107">The <xref:System.Drawing.BufferedGraphicsContext> class provides methods for creating and configuring a graphics buffer.</span></span> <span data-ttu-id="9ba56-108">합니다 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드를 만듭니다를 <xref:System.Drawing.BufferedGraphics>, 버퍼에 쓰고 출력 디바이스에 해당 내용을 렌더링 하 여 메서드도 제공 하는 그래픽 버퍼에 대 한 래퍼는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-108">The <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method creates a <xref:System.Drawing.BufferedGraphics>, which is a wrapper for a graphics buffer that also provides methods you can use to write to the buffer and render its contents to an output device.</span></span>  
  
 <span data-ttu-id="9ba56-109">검색할 수 있습니다 합니다 <xref:System.Drawing.BufferedGraphicsContext> 정적에서 현재 애플리케이션 도메인에 대 한 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-109">You can retrieve the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain from the static <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="9ba56-110">애니메이션 같은 그래픽 위주 애플리케이션을 만들 수 있습니다 전용 <xref:System.Drawing.BufferedGraphicsContext> 생성자를 사용 하지만 대부분의 애플리케이션에 대 한는 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성 만으로도 충분 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-110">For graphically intensive applications such as animation, you can create a dedicated <xref:System.Drawing.BufferedGraphicsContext> using the constructor, but for most applications the <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> property will be sufficient.</span></span>  
  
 <span data-ttu-id="9ba56-111">버퍼링 된 그래픽 및 버퍼링을 사용자 지정 구현에 대 한 자세한 내용은 참조 하세요. [이중 버퍼링 그래픽](~/docs/framework/winforms/advanced/double-buffered-graphics.md) 고 [방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-111">For more information on drawing buffered graphics and custom buffering implementations, see [Double Buffered Graphics](~/docs/framework/winforms/advanced/double-buffered-graphics.md) and [How to: Manually Manage Buffered Graphics](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ba56-112">다음 코드 예제에서는 획득 하는 방법에 설명 합니다 <xref:System.Drawing.BufferedGraphicsContext> 현재 애플리케이션 도메인에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-112">The following code example demonstrates how to acquire the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain.</span></span> <span data-ttu-id="9ba56-113">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-113">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-114">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-114">Double Buffered Graphics</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ba56-115"><see cref="T:System.Drawing.BufferedGraphicsContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-115">Initializes a new instance of the <see cref="T:System.Drawing.BufferedGraphicsContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-116">애니메이션 같은 그래픽 위주 애플리케이션에 대 한 경우에 따라 성능을 향상 시킬 수 전용을 사용 하 여 <xref:System.Drawing.BufferedGraphicsContext> 제공한 기본 인스턴스 대신는 <xref:System.Drawing.BufferedGraphicsManager>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-116">For graphically intensive applications such as animation, you can sometimes improve performance by using a dedicated <xref:System.Drawing.BufferedGraphicsContext> instead of the default instance provided by the <xref:System.Drawing.BufferedGraphicsManager>.</span></span> <span data-ttu-id="9ba56-117">이 통해 만들고 그래픽 버퍼를 개별적으로 관리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-117">This allows you to create and manage graphics buffers individually.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ba56-118">항상 호출 해야 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 전용을 사용 하 여 마치면 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-118">You should always call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> when you finish using a dedicated <xref:System.Drawing.BufferedGraphicsContext>.</span></span>  
  
 <span data-ttu-id="9ba56-119">전용된 그래픽 버퍼에 대 한 자세한 내용은 참조 하세요. [방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-119">For more information about dedicated graphics buffers, see [How to: Manually Manage Buffered Graphics](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-120">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-120">Double Buffered Graphics</span></span></related>
        <related type="Article" href="~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md"><span data-ttu-id="9ba56-121">방법: 버퍼링 된 그래픽 수동 관리</span><span class="sxs-lookup"><span data-stu-id="9ba56-121">How to: Manually Manage Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9ba56-122">그래픽 버퍼를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-122">Creates a graphics buffer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics"><span data-ttu-id="9ba56-123">새 버퍼의 픽셀 형식을 일치시킬 대상 <see cref="T:System.Drawing.Graphics" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-123">The <see cref="T:System.Drawing.Graphics" /> to match the pixel format for the new buffer to.</span></span></param>
        <param name="targetRectangle"><span data-ttu-id="9ba56-124">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-124">A <see cref="T:System.Drawing.Rectangle" /> indicating the size of the buffer to create.</span></span></param>
        <summary><span data-ttu-id="9ba56-125">지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-125">Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />.</span></span></summary>
        <returns><span data-ttu-id="9ba56-126">지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-126">A <see cref="T:System.Drawing.BufferedGraphics" /> that can be used to draw to a buffer of the specified dimensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-127">호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 크기가 값을 초과 하는 사각형을 사용 하 여 메서드의 합니다 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성을 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼에 대 한 임시 컨텍스트를 제공 하기 위해 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-127">When you call the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method with a rectangle whose size exceeds the value of the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> property, a temporary <xref:System.Drawing.BufferedGraphicsContext> is created to allocate the buffer and provide a temporary context for the buffer.</span></span> <span data-ttu-id="9ba56-128">새 <xref:System.Drawing.BufferedGraphicsContext> 구별 되는 <xref:System.Drawing.BufferedGraphicsContext> 애플리케이션에 대 한 도메인 하며 자동으로 삭제 됩니다 때 합니다 <xref:System.Drawing.BufferedGraphics> 반환한를 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-128">The new <xref:System.Drawing.BufferedGraphicsContext> is distinct from the <xref:System.Drawing.BufferedGraphicsContext> for the application domain and it is disposed automatically when the <xref:System.Drawing.BufferedGraphics> returned by the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method is disposed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ba56-129">다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ba56-129">The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method.</span></span> <span data-ttu-id="9ba56-130">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-130">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-131">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-131">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC"><span data-ttu-id="9ba56-132">새 버퍼의 픽셀 형식을 일치시킬 대상 장치 컨텍스트에 대한 <see cref="T:System.IntPtr" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-132">An <see cref="T:System.IntPtr" /> to a device context to match the pixel format of the new buffer to.</span></span></param>
        <param name="targetRectangle"><span data-ttu-id="9ba56-133">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-133">A <see cref="T:System.Drawing.Rectangle" /> indicating the size of the buffer to create.</span></span></param>
        <summary><span data-ttu-id="9ba56-134">지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-134">Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />.</span></span></summary>
        <returns><span data-ttu-id="9ba56-135">지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-135">A <see cref="T:System.Drawing.BufferedGraphics" /> that can be used to draw to a buffer of the specified dimensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-136">호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 크기가 값을 초과 하는 사각형을 사용 하 여 메서드의 합니다 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성을 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼에 대 한 임시 컨텍스트를 제공 하기 위해 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-136">When you call the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method with a rectangle whose size exceeds the value of the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> property, a temporary <xref:System.Drawing.BufferedGraphicsContext> is created to allocate the buffer and provide a temporary context for the buffer.</span></span> <span data-ttu-id="9ba56-137">새 <xref:System.Drawing.BufferedGraphicsContext> 구별 되는 <xref:System.Drawing.BufferedGraphicsContext> 애플리케이션에 대 한 도메인 하며 자동으로 삭제 됩니다 때 합니다 <xref:System.Drawing.BufferedGraphics> 반환한를 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-137">The new <xref:System.Drawing.BufferedGraphicsContext> is distinct from the <xref:System.Drawing.BufferedGraphicsContext> for the application domain and it is disposed automatically when the <xref:System.Drawing.BufferedGraphics> returned by the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method is disposed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ba56-138">다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ba56-138">The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method.</span></span> <span data-ttu-id="9ba56-139">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-139">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9ba56-140">비관리 코드에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-140">for access to unmanaged code.</span></span> <span data-ttu-id="9ba56-141">연관 된 열거: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="9ba56-141">Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-142">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-142">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ba56-143"><see cref="T:System.Drawing.BufferedGraphicsContext" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-143">Releases all resources used by the <see cref="T:System.Drawing.BufferedGraphicsContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-144"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 사용을 마치면 <xref:System.Drawing.BufferedGraphicsContext>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-144">Call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> when you are finished using the <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="9ba56-145"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 메서드를 사용하면 <xref:System.Drawing.BufferedGraphicsContext>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-145">The <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> method leaves the <xref:System.Drawing.BufferedGraphicsContext> in an unusable state.</span></span> <span data-ttu-id="9ba56-146">호출한 후 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Drawing.BufferedGraphicsContext> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Drawing.BufferedGraphicsContext> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-146">After calling <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, you must release all references to the <xref:System.Drawing.BufferedGraphicsContext> so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphicsContext> was occupying.</span></span> <span data-ttu-id="9ba56-147">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-147">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ba56-148"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Drawing.BufferedGraphicsContext>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="9ba56-148">Always call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> before you release your last reference to the <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="9ba56-149">사용 중인 리소스가 가비지 수집기가 호출 될 때까지 해제 되지 것입니다이 고, 그렇지 합니다 <xref:System.Object.Finalize%2A> 메서드는 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-149">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Object.Finalize%2A> method of the <xref:System.Drawing.BufferedGraphicsContext>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-150">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-150">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ba56-151">가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-151">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ba56-152">버퍼가 할당된 후 아직 삭제되지 않았으면 현재 그래픽 버퍼를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-152">Disposes of the current graphics buffer, if a buffer has been allocated and has not yet been disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-153">그래픽 버퍼를 사용 하는 경우 표시 됩니다 삭제에 대 한 무료;는 즉시 그렇지 않으면 삭제 됩니다 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-153">If the graphics buffer is in use, it will be marked for disposal as soon as it is free; otherwise, it will be disposed immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-154">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-154">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9ba56-155">사용할 버퍼의 최대 크기를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-155">Gets or sets the maximum size of the buffer to use.</span></span></summary>
        <value><span data-ttu-id="9ba56-156">버퍼의 최대 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-156">A <see cref="T:System.Drawing.Size" /> indicating the maximum size of the buffer dimensions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ba56-157">이 속성을 사용 하면 메모리에 유지 해야 하는 버퍼의 최대 크기를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-157">This property allows you to get or set the maximum dimensions for a buffer that should be retained in memory.</span></span> <span data-ttu-id="9ba56-158">하지만 보다 큰 크기를 사용 하 여 버퍼링 된 모든 크기의 버퍼를 할당할 수 있습니다는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 크기가 일시적으로 사용 하 고 폐기할 때를 <xref:System.Drawing.BufferedGraphics> 개체를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-158">You can allocate a buffer of any size, however any buffer with dimensions greater than the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> size will be used temporarily and then discarded when the <xref:System.Drawing.BufferedGraphics> object is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ba56-159">다음 예제에 대 한 버퍼에 대 한 최대 크기를 설정 하는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-159">The following example demonstrates setting the maximum size for the buffer for a <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="9ba56-160">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-160">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9ba56-161">크기의 높이나 너비가 0보다 작거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="9ba56-161">The height or width of the size is less than or equal to zero.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="9ba56-162">모든 windows에 대 한 사용자 액세스를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ba56-162">for allowing user access to all windows.</span></span> <span data-ttu-id="9ba56-163">연관 된 열거: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="9ba56-163">Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md"><span data-ttu-id="9ba56-164">이중 버퍼링 그래픽</span><span class="sxs-lookup"><span data-stu-id="9ba56-164">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>