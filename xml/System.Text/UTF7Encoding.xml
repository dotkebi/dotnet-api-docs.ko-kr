<Type Name="UTF7Encoding" FullName="System.Text.UTF7Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="058c9e0538fbd721236b640c1af0b567e57af763" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57919197" /></Metadata><TypeSignature Language="C#" Value="public class UTF7Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF7Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF7Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF7Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF7Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF7Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="354ab-101">유니코드 문자의 UTF-7 인코딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-101">Represents a UTF-7 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-102">인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="354ab-103">디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변환 하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="354ab-104">인코딩을 u t F-7 7 비트 ASCII 문자의 시퀀스를 유니코드 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-104">The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.</span></span> <span data-ttu-id="354ab-105">이 인코딩은 특정 하는 것이 필요한 프로토콜, 가장 자주 전자 메일 또는 뉴스 그룹 프로토콜 지원.</span><span class="sxs-lookup"><span data-stu-id="354ab-105">This encoding supports certain protocols for which it is required, most often email or newsgroup protocols.</span></span> <span data-ttu-id="354ab-106">U t F-7은 특별히 안전 하거나 강력, 이므로 대부분의 최신 시스템에서는 8 비트 인코딩을 u t F-8 일반적으로 u t F-7로 기본 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-106">Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-107"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-107"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-108">보안상의 이유로 응용 프로그램을 사용할지 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-108">For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 <span data-ttu-id="354ab-109">Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>를 참조 하세요 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-109">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="354ab-110"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 유니코드 문자 집합 인코딩의 바이트 수 결과 확인 및 <xref:System.Text.UTF7Encoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-110">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="354ab-111">마찬가지로 합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 바이트 시퀀스를 디코딩할에서 디코딩될 문자 확인 및 <xref:System.Text.UTF7Encoding.GetChars%2A> 및 <xref:System.Text.UTF7Encoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-111">Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="354ab-112"><xref:System.Text.UTF7Encoding> 65000 Windows 코드 페이지에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-112"><xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-113">개체 직렬화 되 고 다른.NET Framework 버전을 사용 하 여 역직렬화 하는 경우에 u t F-7로 인코딩된 개체의 상태가 유지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-113">The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-114">다음 코드 예제를 사용 하는 방법에 설명 된 <xref:System.Text.UTF7Encoding> 유니코드 문자의 문자열을 인코딩하고 바이트 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-114">The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="354ab-115">문자열로 다시는 바이트 배열을 디코딩하면, 하는 경우 데이터가 손실 되는 알 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-115">Notice that when the byte array is decoded back to a string, no data is lost.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="354ab-116">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="354ab-116">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="354ab-117"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-117">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="354ab-118"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-118">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-119">이 생성자는 필요에 따라 문자를 허용 하지 않는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-119">This constructor creates an instance that does not allow optional characters.</span></span> <span data-ttu-id="354ab-120">호출을 <xref:System.Text.UTF7Encoding.%23ctor%2A> 생성자 호출에 해당 하는 <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> 사용 하는 생성자를 `allowOptionals` 매개 변수 및 지정 `false` 해당 매개 변수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-120">Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.</span></span>  
  
 <span data-ttu-id="354ab-121">인스턴스는 선택적 문자를 허용 하는 경우 유니코드 코드 포인트는 수정 된 기본 64 문자 대신 해당 선택적 문자를 사용 하 여 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-121">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="354ab-122">필요에 따라 문자는 느낌표 ("!"), 백슬래시 ("\\"), 세로 줄 ("&#124;"), 큰따옴표 ("" "), 숫자 기호 ("#"), 달러 기호 ("$"), 백분율 기호 ("%"), 앰퍼샌드 ("& "), 별표 (" \* "), 세미콜론 (","), 왼쪽 꺾쇠 괄호 ("\<"), 오른쪽 꺾쇠 괄호 (">"), 왼쪽된 중괄호 ("{0}"), 오른쪽 중괄호 ("}"), 왼쪽된 대괄호 ("["), 오른쪽 대괄호 ("]"), 등호 ("="), at 기호 ("@"), 곡절 악센트 ("^"), 밑줄 ("_"), 및 억음 악센트 ("'").</span><span class="sxs-lookup"><span data-stu-id="354ab-122">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-123"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-123"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-124">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-124">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-125">다음 코드 예제에는 새로 만드는 방법을 보여 줍니다 <xref:System.Text.UTF7Encoding> 인스턴스 및 인코딩의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-125">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding (bool allowOptionals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool allowOptionals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowOptionals As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding(bool allowOptionals);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF7Encoding : bool -&gt; System.Text.UTF7Encoding" Usage="new System.Text.UTF7Encoding allowOptionals" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowOptionals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowOptionals"><span data-ttu-id="354ab-126">선택적 문자가 허용되도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-126"><see langword="true" /> to specify that optional characters are allowed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="354ab-127"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-127">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span> <span data-ttu-id="354ab-128">매개 변수는 선택적 문자를 허용하는지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-128">A parameter specifies whether to allow optional characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-129">인스턴스는 선택적 문자를 허용 하는 경우 유니코드 코드 포인트는 수정 된 기본 64 문자 대신 해당 선택적 문자를 사용 하 여 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-129">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="354ab-130">필요에 따라 문자는 느낌표 ("!"), 백슬래시 ("\\"), 세로 줄 ("&#124;"), 큰따옴표 ("" "), 숫자 기호 ("#"), 달러 기호 ("$"), 백분율 기호 ("%"), 앰퍼샌드 ("& "), 별표 (" \* "), 세미콜론 (","), 왼쪽 꺾쇠 괄호 ("\<"), 오른쪽 꺾쇠 괄호 (">"), 왼쪽된 중괄호 ("{0}"), 오른쪽 중괄호 ("}"), 왼쪽된 대괄호 ("["), 오른쪽 대괄호 ("]"), 등호 ("="), at 기호 ("@"), 곡절 악센트 ("^"), 밑줄 ("_"), 및 억음 악센트 ("'").</span><span class="sxs-lookup"><span data-stu-id="354ab-130">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-131"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-131"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-132">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-132">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-133">다음 코드 예제에는 새로 만드는 방법을 보여 줍니다 <xref:System.Text.UTF7Encoding> 필요에 따라 문자를 허용 하는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="354ab-133">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF7Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="354ab-134">현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-134">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></param>
        <summary><span data-ttu-id="354ab-135">지정한 개체가 현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 같은지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-135">Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="354ab-136"><paramref name="value" />가 <see cref="T:System.Text.UTF7Encoding" /> 개체이고 현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-136"><see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-137">두 개의 <xref:System.Text.UTF7Encoding> 개체는 둘 다 허용 하거나 하거나 필요에 따라 문자를 허용 하지 않습니다 경우 해당 기본 <xref:System.Text.Encoding.EncoderFallback%2A> 및 <xref:System.Text.Encoding.DecoderFallback%2A> 속성이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-137">Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:System.Text.UTF7Encoding.#ctor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="354ab-138">문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-138">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF7Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="354ab-139">인코딩할 문자 집합이 포함된 <see cref="T:System.String" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-139">The <see cref="T:System.String" /> object containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="354ab-140">지정한 <see cref="T:System.String" /> 개체의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-140">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="354ab-141">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-141">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-142">정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하는 데 필요한 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-142">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-143">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-143">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-144">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-144">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-145">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 문자 배열을 인코딩하는 데 필요한 바이트 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-145">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-146"><paramref name="s" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-146"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-147">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-147">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-148">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-148">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-149">및</span><span class="sxs-lookup"><span data-stu-id="354ab-149">-and-</span></span> 
 <span data-ttu-id="354ab-150"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-150"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="354ab-151">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-151">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="354ab-152">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-152">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="354ab-153">지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-153">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="354ab-154">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-154">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-155">정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하는 데 필요한 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-155">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-156">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-156">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-157">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-157">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-158"><paramref name="chars" />가 <see langword="null" />(Visual Basic .NET의 경우 <see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-158"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-159"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-159"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-160">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-160">-or-</span></span> 
<span data-ttu-id="354ab-161">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-161">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-162">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-162">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-163">및</span><span class="sxs-lookup"><span data-stu-id="354ab-163">-and-</span></span> 
 <span data-ttu-id="354ab-164"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-164"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="354ab-165">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-165">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="354ab-166">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-166">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="354ab-167">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-167">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="354ab-168">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-168">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="354ab-169">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-169">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="354ab-170">지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-170">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="354ab-171">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-171">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-172">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하려면 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-172">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-173">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-173">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-174">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-174">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-175">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 유니코드 문자의 배열을 인코딩하는 데 필요한 바이트 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-175">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-176"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-176"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-177"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-177"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-178">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-178">-or-</span></span> 
 <span data-ttu-id="354ab-179"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-179"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="354ab-180">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-180">-or-</span></span> 
<span data-ttu-id="354ab-181">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-181">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-182">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-182">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-183">및</span><span class="sxs-lookup"><span data-stu-id="354ab-183">-and-</span></span> 
 <span data-ttu-id="354ab-184"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-184"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="354ab-185">문자 집합을 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-185">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="354ab-186">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-186">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="354ab-187">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-187">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="354ab-188">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-188">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="354ab-189">쓸 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-189">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="354ab-190">지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-190">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="354ab-191"><paramref name="bytes" />가 가리키는 위치에 써지는 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-191">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-192">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하려면 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-192">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-193">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-193">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-194">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-194">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-195">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-195">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-196">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-196">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-197"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-197"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-198">잘못 된 문자를 수정 하는 기본 64 문자로 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-198">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="354ab-199">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-199">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-200"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-200"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="354ab-201">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-201">-or-</span></span> 
 <span data-ttu-id="354ab-202"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-202"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-203"><paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-203"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="354ab-204"><paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-204"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-205">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-205">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-206">및</span><span class="sxs-lookup"><span data-stu-id="354ab-206">-and-</span></span> 
 <span data-ttu-id="354ab-207"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-207"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="354ab-208">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-208">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="354ab-209">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-209">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="354ab-210">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-210">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="354ab-211">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-211">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="354ab-212">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-212">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="354ab-213">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-213">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="354ab-214">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-214">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="354ab-215">지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-215">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="354ab-216"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-216">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-217">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하려면 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-217">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-218">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-218">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-219">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-219">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-220">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-220">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-221">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-221">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-222"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-222"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-223">잘못 된 문자를 수정 하는 기본 64 문자로 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-223">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="354ab-224">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-224">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-225">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetBytes%2A> 다양 한 문자를 인코딩할 방법은 <xref:System.String> 인코딩된 바이트를 바이트 배열의 요소 범위에서 저장 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-225">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-226"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-226"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="354ab-227">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-227">-or-</span></span> 
 <span data-ttu-id="354ab-228"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-228"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-229"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-229"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-230">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-230">-or-</span></span> 
 <span data-ttu-id="354ab-231"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-231"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="354ab-232">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-232">-or-</span></span> 
 <span data-ttu-id="354ab-233"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-233"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="354ab-234"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-234"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-235">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-235">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-236">및</span><span class="sxs-lookup"><span data-stu-id="354ab-236">-and-</span></span> 
 <span data-ttu-id="354ab-237"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-237"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteIndex" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="354ab-238">인코딩할 문자 집합이 포함된 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-238">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="354ab-239">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-239">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="354ab-240">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-240">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="354ab-241">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-241">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="354ab-242">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-242">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="354ab-243">지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-243">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="354ab-244"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-244">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-245">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하려면 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-245">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-246">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-246">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-247">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-247">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-248">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-248">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-249">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-249">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-250"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-250"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-251">잘못 된 문자를 수정 하는 기본 64 문자로 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-251">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="354ab-252">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-252">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-253">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetBytes%2A> 메서드를 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-253">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-254"><paramref name="s" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-254"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="354ab-255">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-255">-or-</span></span> 
 <span data-ttu-id="354ab-256"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-256"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-257"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-257"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-258">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-258">-or-</span></span> 
 <span data-ttu-id="354ab-259"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-259"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="354ab-260">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-260">-or-</span></span> 
 <span data-ttu-id="354ab-261"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-261"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="354ab-262"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-262"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-263">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-263">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-264">및</span><span class="sxs-lookup"><span data-stu-id="354ab-264">-and-</span></span> 
 <span data-ttu-id="354ab-265"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-265"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="354ab-266">바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-266">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="354ab-267">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-267">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="354ab-268">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-268">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="354ab-269">지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-269">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="354ab-270">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-270">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-271">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-271">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="354ab-272">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-272">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="354ab-273">합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-273">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-274"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-274"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-275"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-275"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-276">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-276">-or-</span></span> 
<span data-ttu-id="354ab-277">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-277">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-278">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-278">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-279">및</span><span class="sxs-lookup"><span data-stu-id="354ab-279">-and-</span></span> 
 <span data-ttu-id="354ab-280"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-280"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="354ab-281">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-281">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="354ab-282">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-282">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="354ab-283">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-283">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="354ab-284">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-284">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="354ab-285">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-285">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="354ab-286">지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-286">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="354ab-287">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-287">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-288">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-288">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="354ab-289">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-289">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="354ab-290">합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-290">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-291">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-291">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-292"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-292"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-293"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-293"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-294">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-294">-or-</span></span> 
 <span data-ttu-id="354ab-295"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-295"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="354ab-296">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-296">-or-</span></span> 
<span data-ttu-id="354ab-297">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-297">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-298">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-298">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-299">및</span><span class="sxs-lookup"><span data-stu-id="354ab-299">-and-</span></span> 
 <span data-ttu-id="354ab-300"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-300"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="354ab-301">바이트 시퀀스를 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-301">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="354ab-302">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-302">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="354ab-303">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-303">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="354ab-304">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-304">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="354ab-305">쓸 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-305">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="354ab-306">지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-306">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="354ab-307"><paramref name="chars" />가 가리키는 위치에 써지는 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-307">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-308">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-308">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="354ab-309">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-309">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="354ab-310">합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-310">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-311">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-311">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-312">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-312">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-313"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-313"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-314">잘못 된 바이트에 발생 하는 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-314">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="354ab-315">Byte 값이 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-315">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="354ab-316">예를 들어 인코딩할 바이트 16 진수 0x81 인 경우 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-316">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="354ab-317">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-317">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-318"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-318"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="354ab-319">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-319">-or-</span></span> 
 <span data-ttu-id="354ab-320"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-320"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-321"><paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-321"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="354ab-322"><paramref name="charCount" />가 결과 문자 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-322"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-323">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-323">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-324">및</span><span class="sxs-lookup"><span data-stu-id="354ab-324">-and-</span></span> 
 <span data-ttu-id="354ab-325"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-325"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="354ab-326">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-326">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="354ab-327">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-327">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="354ab-328">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-328">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="354ab-329">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-329">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="354ab-330">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-330">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="354ab-331">결과 문자 집합을 포함할 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-331">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="354ab-332">결과 문자 집합을 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-332">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="354ab-333">지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-333">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="354ab-334"><paramref name="chars" />에 쓴 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-334">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-335">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-335">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="354ab-336">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-336">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="354ab-337">합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-337">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-338">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-338">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-339">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-339">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-340"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-340"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-341">잘못 된 바이트에 발생 하는 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-341">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="354ab-342">Byte 값이 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-342">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="354ab-343">예를 들어 인코딩할 바이트 16 진수 0x81 인 경우 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-343">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="354ab-344">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-344">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-345">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 결과 문자 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-345">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-346"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-346"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="354ab-347">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-347">-or-</span></span> 
 <span data-ttu-id="354ab-348"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-348"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-349"><paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-349"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-350">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-350">-or-</span></span> 
 <span data-ttu-id="354ab-351"><paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-351"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="354ab-352">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-352">-or-</span></span> 
 <span data-ttu-id="354ab-353"><paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-353"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="354ab-354"><paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-354"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-355">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-355">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-356">및</span><span class="sxs-lookup"><span data-stu-id="354ab-356">-and-</span></span> 
 <span data-ttu-id="354ab-357"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-357"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF7Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="354ab-358">UTF-7로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-358">Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="354ab-359">UTF-7로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <see cref="T:System.Text.Decoder" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-359">A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-360"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 문자의 순차 블록 순차 블록 바이트 변환 된 <xref:System.Text.UTF7Encoding.GetChars%2A> 이 클래스의 메서드.</span><span class="sxs-lookup"><span data-stu-id="354ab-360">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="354ab-361">그러나는 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-361">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="354ab-362"><xref:System.Text.Decoder> 도 데이터 블록의 끝에 후행 바이트를 유지 하 고 디코딩 작업은 다음에 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-362">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="354ab-363">따라서 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 고 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-363">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-364">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 문자의 시퀀스를 u t F-7을 변환 하는 디코더를 얻는 메서드를 인코딩된 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-364">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="354ab-365">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="354ab-365">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF7Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="354ab-366">유니코드 문자 시퀀스를 UTF-7로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-366">Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="354ab-367">유니코드 문자 시퀀스를 UTF-7로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-367">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-368"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 문자의 순차 블록 순차 블록 바이트 변환 된 <xref:System.Text.UTF7Encoding.GetChars%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="354ab-368">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="354ab-369">그러나는 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-369">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="354ab-370"><xref:System.Text.Decoder> 도 데이터 블록의 끝에 후행 바이트를 유지 하 고 디코딩 작업은 다음에 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-370">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="354ab-371">따라서 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 고 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-371">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-372">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 로 인코딩된 바이트 시퀀스를 u t F-7 문자 시퀀스로 변환 하는 인코더를 가져올 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-372">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="354ab-373">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="354ab-373">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF7Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="354ab-374">현재 <see cref="T:System.Text.UTF7Encoding" /> 개체에 대한 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-374">Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="354ab-375">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-375">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-376">값을 반환 합니다 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 메서드 구분 하기에 적합 하지 않습니다. <xref:System.Text.UTF7Encoding> 다른 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-376">The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another.</span></span> <span data-ttu-id="354ab-377">고유 해시 코드를 응용 프로그램에 필요한 경우 재정의 해야 합니다 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="354ab-377">If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF7Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="354ab-378">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-378">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="354ab-379">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-379">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="354ab-380">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-380">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-381">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 응용 프로그램에서는 결과 바이트를 저장 하려면 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-381">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="354ab-382">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-382">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="354ab-383">합니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-383">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자, <xref:System.Text.EncoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="354ab-385">잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-385">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="354ab-386">대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-386">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="354ab-387">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-387">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="354ab-388">사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-388">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="354ab-389">U t F-7은 매우 효율적 ASCII 데이터, 문자당 1 바이트를 인코딩 하지만 다른 데이터에 대 한 매우 효율적인 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-389">While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.</span></span> <span data-ttu-id="354ab-390">위에서 언급 한 것 처럼 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 최악의 경우를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-390">As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case.</span></span> <span data-ttu-id="354ab-391">인코딩할 데이터는 주로 ASCII 및 u t F-7은 훨씬 더 많은 ASCII 문자가 함께 클러스터링 하는 경우에 특히 하는 경우이 메서드에서 반환 된 숫자 보다 효율적으로 제안 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-391">If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</span></span>  
  
 <span data-ttu-id="354ab-392"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UTF7Encoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-392"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>.</span></span> <span data-ttu-id="354ab-393">응용 프로그램에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UTF7Encoding.GetChars%2A>를 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-393">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-394">`GetMaxByteCount(N)` 동일한 값은 반드시 `N* GetMaxByteCount(1)`입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-394">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-395">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 지정한 개수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-395">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-396"><paramref name="charCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-396"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-397">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-397">-or-</span></span> 
<span data-ttu-id="354ab-398">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-398">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="354ab-399">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-399">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-400">및</span><span class="sxs-lookup"><span data-stu-id="354ab-400">-and-</span></span> 
 <span data-ttu-id="354ab-401"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-401"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF7Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="354ab-402">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-402">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="354ab-403">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-403">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="354ab-404">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-404">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-405">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 응용 프로그램에서는 결과 문자를 저장 하려면 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-405">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="354ab-406">최대 배열 크기를 계산 하려면 응용 프로그램을 사용할지 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-406">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="354ab-407">합니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-407">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="354ab-408"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자, <xref:System.Text.DecoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-408"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="354ab-409">잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-409">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="354ab-410">대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-410">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="354ab-411">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-411">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="354ab-412">사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 또는 <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-412">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="354ab-413"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UTF7Encoding.GetBytes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-413"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="354ab-414">응용 프로그램에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UTF7Encoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-414">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-415">`GetMaxCharCount(N)` 동일한 값은 반드시 `N* GetMaxCharCount(1)`입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-415">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-416">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 지정 된 바이트 수를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-416">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-417"><paramref name="byteCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="354ab-417"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-418">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-418">-or-</span></span> 
<span data-ttu-id="354ab-419">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-419">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-420">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-420">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="354ab-421">및</span><span class="sxs-lookup"><span data-stu-id="354ab-421">-and-</span></span> 
 <span data-ttu-id="354ab-422"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-422"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF7Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="354ab-423">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-423">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="354ab-424">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-424">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="354ab-425">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-425">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="354ab-426">바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-426">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="354ab-427">지정된 바이트 시퀀스에 대한 디코딩 결과가 포함된 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-427">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="354ab-428">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-428">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="354ab-429">이 경우 응용 프로그램 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="354ab-429">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="354ab-430"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-430"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="354ab-431">잘못 된 바이트에 발생 하는 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-431">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="354ab-432">Byte 값이 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-432">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="354ab-433">예를 들어 인코딩할 바이트 16 진수 0x81 인 경우 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-433">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="354ab-434">보안상의 이유로 응용 프로그램은 사용 하는 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-434">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="354ab-435">다음 코드 예제에서는 바이트 배열로 문자열을 인코딩한 다음 문자열로 다시 바이트를 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-435">The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="354ab-436"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-436"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="354ab-437"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-437"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="354ab-438">또는</span><span class="sxs-lookup"><span data-stu-id="354ab-438">-or-</span></span> 
 <span data-ttu-id="354ab-439"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-439"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="354ab-440">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="354ab-440">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="354ab-441">및</span><span class="sxs-lookup"><span data-stu-id="354ab-441">-and-</span></span> 
 <span data-ttu-id="354ab-442"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="354ab-442"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>