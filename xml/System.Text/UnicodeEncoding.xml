<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ed90575e89d76488c1d85d59e815c01936bfcbb" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56399913" /></Metadata><TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="17d7e-101">유니코드 문자의 UTF-16 인코딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-101">Represents a UTF-16 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-102">인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변형하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="17d7e-103">디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변환 하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="17d7e-104">합니다 [유니코드 표준](https://go.microsoft.com/fwlink/?linkid=37123) 코드 포인트 (숫자)를 지원 되는 모든 스크립트에서 각 문자를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="17d7e-105">유니코드 변환 형식 (UTF) 코드 포인트를 인코딩할 방법이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="17d7e-106">합니다 [유니코드 표준](https://go.microsoft.com/fwlink/?linkid=37123) 다음 Utf를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="17d7e-107">U t F-8에는 각 코드 포인트를 1-4 바이트의 시퀀스로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="17d7e-108">U t F-16이 고는 각 코드 포인트를 1 ~ 2 16 비트 정수 시퀀스로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="17d7e-109">UTF-32는 각 코드 포인트를 32 비트 정수로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="17d7e-110">Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>를 참조 하세요 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="17d7e-111"><xref:System.Text.UnicodeEncoding> 클래스는 utf-16 인코딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="17d7e-112">인코더가 big endian 바이트 순서를 사용할 수 있습니다 (가장 중요 한 바이트가 첫 번째) 또는 little endian 바이트 순서 (최하위 바이트 먼저).</span><span class="sxs-lookup"><span data-stu-id="17d7e-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="17d7e-113">예를 들어, 영문 대문자 (코드 포인트 u+0041)으로 serialize 됩니다 (16 진수)에서 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="17d7e-114">Big endian 바이트 순서: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="17d7e-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="17d7e-115">Little endian 바이트 순서: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="17d7e-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="17d7e-116">해당 특정 플랫폼의 네이티브 바이트 순서를 사용 하 여 유니코드 문자를 저장 하려면 일반적으로 더 효율적입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="17d7e-117">예를 들어 Intel 컴퓨터 같은 little endian 플랫폼에서 little endian 바이트 순서를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="17d7e-118"><xref:System.Text.UnicodeEncoding> Windows 코드 페이지 1200 (little endian 바이트 순서) 및 1201 (big endian 바이트 순서)에 해당 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="17d7e-119">호출 하 여 특정 아키텍처의 "엔디언"를 확인할 수 있습니다는 <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="17d7e-120">필요에 따라는 <xref:System.Text.UnicodeEncoding> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스를 붙일 수 있습니다 하는 바이트 배열인 바이트 순서 표시 (BOM)를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="17d7e-121">바이트 순서 표시 (BOM)를 포함 하는 머리말, 디코더에서 바이트 순서와 변환 형식 또는 u t F를 결정 하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="17d7e-122">경우는 <xref:System.Text.UnicodeEncoding> BOM을 제공 하도록 인스턴스가 구성 되어, 호출 하 여 검색할 수 있습니다는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드; 메서드는 빈 배열을 반환 하는 고, 그렇지 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="17d7e-123">인 경우에을 <xref:System.Text.UnicodeEncoding> BOM 지원에 대 한 개체를 구성 하 고 적절 한;로 인코딩된 바이트 스트림의 시작 부분에 BOM을 포함 해야의 인코딩 메서드를 <xref:System.Text.UnicodeEncoding> 클래스 이렇게 하지 않으면 자동으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="17d7e-124">인스턴스화해야 오류 검색을 사용 하도록 설정 하 고 클래스 인스턴스를 더욱 안전 하 게 하는 <xref:System.Text.UnicodeEncoding> 호출 하 여 개체를 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`.</span><span class="sxs-lookup"><span data-stu-id="17d7e-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="17d7e-125">오류 검색 기능을 잘못 된 문자 또는 바이트 시퀀스를 검색 하는 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-126">오류 검색 예외가 throw 되지 않고 잘못 된 시퀀스는 일반적으로 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="17d7e-127">인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 다양 한 것인지에 바이트 순서 표시 (BOM)를 제공, big endian 또는 little endian 인코딩 것인지 및 오류 검색을 사용 하도록 설정 하려는 여부에 따라 다음 방법으로에서는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="17d7e-128">다음 표에서 <xref:System.Text.UnicodeEncoding> 생성자 및 <xref:System.Text.Encoding> 반환 하는 속성을 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="17d7e-129">멤버</span><span class="sxs-lookup"><span data-stu-id="17d7e-129">Member</span></span>|<span data-ttu-id="17d7e-130">endian</span><span class="sxs-lookup"><span data-stu-id="17d7e-130">Endianness</span></span>|<span data-ttu-id="17d7e-131">BOM</span><span class="sxs-lookup"><span data-stu-id="17d7e-131">BOM</span></span>|<span data-ttu-id="17d7e-132">오류 검색</span><span class="sxs-lookup"><span data-stu-id="17d7e-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="17d7e-133">Big endian</span><span class="sxs-lookup"><span data-stu-id="17d7e-133">Big-endian</span></span>|<span data-ttu-id="17d7e-134">예</span><span class="sxs-lookup"><span data-stu-id="17d7e-134">Yes</span></span>|<span data-ttu-id="17d7e-135">없음 (Replacement fallback)</span><span class="sxs-lookup"><span data-stu-id="17d7e-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="17d7e-136">Little endian</span><span class="sxs-lookup"><span data-stu-id="17d7e-136">Little-endian</span></span>|<span data-ttu-id="17d7e-137">예</span><span class="sxs-lookup"><span data-stu-id="17d7e-137">Yes</span></span>|<span data-ttu-id="17d7e-138">없음 (Replacement fallback)</span><span class="sxs-lookup"><span data-stu-id="17d7e-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="17d7e-139">Little endian</span><span class="sxs-lookup"><span data-stu-id="17d7e-139">Little-endian</span></span>|<span data-ttu-id="17d7e-140">예</span><span class="sxs-lookup"><span data-stu-id="17d7e-140">Yes</span></span>|<span data-ttu-id="17d7e-141">없음 (Replacement fallback)</span><span class="sxs-lookup"><span data-stu-id="17d7e-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="17d7e-142">구성 가능</span><span class="sxs-lookup"><span data-stu-id="17d7e-142">Configurable</span></span>|<span data-ttu-id="17d7e-143">구성 가능</span><span class="sxs-lookup"><span data-stu-id="17d7e-143">Configurable</span></span>|<span data-ttu-id="17d7e-144">없음 (Replacement fallback)</span><span class="sxs-lookup"><span data-stu-id="17d7e-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="17d7e-145">구성 가능</span><span class="sxs-lookup"><span data-stu-id="17d7e-145">Configurable</span></span>|<span data-ttu-id="17d7e-146">구성 가능</span><span class="sxs-lookup"><span data-stu-id="17d7e-146">Configurable</span></span>|<span data-ttu-id="17d7e-147">구성 가능</span><span class="sxs-lookup"><span data-stu-id="17d7e-147">Configurable</span></span>|  
  
 <span data-ttu-id="17d7e-148"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 유니코드 문자 집합 인코딩의 바이트 수 결과 확인 및 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="17d7e-149">마찬가지로 합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 바이트 시퀀스를 디코딩할에서 디코딩될 문자 확인 및 <xref:System.Text.UnicodeEncoding.GetChars%2A> 및 <xref:System.Text.UnicodeEncoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="17d7e-150">인코더 또는 디코더는 인코딩 또는 디코딩 데이터 (예: 100,000 자 세그먼트로 인코딩된 1 백만 자 문자열) 여러 블록에 걸쳐 있는 경우에 상태 정보를 저장, 사용할 수 있는 합니다 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 고 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 속성 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-151">다음 예제에서는 유니코드 문자의 문자열을 사용 하 여 바이트 배열로 인코딩하는 방법을 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="17d7e-152">데이터 손실 없이 있는지 보여 주기 위해 문자열로 된 바이트 배열을 디코딩하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="17d7e-153">다음 예제에서는 인코딩된 바이트를 파일에 기록 하는 바이트 순서 표시 (BOM)를 사용 하 여 바이트 스트림을 접두사 점을 제외 하 고는 이전 쿼리에서와 동일한 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="17d7e-154">두 가지 방법으로 파일을 읽고 다음:를 사용 하 여 텍스트 파일로 <xref:System.IO.StreamReader> 개체 및 이진 파일.</span><span class="sxs-lookup"><span data-stu-id="17d7e-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="17d7e-155">짐작할 수 모두 새로 읽기 문자열 BOM을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="17d7e-156">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="17d7e-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17d7e-157"><see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17d7e-158"><see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-158">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-159">이 생성자는 little endian 바이트 순서를 사용 하 여 유니코드 바이트 순서 표시를 제공 하 고 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않습니다는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-160">보안상의 이유로 호출 하 여 오류 감지를 사용 해야 합니다 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-161">다음 예제에서는 새 <xref:System.Text.UnicodeEncoding> 인스턴스 및 인코딩의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-161">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="17d7e-162">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-162"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="17d7e-163"><see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-163"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="17d7e-164"><see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-164">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="17d7e-165">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부와 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환할지 여부를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-166">이 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-167">보안상의 이유로 호출 하 여 오류 감지를 사용 해야 합니다 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="17d7e-168">합니다 `byteOrderMark` 의 작업을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-168">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="17d7e-169">경우 `true`를 utf-16 형식으로 유니코드 바이트 순서 표시 (BOM)를 포함 하는 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-169">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="17d7e-170">경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-170">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="17d7e-171">그러나 설정 `byteOrderMark` 하 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 바이트 수의 BOM에 바이트 수를 포함 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="17d7e-171">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-172">다음 예제에서는 새 <xref:System.Text.UnicodeEncoding> little endian 또는 big endian 바이트 순서를 지원 여부를 지정 하는 인스턴스 및 유니코드 바이트 순서 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-172">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="17d7e-173">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-173"><see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="17d7e-174"><see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-174"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="17d7e-175">잘못된 인코딩이 검색되었을 때 예외가 발생하도록 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-175"><see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="17d7e-176"><see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-176">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="17d7e-177">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부, 유니코드 바이트 순서 표시를 제공할지 여부 및 잘못된 인코딩이 검색되었을 때 예외를 발생시킬지 여부를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-177">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-178">합니다 `byteOrderMark` 의 작업을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-178">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="17d7e-179">경우 `true`를 utf-16 형식으로 유니코드 바이트 순서 표시 (BOM)를 포함 하는 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-179">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="17d7e-180">경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-180">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="17d7e-181">그러나 설정 `byteOrderMark` 하 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 바이트 수의 BOM에 바이트 수를 포함 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="17d7e-181">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="17d7e-182">경우는 `throwOnInvalidBytes` 매개 변수가 `true`, 잘못 된 바이트 시퀀스를 검색 하는 메서드가 throw <xref:System.ArgumentException?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-182">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="17d7e-183">이 고, 그렇지는 메서드는 예외를 throw 하지 않습니다 하 고 잘못 된 시퀀스가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-183">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-184">보안상의 이유로 애플리케이션 사용 권장의 인스턴스를 만들려면이 생성자를 사용 하 여 <xref:System.Text.UnicodeEncoding> 클래스 및 설정 하 여 오류 감지를 켜는 `throwOnInvalidBytes` 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-184">For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-185">다음 예제에서는 동작을 보여 줍니다. <xref:System.Text.UnicodeEncoding>를 모두 사용 하도록 설정 하는 오류 검색 기능을 사용 하지 않고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-185">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="17d7e-186">유니코드 문자 크기를 바이트 단위로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-186">Represents the Unicode character size in bytes.</span></span> <span data-ttu-id="17d7e-187">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-187">This field is a constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-188">이 필드의 값이 부호 있는 32 비트 상수 값이 2 인 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-188">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-189">다음 예제에서는 값을 반환 하는 방법에 설명 <xref:System.Text.UnicodeEncoding.CharSize> 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-189">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="17d7e-190">현재 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-190">The object to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="17d7e-191">지정한 <see cref="T:System.Object" />이(가) 현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체와 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-191">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="17d7e-192"><paramref name="value" />가 <see cref="T:System.Text.UnicodeEncoding" /> 인스턴스이고 현재 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-192"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-193">두 <xref:System.Text.UnicodeEncoding> 개체는 다음 조건이 모두 참인 경우 같은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-193">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="17d7e-194">개체를 모두 동일한 바이트 순서 (big endian 또는 little endian)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-194">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="17d7e-195">바이트 순서 표시를 제공 하는 개체를 모두 또는 둘 다 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-195">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="17d7e-196">두 개체가 동일한 인코더 대체 (fallback)를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-196">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="17d7e-197">두 개체가 동일한 디코더가 대체 (fallback)를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-197">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-198">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.Equals%2A> 메서드 테스트를 여부를 현재 <xref:System.Text.UnicodeEncoding> 다른 개체가 같은지 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-198">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="17d7e-199">5 <xref:System.Text.UnicodeEncoding> 개체가 만들어지고 비교 하 고 비교의 결과가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-199">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17d7e-200">문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-200">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="17d7e-201">인코딩할 문자 집합이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-201">The string that contains the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="17d7e-202">지정한 문자열의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-202">Calculates the number of bytes produced by encoding the characters in the specified string.</span></span></summary>
        <returns><span data-ttu-id="17d7e-203">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-203">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-204">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-204">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-205">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-205">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-206">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-206">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-207">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-207">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-208">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-208">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-209">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-209">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-210">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-210">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-211">다음 예제에서는 합니다 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 고 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 최대값과 실제 문자열을 인코딩하는 데 필요한 바이트 수를 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-211">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="17d7e-212">또한 실제 바이트 순서 표시를 사용 하 여 바이트 스트림을 저장 하는 데 필요한 바이트 수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-212">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-213"><paramref name="s" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-213"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-214">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-214">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-215">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-215">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-216">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-216">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-217">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-217">-and-</span></span> 
 <span data-ttu-id="17d7e-218"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-218"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="17d7e-219">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-219">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="17d7e-220">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-220">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="17d7e-221">지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-221">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="17d7e-222">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-222">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-223">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-223">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-224">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-224">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-225">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-225">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-226">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-226">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-227">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-227">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-228">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-228">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-229">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-229">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-230"><paramref name="chars" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-230"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-231"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-231"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-232">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-232">-or-</span></span> 
<span data-ttu-id="17d7e-233">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-233">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-234">오류 검색 기능을 사용하고 있으며 <paramref name="chars" />에 잘못된 문자 시퀀스가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-234">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-235">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-235">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-236">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-236">-and-</span></span> 
 <span data-ttu-id="17d7e-237"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-237"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="17d7e-238">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-238">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="17d7e-239">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-239">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="17d7e-240">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-240">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="17d7e-241">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-241">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="17d7e-242">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-242">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="17d7e-243">지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-243">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="17d7e-244">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-244">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-245">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 애플리케이션에서는 결과 바이트를 저장 하려면 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-245">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="17d7e-246">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-246">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-247">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-247">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-248">사용 하도록 설정 하는 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-248">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-249">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-249">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-250">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-250">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-251">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-251">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-252">다음 예제에서는 소문자가 라틴 문자는 대문자를 사용 하 여 배열 및 호출 된 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 라틴어 소문자 문자를 인코딩하는 데 필요한 바이트 수를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-252">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="17d7e-253">바이트 순서 표시가 추가 되 면 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-253">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="17d7e-254">반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드 라틴어 소문자 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-254">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="17d7e-255">다음 예제에 그리스어 및 키릴 자모 문자 및 호출 조합으로 배열을 채웁니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 키릴 자모 문자를 인코딩하는 데 필요한 바이트 수를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-255">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="17d7e-256">바이트 순서 표시가 추가 되 면 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-256">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="17d7e-257">반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드, 키릴 자모 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-257">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-258"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-258"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-259"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-259"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-260">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-260">-or-</span></span> 
 <span data-ttu-id="17d7e-261"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-261"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="17d7e-262">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-262">-or-</span></span> 
<span data-ttu-id="17d7e-263">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-263">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-264">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-264">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-265">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-265">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-266">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-266">-and-</span></span> 
 <span data-ttu-id="17d7e-267"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-267"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17d7e-268">문자 집합을 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-268">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="unicodeEncoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="17d7e-269">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-269">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="17d7e-270">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-270">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="17d7e-271">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-271">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="17d7e-272">쓸 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-272">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="17d7e-273">지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-273">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="17d7e-274"><paramref name="bytes" /> 매개 변수가 가리키는 위치에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-274">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-275">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-275">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-276">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-276">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-277">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-277">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-278">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-278">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-279">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-279">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-280">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-280">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-281">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-281">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-282">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-282">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-283">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-283">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="17d7e-284"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-284">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-285"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-285"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="17d7e-286">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-286">-or-</span></span> 
 <span data-ttu-id="17d7e-287"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-287"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-288"><paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-288"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-289">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-289">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="17d7e-290">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-290">-or-</span></span> 
 <span data-ttu-id="17d7e-291"><paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-291"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-292">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-292">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-293">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-293">-and-</span></span> 
 <span data-ttu-id="17d7e-294"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-294"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="17d7e-295">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-295">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="17d7e-296">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-296">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="17d7e-297">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-297">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="17d7e-298">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-298">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="17d7e-299">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-299">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="17d7e-300">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-300">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="17d7e-301">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-301">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="17d7e-302">지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-302">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="17d7e-303"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-303">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-304">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-304">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-305">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-305">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-306">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-306">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-307">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-307">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-308">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-308">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-309">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-309">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-310">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-310">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-311">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-311">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-312">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-312">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="17d7e-313"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-313">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-314">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 다양 한 문자를 인코딩할 방법은 <xref:System.String> 인코딩된 바이트를 바이트 배열의 요소 범위에서 저장 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-314">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-315"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-315"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="17d7e-316">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-316">-or-</span></span> 
 <span data-ttu-id="17d7e-317"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-317"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-318"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-318"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-319">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-319">-or-</span></span> 
 <span data-ttu-id="17d7e-320"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-320"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="17d7e-321">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-321">-or-</span></span> 
 <span data-ttu-id="17d7e-322"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-322"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-323">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-323">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="17d7e-324">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-324">-or-</span></span> 
 <span data-ttu-id="17d7e-325"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-325"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-326">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-326">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-327">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-327">-and-</span></span> 
 <span data-ttu-id="17d7e-328"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-328"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="17d7e-329">인코딩할 문자 집합이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-329">The string containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="17d7e-330">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-330">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="17d7e-331">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-331">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="17d7e-332">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-332">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="17d7e-333">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-333">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="17d7e-334">지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-334">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="17d7e-335"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-335">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-336">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-336">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-337">최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-337">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="17d7e-338">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-338">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-339">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-339">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-340">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-340">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-341">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-341">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-342">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-342">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-343">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-343">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-344">머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-344">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="17d7e-345"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-345">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-346">다음 예제에서는 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-346">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-347"><paramref name="s" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-347"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="17d7e-348">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-348">-or-</span></span> 
 <span data-ttu-id="17d7e-349"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-349"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-350"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-350"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-351">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-351">-or-</span></span> 
 <span data-ttu-id="17d7e-352"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-352"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="17d7e-353">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-353">-or-</span></span> 
 <span data-ttu-id="17d7e-354"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-354"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-355">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-355">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="17d7e-356">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-356">-or-</span></span> 
 <span data-ttu-id="17d7e-357"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-357"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-358">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-358">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-359">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-359">-and-</span></span> 
 <span data-ttu-id="17d7e-360"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-360"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17d7e-361">바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-361">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="17d7e-362">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-362">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="17d7e-363">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-363">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="17d7e-364">지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-364">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="17d7e-365">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-365">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-366">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 애플리케이션에서는 결과 문자를 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-366">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="17d7e-367">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-367">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="17d7e-368">합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-368">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-369">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-369">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-370">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-370">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-371"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-371"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-372"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-372"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-373">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-373">-or-</span></span> 
<span data-ttu-id="17d7e-374">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-374">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-375">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-375">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-376">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-376">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-377">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-377">-and-</span></span> 
 <span data-ttu-id="17d7e-378"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-378"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="17d7e-379">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-379">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="17d7e-380">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-380">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="17d7e-381">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-381">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="17d7e-382">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-382">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="17d7e-383">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-383">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="17d7e-384">지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-384">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="17d7e-385">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-385">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-386">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 애플리케이션에서는 결과 문자를 저장 하려면 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-386">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="17d7e-387">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-387">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="17d7e-388">합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-388">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-389">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-389">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-390">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-390">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-391">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 사용 하는 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 방법 <xref:System.Text.UnicodeEncoding>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-391">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-392"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-392"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-393"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-393"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-394">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-394">-or-</span></span> 
 <span data-ttu-id="17d7e-395"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-395"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="17d7e-396">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-396">-or-</span></span> 
<span data-ttu-id="17d7e-397">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-397">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-398">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-398">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-399">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-399">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-400">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-400">-and-</span></span> 
 <span data-ttu-id="17d7e-401"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-401"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="17d7e-402">바이트 시퀀스를 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-402">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="17d7e-403">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-403">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="17d7e-404">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-404">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="17d7e-405">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-405">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="17d7e-406">쓸 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-406">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="17d7e-407">지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-407">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="17d7e-408"><paramref name="chars" /> 매개 변수가 가리키는 위치에 쓴 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-408">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-409">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 애플리케이션에서는 결과 문자를 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-409">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="17d7e-410">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-410">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="17d7e-411">합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-411">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-412">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-412">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-413">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-413">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-414">디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-414">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="17d7e-415">호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-415">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="17d7e-416">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-416">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-417">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-417">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-418"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-418"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="17d7e-419">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-419">-or-</span></span> 
 <span data-ttu-id="17d7e-420"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-420"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-421"><paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-421"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-422">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-422">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="17d7e-423">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-423">-or-</span></span> 
 <span data-ttu-id="17d7e-424"><paramref name="charCount" />가 결과 문자 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-424"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-425">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-425">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-426">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-426">-and-</span></span> 
 <span data-ttu-id="17d7e-427"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-427"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="17d7e-428">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-428">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="17d7e-429">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-429">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="17d7e-430">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-430">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="17d7e-431">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-431">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="17d7e-432">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-432">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="17d7e-433">결과 문자 집합을 포함할 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-433">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="17d7e-434">결과 문자 집합을 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-434">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="17d7e-435">지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-435">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="17d7e-436"><paramref name="chars" />에 쓴 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-436">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-437">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 애플리케이션에서는 결과 문자를 저장 하려면 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-437">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="17d7e-438">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-438">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="17d7e-439">합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-439">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-440">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-440">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-441">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-441">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-442">디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-442">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="17d7e-443">호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-443">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="17d7e-444">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-444">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-445">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-445">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-446">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 결과 문자 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-446">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-447"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-447"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="17d7e-448">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-448">-or-</span></span> 
 <span data-ttu-id="17d7e-449"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-449"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-450"><paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-450"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-451">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-451">-or-</span></span> 
 <span data-ttu-id="17d7e-452"><paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-452"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="17d7e-453">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-453">-or-</span></span> 
 <span data-ttu-id="17d7e-454"><paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-454"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-455">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-455">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="17d7e-456">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-456">-or-</span></span> 
 <span data-ttu-id="17d7e-457"><paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-457"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-458">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-458">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-459">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-459">-and-</span></span> 
 <span data-ttu-id="17d7e-460"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-460"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17d7e-461">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-461">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="17d7e-462">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <see cref="T:System.Text.Decoder" />입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-462">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-463">합니다 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 문자의 순차 블록 순차 블록 바이트 변환는 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-463">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="17d7e-464">그러나는 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-464">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="17d7e-465"><xref:System.Text.Decoder> 도 데이터 블록의 끝에 후행 바이트를 유지 하 고 디코딩 작업은 다음에 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-465">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="17d7e-466">따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 고 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-466">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="17d7e-467">오류 검색 하도록 설정할지 여부, 즉, 합니다 `throwOnInvalidBytes` 생성자의 매개 변수는 설정 `true`, 오류 감지에도 사용는 <xref:System.Text.Decoder> 이 메서드에서 반환 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-467">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="17d7e-468">오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 디코더의 상태 정의 되지 않으며 처리를 중지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-468">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-469">다음 예제에서는 문자열 바이트 배열로 인코딩하고 다음 바이트 문자 배열로 디코드 인코더 및 디코더를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-469">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="17d7e-470">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="17d7e-470">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17d7e-471">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-471">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="17d7e-472">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-472">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-473">합니다 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 바이트 순차 블록 문자의 순차 블록 변환는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 이 클래스의 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-473">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="17d7e-474">그러나는 <xref:System.Text.Encoder> 개체 블록으로 확장 되는 문자 시퀀스 올바르게 인코딩할 수 있도록 호출 간에 상태 정보를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-474">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="17d7e-475"><xref:System.Text.Encoder> 개체도 데이터 블록의 끝에 있는 후행 문자를 유지 하 고 다음 인코딩 작업에서 후행 문자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-475">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="17d7e-476">예를 들어 데이터 블록 수는 일치 하지 않는 상위 서로게이트를 사용 하 여 종료 및 다음 데이터 블록에 일치 하는 하위 서로게이트 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-476">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="17d7e-477">따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 고 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-477">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="17d7e-478">오류 검색 하도록 설정할지 여부, 즉, 합니다 `throwOnInvalidBytes` 생성자의 매개 변수는 설정 `true`, 오류 감지에도 사용는 <xref:System.Text.Encoder> 이 메서드에서 반환 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-478">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="17d7e-479">오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 인코더의 상태가 정의 되지 않으며 처리를 중지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-479">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-480">다음 예제에서는 문자열 바이트 배열로 인코딩하고 다음 바이트 문자 배열로 디코드 인코더 및 디코더를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-480">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="17d7e-481">인코딩 이해</span><span class="sxs-lookup"><span data-stu-id="17d7e-481">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17d7e-482">현재 인스턴스의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-482">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="17d7e-483">현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체의 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-483">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="17d7e-484">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-484">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="17d7e-485">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-485">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="17d7e-486">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-486">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-487">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 애플리케이션에서는 결과 바이트를 저장 하려면 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-487">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="17d7e-488">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-488">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="17d7e-489">합니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-489">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자 검색 <xref:System.Text.EncoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="17d7e-491">잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-491">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="17d7e-492">대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-492">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="17d7e-493">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-493">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="17d7e-494">사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-494">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="17d7e-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="17d7e-496">애플리케이션에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UnicodeEncoding.GetChars%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-496">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-497">`GetMaxByteCount(N)` 동일한 값은 반드시 `N* GetMaxByteCount(1)`입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-497">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-498">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 지정한 개수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-498">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-499"><paramref name="charCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-499"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-500">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-500">-or-</span></span> 
<span data-ttu-id="17d7e-501">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-501">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="17d7e-502">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-502">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-503">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-503">-and-</span></span> 
 <span data-ttu-id="17d7e-504"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-504"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="17d7e-505">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-505">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="17d7e-506">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-506">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="17d7e-507">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-507">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-508">에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 애플리케이션에서는 결과 문자를 저장 하려면 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-508">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="17d7e-509">최대 배열 크기를 계산 하려면 애플리케이션을 사용할지 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-509">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="17d7e-510">합니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-510">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="17d7e-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자 검색 <xref:System.Text.DecoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="17d7e-512">잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 큰 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-512">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="17d7e-513">대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-513">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="17d7e-514">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-514">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="17d7e-515">사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 또는 <xref:System.Text.Decoder.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-515">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="17d7e-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetBytes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="17d7e-517">애플리케이션에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UnicodeEncoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-517">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17d7e-518">`GetMaxCharCount(N)` 동일한 값은 반드시 `N* GetMaxCharCount(1)`입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-518">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-519">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 지정 된 바이트 수를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-519">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-520"><paramref name="byteCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="17d7e-520"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-521">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-521">-or-</span></span> 
<span data-ttu-id="17d7e-522">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-522">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-523">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-523">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-524">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-524">-and-</span></span> 
 <span data-ttu-id="17d7e-525"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-525"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17d7e-526">이 인스턴스의 생성자가 바이트 순서 표시를 요청하는 경우 UTF-16 형식으로 인코딩된 유니코드 바이트 순서 표시를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-526">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span></span></summary>
        <returns><span data-ttu-id="17d7e-527"><see cref="T:System.Text.UnicodeEncoding" /> 개체가 제공하도록 구성된 경우 유니코드 바이트 순서 표시가 포함된 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-527">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span></span> <span data-ttu-id="17d7e-528">그렇지 않으면 이 메서드는 길이가 0인 바이트 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-528">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-529"><xref:System.Text.UnicodeEncoding> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스를 붙일 수 있습니다 하는 바이트 배열에는 머리말을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-529">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="17d7e-530">바이트 순서와 변환 형식 또는 u t F를 결정 하는 디코더를 통해 바이트 순서 표시 (코드 포인트 U + FEFF)를 사용 하 여 인코딩된 바이트 시퀀스 앞 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-530">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="17d7e-531">유니코드 바이트 순서 표시 (BOM) (16 진수)에서 다음과 같이 serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-531">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="17d7e-532">Big endian 바이트 순서: FE FF</span><span class="sxs-lookup"><span data-stu-id="17d7e-532">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="17d7e-533">Little endian 바이트 순서: FF FE</span><span class="sxs-lookup"><span data-stu-id="17d7e-533">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="17d7e-534">인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 개체 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드가 다음과 같은 방법으로 유효한 BOM을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-534">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="17d7e-535">검색 하 여 합니다 <xref:System.Text.UnicodeEncoding> 에서 반환 된 개체를 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 또는 <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-535">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="17d7e-536">매개 변수가 없는 호출 하 여 <xref:System.Text.UnicodeEncoding.%23ctor> 인스턴스화하는 생성자를 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-536">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="17d7e-537">제공 하 여 `true` 값으로는 `byteOrderMark` 인수를 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> 또는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-537">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="17d7e-538">BOM을 사용 하 여, 그렇지 않으면 손실 된 참조를 해당 인코딩으로, 않거나 부적절 하 게 태그가 지정 된 태그와 같은 파일에 대 한 인코딩을의 특정 id에 거의 제공 하므로 웹 데이터 또는 임의의 텍스트 파일 때 비즈니스 저장 하지 않은 것이 좋습니다. 국가별 고려 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-538">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="17d7e-539">데이터는 일관 되 고 제대로 태그를 지정 하는 경우 종종 사용자 문제를 방지할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-539">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="17d7e-540">인코딩 형식을 제공 하는 표준에 대 한 BOM 다소 중복 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-540">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="17d7e-541">그러나 올바른 인코딩 헤더를 보내도록 서버를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-541">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="17d7e-542">또는 사용할 수 있습니다 대체 방법으로 인코딩을 분실할 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="17d7e-542">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="17d7e-543">BOM을 사용 하 여 몇 가지 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-543">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="17d7e-544">예를 들어 BOM을 사용 하는 데이터베이스 필드를 제한 하는 방법을 알면 어려울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-544">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="17d7e-545">파일의 연결 문제가 될 수 또한 예를 들어, 파일 등에서 병합 될 때는 데이터 중간에 불필요 한 문자가 포함 될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-545">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="17d7e-546">몇 가지 단점에도 불구 하 고 있지만 bom을 사용 하 여 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-546">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="17d7e-547">인코딩된 바이트 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코드된 바이트 스트림 시작 부분을 앞에 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-547">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="17d7e-548"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스로 BOM을 앞에 추가 되지 않습니다; 개발자의 책임은 적절 한 바이트 스트림의 시작 부분에 BOM을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-548">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-549">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> big endian 또는 little endian 바이트 순서 인스턴스에 대 한 유니코드 바이트 순서 표시를 검색 하는 메서드를 <xref:System.Text.UnicodeEncoding>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-549">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="17d7e-550">다음 예제에서는 두 개를 인스턴스화하고 <xref:System.Text.UnicodeEncoding> 개체에는 첫 번째 BOM을 및 수행 하는 중 두 번째 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-550">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="17d7e-551">그런 다음 호출 하 여 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 유니코드로 인코딩된 문자열을 작성 하기 전에 파일에 BOM을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-551">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="17d7e-552">이 예제에서 콘솔 출력을 볼 수 있듯이 첫 번째 보다 더 많은 바이트를 세는 두 번째 인코더에서 바이트를 저장 하는 파일.</span><span class="sxs-lookup"><span data-stu-id="17d7e-552">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="17d7e-553">사용 하 여 파일을 비교할 수도 있습니다는 `fc` 콘솔 창에 명령 16 진수 뷰 모드를 포함 하는 텍스트 편집기에서 파일을 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-553">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="17d7e-554">Note utf-16 인코딩을 지 원하는 편집기에서 파일을 열면 BOM 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-554">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="17d7e-555">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-555">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="17d7e-556">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-556">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="17d7e-557">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-557">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="17d7e-558">바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-558">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="17d7e-559">지정된 바이트 시퀀스의 디코딩 결과가 포함된 <see cref="T:System.String" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-559">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17d7e-560">오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw를 <xref:System.ArgumentException>입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-560">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="17d7e-561">오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-561">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="17d7e-562">디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-562">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="17d7e-563">호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-563">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="17d7e-564">같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-564">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="17d7e-565">이 경우 애플리케이션 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우를 사용 해야 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체를 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="17d7e-565">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17d7e-566">다음 예제에서는 호출 하 여 배열을 초기화는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 바이트 인코딩된 문자열 및 바이트 순서 표시 (BOM)의 크기를 추가한 다음에 대 한 필요한를 정확 하 게 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-566">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="17d7e-567">다음 호출 하 여는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 호출 하기 전에 배열에 BOM을 저장 합니다 <xref:System.Text.Encoding.GetBytes%2A> 인코딩된 바이트 배열에 저장 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-567">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="17d7e-568">이 예제에서는 호출 된 <xref:System.Text.UnicodeEncoding.GetString%2A> 문자열을 디코드 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="17d7e-568">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="17d7e-569">이 경우 디코딩된 문자열 다른 것 원래 문자열에서 U + FFFD 16 비트 바이트 순서 표시를 시작 하므로 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-569">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="17d7e-570">즉, 두 문자열이 됩니다 것으로 비교 하 고 출력 문자열을 사용 하는 경우 BOM 대체 문자로 표시 됩니다 "?"입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-570">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="17d7e-571">문자열의 시작 부분에 BOM을 제거 하려면 호출할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="17d7e-571">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="17d7e-572"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-572"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17d7e-573"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-573"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="17d7e-574">또는</span><span class="sxs-lookup"><span data-stu-id="17d7e-574">-or-</span></span> 
 <span data-ttu-id="17d7e-575"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-575"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17d7e-576">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-576">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="17d7e-577">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="17d7e-577">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="17d7e-578">및</span><span class="sxs-lookup"><span data-stu-id="17d7e-578">-and-</span></span> 
 <span data-ttu-id="17d7e-579"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="17d7e-579"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>