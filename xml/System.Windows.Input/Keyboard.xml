<Type Name="Keyboard" FullName="System.Windows.Input.Keyboard">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba75b03b83a967a922f2461d1953849641ff020d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56395227" /></Metadata><TypeSignature Language="C#" Value="public static class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard abstract sealed" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8c630-101">키보드 디바이스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-101">Represents the keyboard device.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-102"><xref:System.Windows.Input.Keyboard> 키보드 관련 이벤트, 메서드 및 속성 키보드의 상태에 대 한 정보를 제공 하는 클래스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-102">The <xref:System.Windows.Input.Keyboard> class provides keyboard-related events, methods, and properties that provide information regarding the state of the keyboard.</span></span>  
  
 <span data-ttu-id="8c630-103">각 이벤트는 <xref:System.Windows.Input.Keyboard> 정의 연결된 된 이벤트는 기본 요소 클래스에 의해 다시 노출 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement> 새 라우트된 이벤트로 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-103">Each of the events that <xref:System.Windows.Input.Keyboard> defines as an attached event is also re-exposed by the base element classes <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> as a new routed event.</span></span> <span data-ttu-id="8c630-104">일반적으로 것에서 애플리케이션에 대 한 키보드 이벤트를 처리 하는 편리한 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement>를 사용 하는 대신는 <xref:System.Windows.Input.Keyboard> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-104">Generally, it is more convenient to handle keyboard events for an application on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>, rather than using the <xref:System.Windows.Input.Keyboard> events.</span></span> <span data-ttu-id="8c630-105">자세한 내용은 참조 하세요 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-105">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-106">키보드 입력을 수신 하는 요소에 대 한 순서 대로 요소가 포커스를 받을 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-106">In order for an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="8c630-107">대부분의 <xref:System.Windows.UIElement> 파생된 개체는 기본적으로 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-107">Most <xref:System.Windows.UIElement> derived objects are focusable by default.</span></span> <span data-ttu-id="8c630-108">그렇지 않으면 요소에 포커스를 설정 합니다 <xref:System.Windows.UIElement.Focusable%2A> 속성을 기본 요소의 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-108">Otherwise, to make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="8c630-109">기본 요소에 대 한 자세한 내용은 참조 하세요. [기본 요소 개요](~/docs/framework/wpf/advanced/base-elements-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-109">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-110"><xref:System.Windows.Controls.Panel> 클래스와 같은 <xref:System.Windows.Controls.StackPanel> 하 고 <xref:System.Windows.Controls.Canvas>의 기본값을 설정 <xref:System.Windows.UIElement.Focusable%2A> 에 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-110"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`.</span></span> <span data-ttu-id="8c630-111">키보드 포커스를 받으려면 이러한 개체에 대 한 따라서 <xref:System.Windows.UIElement.Focusable%2A> 으로 설정 되어 있어야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-111">Therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="8c630-112">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-112">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-113">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-113">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-114">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-114">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-115">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-115">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-116">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-116">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-117">정적 멤버를 <xref:System.Windows.Input.Keyboard> 주 클래스 대리자 <xref:System.Windows.Input.KeyboardDevice> 스레드의 호출 되므로 반드시 스레드로부터 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-117">The static members of the <xref:System.Windows.Input.Keyboard> class delegate to the primary <xref:System.Windows.Input.KeyboardDevice> of the calling thread, so they are not necessarily thread-safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-118">다음 예제에서는 사용 하는 방법의 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 키 전환 된 상태에서 인지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-118">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine if a key is in the toggled state.</span></span> <span data-ttu-id="8c630-119">경우는 <xref:System.Windows.Input.Key> 전달할 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 는 설정/해제할 단추의 배경이 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-119">If the <xref:System.Windows.Input.Key> passed to <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> is toggled, the background of a button is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="AddGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-120">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-120">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-121">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-121">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-122"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-122">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-123">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-123">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-124">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-124">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-125">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-125">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-126"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-126">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-127">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-127">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-128">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-128">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-129">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-129">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-130"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-130">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-131">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-131">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-132">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-132">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-133">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-133">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-134"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-134">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-135">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-135">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-136">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-136">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-137">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-137">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-138"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-138">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-139">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-139">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-140">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-140">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-141">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-141">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-142"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-142">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-143">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-143">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-144">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-144">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-145">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-145">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-146"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-146">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-147">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-147">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-148">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-148">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-149">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-149">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-150"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-150">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-151">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-151">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-152">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-152">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-153">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-153">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-154"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-154">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-155">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-155">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-156">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-156">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-157">추가할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-157">The event handler to be added.</span></span></param>
        <summary><span data-ttu-id="8c630-158"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-158">Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-159">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 처리를 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-159">This method provides attached property accessors for code access and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute processing of the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFocus">
      <MemberSignature Language="C#" Value="public static void ClearFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.ClearFocus" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearFocus();" />
      <MemberSignature Language="F#" Value="static member ClearFocus : unit -&gt; unit" Usage="System.Windows.Input.Keyboard.ClearFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c630-160">포커스를 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-160">Clears focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-161">WPF를 호출 하는 Win32 창 내에서 포커스가 있으면는 <xref:System.Windows.Input.Keyboard.ClearFocus%2A> 메서드 메뉴가 닫힐 때 포커스를 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-161">If focus is within a Win32 window, WPF calls the <xref:System.Windows.Input.Keyboard.ClearFocus%2A> method on restoration of focus when a menu is closed.</span></span>  
  
 <span data-ttu-id="8c630-162">메뉴 모드를 벗어날 때 Win32 포커스 호스팅된 자식 HWND 돌아가고 WPF 포커스가 요소가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-162">When leaving menu mode, Win32 focus is returned to the hosted child HWND, and no element has WPF focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRestoreFocusMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultRestoreFocusMode As RestoreFocusMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RestoreFocusMode DefaultRestoreFocusMode { System::Windows::Input::RestoreFocusMode get(); void set(System::Windows::Input::RestoreFocusMode value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRestoreFocusMode : System.Windows.Input.RestoreFocusMode with get, set" Usage="System.Windows.Input.Keyboard.DefaultRestoreFocusMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RestoreFocusMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-163">포커스를 복원할 때 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]의 동작을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-163">Gets or sets the behavior of [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] when restoring focus.</span></span></summary>
        <value><span data-ttu-id="8c630-164">포커스를 복원할 때 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]의 동작을 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-164">An enumeration value that specifies the behavior of [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] when restoring focus.</span></span> <span data-ttu-id="8c630-165">기본값은 <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-165">The default in <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement Focus (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement Focus(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Focus (element As IInputElement) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ Focus(System::Windows::IInputElement ^ element);" />
      <MemberSignature Language="F#" Value="static member Focus : System.Windows.IInputElement -&gt; System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.Focus element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-166">키보드 포커스를 설정할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-166">The element on which to set keyboard focus.</span></span></param>
        <summary><span data-ttu-id="8c630-167">지정한 요소에 키보드 포커스를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-167">Sets keyboard focus on the specified element.</span></span></summary>
        <returns><span data-ttu-id="8c630-168">키보드 포커스를 가지는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-168">The element with keyboard focus.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-169">키보드 입력을 받는 요소를 요소가 포커스를 받을 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-169">For an element to receive keyboard input, the element must be focusable.</span></span> <span data-ttu-id="8c630-170">요소에 포커스를 설정 합니다 <xref:System.Windows.UIElement.Focusable%2A> 속성을 기본 요소의 `true`.</span><span class="sxs-lookup"><span data-stu-id="8c630-170">To make an element focusable, set the <xref:System.Windows.UIElement.Focusable%2A> property on the base element to `true`.</span></span>  <span data-ttu-id="8c630-171">기본 요소에 대 한 자세한 내용은 참조 하세요. [기본 요소 개요](~/docs/framework/wpf/advanced/base-elements-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-171">For more information on the base elements, see [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  <span data-ttu-id="8c630-172"><xref:System.Windows.Controls.Panel> 와 같은 클래스 <xref:System.Windows.Controls.StackPanel> 하 고 <xref:System.Windows.Controls.Canvas>의 기본값을 설정 <xref:System.Windows.UIElement.Focusable%2A> 에 `false`; 따라서 키보드 포커스를 받으려면 이러한 개체에 대 한 <xref:System.Windows.UIElement.Focusable%2A> 로 설정 되어야 합니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-172"><xref:System.Windows.Controls.Panel> classes, such as <xref:System.Windows.Controls.StackPanel> and <xref:System.Windows.Controls.Canvas>, set the default value of <xref:System.Windows.UIElement.Focusable%2A> to `false`; therefore, for these objects to obtain keyboard focus, <xref:System.Windows.UIElement.Focusable%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="8c630-173">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-173">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-174">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-174">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-175">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-175">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-176">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-176">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-177">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-177">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-178">키보드 포커스가 있는 요소에는 다음과 같은 요소가 속한 포커스 범위에 대 한 논리 포커스가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-178">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="8c630-179">논리적 포커스가 있는 요소 수 또는 키보드 포커스가 없을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-179">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-180">에서는 다음 예제는 <xref:System.Windows.FrameworkElement.Loaded> 에 키보드 포커스를 설정 하는 이벤트 처리기는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-180">The following example shows a <xref:System.Windows.FrameworkElement.Loaded> event handler that sets keyboard focus on a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[focussample#FocusSampleSetFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplesetfocus)]
 [!code-vb[focussample#FocusSampleSetFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplesetfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElement">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement FocusedElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement FocusedElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.FocusedElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FocusedElement As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ FocusedElement { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusedElement : System.Windows.IInputElement" Usage="System.Windows.Input.Keyboard.FocusedElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-181">키보드 포커스를 갖는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-181">Gets the element that has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="8c630-182">포커스가 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-182">The focused element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-183">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-183">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-184">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-184">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-185">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-185">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-186">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-186">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-187">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-187">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-188">키보드 포커스가 있는 요소에는 다음과 같은 요소가 속한 포커스 범위에 대 한 논리 포커스가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-188">An element with keyboard focus also has logical focus for the focus scope the element belongs to.</span></span>  <span data-ttu-id="8c630-189">논리적 포커스가 있는 요소 수 또는 키보드 포커스가 없을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-189">An element with logical focus may or may not have keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-190">다음 예제에서는 키보드 포커스가 있는 요소를 가져오고 캐스팅을 <xref:System.Windows.Controls.Control>입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-190">The following example gets the element with keyboard focus and casts it to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="8c630-191">키보드 포커스가 있는 요소가 <xref:System.Windows.Controls.Control>, 요소의 배경이 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-191">If the element with keyboard focus is a <xref:System.Windows.Controls.Control>, the background of the element is changed.</span></span>  
  
 [!code-csharp[focussample#GetKeyboardFocusedElement](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#getkeyboardfocusedelement)]
 [!code-vb[focussample#GetKeyboardFocusedElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#getkeyboardfocusedelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyStates">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyStates GetKeyStates (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Input.KeyStates GetKeyStates(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Input::KeyStates GetKeyStates(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member GetKeyStates : System.Windows.Input.Key -&gt; System.Windows.Input.KeyStates" Usage="System.Windows.Input.Keyboard.GetKeyStates key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="8c630-192">지정된 키입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-192">The specified key.</span></span></param>
        <summary><span data-ttu-id="8c630-193">지정한 키의 키 상태 집합을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-193">Gets the set of key states for the specified key.</span></span></summary>
        <returns><span data-ttu-id="8c630-194"><see cref="T:System.Windows.Input.KeyStates" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-194">A bitwise combination of the <see cref="T:System.Windows.Input.KeyStates" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-195"><xref:System.Windows.Input.KeyStates> 비트 필드 열거형입니다. 따라서 키가 여러 상태에 있을 가능성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-195"><xref:System.Windows.Input.KeyStates> is a bit field enumeration; therefore, it is possible for a key to be in multiple states.</span></span>  <span data-ttu-id="8c630-196">예를 들어 키 누름 상태의 전환 된 상태와 같이 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-196">For example, a key could be in the pressed state as well as in the toggled state.</span></span>  <span data-ttu-id="8c630-197">키가의 정확한 상태를 확인 하려면 비트 비교 작업을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-197">Use bit comparison operations to determine the exact state or states the key is in.</span></span>  
  
 <span data-ttu-id="8c630-198"><xref:System.Windows.Input.Keyboard> 클래스는 다양 한 주요 상태 정보를 얻는 사용할 수 있는 정적 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-198">The <xref:System.Windows.Input.Keyboard> class provides a number of static methods which can also be used to obtain key state information.</span></span>  <span data-ttu-id="8c630-199">메서드: <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>, <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>, 및 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-199">The methods are: <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>, <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>, and <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-200">다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> 여부를 확인 하는 메서드를 <xref:System.Windows.Input.Key.Return> 키가는 <xref:System.Windows.Input.KeyStates.Down> 상태.</span><span class="sxs-lookup"><span data-stu-id="8c630-200">The following example shows how to use the <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method to determine if the <xref:System.Windows.Input.Key.Return> key is in the <xref:System.Windows.Input.KeyStates.Down> state.</span></span>  <span data-ttu-id="8c630-201">비트 AND 연산을 비교에 사용 되는 <xref:System.Windows.Input.KeyStates> 에서 반환 된 <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> 고 <xref:System.Windows.Input.Key.Down> 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-201">A bit AND operation is used to compare the <xref:System.Windows.Input.KeyStates> returned from <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> and the <xref:System.Windows.Input.Key.Down> state.</span></span> <span data-ttu-id="8c630-202">키가 눌러져 배경의 경우는 <xref:System.Windows.Controls.Button> 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-202">If the key is down, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardgetkeystates)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardGetKeyStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardgetkeystates)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" Usage="see AddGotKeyboardFocusHandler, and RemoveGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-203">요소가 키보드 포커스를 받으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-203">Occurs when an element receives keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-204">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-204">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-205">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-205">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-206">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-206">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-207">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-207">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-208">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-208">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-209">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-209">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-210">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-210">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-211">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-211">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-212">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-212">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-213">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-213">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-214">경우는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> 이벤트 또는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> 이벤트를 처리, 키보드 포커스는 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-214">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does change.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocusEvent"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-215">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-215">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-216">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-216">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.GotKeyboardFocusEvent>|  
|<span data-ttu-id="8c630-217">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-217">Routing strategy</span></span>|<span data-ttu-id="8c630-218">버블링</span><span class="sxs-lookup"><span data-stu-id="8c630-218">Bubbling</span></span>|  
|<span data-ttu-id="8c630-219">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-219">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8c630-220">해당 터널링 이벤트가 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-220">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-221">다음 예에서는 <xref:System.Windows.Controls.TextBox> 에 대 한 이벤트 처리기를 연결 합니다 <xref:System.Windows.UIElement.GotKeyboardFocus> 이벤트 및 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-221">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="8c630-222">경우는 <xref:System.Windows.Controls.TextBox> 키보드 포커스를 배경 색이 변경 및 텍스트는 <xref:System.Windows.Controls.TextBox> 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-222">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="8c630-223">경우는 <xref:System.Windows.Controls.TextBlock> 키보드 포커스를 잃을 배경색 변경 되 고 샘플에서 사용 되는 변수를 다시 설정 하는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-223">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called which resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-224"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-224">Identifies the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-225">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-225">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-226">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-227">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-227">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyDown">
      <MemberSignature Language="C#" Value="public static bool IsKeyDown (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyDown(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyDown(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyDown : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyDown key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="8c630-228">지정된 키입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-228">The specified key.</span></span></param>
        <summary><span data-ttu-id="8c630-229">지정한 키가 눌러져 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-229">Determines whether the specified key is pressed.</span></span></summary>
        <returns><span data-ttu-id="8c630-230"><paramref name="key" />가 눌러져 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-230"><see langword="true" /> if <paramref name="key" /> is in the down state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-231"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A> 메서드는 특정 키 상태 집합을 결정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-231">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-232">다음 예제에서는 사용 하는 방법의 <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> 특정 키의 상태를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-232">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="8c630-233">합니다 <xref:System.Windows.Input.Key.Return> 키에 전달 되는 <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-233">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method.</span></span>  <span data-ttu-id="8c630-234">메서드에서 반환 되 면 `true`, 배경의 <xref:System.Windows.Controls.Button> 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-234">If the method returns `true`, the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeydown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeydown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsDown" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyToggled">
      <MemberSignature Language="C#" Value="public static bool IsKeyToggled (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyToggled(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyToggled(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyToggled : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyToggled key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="8c630-235">지정된 키입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-235">The specified key.</span></span></param>
        <summary><span data-ttu-id="8c630-236">지정한 키가 전환되었는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-236">Determines whether the specified key is toggled.</span></span></summary>
        <returns><span data-ttu-id="8c630-237"><paramref name="key" />가 전환된 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-237"><see langword="true" /> if <paramref name="key" /> is in the toggled state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-238"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A> 메서드는 특정 키 상태 집합을 결정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-238">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-239">다음 예제에서는 사용 하는 방법의 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 특정 키의 상태를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-239">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method to determine the state of a specific key.</span></span> <span data-ttu-id="8c630-240">합니다 <xref:System.Windows.Input.Key.Return> 키에 전달 되는 <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-240">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method.</span></span>  <span data-ttu-id="8c630-241">메서드에서 반환 되 면 `true`의 배경을 <xref:System.Windows.Controls.Button> 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-241">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyUp">
      <MemberSignature Language="C#" Value="public static bool IsKeyUp (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyUp(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyUp(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="static member IsKeyUp : System.Windows.Input.Key -&gt; bool" Usage="System.Windows.Input.Keyboard.IsKeyUp key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="8c630-242">확인할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-242">The key to check.</span></span></param>
        <summary><span data-ttu-id="8c630-243">지정한 키가 놓여 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-243">Determines whether the specified key is released.</span></span></summary>
        <returns><span data-ttu-id="8c630-244"><paramref name="key" />가 놓여 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-244"><see langword="true" /> if <paramref name="key" /> is in the up state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-245"><xref:System.Windows.Input.Keyboard.GetKeyStates%2A> 메서드는 특정 키 상태 집합을 결정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-245">The <xref:System.Windows.Input.Keyboard.GetKeyStates%2A> method can be used to determine the set of states of a specific key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-246">다음 예제에서는 사용 하는 방법의 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> 특정 키의 상태를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-246">The following example shows how to use the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method to determine the state of a specific key.</span></span>  <span data-ttu-id="8c630-247">합니다 <xref:System.Windows.Input.Key.Return> 키에 전달 되는 <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-247">The <xref:System.Windows.Input.Key.Return> key is passed to the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method.</span></span>  <span data-ttu-id="8c630-248">메서드에서 반환 되 면 `true`의 배경을 <xref:System.Windows.Controls.Button> 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-248">If the method returns `true`, then the background of a <xref:System.Windows.Controls.Button> is changed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeyboardiskeyup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyBoardIsKeyUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeyboardiskeyup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
        <altmember cref="P:System.Windows.Input.KeyEventArgs.IsUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" Usage="see AddKeyboardInputProviderAcquireFocusHandler, and RemoveKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-249">키보드 입력 공급자가 포커스를 가질 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-249">Occurs when the keyboard input provider acquires focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-250">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-250">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-251">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-251">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-252">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-252">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-253">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-253">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-254">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-254">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-255">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-255">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-256">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-256">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="8c630-257">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-257">Routing strategy</span></span>|<span data-ttu-id="8c630-258">버블링</span><span class="sxs-lookup"><span data-stu-id="8c630-258">Bubbling</span></span>|  
|<span data-ttu-id="8c630-259">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-259">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="8c630-260">해당 터널링 이벤트가 <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-260">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-261"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-261">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-262">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-262">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-263">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-263">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-264">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-264">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddKeyDownHandler, and RemoveKeyDownHandler" Usage="see AddKeyDownHandler, and RemoveKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-265">키보드의 키를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-265">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-266">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-266">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-267">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-267">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-268">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-268">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-269">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-269">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-270">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-270">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-271">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-271">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-272">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-272">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyDownEvent>|  
|<span data-ttu-id="8c630-273">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-273">Routing strategy</span></span>|<span data-ttu-id="8c630-274">버블링</span><span class="sxs-lookup"><span data-stu-id="8c630-274">Bubbling</span></span>|  
|<span data-ttu-id="8c630-275">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-275">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8c630-276">해당 터널링 이벤트가 <xref:System.Windows.Input.Keyboard.PreviewKeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-276">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyDown>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-277">다음 예제에서는 <xref:System.Windows.Controls.TextBox> 에 대 한 이벤트 처리기를 연결 하 여 <xref:System.Windows.UIElement.KeyDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-277">The following example creates <xref:System.Windows.Controls.TextBox> that attaches an event handler for the <xref:System.Windows.UIElement.KeyDown> event.</span></span>  <span data-ttu-id="8c630-278">때를 <xref:System.Windows.Input.Key.Return> 눌러져, 이벤트 처리기에 텍스트를 표시 합니다 <xref:System.Windows.Controls.TextBox> 에서 <xref:System.Windows.Controls.TextBlock>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-278">When the <xref:System.Windows.Input.Key.Return> is pressed, the event handler displays the text in the <xref:System.Windows.Controls.TextBox> in a <xref:System.Windows.Controls.TextBlock>.</span></span>  
  
 [!code-xml[keydown#KeyDownUI](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml#keydownui)]  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-279"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-279">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-280">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-280">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-281">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-281">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-282">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-282">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.KeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddKeyUpHandler, and RemoveKeyUpHandler" Usage="see AddKeyUpHandler, and RemoveKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-283">키보드의 키를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-283">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-284">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-284">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-285">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-285">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-286">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-286">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-287">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-287">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-288">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-288">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-289">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-290">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-290">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.KeyUpEvent>|  
|<span data-ttu-id="8c630-291">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-291">Routing strategy</span></span>|<span data-ttu-id="8c630-292">버블링</span><span class="sxs-lookup"><span data-stu-id="8c630-292">Bubbling</span></span>|  
|<span data-ttu-id="8c630-293">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-293">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8c630-294">해당 터널링 이벤트가 <xref:System.Windows.Input.Keyboard.PreviewKeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-294">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewKeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-295"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-295">Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-296">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-296">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-297">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-297">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-298">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-298">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" Usage="see AddLostKeyboardFocusHandler, and RemoveLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-299">요소가 키보드 포커스를 잃으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-299">Occurs when an element loses keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-300">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-300">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-301">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-301">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-302">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-302">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-303">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-303">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-304">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-304">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-305">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-305">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-306">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-306">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-307">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-307">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-308">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-308">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-309">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-309">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-310">경우는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> 이벤트 또는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> 이벤트를 처리, 키보드 포커스는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-310">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-311">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-312">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-312">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.LostKeyboardFocusEvent>|  
|<span data-ttu-id="8c630-313">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-313">Routing strategy</span></span>|<span data-ttu-id="8c630-314">버블링</span><span class="sxs-lookup"><span data-stu-id="8c630-314">Bubbling</span></span>|  
|<span data-ttu-id="8c630-315">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-315">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8c630-316">해당 터널링 이벤트가 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-316">The corresponding tunneling event is <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-317">다음 예에서는 <xref:System.Windows.Controls.TextBox> 에 대 한 이벤트 처리기를 연결 합니다 <xref:System.Windows.UIElement.GotKeyboardFocus> 이벤트 및 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-317">The following example creates a <xref:System.Windows.Controls.TextBox> and attaches event handlers for the <xref:System.Windows.UIElement.GotKeyboardFocus> event and the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus> event.</span></span>  <span data-ttu-id="8c630-318">경우는 <xref:System.Windows.Controls.TextBox> 키보드 포커스를 배경 색이 변경 및 텍스트는 <xref:System.Windows.Controls.TextBox> 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-318">When the <xref:System.Windows.Controls.TextBox> obtains keyboard focus, the background color is changed and the text of the <xref:System.Windows.Controls.TextBox> is cleared.</span></span>  <span data-ttu-id="8c630-319">경우는 <xref:System.Windows.Controls.TextBlock> 키보드 포커스를 잃을 배경색 변경 되 고 샘플에서 사용 되는 변수를 다시 설정 하는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-319">When the <xref:System.Windows.Controls.TextBlock> loses keyboard focus, the background color is changed and a method is called that resets variables used in the sample.</span></span>  
  
 [!code-xml[keyboardsample#KeyboardSampleXAMLHandlerHookup](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)]
 [!code-vb[keyboardsample#KeyboardSampleGotFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)]  
  
 [!code-csharp[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)]
 [!code-vb[keyboardsample#KeyboardSampleLostFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-320"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-320">Identifies the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-321">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-321">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-322">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-322">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-323">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-323">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.Keyboard.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-324">현재 눌러져 있는 <see cref="T:System.Windows.Input.ModifierKeys" />의 집합을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-324">Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed.</span></span></summary>
        <value><span data-ttu-id="8c630-325"><see cref="T:System.Windows.Input.ModifierKeys" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-325">A bitwise combination of the <see cref="T:System.Windows.Input.ModifierKeys" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-326"><xref:System.Windows.Input.ModifierKeys> 비트 필드 열거형 이므로 동시에 누르는 여러 한정자 키에 대 한 것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-326"><xref:System.Windows.Input.ModifierKeys> is a bit field enumeration, so it is possible for multiple modifier keys to be pressed at the same time.</span></span>  <span data-ttu-id="8c630-327">보조 키의 정확한 집합을 확인 하려면 비트 연산을 사용 눌러져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-327">Use bit operations to determine the exact set of modifier keys pressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c630-328">다음 예제에서는 비트 비교를 확인 하려면 사용 하 여는 <xref:System.Windows.Input.ModifierKeys.Control> 보조키가 눌러져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-328">The following example uses a bit AND comparison to determine if the <xref:System.Windows.Input.ModifierKeys.Control> modifier key is pressed.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyboardmodifiersbitoperation)]
 [!code-vb[keyargssnippetsample#KeyboardModifiersBitOperation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyboardmodifiersbitoperation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" Usage="see AddPreviewGotKeyboardFocusHandler, and RemovePreviewGotKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-329">요소가 키보드 포커스를 얻으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-329">Occurs when an element is in the process of acquiring keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-330">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-330">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-331">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-331">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-332">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-332">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-333">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-333">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-334">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-334">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-335">경우는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> 이벤트 또는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> 이벤트를 처리, 키보드 포커스는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-335">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="8c630-336">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-336">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-337">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-337">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-338">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-338">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-339">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-339">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-340">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-340">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyborad"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-341">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-341">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-342">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-342">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="8c630-343">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-343">Routing strategy</span></span>|<span data-ttu-id="8c630-344">터널링</span><span class="sxs-lookup"><span data-stu-id="8c630-344">Tunneling</span></span>|  
|<span data-ttu-id="8c630-345">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-345">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8c630-346">해당 버블링 이벤트가 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-346">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.GotKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-347"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-347">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-348">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-348">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-349">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-349">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-350">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-350">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocus">
      <MemberSignature Language="C#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" Usage="see AddPreviewKeyboardInputProviderAcquireFocusHandler, and RemovePreviewKeyboardInputProviderAcquireFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-351">키보드 입력 공급자가 포커스를 가져오고 있을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-351">Occurs when the keyboard input provider is in the process of acquiring focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-352">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-352">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-353">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-353">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-354">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-354">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-355">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-355">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-356">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-356">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyboardInputProviderAcquireFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-357">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-357">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-358">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-358">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent>|  
|<span data-ttu-id="8c630-359">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-359">Routing strategy</span></span>|<span data-ttu-id="8c630-360">터널링</span><span class="sxs-lookup"><span data-stu-id="8c630-360">Tunneling</span></span>|  
|<span data-ttu-id="8c630-361">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-361">Delegate</span></span>|<xref:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler>|  
  
-   <span data-ttu-id="8c630-362">해당 버블링 이벤트가 <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-362">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyboardInputProviderAcquireFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyboardInputProviderAcquireFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyboardInputProviderAcquireFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyboardInputProviderAcquireFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-363"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-363">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-364">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-364">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-365">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-365">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-366">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-366">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" Usage="see AddPreviewKeyDownHandler, and RemovePreviewKeyDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-367">키보드의 키를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-367">Occurs when a key on the keyboard is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-368">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-368">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-369">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-369">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-370">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-370">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-371">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-371">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-372">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-372">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-373">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-374">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-374">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyDownEvent>|  
|<span data-ttu-id="8c630-375">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-375">Routing strategy</span></span>|<span data-ttu-id="8c630-376">터널링</span><span class="sxs-lookup"><span data-stu-id="8c630-376">Tunneling</span></span>|  
|<span data-ttu-id="8c630-377">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-377">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8c630-378">해당 버블링 이벤트가 <xref:System.Windows.Input.Keyboard.KeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-378">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-379"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-379">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-380">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-380">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-381">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-382">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-382">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" Usage="see AddPreviewKeyUpHandler, and RemovePreviewKeyUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-383">키보드의 키를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-383">Occurs when a key on the keyboard is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-384">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-384">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-385">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-385">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-386">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-386">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-387">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-387">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-388">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-388">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-389">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-389">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-390">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-390">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewKeyUpEvent>|  
|<span data-ttu-id="8c630-391">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-391">Routing strategy</span></span>|<span data-ttu-id="8c630-392">터널링</span><span class="sxs-lookup"><span data-stu-id="8c630-392">Tunneling</span></span>|  
|<span data-ttu-id="8c630-393">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-393">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="8c630-394">해당 버블링 이벤트가 <xref:System.Windows.Input.Keyboard.KeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-394">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.KeyUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-395"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-395">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-396">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-396">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-397">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-397">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-398">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-398">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" Usage="see AddPreviewLostKeyboardFocusHandler, and RemovePreviewLostKeyboardFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c630-399">요소가 키보드 포커스를 잃으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-399">Occurs when an element is in the process of losing keyboard focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-400">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-400">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8c630-401">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-401">implements attached events as routed events.</span></span> <span data-ttu-id="8c630-402">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-402">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="8c630-403">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="8c630-403">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="8c630-404">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-404">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="8c630-405">경우는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> 이벤트 또는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> 이벤트를 처리, 키보드 포커스는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-405">If the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus> event or the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus> event is handled, keyboard focus does not change.</span></span>  
  
 <span data-ttu-id="8c630-406">키보드 포커스는 키보드 입력을 수신 하는 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-406">Keyboard focus refers to the object that is receiving keyboard input.</span></span> <span data-ttu-id="8c630-407">키보드 포커스가 있는 요소가 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-407">The element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.</span></span>  <span data-ttu-id="8c630-408">전체 바탕 화면에 키보드 포커스가 있는 요소가 하나만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-408">There can be only one element with keyboard focus on the entire desktop.</span></span>  <span data-ttu-id="8c630-409">논리 포커스는 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-409">Logical focus refers to the object within a focus scope that has focus.</span></span>  <span data-ttu-id="8c630-410">포커스, 키보드 포커스와 논리 포커스가에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-410">For more information on focus, keyboard focus, and logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="8c630-411">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="8c630-411">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="8c630-412">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="8c630-412">Identifier field</span></span>|<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="8c630-413">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="8c630-413">Routing strategy</span></span>|<span data-ttu-id="8c630-414">터널링</span><span class="sxs-lookup"><span data-stu-id="8c630-414">Tunneling</span></span>|  
|<span data-ttu-id="8c630-415">대리자</span><span class="sxs-lookup"><span data-stu-id="8c630-415">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="8c630-416">해당 버블링 이벤트가 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-416">The corresponding bubbling event is <xref:System.Windows.Input.Keyboard.LostKeyboardFocus>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-417"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-417">Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-418">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-418">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="8c630-419">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-419">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="8c630-420">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-420">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryDevice">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.KeyboardDevice PrimaryDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.KeyboardDevice PrimaryDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PrimaryDevice As KeyboardDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::KeyboardDevice ^ PrimaryDevice { System::Windows::Input::KeyboardDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryDevice : System.Windows.Input.KeyboardDevice" Usage="System.Windows.Input.Keyboard.PrimaryDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c630-421">기본 키보드 입력 디바이스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-421">Gets the primary keyboard input device.</span></span></summary>
        <value><span data-ttu-id="8c630-422">디바이스입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-422">The device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-423">이 속성은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-423">This property supports the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyboardDevice" />
      </Docs>
    </Member>
    <Member MemberName="RemoveGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-424">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-424">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-425">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-425">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-426"><see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-426">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-427">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-427">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-428">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-428">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-429">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-429">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-430"><see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-430">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-431">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-431">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-432">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-432">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-433">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-433">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-434"><see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-434">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-435">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-435">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemoveKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-436">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-436">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-437">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-437">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-438"><see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-438">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-439">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-439">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-440">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-440">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-441">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-441">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-442"><see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-442">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-443">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-443">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewGotKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewGotKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewGotKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewGotKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewGotKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewGotKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-444">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-444">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-445">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-445">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-446"><see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-446">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-447">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-447">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyboardInputProviderAcquireFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyboardInputProviderAcquireFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyboardInputProviderAcquireFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyboardInputProviderAcquireFocusHandler (element As DependencyObject, handler As KeyboardInputProviderAcquireFocusEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyboardInputProviderAcquireFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardInputProviderAcquireFocusEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyboardInputProviderAcquireFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-448">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-448">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-449">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-449">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-450"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-450">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-451">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-451">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyDownHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyDownHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyDownHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyDownHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-452">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-452">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-453">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-453">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-454"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-454">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-455">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-455">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewKeyUpHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewKeyUpHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewKeyUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewKeyUpHandler (element As DependencyObject, handler As KeyEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewKeyUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewKeyUpHandler : System.Windows.DependencyObject * System.Windows.Input.KeyEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-456">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-456">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-457">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-457">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-458"><see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-458">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-459">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-459">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewLostKeyboardFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewLostKeyboardFocusHandler (System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewLostKeyboardFocusHandler(class System.Windows.DependencyObject element, class System.Windows.Input.KeyboardFocusChangedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewLostKeyboardFocusHandler (element As DependencyObject, handler As KeyboardFocusChangedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewLostKeyboardFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::KeyboardFocusChangedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewLostKeyboardFocusHandler : System.Windows.DependencyObject * System.Windows.Input.KeyboardFocusChangedEventHandler -&gt; unit" Usage="System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.KeyboardFocusChangedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="8c630-460">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-460">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="8c630-461">제거할 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-461">The event handler to be removed.</span></span></param>
        <summary><span data-ttu-id="8c630-462"><see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-462">Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c630-463">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 합니다 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="8c630-463">This method provides attached property accessors for code access to the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>