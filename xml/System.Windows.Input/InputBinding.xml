<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="469c80a426064940cc5174bbda759b0993603419" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59014463" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="072d8-101"><see cref="T:System.Windows.Input.InputGesture" />와 명령 간의 바인딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="072d8-102">명령은 <see cref="T:System.Windows.Input.RoutedCommand" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-103">사용자 입력을 만들어 명령을 호출을 지정할 수 있습니다는 <xref:System.Windows.Input.InputBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="072d8-104">사용자가 지정된 된 입력을 수행 하는 경우는 <xref:System.Windows.Input.ICommand> 로 설정 된는 <xref:System.Windows.Input.InputBinding.Command%2A> 속성 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="072d8-105">지정할 수 있습니다는 <xref:System.Windows.Input.InputBinding> 에서 바인딩 만들기에서 개체에서 정의한 명령을 호출 합니다 <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, 및 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="072d8-106">이 옵션을 사용 하면 사용자 지정 명령을 정의 하 고 사용자 입력을 사용 하 여 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="072d8-107">자세한 내용은 예제 섹션의 두 번째 예제를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="072d8-108"><xref:System.Windows.Input.InputBinding> 등록 하 여 특정 개체 또는 클래스 수준에서 정의할 수는 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> 사용 하 여는 <xref:System.Windows.Input.CommandManager>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="072d8-109"><xref:System.Windows.Input.InputBinding> 자체 클래스에서 공용 기본 생성자를 노출 하지 않으므로 XAML 사용을 지원 하지 않습니다 (기본 생성자는 하지만 보호 됩니다).</span><span class="sxs-lookup"><span data-stu-id="072d8-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="072d8-110">그러나 파생된 클래스를 노출할 수 public 생성자를 따라서에서 상속 된 파생된 클래스에서 속성을 설정할 수 <xref:System.Windows.Input.InputBinding> XAML 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="072d8-111">두 가지 기존 <xref:System.Windows.Input.InputBinding>-XAML에서 인스턴스화할 수 있습니다 하 고 XAML에서 속성을 설정할 수 있는 파생된 클래스는 <xref:System.Windows.Input.KeyBinding> 고 <xref:System.Windows.Input.MouseBinding>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-112">일반적인 속성 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 하나 이상의 XAML에는 설정 된 프로그래밍 <xref:System.Windows.Input.InputBinding> 값으로 개체를 <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="072d8-113">XAML 개체 요소 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="072d8-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="072d8-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="072d8-115">XAML 값</span><span class="sxs-lookup"><span data-stu-id="072d8-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="072d8-116">파생된 클래스 <xref:System.Windows.Input.InputBinding> 와 같은 개체 요소 구문을 지 원하는 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-117">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="072d8-118">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Input.KeyBinding> 바인딩할를 <xref:System.Windows.Input.KeyGesture> 에 <xref:System.Windows.Input.ApplicationCommands.Open%2A> 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="072d8-119">키 제스처를 수행 하는 경우에 열려 있는 명령 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="072d8-120">다음 예제에서는 사용자 지정 명령을 바인딩하는 방법을 보여 줍니다 <xref:System.Windows.Input.InputBinding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="072d8-121">이 예제에서는 사용자가 다음 작업 중 하나를 수행 하 여 배경색을 변경할 수 있도록 하는 응용 프로그램을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="072d8-122">단추를 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="072d8-123">CTRL + C를 누릅니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="072d8-124">마우스 오른쪽 단추로 클릭 한 <xref:System.Windows.Controls.StackPanel> (외부는 <xref:System.Windows.Controls.ListBox>).</span><span class="sxs-lookup"><span data-stu-id="072d8-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="072d8-125">첫 번째 예에서는 이라는 클래스를 만듭니다 `SimpleDelegateCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="072d8-126">이 클래스는 명령을 만드는 개체는 명령을 실행할 때 발생 하는 동작을 정의할 수 있도록 대리자를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="072d8-127">`SimpleDelegateCommand` 또한 새로운 키와 마우스를 지정 하는 속성을 정의 입력이 명령을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="072d8-128">`GestureKey` 및 `GestureModifier` 키보드 입력을 지정 합니다. `MouseGesture` 마우스 입력을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="072d8-129">다음 예제를 만들고 초기화 된 `ColorChangeCommand`는 `SimpleDelegateCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="072d8-130">예제에서는 또한 명령이 호출 되 고 설정 하는 경우 실행 되는 메서드를 정의 합니다 `GestureKey`, `GestureModifier`, 및 `MouseGesture` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="072d8-131">응용 프로그램 호출을 `InitializeCommand` 의 생성자와 같이 프로그램을 시작할 때 메서드를 <xref:System.Windows.Window>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="072d8-132">마지막으로, 다음 예제에서는 사용자 인터페이스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="072d8-133">이 예제에서는 추가 <xref:System.Windows.Input.KeyBinding> 및 <xref:System.Windows.Input.MouseBinding> 에 <xref:System.Windows.Controls.StackPanel> 포함 하는 <xref:System.Windows.Controls.Button> 및 <xref:System.Windows.Controls.ListBox>.</span><span class="sxs-lookup"><span data-stu-id="072d8-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="072d8-134">사용자가 항목을 선택 하는 경우는 <xref:System.Windows.Controls.ListBox>, 자신이 선택한 색으로 배경의 색을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="072d8-135">각각의 경우에서는 `CommandParameter` 속성에서 선택한 항목에 바인딩된 합니다 <xref:System.Windows.Controls.ListBox>, 및 `Command` 속성이 바인딩되는 `ColorChangeCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="072d8-136"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> 바인딩할 속성을 해당 속성는 `SimpleDelegateCommand` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="072d8-137"><see cref="T:System.Windows.Input.InputBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="072d8-138"><see cref="T:System.Windows.Input.InputBinding" />에서 파생된 클래스의 기본 초기화를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-139"><xref:System.Windows.Input.InputBinding> 추상 클래스 기술적으로 아니지만 기본 생성자는 의도적으로 액세스를 보호 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="072d8-140">이 효과가 making <xref:System.Windows.Input.InputBinding> XAML에 대 한 "추상" 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="072d8-141">기존 속성을 가지 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 형식의 개체를 필요로 하는 XAML 용도 갖는 <xref:System.Windows.Input.InputBinding>를 지정할 수는 없습니다는 <xref:System.Windows.Input.InputBinding> XAML의 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="072d8-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="072d8-142">장치 전용 중 하나를 지정할 수는 대신 <xref:System.Windows.Input.InputBinding> 파생 클래스 값으로 예를 들어 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="072d8-143">사용자 지정을 구현 하는 경우 <see cref="T:System.Windows.Input.InputBinding" /> XAML 사용을 지 원하는 기본 초기화를 위해이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-143">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="072d8-144"><paramref name="gesture" />와 연결할 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-144">The command to associate with <paramref name="gesture" />.</span></span></param>
        <param name="gesture"><span data-ttu-id="072d8-145"><paramref name="command" />와 연결할 입력 제스처입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-145">The input gesture to associate with <paramref name="command" />.</span></span></param>
        <summary><span data-ttu-id="072d8-146">지정한 명령과 입력 제스처를 사용하여 <see cref="T:System.Windows.Input.InputBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-147">기존 입력 바인딩 클래스를 사용 하는 소프트웨어 개발자 인 경우에 사용자 지정 명령을 정의 하는 경우에 일반적으로이 생성자를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="072d8-148">대신 사용 하거나 파생된 클래스의 생성자 (<xref:System.Windows.Input.KeyBinding> 및 <xref:System.Windows.Input.MouseBinding>), 사용자 지정 클래스의 기본 인스턴스로이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="072d8-149">하지만 <xref:System.Windows.Input.InputBinding> 클래스 입력된 바인딩을 나타내는 장치를 선택 해야 하는 실제로 원칙적으로 다른 입력된 장치를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="072d8-150">만 설정할 수 있습니다 하나만 <xref:System.Windows.Input.InputBinding.Gesture%2A> 값 입력된 바인딩 및 제스처는 장치별으로 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="072d8-151">다음 예제에서는 연결 하려면이 생성자를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Input.KeyGesture> 사용 하 여는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="072d8-152"><paramref name="command" /> 또는 <paramref name="gesture" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="072d8-152"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="072d8-153">복제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-153">The object to clone.</span></span></param>
        <summary><span data-ttu-id="072d8-154">지정된 개체의 속성에 대한 애니메이션이 적용되지 않은 기준 값을 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-154">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="072d8-155">복제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-155">The object to clone.</span></span></param>
        <summary><span data-ttu-id="072d8-156">지정된 개체의 속성에 대한 현재 값을 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-156">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-157">이 입력 바인딩과 연결된 <see cref="T:System.Windows.Input.ICommand" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="072d8-158">연결된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-158">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-159"><xref:System.Windows.Input.InputBinding> 클래스에서 공용 기본 생성자를 노출 하지 않으므로 XAML 사용을 지원 하지 않습니다 (기본 생성자를 가진 것 이지만 보호 됩니다).</span><span class="sxs-lookup"><span data-stu-id="072d8-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="072d8-160">그러나 파생된 클래스를 노출할 수 public 생성자에서 상속 된 속성을 사용할 수 있으므로 <xref:System.Windows.Input.InputBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="072d8-161">두 가지 기존 <xref:System.Windows.Input.InputBinding> 파생 클래스는 XAML에서 인스턴스화할 수 있습니다 및 XAML 사용을 사용 하 여 속성을 설정할 수 있습니다 <xref:System.Windows.Input.KeyBinding> 고 <xref:System.Windows.Input.MouseBinding>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="072d8-162"><xref:System.Windows.Input.ICommand> 특정 기존 수 있도록 하는 형식 변환기를 참조 <xref:System.Windows.Input.ICommand> 값을 지정 하는 문자열의 형태로 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="072d8-163">이 형식 변환 동작에는이 속성의 특성 값 형식을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="072d8-164">바인딩할 수도 있습니다는 <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, 및 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성을는 <xref:System.Windows.Input.ICommand> 개체에 정의 되어 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="072d8-165">이 옵션을 사용 하면 사용자 지정 명령을 정의 하 고 사용자 입력을 사용 하 여 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="072d8-166">자세한 내용은 두 번째 예제를 참조 하세요. <xref:System.Windows.Input.InputBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="072d8-167">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="072d8-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="072d8-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="072d8-169">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="072d8-170">XAML 값</span><span class="sxs-lookup"><span data-stu-id="072d8-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="072d8-171">파생된 클래스 <xref:System.Windows.Input.InputBinding> 와 같은 개체 요소 구문을 지 원하는 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-172">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="072d8-173">개체 구현의 <xref:System.Windows.Input.ICommand> 개체 요소 구문을 지 원하는 (공용 기본 생성자가 있음).</span><span class="sxs-lookup"><span data-stu-id="072d8-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="072d8-174">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Input.KeyBinding> 바인딩할를 <xref:System.Windows.Input.KeyGesture> 에 <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="072d8-175">키 제스처를 수행 하는 경우에 열려 있는 명령 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="072d8-176"><see cref="P:System.Windows.Input.InputBinding.Command" /> 값이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-177">특정 명령에 대한 명령별 데이터를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-177">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="072d8-178">명령별 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-178">The command-specific data.</span></span> <span data-ttu-id="072d8-179">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-179">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-180"><xref:System.Windows.Input.InputBinding.CommandParameter%2A> 속성 명령이 실행 될 때 특정 정보를 전달 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="072d8-181">데이터 유형의 명령에 의해 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="072d8-182">많은 명령 명령 매개 변수를 필요 하지 않습니다. 이러한 명령에 대 한 명령 매개 변수에 전달 되는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="072d8-183">입력된 바인딩을 사용 하 여 연결 하는 명령 인지를 <xref:System.Windows.Input.RoutedCommand>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A> 입력 바인딩의 전달 되는 <xref:System.Windows.Input.RoutedCommand> 처리기를 통해를 <xref:System.Windows.Input.ExecutedRoutedEventArgs> 및 <xref:System.Windows.Input.CanExecuteRoutedEventArgs> 명령이 처리 되는 경우 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="072d8-184">데이터 형식 및 명령 매개 변수의 용도는 각 명령에 대해 다르게 정의 되며 및 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="072d8-185">바인딩할 수 있습니다 합니다 <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, 및 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성을는 <xref:System.Windows.Input.ICommand> 개체에 정의 되어 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="072d8-186">이 옵션을 사용 하면 사용자 지정 명령을 정의 하 고 사용자 입력을 사용 하 여 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="072d8-187">자세한 내용은 두 번째 예제를 참조 하세요. <xref:System.Windows.Input.InputBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="072d8-188"><xref:System.Windows.Input.InputBinding> 클래스에서 공용 기본 생성자를 노출 하지 않으므로 XAML 사용을 지원 하지 않습니다 (기본 생성자를 가진 것 이지만 보호 됩니다).</span><span class="sxs-lookup"><span data-stu-id="072d8-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="072d8-189">그러나 파생된 클래스를 노출할 수 public 생성자에서 상속 된 속성을 설정할 수 있으므로 <xref:System.Windows.Input.InputBinding> XAML 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="072d8-190">두 가지 기존 <xref:System.Windows.Input.InputBinding> 파생 클래스는 XAML에서 인스턴스화할 수 있습니다 하 고 XAML에서 속성을 설정할 수 <xref:System.Windows.Input.KeyBinding> 고 <xref:System.Windows.Input.MouseBinding>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="072d8-191">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="072d8-192">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="072d8-193">XAML 값</span><span class="sxs-lookup"><span data-stu-id="072d8-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="072d8-194">파생된 클래스 <xref:System.Windows.Input.InputBinding> 와 같은 개체 요소 구문을 지 원하는 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-195">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="072d8-196">특정 명령에 의해 처리 되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="072d8-197">문자열은 XAML에서 쉽게 설정할 수 있기 때문에 명령 매개 변수를 사용 하는 일반적인 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="072d8-198">용도 예상 되는 문자열 형식에 대 한 입력된 바인딩을 사용 하 여 연결 된 특정 명령에 대 한 설명서를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="072d8-199">많은 명령 매개 변수를 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="072d8-200">특정 명령에 의해 처리 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="072d8-201">모든 기존 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 명령 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="072d8-202">따라서이 속성 요소 구문은 사용자 지정 명령 시나리오에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="072d8-203">이 구문은 지원 하기 위해는 `commandParameterObject` 개체 (공용 기본 생성자가 있어야 함) 하는 개체 요소 구문을 지원 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-204"><see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-205"><see cref="P:System.Windows.Input.InputBinding.Command" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-206">명령의 대상 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-206">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="072d8-207">명령의 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-207">The target of the command.</span></span> <span data-ttu-id="072d8-208">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-208">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-209">명령 시스템에서 Windows Presentation Foundation의를 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성에는 <xref:System.Windows.Input.ICommandSource> 개체는 경우에만 적용를 <xref:System.Windows.Input.ICommand> 는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="072d8-210"><xref:System.Windows.Input.InputBinding.CommandTarget%2A>이 <xref:System.Windows.Input.ICommandSource>에서 설정되고 해당 명령이 <xref:System.Windows.Input.RoutedCommand>가 아닌 경우 명령 대상은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="072d8-211">와 함께 사용할 경우는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 개체입니다는 <xref:System.Windows.Input.CommandManager.Executed> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="072d8-212">경우는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성이 설정 되지 않은, 키보드 포커스가 있는 요소를 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="072d8-213"><xref:System.Windows.Input.InputBinding> 자체 클래스에서 공용 기본 생성자를 노출 하지 않으므로 XAML 사용을 지원 하지 않습니다 (기본 생성자는 하지만 보호 됩니다).</span><span class="sxs-lookup"><span data-stu-id="072d8-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="072d8-214">그러나 파생된 클래스를 노출할 수 public 생성자에서 상속 된 속성을 설정할 수 있으므로 <xref:System.Windows.Input.InputBinding> XAML 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="072d8-215">두 가지 기존 <xref:System.Windows.Input.InputBinding> 파생 클래스는 XAML에서 인스턴스화할 수 있습니다 하 고 XAML에서 속성을 설정할 수 <xref:System.Windows.Input.KeyBinding> 고 <xref:System.Windows.Input.MouseBinding>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="072d8-216">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="072d8-217">XAML 값</span><span class="sxs-lookup"><span data-stu-id="072d8-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="072d8-218">파생된 클래스 <xref:System.Windows.Input.InputBinding> 와 같은 개체 요소 구문을 지 원하는 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-219">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="072d8-220">요소의 이름을 지정 하는 기존 개체 참조를 반환할 수 있는 바인딩 구문 형식을 사용 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="072d8-221">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-222"><see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="072d8-223"><see cref="T:System.Windows.Input.InputBinding" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="072d8-224">새 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-224">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="072d8-225">이 입력 바인딩과 연결된 <see cref="T:System.Windows.Input.InputGesture" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="072d8-226">연결된 제스처입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-226">The associated gesture.</span></span> <span data-ttu-id="072d8-227">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-227">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="072d8-228">입력된 제스처에는 명령을 호출 하는 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="072d8-229">입력된 제스처 예가 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 됩니다 <xref:System.Windows.Input.KeyGesture> 및 <xref:System.Windows.Input.MouseGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="072d8-230">A <xref:System.Windows.Input.KeyGesture> 결합 한 것을 <xref:System.Windows.Input.Key> 집합과 <xref:System.Windows.Input.ModifierKeys>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="072d8-231">A <xref:System.Windows.Input.MouseGesture> 결합 한 것을 <xref:System.Windows.Input.MouseAction> 집합과 <xref:System.Windows.Input.ModifierKeys>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="072d8-232"><xref:System.Windows.Input.InputBinding> 자체 클래스에서 공용 기본 생성자를 노출 하지 않으므로 XAML 사용을 지원 하지 않습니다 (기본 생성자는 하지만 보호 됩니다).</span><span class="sxs-lookup"><span data-stu-id="072d8-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="072d8-233">그러나 파생된 클래스를 노출할 수 public 생성자에서 상속 된 속성을 설정할 수 있으므로 <xref:System.Windows.Input.InputBinding> XAML 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="072d8-234">두 가지 기존 <xref:System.Windows.Input.InputBinding> 파생 클래스는 XAML에서 인스턴스화할 수 있습니다 하 고 XAML에서 속성을 설정할 수 <xref:System.Windows.Input.KeyBinding> 고 <xref:System.Windows.Input.MouseBinding>입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="072d8-235">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="072d8-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="072d8-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
<span data-ttu-id="072d8-237">또는</span><span class="sxs-lookup"><span data-stu-id="072d8-237">-or-</span></span>
  
 <span data-ttu-id="072d8-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="072d8-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
<span data-ttu-id="072d8-239">또는</span><span class="sxs-lookup"><span data-stu-id="072d8-239">-or-</span></span>
  
 <span data-ttu-id="072d8-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="072d8-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="072d8-241">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="072d8-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="072d8-242">XAML 값</span><span class="sxs-lookup"><span data-stu-id="072d8-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="072d8-243">파생된 클래스 <xref:System.Windows.Input.InputBinding> 와 같은 개체 요소 구문을 지 원하는 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="072d8-244">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="072d8-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="072d8-245">사용자 지정 파생 클래스의 <xref:System.Windows.Input.InputGesture> 개체 요소 구문을 지 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="072d8-246">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Input.KeyBinding> 바인딩할를 <xref:System.Windows.Input.KeyGesture> 에 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="072d8-247">경우는 <xref:System.Windows.Input.KeyGesture> ALT + L을 누르면는 <xref:System.Windows.Input.ApplicationCommands.Close%2A> 명령을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="072d8-248">복제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-248">The object to clone.</span></span></param>
        <summary><span data-ttu-id="072d8-249">애니메이션이 적용되지 않은 기준 속성 값을 사용하여 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 고정된 복제본으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="072d8-250">복제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-250">The object to clone.</span></span></param>
        <summary><span data-ttu-id="072d8-251">현재 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 고정 클론으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="072d8-252">개체에 애니메이션 효과를 준 종속성 속성이 있는 경우 애니메이션 효과를 준 현재 값이 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="072d8-252">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>