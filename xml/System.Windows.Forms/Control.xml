<Type Name="Control" FullName="System.Windows.Forms.Control">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7433a6db28b4a73a624edb4e4861092338bd7103" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56373523" /></Metadata><TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control" />
  <TypeSignature Language="VB.NET" Value="Public Class Control&#xA;Inherits Component&#xA;Implements IBindableComponent, IDisposable, IDropTarget, ISynchronizeInvoke, IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class Control : System::ComponentModel::Component, IDisposable, System::ComponentModel::ISynchronizeInvoke, System::Windows::Forms::IBindableComponent, System::Windows::Forms::IDropTarget, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a1309-101">시각적으로 표시되는 구성 요소인 컨트롤의 기본 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-101">Defines the base class for controls, which are components with visual representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-102">사용자 지정 컨트롤 클래스를 만들려면에서 상속 된 <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> 클래스 또는 다른 Windows Forms에서 컨트롤을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-102">To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> classes, or from the other Windows Forms provided controls.</span></span> <span data-ttu-id="a1309-103">사용자 지정 컨트롤을 작성 하는 방법에 대 한 자세한 내용은 참조 하세요. [.NET Framework를 사용 하 여 사용자 지정 Windows Forms 컨트롤 개발](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-103">For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md).</span></span>  
  
 <span data-ttu-id="a1309-104"><xref:System.Windows.Forms.Control> 클래스는 사용자에 게 정보를 표시 하는 클래스에 필요한 기본적인 기능을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-104">The <xref:System.Windows.Forms.Control> class implements very basic functionality required by classes that display information to the user.</span></span> <span data-ttu-id="a1309-105">키보드 및 포인팅 디바이스를 통해 사용자 입력을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-105">It handles user input through the keyboard and pointing devices.</span></span> <span data-ttu-id="a1309-106">메시지 라우팅 및 보안을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-106">It handles message routing and security.</span></span> <span data-ttu-id="a1309-107">그리기를 구현 하지는 않지만 컨트롤 (해당 위치 및 크기)의 경계를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-107">It defines the bounds of a control (its position and size), although it does not implement painting.</span></span> <span data-ttu-id="a1309-108">창 핸들을 제공 (`hWnd`).</span><span class="sxs-lookup"><span data-stu-id="a1309-108">It provides a window handle (`hWnd`).</span></span>  
  
 <span data-ttu-id="a1309-109">Windows Forms 컨트롤의 주변 환경 처럼 자식 컨트롤이 표시 될 수 있도록 앰비언트 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-109">Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</span></span> <span data-ttu-id="a1309-110">*앰비언트 속성* 그렇지 않은 경우, 컨트롤 속성은 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-110">An *ambient property* is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-111">컨트롤에 없는 경우는 <xref:System.Windows.Forms.Control.Parent%2A>는 속성이 설정 되지 않은, 컨트롤을 통해 앰비언트 속성의 값을 확인 하려고 합니다 <xref:System.Windows.Forms.Control.Site%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-111">If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property.</span></span> <span data-ttu-id="a1309-112">컨트롤이 배치 되어 있지 않습니다, 사이트 앰비언트 속성을 지원 하지 않는 경우 또는 속성에 설정 하지 않으면는 <xref:System.Windows.Forms.AmbientProperties>, 컨트롤에서 자체 기본값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-112">If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values.</span></span> <span data-ttu-id="a1309-113">일반적으로 앰비언트 속성은 컨트롤의 특성을 같은 <xref:System.Windows.Forms.Control.BackColor%2A>, 즉 자식 컨트롤에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-113">Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control.</span></span> <span data-ttu-id="a1309-114">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-114">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-115">제공한 앰비언트 속성을 <xref:System.Windows.Forms.Control> 클래스에 포함: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>를 <xref:System.Windows.Forms.Control.ForeColor%2A>, 및 <xref:System.Windows.Forms.Control.RightToLeft%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-115">Ambient properties provided by the <xref:System.Windows.Forms.Control> class include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-116">비주얼 스타일을 지 원하는 Windows Forms 애플리케이션을 위해 설정 해야 합니다 <xref:System.Windows.Forms.FlatStyle> 속성을 `System` 실행 파일을 사용 하 여 매니페스트를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-116">To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable.</span></span> <span data-ttu-id="a1309-117">매니페스트는 실행 파일과 동일한 디렉터리에 있는 별도 파일 또는 애플리케이션 실행 파일 내에 리소스로 포함 된 XML 파일.</span><span class="sxs-lookup"><span data-stu-id="a1309-117">A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</span></span> <span data-ttu-id="a1309-118">매니페스트의 예의 예제 섹션을 참조 하세요.를 <xref:System.Windows.Forms.FlatStyle> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-118">For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration.</span></span> <span data-ttu-id="a1309-119">비주얼 스타일을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [비주얼 스타일이](https://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-119">For more information about using visual styles, see [Visual Styles](https://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).</span></span>  
  
 <span data-ttu-id="a1309-120">Windows Forms 내게 필요한 옵션 지원 기본 제공 되 고 있고 화면 확대기 및 검토자 유틸리티와 같은 접근성 클라이언트 애플리케이션을 사용 하 여 작업, 음성 입력된 유틸리티 화상 키보드를 사용 하도록 설정 하는 애플리케이션에 대 한 정보를 제공 합니다. 대체 입력된 장치 및 키보드 향상 유틸리티입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-120">Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</span></span> <span data-ttu-id="a1309-121">접근성 클라이언트 애플리케이션에 대 한 추가 정보를 제공할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-121">Sometimes you will want to provide additional information to accessibility client applications.</span></span> <span data-ttu-id="a1309-122">이 추가 정보를 제공 하는 방법은 두 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-122">There are two ways of providing this additional information.</span></span> <span data-ttu-id="a1309-123">설정할 수 있습니다 합니다 <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, 및 <xref:System.Windows.Forms.Control.AccessibleRole%2A> 접근성 클라이언트 애플리케이션에 보고 되는 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-123">You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications.</span></span> <span data-ttu-id="a1309-124">이 메서드는 기존 컨트롤에 대 한 제한 된 내게 필요한 옵션 정보를 제공 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-124">This method is typically used to provide limited accessibility information for existing controls.</span></span> <span data-ttu-id="a1309-125">또는에서 파생 된 고유한 클래스를 작성할 수 있습니다 합니다 <xref:System.Windows.Forms.AccessibleObject> 또는 <xref:System.Windows.Forms.Control.ControlAccessibleObject> 클래스를 필요한 만큼 내게 필요한 옵션 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-125">Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-126">더 나은 성능을 유지 하기 위해 해당 생성자에서 컨트롤의 크기를 설정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-126">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="a1309-127">재정의 하는 방법이 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-127">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-128">에 대 한 데이터 바인딩을 추가 하지 마십시오는 <xref:System.Windows.Forms.Control> 생성자에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-128">Do not add data bindings for a <xref:System.Windows.Forms.Control> in its constructor.</span></span> <span data-ttu-id="a1309-129">이렇게 하면 코드 생성에서 오류가 발생 하 고 원치 않는 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-129">Doing so will cause errors in code generation and can cause unwanted behavior.</span></span>  
  
 <span data-ttu-id="a1309-130">대부분의 컨트롤을 <xref:System.Windows.Forms> 네임 스페이스에서 빌드할 수를 기준으로 기본 Windows 공용 컨트롤을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-130">The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on.</span></span> <span data-ttu-id="a1309-131">Windows 공용 컨트롤에 대 한 자세한 내용은 참조 하세요. [일반 컨트롤 참조](https://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-131">For more information about the Windows common controls, see [General Control Reference](https://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).</span></span>  
  
 <span data-ttu-id="a1309-132">별도 프로세스에서 Windows Forms 컨트롤을 식별 하려면 표준 사용 `SendMessage` WM_GETCONTROLNAME 메시지를 전달 하도록 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-132">To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message.</span></span> <span data-ttu-id="a1309-133">WM_GETCONTROLNAME는 별개의 언어와 Windows 계층 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-133">WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</span></span> <span data-ttu-id="a1309-134">자세한 내용은의 "Windows Forms에 대 한 권장 솔루션" 항목을 참조 하세요[Windows Forms 자동화](https://msdn.microsoft.com/library/ms996405.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-134">For more information, see the "Recommended Solution for Windows Forms" topic in[Automating Windows Forms](https://msdn.microsoft.com/library/ms996405.aspx).</span></span>  
  
 <span data-ttu-id="a1309-135">사용 된 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성이 여러 스레드에서 컨트롤에 대 한 액세스를 동기화 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-135">Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads.</span></span> <span data-ttu-id="a1309-136">다중 스레드 Windows Forms 컨트롤에 대 한 자세한 내용은 참조 하세요. [방법: Windows Forms 컨트롤에 스레드로부터 안전한 호출 수행](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span><span class="sxs-lookup"><span data-stu-id="a1309-136">For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="a1309-137">다음 멤버는 스레드로부터 안전만: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />합니다 <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, 및 <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-137">Only the following members are thread safe: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />, <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, and <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-138">호출 <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-138">Calling <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span></threadsafe>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.ComponentModel.Component" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-139"><see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-139">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-140"><see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 기본 설정으로 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-140">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with default settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-141"><xref:System.Windows.Forms.Control> 클래스는 Windows Forms 애플리케이션에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-141">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="a1309-142">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로,이 생성자는 일반적으로 직접 호출 되지 않지만 대신 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-142">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="a1309-143">컨트롤에 의해 표시된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-143">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="a1309-144">지정된 텍스트를 사용하여 <see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-144">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-145"><xref:System.Windows.Forms.Control> 클래스는 Windows Forms 애플리케이션에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-145">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="a1309-146">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로,이 생성자는 일반적으로 직접 호출 되지 않지만 대신 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-146">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="a1309-147">이 버전의를 <xref:System.Windows.Forms.Control.%23ctor%2A> 초기 설정 하는 생성자 <xref:System.Windows.Forms.Control.Text%2A> 속성 값을 `text` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-147">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="a1309-148">컨트롤의 부모가 될 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-148">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="a1309-149">컨트롤에 의해 표시된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-149">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="a1309-150">지정된 텍스트를 사용하여 <see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 자식 컨트롤로 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-150">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-151"><xref:System.Windows.Forms.Control> 클래스는 Windows Forms 애플리케이션에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-151">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="a1309-152">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로,이 생성자는 일반적으로 직접 호출 되지 않지만 대신 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-152">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="a1309-153">이 버전의를 <xref:System.Windows.Forms.Control.%23ctor%2A> 초기 설정 하는 생성자 <xref:System.Windows.Forms.Control.Text%2A> 속성 값을 `text` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-153">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="a1309-154">생성자는 부모 컨트롤에 컨트롤 추가 <xref:System.Windows.Forms.Control.ControlCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-154">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="a1309-155">컨트롤에 의해 표시된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-155">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="a1309-156">컨트롤 컨테이너의 왼쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <see cref="P:System.Drawing.Point.X" /> 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-156">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="a1309-157">이 값은 <see cref="P:System.Windows.Forms.Control.Left" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-157">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="a1309-158">컨트롤 컨테이너의 위쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <see cref="P:System.Drawing.Point.Y" /> 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-158">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="a1309-159">이 값은 <see cref="P:System.Windows.Forms.Control.Top" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-159">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-160">컨트롤의 너비(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-160">The width of the control, in pixels.</span></span> <span data-ttu-id="a1309-161">이 값은 <see cref="P:System.Windows.Forms.Control.Width" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-161">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-162">컨트롤의 높이(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-162">The height of the control, in pixels.</span></span> <span data-ttu-id="a1309-163">이 값은 <see cref="P:System.Windows.Forms.Control.Height" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-163">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="a1309-164">지정된 텍스트, 크기 및 위치를 사용하여 <see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-164">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-165"><xref:System.Windows.Forms.Control> 클래스는 Windows Forms 애플리케이션에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-165">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="a1309-166">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로,이 생성자는 일반적으로 직접 호출 되지 않지만 대신 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-166">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="a1309-167">이 버전의를 <xref:System.Windows.Forms.Control.%23ctor%2A> 초기 설정 하는 생성자 <xref:System.Windows.Forms.Control.Text%2A> 속성 값을 `text` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-167">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="a1309-168">초기 <xref:System.Windows.Forms.Control.Size%2A> 및 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤에 따라 결정 되는 `left`, `top`를 `width` 및 `height` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-168">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-169">더 나은 성능을 유지 하기 위해 해당 생성자에서 컨트롤의 크기를 설정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-169">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="a1309-170">재정의 하는 방법이 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-170">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="a1309-171">컨트롤의 부모가 될 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-171">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="a1309-172">컨트롤에 의해 표시된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-172">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="a1309-173">컨트롤 컨테이너의 왼쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <see cref="P:System.Drawing.Point.X" /> 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-173">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="a1309-174">이 값은 <see cref="P:System.Windows.Forms.Control.Left" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-174">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="a1309-175">컨트롤 컨테이너의 위쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <see cref="P:System.Drawing.Point.Y" /> 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-175">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="a1309-176">이 값은 <see cref="P:System.Windows.Forms.Control.Top" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-176">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-177">컨트롤의 너비(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-177">The width of the control, in pixels.</span></span> <span data-ttu-id="a1309-178">이 값은 <see cref="P:System.Windows.Forms.Control.Width" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-178">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-179">컨트롤의 높이(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-179">The height of the control, in pixels.</span></span> <span data-ttu-id="a1309-180">이 값은 <see cref="P:System.Windows.Forms.Control.Height" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-180">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="a1309-181">지정된 텍스트, 크기 및 위치를 사용하여 <see cref="T:System.Windows.Forms.Control" /> 클래스의 새 인스턴스를 자식 컨트롤로 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-181">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-182"><xref:System.Windows.Forms.Control> 클래스는 Windows Forms 애플리케이션에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-182">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="a1309-183">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로,이 생성자는 일반적으로 직접 호출 되지 않지만 대신 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-183">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="a1309-184">이 버전의를 <xref:System.Windows.Forms.Control.%23ctor%2A> 초기 설정 하는 생성자 <xref:System.Windows.Forms.Control.Text%2A> 속성 값을 `text` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-184">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="a1309-185">생성자는 부모 컨트롤에 컨트롤 추가 <xref:System.Windows.Forms.Control.ControlCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-185">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span> <span data-ttu-id="a1309-186">초기 <xref:System.Windows.Forms.Control.Size%2A> 및 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤에 따라 결정 되는 `left`, `top`를 `width` 및 `height` 매개 변수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-186">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-187">더 나은 성능을 유지 하기 위해 해당 생성자에서 컨트롤의 크기를 설정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-187">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="a1309-188">재정의 하는 방법이 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-188">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AccessibilityNotifyClients">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-189">내게 필요한 옵션 지원 클라이언트 애플리케이션에 <see cref="T:System.Windows.Forms.AccessibleEvents" />를 알립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-189">Notifies the accessibility client applications of <see cref="T:System.Windows.Forms.AccessibleEvents" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected internal void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="a1309-190">내게 필요한 옵션 지원 클라이언트 애플리케이션에 알릴 <see cref="T:System.Windows.Forms.AccessibleEvents" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-190">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="childID"><span data-ttu-id="a1309-191">액세스할 수 있는 이벤트를 알릴 자식 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-191">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="a1309-192">지정된 자식 컨트롤에 대해 지정된 <see cref="T:System.Windows.Forms.AccessibleEvents" />를 내게 필요한 옵션 지원 클라이언트 애플리케이션에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-192">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-193">호출 해야 합니다는 <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> 메서드 각각에 대해 <xref:System.Windows.Forms.AccessibleEvents> 접근성 클라이언트 애플리케이션에 대 한 알림을 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-193">You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of.</span></span> <span data-ttu-id="a1309-194"><xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> 일반적으로 메서드는 속성을 설정 하거나 내에서 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-194">The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler.</span></span> <span data-ttu-id="a1309-195">예를 들어, 호출할 수 있습니다는 <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> 메서드와 전달을 <xref:System.Windows.Forms.AccessibleEvents> 의 값 `Hide` 에서 대 한 이벤트 처리기 내에서 <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-195">For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-196">다음 코드 예제에서는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다 컨트롤을 사용 하 여 <xref:System.Windows.Forms.AccessibleObject> 및 <xref:System.Windows.Forms.Control.ControlAccessibleObject> 액세스할 수 있는 정보를 노출 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-196">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="a1309-197">컨트롤은 범례를 따라 두 곡선을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-197">The control plots two curves along with a legend.</span></span> <span data-ttu-id="a1309-198">합니다 `ChartControlAccessibleObject` 클래스에서 파생 되는 `ControlAccessibleObject`에 사용 되는 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-198">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="a1309-199">차트 범례 실제 아니므로 <xref:System.Windows.Forms.Control> -컨트롤을 따르지만 그려지며 차트 컨트롤에 의해 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-199">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="a1309-200">이 인해 합니다 `ChartControlAccessibleObject` 재정의 클래스를 <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> 반환 하는 방법은 `CurveLegendAccessibleObject` 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-200">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="a1309-201">인식 액세스할 수 있는 애플리케이션에서이 컨트롤을 사용 하는 경우 컨트롤이 필요한 액세스할 수 있는 정보를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-201">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="a1309-202">이 코드 예제에서는 호출 된 <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-202">This code excerpt demonstrates calling the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> method.</span></span> <span data-ttu-id="a1309-203">참조 된 <xref:System.Windows.Forms.AccessibleObject> 전체 코드 예제에 대 한 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-203">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#5)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#5)]
 [!code-vb[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, objectID As Integer, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, objectID, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="objectID" Type="System.Int32" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="a1309-204">내게 필요한 옵션 지원 클라이언트 애플리케이션에 알릴 <see cref="T:System.Windows.Forms.AccessibleEvents" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-204">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="objectID"><span data-ttu-id="a1309-205"><see cref="T:System.Windows.Forms.AccessibleObject" />의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-205">The identifier of the <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></param>
        <param name="childID"><span data-ttu-id="a1309-206">액세스할 수 있는 이벤트를 알릴 자식 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-206">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="a1309-207">지정된 자식 컨트롤에 대해 지정된 <see cref="T:System.Windows.Forms.AccessibleEvents" />를 내게 필요한 옵션 지원 클라이언트 애플리케이션에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-207">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control .</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Windows.Forms.Control.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-208">컨트롤에 할당된 <see cref="T:System.Windows.Forms.AccessibleObject" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-208">Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></summary>
        <value><span data-ttu-id="a1309-209">컨트롤에 할당된 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-209">The <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-210">이 메서드에서 반환 되는 인스턴스를 제어 하려면 재정의 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-210">To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span>  
  
 <span data-ttu-id="a1309-211">현재 컨트롤에 할당된 <xref:System.Windows.Forms.AccessibleObject> 클래스가 없으면 이 클래스의 새 인스턴스가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-211">If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-212">가져오거나 설정 합니다 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 속성에 대 한 참조를 추가 해야 합니다는 `Accessibility` 어셈블리와 함께 설치는[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-212">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="a1309-213">액세스 가능 개체에 대 한 자세한 내용은 참조 하세요. [Active Accessibility](https://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-213">For more information about accessible objects, see [Active Accessibility](https://msdn.microsoft.com/library/windows/desktop/dd373592.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDefaultActionDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDefaultActionDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDefaultActionDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-214">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용되는 컨트롤의 기본 작업 설명을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-214">Gets or sets the default action description of the control for use by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="a1309-215">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용할 컨트롤의 기본 동작 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-215">The default action description of the control for use by accessibility client applications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-216">개체의 <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> 개체의 기본 메서드를 사용자의 관점에서 조작 하는 속성에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-216">An object's <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> property describes the object's primary method of manipulation from the user's viewpoint.</span></span> <span data-ttu-id="a1309-217">이 속성은 동사 또는 짧은 동사 구 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-217">This property should be a verb or a short verb phrase.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-218">일부 개체에는 기본적으로 작업 하 고 일부 개체는 관련 기본 작업을 해야 할 수는 <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> 다음 예제와 같이 속성:</span><span class="sxs-lookup"><span data-stu-id="a1309-218">Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> property, such as in the following examples:</span></span>  
  
-   <span data-ttu-id="a1309-219">선택한 확인란을 선택 "취소" 기본 작업을 있고 값이 "선택"을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-219">A selected check box has a default action of "Uncheck" and a value of "Checked."</span></span>  
  
-   <span data-ttu-id="a1309-220">확인란 선택이 취소 "확인" 기본 작업을 있고 값이 "선택 취소 합니다."</span><span class="sxs-lookup"><span data-stu-id="a1309-220">A cleared check box has a default action of "Check" and a value of "Unchecked."</span></span>  
  
-   <span data-ttu-id="a1309-221">"인쇄" 레이블이 붙은 단추 기본 동작이 "Press,"의 값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-221">A button labeled "Print" has a default action of "Press," with no value.</span></span>  
  
-   <span data-ttu-id="a1309-222">레이블 또는 "Printer"를 표시 하는 텍스트 상자 컨트롤에 기본 작업이 없는 값이 "Printer"로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-222">A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</span></span>  
  
 <span data-ttu-id="a1309-223">액세스 가능 개체의 속성에 대 한 자세한 내용은 참조 하세요. [설명이 포함 된 속성의 콘텐츠](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-223">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.DefaultAction" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-224">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용하는 컨트롤의 설명을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-224">Gets or sets the description of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="a1309-225">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용하는 컨트롤의 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-225">The description of the control used by accessibility client applications.</span></span> <span data-ttu-id="a1309-226">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-226">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-227">개체의 <xref:System.Windows.Forms.Control.AccessibleDescription%2A> 속성은 개체의 시각적 모양에 대 한 텍스트 설명을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-227">An object's <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property provides a textual description about an object's visual appearance.</span></span> <span data-ttu-id="a1309-228">설명을 이해를 돕기 위해 시각 장애인을 위해 주로 있지만 컨텍스트 검색 이나 다른 애플리케이션에 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-228">The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</span></span>  
  
 <span data-ttu-id="a1309-229">합니다 <xref:System.Windows.Forms.Control.AccessibleDescription%2A> 속성에 대 한 설명, 없는 경우 필요한 또는 중복 될 경우 개체의 기반 <xref:System.Windows.Forms.Control.AccessibleName%2A>를 <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, 및 <xref:System.Windows.Forms.AccessibleObject.Value%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-229">The <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties.</span></span> <span data-ttu-id="a1309-230">예를 들어, "확인"을 사용 하 여 단추에는 추가 정보를 사용 해야 합니다. 하지만 선인장 그림이 표시 된 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-230">For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</span></span> <span data-ttu-id="a1309-231"><xref:System.Windows.Forms.Control.AccessibleName%2A>, 및 <xref:System.Windows.Forms.Control.AccessibleRole%2A> (및 아마도 <xref:System.Windows.Forms.AccessibleObject.Help%2A>) 속성 선인장 단추에 대 한 용도 설명 하지만 <xref:System.Windows.Forms.Control.AccessibleDescription%2A> 속성 "선인장 그림이 표시 된 단추입니다."와 같은 명백 하지 않은 정보를 전달 합니다</span><span class="sxs-lookup"><span data-stu-id="a1309-231">The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</span></span>  
  
 <span data-ttu-id="a1309-232">액세스 가능 개체의 속성에 대 한 자세한 내용은 참조 하세요. [설명이 포함 된 속성의 콘텐츠](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-232">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-233">인스턴스를 만들고 다음 코드 예제를 <xref:System.Windows.Forms.CheckBox> 클래스를 파생 `MyCheckBox`, 할당는 <xref:System.Drawing.Image> 를 해당 <xref:System.Windows.Forms.ButtonBase.Image%2A> 속성을 설정 합니다 <xref:System.Windows.Forms.Control.AccessibleName%2A> 및 <xref:System.Windows.Forms.Control.AccessibleDescription%2A> 속성을 때문에 <xref:System.Windows.Forms.Control.Text%2A> 속성은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-233">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="a1309-234">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 라는 `MyForm`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-234">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Description" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleName" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleName : string with get, set" Usage="System.Windows.Forms.Control.AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-235">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용하는 컨트롤의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-235">Gets or sets the name of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="a1309-236">내게 필요한 옵션 지원 클라이언트 애플리케이션에서 사용하는 컨트롤의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-236">The name of the control used by accessibility client applications.</span></span> <span data-ttu-id="a1309-237">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-237">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-238"><xref:System.Windows.Forms.Control.AccessibleName%2A> 속성은 간단 하 게 설명 하 고 텍스트와 같이 해당 컨테이너 내에서 개체를 식별 하는 레이블을 <xref:System.Windows.Forms.Button>, 이름를 <xref:System.Windows.Forms.MenuItem>, 또는 레이블 옆에 표시를 <xref:System.Windows.Forms.TextBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-238">The <xref:System.Windows.Forms.Control.AccessibleName%2A> property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 <span data-ttu-id="a1309-239">액세스 가능 개체의 속성에 대 한 자세한 내용은 참조는 "[설명이 포함 된 속성의 콘텐츠](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-239">For more information about properties of accessible objects, see the "[Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-240">인스턴스를 만들고 다음 코드 예제를 <xref:System.Windows.Forms.CheckBox> 클래스를 파생 `MyCheckBox`, 할당는 <xref:System.Drawing.Image> 를 해당 <xref:System.Windows.Forms.ButtonBase.Image%2A> 속성을 설정 합니다 <xref:System.Windows.Forms.Control.AccessibleName%2A> 및 <xref:System.Windows.Forms.Control.AccessibleDescription%2A> 속성을 <xref:System.Windows.Forms.Control.Text%2A> 속성 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-240">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="a1309-241">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 라는 `MyForm`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-241">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Name" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleRole" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleRole As AccessibleRole" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleRole AccessibleRole { System::Windows::Forms::AccessibleRole get(); void set(System::Windows::Forms::AccessibleRole value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleRole : System.Windows.Forms.AccessibleRole with get, set" Usage="System.Windows.Forms.Control.AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-242">컨트롤의 액세스 가능 역할을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-242">Gets or sets the accessible role of the control</span></span></summary>
        <value><span data-ttu-id="a1309-243"><see cref="T:System.Windows.Forms.AccessibleRole" />의 다음 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-243">One of the values of <see cref="T:System.Windows.Forms.AccessibleRole" />.</span></span> <span data-ttu-id="a1309-244">기본값은 <see langword="Default" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-244">The default is <see langword="Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-245"><xref:System.Windows.Forms.Control.AccessibleRole%2A> 속성은 개체가 어떤 사용자 인터페이스 요소 종류인지 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-245">The <xref:System.Windows.Forms.Control.AccessibleRole%2A> property describes what kind of user interface element an object is.</span></span> <span data-ttu-id="a1309-246">컨트롤의 역할을 확인할 수 없으면 <xref:System.Windows.Forms.Control.AccessibleRole%2A> 속성은 `Default`로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-246">If the control's role cannot be determined, the <xref:System.Windows.Forms.Control.AccessibleRole%2A> property is set to `Default`.</span></span>  
  
 <span data-ttu-id="a1309-247">액세스 가능 개체의 속성에 대 한 자세한 내용은 참조 하세요. [설명이 포함 된 속성의 콘텐츠](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-247">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a1309-248">할당된 값이 <see cref="T:System.Windows.Forms.AccessibleRole" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-248">The value assigned is not one of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Role" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.Control.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-249">사용자가 컨트롤로 끌어 온 데이터가 해당 컨트롤에서 허용되는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-249">Gets or sets a value indicating whether the control can accept data that the user drags onto it.</span></span></summary>
        <value><span data-ttu-id="a1309-250">컨트롤에서 끌어서 놓기 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-250"><see langword="true" /> if drag-and-drop operations are allowed in the control; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-251">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-251">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-252">이미지 또는 이미지 파일을 폼으로 끌어 해당 지점에 표시 되 게 하는 사용자를 삭제할는 다음 코드 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-252">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="a1309-253"><xref:System.Windows.Forms.Control.OnPaint%2A> 는 다음에 다시 그릴 때까지 유지 하는 이미지가 고, 그렇지 않으면 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-253">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="a1309-254"><xref:System.Windows.Forms.Control.DragEnter> 이벤트 처리 메서드를 폼으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-254">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="a1309-255">합니다 <xref:System.Windows.Forms.Control.DragDrop> 하는 경우 이벤트 처리 메서드를 폼에 이미지를 표시는 <xref:System.Drawing.Image> 데이터로 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-255">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="a1309-256">때문에 <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> 하 고 <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> 값은 화면 좌표를 사용 하 여는 <xref:System.Windows.Forms.Control.PointToClient%2A> 클라이언트 좌표로 변환 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a1309-256">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-257">이 속성을 설정에 대 한 무제한 클립보드 액세스에 대 한 <see langword="true" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-257">for unrestricted Clipboard access to set this property to <see langword="true" />.</span></span> <span data-ttu-id="a1309-258">연관 된 열거형:는 <see langword="AllClipboard" /> 값 <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span><span class="sxs-lookup"><span data-stu-id="a1309-258">Associated enumeration: the <see langword="AllClipboard" /> value of <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-259">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.AllowDrop" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.AllowDrop" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-259">When overriding the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-260">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-260">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-261">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.AllowDrop" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-261">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DragEventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Anchor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Anchor As AnchorStyles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AnchorStyles Anchor { System::Windows::Forms::AnchorStyles get(); void set(System::Windows::Forms::AnchorStyles value); };" />
      <MemberSignature Language="F#" Value="member this.Anchor : System.Windows.Forms.AnchorStyles with get, set" Usage="System.Windows.Forms.Control.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-262">컨트롤이 바인딩되는 컨테이너의 가장자리를 가져오거나 설정하고 해당 부모를 기초로 컨트롤 크기를 조정하는 방법을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-262">Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="a1309-263"><see cref="T:System.Windows.Forms.AnchorStyles" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-263">A bitwise combination of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</span></span> <span data-ttu-id="a1309-264">기본값은 <see langword="Top" /> 및 <see langword="Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-264">The default is <see langword="Top" /> and <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-265">사용 하 여는 <xref:System.Windows.Forms.Control.Anchor%2A> 속성 조정 방법을 정의 하려면 컨트롤은 자동으로 부모 컨트롤 크기가 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-265">Use the <xref:System.Windows.Forms.Control.Anchor%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="a1309-266">부모 컨트롤에 컨트롤을 고정 하면 고정된 된 가장자리 부모 컨트롤의 가장자리를 기준으로 동일한 위치에 있는 부모 컨트롤의 크기를 조정할 때 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-266">Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</span></span>  
  
 <span data-ttu-id="a1309-267">해당 컨테이너의 가장자리를 하나 이상의 컨트롤을 고정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-267">You can anchor a control to one or more edges of its container.</span></span> <span data-ttu-id="a1309-268">예를 들어 있는 경우는 <xref:System.Windows.Forms.Form> 사용 하 여는 <xref:System.Windows.Forms.Button> 인 <xref:System.Windows.Forms.Control.Anchor%2A> 속성 값으로 설정 됩니다 `Top` 및 `Bottom`, <xref:System.Windows.Forms.Button> 합니다 의위쪽및아래쪽가장자리에고정된거리를유지하기위해<xref:System.Windows.Forms.Form>으로 <xref:System.Windows.Forms.Control.Height%2A> 의 <xref:System.Windows.Forms.Form> 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-268">For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose <xref:System.Windows.Forms.Control.Anchor%2A> property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-269">합니다 <xref:System.Windows.Forms.Control.Anchor%2A> 고 <xref:System.Windows.Forms.Control.Dock%2A> 속성은 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-269">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="a1309-270">한 번에 하나만 설정할 수 있습니다 하 고 우선적으로 마지막으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-270">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-271">다음 코드 예제에서는 추가 <xref:System.Windows.Forms.Button> 양식에 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-271">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="a1309-272">이 예제에서는 폼 크기가 조정 될 때의 상대적 위치를 유지할 수 있도록 단추를 폼의 오른쪽 아래 모퉁이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-272">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="a1309-273">설정 옆의 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 단추와 같은 크기를 조정 하 고는 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-273">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-274">설정한 후 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 에 `true` 설정 하 고는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-274">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="a1309-275">마지막으로 처리 하는 이벤트 처리기 추가 <xref:System.Windows.Forms.Control.Click> 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-275">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="a1309-276">이 예제를 실행 하려면 프로그램 <xref:System.Windows.Forms.ImageList> 라는 `imageList1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-276">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-277">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Anchor" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Anchor" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-277">When overriding the <see cref="P:System.Windows.Forms.Control.Anchor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Anchor" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-278">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-278">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-279">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.Anchor" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-279">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Anchor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AnchorStyles" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoScrollOffset As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Point AutoScrollOffset { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScrollOffset : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-280"><see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" />에서 이 컨트롤이 스크롤되는 위치를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-280">Gets or sets where this control is scrolled to in <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" />.</span></span></summary>
        <value><span data-ttu-id="a1309-281">스크롤 위치를 지정하는 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-281">A <see cref="T:System.Drawing.Point" /> specifying the scroll location.</span></span> <span data-ttu-id="a1309-282">기본값은 컨트롤의 왼쪽 위 모퉁이입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-282">The default is the upper-left corner of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.Control.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-283">이 속성은 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-283">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="a1309-284">사용하도록 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-284"><see langword="true" /> if enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-285">이 속성은 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-285">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.AutoSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeChanged : EventHandler " Usage="member this.AutoSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-286">이 이벤트는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-286">This event is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-287">이 이벤트는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-287">This event is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-288">컨트롤의 배경색을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-288">Gets or sets the background color for the control.</span></span></summary>
        <value><span data-ttu-id="a1309-289">컨트롤의 배경색을 나타내는 <see cref="T:System.Drawing.Color" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-289">A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</span></span> <span data-ttu-id="a1309-290">기본값은 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-290">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-291"><xref:System.Windows.Forms.Control.BackColor%2A> 속성이 투명 한 색 지원 하지 않는 한는 `SupportsTransparentBackColor` 의 값 <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> 로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-291">The <xref:System.Windows.Forms.Control.BackColor%2A> property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`.</span></span>  
  
 <span data-ttu-id="a1309-292"><xref:System.Windows.Forms.Control.BackColor%2A> 속성이 앰비언트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-292">The <xref:System.Windows.Forms.Control.BackColor%2A> property is an ambient property.</span></span> <span data-ttu-id="a1309-293">그렇지 않은 경우, 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-293">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-294">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-294">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-295">앰비언트 속성에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.AmbientProperties> 클래스 또는 <xref:System.Windows.Forms.Control> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-295">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-296">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.BackColor%2A> 및 <xref:System.Windows.Forms.Control.ForeColor%2A> 컨트롤을 기본 시스템 색상입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-296">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="a1309-297">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-297">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="a1309-298">그러나이 코드 예제에서는 있다고를 <xref:System.Windows.Forms.Form> 하나 이상의 자식 컨트롤을 사용 하 여 자식 컨테이너가 컨트롤 같은 <xref:System.Windows.Forms.Panel> 또는 <xref:System.Windows.Forms.GroupBox>, 개의 고유한 자식 컨트롤은 더 잘 보여 주기는 재귀 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-298">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-299">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.BackColor" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.BackColor" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-299">When overriding the <see cref="P:System.Windows.Forms.Control.BackColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-300">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-300">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-301">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.BackColor" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-301">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AmbientProperties" />
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackColorChanged : EventHandler " Usage="member this.BackColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-302"><see cref="P:System.Windows.Forms.Control.BackColor" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-302">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-303">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.BackColor%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-303">This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-304">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-304">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-305">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-305">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-306"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-306">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-307">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-307">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-308">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-308">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-309">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-309">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.Control.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-310">컨트롤에 표시할 배경 이미지를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-310">Gets or sets the background image displayed in the control.</span></span></summary>
        <value><span data-ttu-id="a1309-311">컨트롤의 배경에 표시할 이미지를 나타내는 <see cref="T:System.Drawing.Image" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-311">An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="a1309-312">사용 된 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 속성을 컨트롤에 그래픽 이미지를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-312">Use the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property to place a graphic image onto a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-313">배경 이미지로 이미지를 불투명 또는 투명 한 색을 사용 하 여 Windows Forms 컨트롤에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-313">Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</span></span>  
>   
>  <span data-ttu-id="a1309-314">이 속성은 자식 컨트롤 <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-314">This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-315">다음 코드 예제에서는 추가 <xref:System.Windows.Forms.Button> 양식에 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-315">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="a1309-316">이 예제에서는 폼 크기가 조정 될 때의 상대적 위치를 유지할 수 있도록 단추를 폼의 오른쪽 아래 모퉁이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-316">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="a1309-317">설정 옆의 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 단추와 같은 크기를 조정 하 고는 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-317">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-318">설정한 후 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 에 `true` 설정 하 고는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-318">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="a1309-319">마지막으로 처리 하는 이벤트 처리기 추가 <xref:System.Windows.Forms.Control.Click> 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-319">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="a1309-320">이 예제를 실행 하려면 프로그램 <xref:System.Windows.Forms.ImageList> 라는 `imageList1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-320">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-321">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-321">When overriding the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-322">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-322">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-323">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-323">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-324"><see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-324">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-325">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-325">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-326">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-326">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-327">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-327">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-328"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-328">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-329">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-329">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-330">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-330">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-331">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-331">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-332"><see cref="T:System.Windows.Forms.ImageLayout" /> 열거형에서 정의된 대로 배경 이미지 레이아웃을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-332">Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="a1309-333"><see cref="T:System.Windows.Forms.ImageLayout" />의 값(<see cref="F:System.Windows.Forms.ImageLayout.Center" />, <see cref="F:System.Windows.Forms.ImageLayout.None" />, <see cref="F:System.Windows.Forms.ImageLayout.Stretch" />, <see cref="F:System.Windows.Forms.ImageLayout.Tile" /> 또는 <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />) 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-333">One of the values of <see cref="T:System.Windows.Forms.ImageLayout" /> (<see cref="F:System.Windows.Forms.ImageLayout.Center" /> , <see cref="F:System.Windows.Forms.ImageLayout.None" />, <see cref="F:System.Windows.Forms.ImageLayout.Stretch" />, <see cref="F:System.Windows.Forms.ImageLayout.Tile" />, or <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />).</span></span> <span data-ttu-id="a1309-334">기본값은 <see cref="F:System.Windows.Forms.ImageLayout.Tile" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-334"><see cref="F:System.Windows.Forms.ImageLayout.Tile" /> is the default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-335">사용 된 <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 속성을 통해 위치와 컨트롤을 삽입 한 이미지의 동작을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-335">Use the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property to specify the position and behavior of an image you have placed onto a control.</span></span> <span data-ttu-id="a1309-336"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 경우에 적용 됩니다는 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-336"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.</span></span>  
  
 <span data-ttu-id="a1309-337">설정 하는 경우 큰 이미지에 대 한 성능을 늘릴 수 있습니다 <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 이외의 값으로 <xref:System.Windows.Forms.ImageLayout.Tile>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-337">You can increase performance for large images if you set <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> to something other than <xref:System.Windows.Forms.ImageLayout.Tile>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a1309-338">지정된 열거형 값이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-338">The specified enumeration value does not exist.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-339"><see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> 속성이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-339">Occurs when the <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-340">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 속성 변경 하거나 프로그래밍 방식으로 사용자 상호 작용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-340">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.</span></span>  
  
 <span data-ttu-id="a1309-341">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-341">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-342">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-342">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-343">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-343">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span> <span data-ttu-id="a1309-344">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-344">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-345">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-345">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-346">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-346">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-347">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-347">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#9)]
 [!code-vb[System.Windows.Forms.EventExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-348">컨트롤의 내부 핸들이 작성된 스레드에서 대리자를 비동기식으로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-348">Executes a delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate -&gt; IAsyncResult" Usage="control.BeginInvoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="a1309-349">매개 변수를 사용하지 않는 메서드의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-349">A delegate to a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="a1309-350">컨트롤의 내부 핸들이 작성된 스레드에서 지정된 대리자를 비동기식으로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-350">Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="a1309-351"><see cref="T:System.IAsyncResult" /> 작업의 결과를 나타내는 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-351">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-352">대리자가 비동기적으로 호출 하 고이 메서드가 즉시 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-352">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="a1309-353">컨트롤의 핸들을 소유 하는 스레드가 모든 스레드에서이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-353">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="a1309-354">컨트롤의 핸들이 없는 아직 경우이 메서드는 컨트롤이 나 창 핸들이 있는 양식을 찾을 때까지 컨트롤의 부모 체인 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-354">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="a1309-355">적절 한 핸들 있으면 <xref:System.Windows.Forms.Control.BeginInvoke%2A> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-355">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="a1309-356">대리자 메서드 내에서 예외 포착 되지 않는 것으로 간주 되어 애플리케이션의 포착 되지 않은 예외 처리기로 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-356">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="a1309-357">호출할 수 있습니다 <xref:System.Windows.Forms.Control.EndInvoke%2A> 경우도 있지만이 필요 하지 않은 경우 대리자의 반환 값을 검색 하려면.</span><span class="sxs-lookup"><span data-stu-id="a1309-357">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="a1309-358"><xref:System.Windows.Forms.Control.EndInvoke%2A> 반환 값을 검색할 수 있습니다 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-358"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-359">대부분의 메서드는 컨트롤에만 호출할 수 있습니다 스레드에서 컨트롤 생성 된 위치.</span><span class="sxs-lookup"><span data-stu-id="a1309-359">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="a1309-360">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-360">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-361">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-361">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-362">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-362">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="a1309-363">Invoke 메서드는 항상 해당 콜백을 컨트롤의 스레드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-363">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-364">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태가 되는 경우 예외가 throw 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-364">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-365">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Control.BeginInvoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-365">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#2)]
 [!code-csharp[Control_BeginInvoke#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#2)]
 [!code-vb[Control_BeginInvoke#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1309-366">해당 창 핸들을 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-366">No appropriate window handle can be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-367">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-367">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-368">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-368">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult&#xA;override this.BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="control.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="a1309-369"><paramref name="args" /> 매개 변수에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-369">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="a1309-370">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-370">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="a1309-371">인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-371">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="a1309-372">컨트롤의 내부 핸들이 작성된 스레드에서 특정 인수를 사용하여 지정된 대리자를 비동기식으로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-372">Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="a1309-373"><see cref="T:System.IAsyncResult" /> 작업의 결과를 나타내는 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-373">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-374">대리자가 비동기적으로 호출 하 고이 메서드가 즉시 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-374">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="a1309-375">컨트롤의 핸들을 소유 하는 스레드가 모든 스레드에서이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-375">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="a1309-376">컨트롤의 핸들이 없는 아직 경우이 메서드는 컨트롤이 나 창 핸들이 있는 양식을 찾을 때까지 컨트롤의 부모 체인 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-376">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="a1309-377">적절 한 핸들 있으면 <xref:System.Windows.Forms.Control.BeginInvoke%2A> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-377">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="a1309-378">대리자 메서드 내에서 예외 포착 되지 않는 것으로 간주 되어 애플리케이션의 포착 되지 않은 예외 처리기로 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-378">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="a1309-379">호출할 수 있습니다 <xref:System.Windows.Forms.Control.EndInvoke%2A> 경우도 있지만이 필요 하지 않은 경우 대리자의 반환 값을 검색 하려면.</span><span class="sxs-lookup"><span data-stu-id="a1309-379">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="a1309-380"><xref:System.Windows.Forms.Control.EndInvoke%2A> 반환 값을 검색할 수 있습니다 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-380"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-381">대부분의 메서드는 컨트롤에만 호출할 수 있습니다 스레드에서 컨트롤 생성 된 위치.</span><span class="sxs-lookup"><span data-stu-id="a1309-381">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="a1309-382">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-382">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-383">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-383">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-384">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-384">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="a1309-385">Invoke 메서드는 항상 해당 콜백을 컨트롤의 스레드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-385">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-386">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태가 되는 경우 예외가 throw 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-386">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-387">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Control.BeginInvoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-387">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#1)]
 [!code-csharp[Control_BeginInvoke#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#1)]
 [!code-vb[Control_BeginInvoke#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1309-388">해당 창 핸들을 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-388">No appropriate window handle can be found.</span></span></exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BindingContext As BindingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::BindingContext ^ BindingContext { System::Windows::Forms::BindingContext ^ get(); void set(System::Windows::Forms::BindingContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingContext : System.Windows.Forms.BindingContext with get, set" Usage="System.Windows.Forms.Control.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-389">컨트롤의 <see cref="T:System.Windows.Forms.BindingContext" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-389">Gets or sets the <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></summary>
        <value><span data-ttu-id="a1309-390">컨트롤의 <see cref="T:System.Windows.Forms.BindingContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-390">A <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-391">합니다 <xref:System.Windows.Forms.BindingContext> 의 <xref:System.Windows.Forms.Control> 단일 반환 하는 데 사용 됩니다 <xref:System.Windows.Forms.BindingManagerBase> 에 포함 된 모든 데이터 바인딩된 컨트롤에 대 한는 <xref:System.Windows.Forms.Control>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-391">The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single <xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>.</span></span> <span data-ttu-id="a1309-392"><xref:System.Windows.Forms.BindingManagerBase> 동기화 동일한 데이터 소스에 바인딩되는 모든 컨트롤을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-392">The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized.</span></span> <span data-ttu-id="a1309-393">설정 예를 들어를 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 의 속성을 <xref:System.Windows.Forms.BindingManagerBase> 모든 데이터 바인딩된 컨트롤이 가리키는 내부 목록에서 항목을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-393">For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.</span></span>  
  
 <span data-ttu-id="a1309-394">새 만들기에 대 한 자세한 내용은 <xref:System.Windows.Forms.BindingContext> 에 할당 합니다 <xref:System.Windows.Forms.Control.BindingContext%2A> 속성 참조는 <xref:System.Windows.Forms.BindingContext.%23ctor%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-394">For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-395">다음 코드 예제에서는 네 개를 만듭니다 <xref:System.Windows.Forms.Binding> 다섯 개의 컨트롤을 바인딩할 개체를 <xref:System.Windows.Forms.DateTimePicker> -4 <xref:System.Windows.Forms.TextBox> 을 여러 데이터 소스 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-395">The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources.</span></span> <span data-ttu-id="a1309-396">합니다 <xref:System.Windows.Forms.BindingContext> get을 사용 하는 <xref:System.Windows.Forms.BindingManagerBase> 각 데이터 원본에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-396">The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.</span></span>  
  
 [!code-cpp[Classic BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-397">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-397">When overriding the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BindingContext" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-398">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-398">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-399">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-399">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingContextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BindingContextChanged;" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-400"><see cref="T:System.Windows.Forms.BindingContext" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-400">Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-401">새 <xref:System.Windows.Forms.BindingContext> 에 <xref:System.Windows.Forms.Control> 를 통해를 <xref:System.Windows.Forms.Control.BindingContext%2A> 속성을 참조는 <xref:System.Windows.Forms.BindingContext.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-401">To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="a1309-402">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.BindingContext%2A> 속성이 변경 될 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-402">This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-403">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-403">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-404">다음 코드 예제에서는 <xref:System.EventHandler> 위임할를 <xref:System.Windows.Forms.Control.BindingContextChanged> 의 이벤트를 <xref:System.Windows.Forms.TextBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-404">The following code example adds an <xref:System.EventHandler> delegate to the <xref:System.Windows.Forms.Control.BindingContextChanged> event of a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CS/source.cs#1)]
 [!code-vb[Classic Control.BindingContextChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
        <altmember cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Bottom { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : int" Usage="System.Windows.Forms.Control.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-405">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-405">Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="a1309-406">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 나타내는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-406">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-407">이 속성의 값은 합계에는 <xref:System.Windows.Forms.Control.Top%2A> 속성 값 및 <xref:System.Windows.Forms.Control.Height%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-407">The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.</span></span>  
  
 <span data-ttu-id="a1309-408"><xref:System.Windows.Forms.Control.Bottom%2A> 속성은 읽기 전용 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-408">The <xref:System.Windows.Forms.Control.Bottom%2A> property is a read-only property.</span></span> <span data-ttu-id="a1309-409">값을 변경 하 여이 속성 값을 조작할 수 있습니다는 <xref:System.Windows.Forms.Control.Top%2A> 또는 <xref:System.Windows.Forms.Control.Height%2A> 호출 또는 속성을 <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, 또는 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-409">You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-410">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.Bottom%2A> 의 하 한을 정의 하는 속성을 <xref:System.Windows.Forms.TextBox> 컨트롤 컨테이너의 클라이언트 영역을 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-410">The following code example uses the <xref:System.Windows.Forms.Control.Bottom%2A> property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle with get, set" Usage="System.Windows.Forms.Control.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-411">부모 컨트롤을 기준으로 비클라이언트 요소를 포함하는 컨트롤의 크기와 위치(픽셀)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-411">Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</span></span></summary>
        <value><span data-ttu-id="a1309-412">부모 컨트롤을 기준으로 비클라이언트 요소를 포함하여 컨트롤의 크기와 위치를 나타내는 <see cref="T:System.Drawing.Rectangle" />(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-412">A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-413">스크롤 막대, 테두리, 제목 표시줄 및 메뉴와 같은 비클라이언트 요소를 포함 하는 컨트롤의 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-413">The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="a1309-414">합니다 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> 메서드를 호출을 설정 하는 <xref:System.Windows.Forms.Control.Bounds%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-414">The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the <xref:System.Windows.Forms.Control.Bounds%2A> property.</span></span> <span data-ttu-id="a1309-415"><xref:System.Windows.Forms.Control.Bounds%2A> 속성을 통해 변경 되지 않습니다 해당 `set` 메서드를 재정의 해야 하는 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> 메서드는 코드가 실행 되도록 때를 <xref:System.Windows.Forms.Control.Bounds%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-415">The <xref:System.Windows.Forms.Control.Bounds%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.Bounds%2A> property is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-416">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-416">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-417">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-417">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Left" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BringToFront" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringToFront ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringToFront();" />
      <MemberSignature Language="F#" Value="member this.BringToFront : unit -&gt; unit" Usage="control.BringToFront " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-418">컨트롤을 Z 순서의 맨 앞으로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-418">Brings the control to the front of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-419">컨트롤을 z-순서의 맨 앞으로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-419">The control is moved to the front of the z-order.</span></span> <span data-ttu-id="a1309-420">다른 컨트롤의 자식 컨트롤을 사용 하는 경우 자식 컨트롤을 z-순서의 맨 앞으로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-420">If the control is a child of another control, the child control is moved to the front of the z-order.</span></span> <span data-ttu-id="a1309-421"><xref:System.Windows.Forms.Control.BringToFront%2A> 컨트롤을 최상위 컨트롤로 하며 발생 하지 않습니다 하는 확인 하지 않습니다는 <xref:System.Windows.Forms.Control.Paint> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-421"><xref:System.Windows.Forms.Control.BringToFront%2A> does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-422">되도록 다음 코드 예제는 <xref:System.Windows.Forms.Label> 를 호출 하 여 표시 되는 해당 <xref:System.Windows.Forms.Control.BringToFront%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-422">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="a1309-423">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여는 <xref:System.Windows.Forms.Panel> 라는 `panel1`, 및 <xref:System.Windows.Forms.Label> 라는 `label1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-423">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SendToBack" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanEnableIme : bool" Usage="System.Windows.Forms.Control.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-424">IME 지원을 사용하도록 <see cref="P:System.Windows.Forms.Control.ImeMode" /> 속성을 활성 값으로 설정할 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-424">Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</span></span></summary>
        <value><span data-ttu-id="a1309-425">모든 경우에 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-425"><see langword="true" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-426">파생된 클래스는 반환 하도록이 속성을 재정의할 수 `false` IME 지원 되지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-426">Derived classes can override this property to return `false` if IME is not supported.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFocus : bool" Usage="System.Windows.Forms.Control.CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-427">컨트롤이 포커스를 받을 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-427">Gets a value indicating whether the control can receive focus.</span></span></summary>
        <value><span data-ttu-id="a1309-428">컨트롤이 포커스를 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-428"><see langword="true" /> if the control can receive focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-429">입력된 포커스를 받을 컨트롤에 대 한 순서 대로 컨트롤에 할당 된 핸들을 가져야 합니다 하며 <xref:System.Windows.Forms.Control.Visible%2A> 하 고 <xref:System.Windows.Forms.Control.Enabled%2A> 속성 둘 다로 설정 되어야 합니다 `true` 컨트롤 및 모든 부모 컨트롤 및 컨트롤을 폼 여야 합니다 또는 컨트롤의 가장 바깥쪽 부모 폼을 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-429">In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-430">다음 코드 예제에서는 지정 된 포커스를 설정 합니다. <xref:System.Windows.Forms.Control>이면 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-430">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanRaiseEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanRaiseEvents { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRaiseEvents : bool" Usage="System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-431">컨트롤에서 이벤트가 발생할 수 있는지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-431">Determines if events can be raised on the control.</span></span></summary>
        <value><span data-ttu-id="a1309-432">컨트롤이 이벤트가 고정되지 않은 ActiveX 컨트롤로 호스팅되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-432"><see langword="true" /> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-433">이 컨트롤 호스트 되는 경우 중인 ActiveX 컨트롤로,이 속성은 반환 `false` ActiveX 컨트롤에 해당 이벤트를 고정 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-433">If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanSelect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSelect : bool" Usage="System.Windows.Forms.Control.CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-434">컨트롤을 선택할 수 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-434">Gets a value indicating whether the control can be selected.</span></span></summary>
        <value><span data-ttu-id="a1309-435">컨트롤을 선택할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-435"><see langword="true" /> if the control can be selected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-436">이 속성은 반환 `true` 경우는 `Selectable` 값 <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> 로 설정 된 `true`, 표시 되 고 활성화 되 면 컨트롤 자체는 다른 컨트롤에 포함 및 부모 컨트롤이 표시 되 고 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-436">This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</span></span>  
  
 <span data-ttu-id="a1309-437">다음 목록에 Windows Forms 컨트롤을 선택할 수 없는 및의 값을 반환 합니다 `false` 에 대 한는 <xref:System.Windows.Forms.Control.CanSelect%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-437">The Windows Forms controls in the following list are not selectable and will return a value of `false` for the <xref:System.Windows.Forms.Control.CanSelect%2A> property.</span></span> <span data-ttu-id="a1309-438">이러한 컨트롤에서 파생 된 컨트롤은 또한 선택할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-438">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="a1309-439"><xref:System.Windows.Forms.LinkLabel> (컨트롤에 있는 링크가 없는 경우)</span><span class="sxs-lookup"><span data-stu-id="a1309-439"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-440">다음 코드 예제에서는 지정 된 선택 <xref:System.Windows.Forms.Control>선택할 수 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-440">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Property Capture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Capture { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Capture : bool with get, set" Usage="System.Windows.Forms.Control.Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-441">컨트롤이 마우스를 캡처했는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-441">Gets or sets a value indicating whether the control has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="a1309-442">컨트롤이 마우스를 캡처했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-442"><see langword="true" /> if the control has captured the mouse; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-443">컨트롤이 마우스를 캡처, 커서의 테두리 내 있는지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-443">When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="a1309-444">마우스는 일반적으로 끌기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-444">The mouse is typically only captured during drag operations.</span></span>  
  
 <span data-ttu-id="a1309-445">전경 창이 마우스를 캡처할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-445">Only the foreground window can capture the mouse.</span></span> <span data-ttu-id="a1309-446">배경 창에 작업을 수행 하려고 하는 경우 창 창의 표시 영역 내에서 마우스 커서가 있을 때 발생 하는 마우스 이벤트의 메시지를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-446">When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</span></span> <span data-ttu-id="a1309-447">또한 전경 창이 마우스를 캡처한 경우에 여전히 클릭할 수 다른 창 전경으로 상태로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-447">Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</span></span>  
  
 <span data-ttu-id="a1309-448">마우스를 캡처한 바로 가기 키가 작동 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-448">When the mouse is captured, shortcut keys should not work.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-449">다음 코드 예제는 <xref:System.Windows.Forms.Control.Capture%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-449">The following code example demonstrates the <xref:System.Windows.Forms.Control.Capture%2A> property.</span></span> <span data-ttu-id="a1309-450">포함 된 폼에서이 예제에서는 다음 코드를 붙여넣고를 실행 하는 <xref:System.Windows.Forms.Label> label1 및 두 개의 명명 된 <xref:System.Windows.Forms.ListBox> listbox1 및 listbox2 컨트롤 이라는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-450">To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2.</span></span> <span data-ttu-id="a1309-451">폼 및 컨트롤의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트는이 예제의 메서드를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-451">Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlCapture#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-452">이 속성 값을 설정 하려면 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-452">for all windows to set this property value.</span></span> <span data-ttu-id="a1309-453">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="a1309-453">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Windows.Forms.Control.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-454">컨트롤이 포커스를 받을 때 유효성 검사가 필요한 모든 컨트롤에 대해 유효성 검사가 수행되도록 하는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-454">Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</span></span></summary>
        <value><span data-ttu-id="a1309-455">컨트롤이 포커스를 받을 때 유효성 검사가 필요한 모든 컨트롤에 대해 유효성 검사가 수행되도록 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-455"><see langword="true" /> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-456">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-456">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-457">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-457">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="a1309-458">합니다 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성 값은 대개로 설정 됩니다 `false` 도움말 단추와 같은 컨트롤에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-458">The <xref:System.Windows.Forms.Control.CausesValidation%2A> property value is typically set to `false` for controls such as a Help button.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-459">다음 코드 예제에서는 파생된 클래스인 <xref:System.Windows.Forms.TextBox> 전자 메일 주소는 사용자가 입력의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-459">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="a1309-460">전자 메일 주소 형식이 없는 경우 (포함 된 "@" and "."), 유효성 검사에 실패를 <xref:System.Windows.Forms.ErrorProvider> 아이콘이 표시 되며, 이벤트가 취소 되 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-460">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="a1309-461">폼의 단추 중 하나에 해당 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-461">One of the buttons on the form has its <xref:System.Windows.Forms.Control.CausesValidation%2A> property set to `false`.</span></span> <span data-ttu-id="a1309-462">클릭이 단추에 포커스를 설정 하거나 유효성 검사를 트리거하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-462">Clicking or setting focus to this button does not trigger validation.</span></span> <span data-ttu-id="a1309-463">이 예제에서는 <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.ErrorProvider> 컨트롤 및 <xref:System.Windows.Forms.Button> 폼에 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-463">This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#2)]
 [!code-csharp[Control.Validating#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#2)]
 [!code-vb[Control.Validating#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CausesValidationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CausesValidationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CausesValidationChanged;" />
      <MemberSignature Language="F#" Value="member this.CausesValidationChanged : EventHandler " Usage="member this.CausesValidationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-464"><see cref="P:System.Windows.Forms.Control.CausesValidation" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-464">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.CausesValidation" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-465">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-465">This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-466">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-466">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ChangeUICues" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ChangeUICues As UICuesEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::UICuesEventHandler ^ ChangeUICues;" />
      <MemberSignature Language="F#" Value="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " Usage="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-467">포커스 또는 키보드 UI(사용자 인터페이스) 큐가 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-467">Occurs when the focus or keyboard user interface (UI) cues change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-468">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-468">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-469">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-469">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-470">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.ChangeUICues> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-470">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span> <span data-ttu-id="a1309-471">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-471">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-472">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-472">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-473">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-473">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-474">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.ChangeUICues> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-474">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#67)]
 [!code-vb[System.Windows.Forms.EventExamples#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckForIllegalCrossThreadCalls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckForIllegalCrossThreadCalls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckForIllegalCrossThreadCalls : bool with get, set" Usage="System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-475">애플리케이션이 디버깅되는 동안 컨트롤의 <see cref="P:System.Windows.Forms.Control.Handle" /> 속성에 액세스하는 잘못된 스레드에 대한 호출을 catch할지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-475">Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <see cref="P:System.Windows.Forms.Control.Handle" /> property when an application is being debugged.</span></span></summary>
        <value><span data-ttu-id="a1309-476">잘못된 스레드에 대한 호출이 catch되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-476"><see langword="true" /> if calls on the wrong thread are caught; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-477">컨트롤을 만드는 스레드 이외의 스레드가 제어 하는 메서드 또는 속성 중 하나에 액세스 하려고 하면 종종 예기치 않은 결과가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-477">When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</span></span> <span data-ttu-id="a1309-478">일반적인 잘못 된 스레드 활동은 컨트롤에 액세스 하는 잘못 된 스레드에서 호출 <xref:System.Windows.Forms.Control.Handle%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-478">A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="a1309-479">설정할 <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> 에 `true` 를 찾고이 스레드 작업을 보다 쉽게 디버깅 하는 동안 진단 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-479">Set <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> to `true` to find and diagnose this thread activity more easily while debugging.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-480">컨트롤을 클릭하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-480">Occurs when the control is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-481">합니다 <xref:System.Windows.Forms.Control.Click> 이벤트를 전달는 <xref:System.EventArgs> 해당 이벤트 처리기에 따라서 것만 클릭 되었음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-481">The <xref:System.Windows.Forms.Control.Click> event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred.</span></span> <span data-ttu-id="a1309-482">보다 구체적인 마우스 정보 (단추 클릭 횟수, 휠이 회전 또는 위치)에 필요한 경우 사용 된 <xref:System.Windows.Forms.Control.MouseClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-482">If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="a1309-483">그러나는 <xref:System.Windows.Forms.Control.MouseClick> 클릭 이외에 ENTER 키를 누르는 등의 마우스 작업으로 발생 하는 경우 이벤트를 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-483">However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="a1309-484">두 번 클릭은 운영 체제의 마우스 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-484">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="a1309-485">천천히 두 번 클릭하는 것이 아닌 두 번 클릭(double-click)으로 간주될 수 있도록 마우스 단추 클릭 간격을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-485">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="a1309-486"><xref:System.Windows.Forms.Control.Click> 컨트롤을 두 번 클릭할 때마다 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-486">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="a1309-487">예를 들어에 대 한 이벤트 처리기가 합니다 <xref:System.Windows.Forms.Control.Click> 및 <xref:System.Windows.Forms.Control.DoubleClick> 의 이벤트를 <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Control.Click> 및 <xref:System.Windows.Forms.Control.DoubleClick> 폼을 두 번 클릭 하 고 두 메서드를 호출 하는 경우 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-487">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="a1309-488">컨트롤을 두 번 클릭 하는 경우 및 컨트롤을 지원 하지 않습니다 합니다 <xref:System.Windows.Forms.Control.DoubleClick> 이벤트는 <xref:System.Windows.Forms.Control.Click> 이벤트가 두 번 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-488">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="a1309-489">설정 해야 합니다는 `StandardClick` 의 값 <xref:System.Windows.Forms.ControlStyles> 에 `true` 이 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-489">You must set the `StandardClick` value of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-490">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-490">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-491">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-491">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-492">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-492">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-493">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-493">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="a1309-494">상속자를 위한 정보</span><span class="sxs-lookup"><span data-stu-id="a1309-494">Notes to inheritors</span></span>

<span data-ttu-id="a1309-495">표준 Windows Forms 컨트롤에서 상속 하 고 변경 합니다 `StandardClick` 또는 `StandardDoubleClick` 의 값 <xref:System.Windows.Forms.ControlStyles> 에 `true` 예기치 않은 동작이 발생할 수 있습니다 또는 영향을 주지 않습니다 전혀 컨트롤을 지원 하지 않는 경우는 <xref:System.Windows.Forms.Control.Click> 또는 <xref:System.Windows.Forms.Control.DoubleClick>이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-495">Inheriting from a standard Windows Forms control and changing the `StandardClick` or `StandardDoubleClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` can cause unexpected behavior or have no effect at all if the control does not support the <xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick> events.</span></span>
  
<span data-ttu-id="a1309-496">다음 표에서 Windows Forms 컨트롤 및 이벤트 (<xref:System.Windows.Forms.Control.Click> 또는 <xref:System.Windows.Forms.Control.DoubleClick>) 지정 된 마우스 작업에 대 한 응답에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-496">The following table lists Windows Forms controls and which event (<xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick>) is raised in response to the mouse action specified.</span></span>

| <span data-ttu-id="a1309-497">Control</span><span class="sxs-lookup"><span data-stu-id="a1309-497">Control</span></span> | <span data-ttu-id="a1309-498">마우스 왼쪽된 단추 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-498">Left Mouse Click</span></span> | <span data-ttu-id="a1309-499">왼쪽된 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-499">Left Mouse Double Click</span></span> | <span data-ttu-id="a1309-500">마우스 오른쪽 단추로 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-500">Right Mouse Click</span></span> | <span data-ttu-id="a1309-501">마우스 오른쪽 단추 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-501">Right Mouse Double Click</span></span> | <span data-ttu-id="a1309-502">마우스 가운데 단추 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-502">Middle Mouse Click</span></span> | <span data-ttu-id="a1309-503">마우스 가운데 단추 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-503">Middle Mouse Double Click</span></span> | <span data-ttu-id="a1309-504">XButton1 마우스 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-504">XButton1 Mouse Click</span></span> | <span data-ttu-id="a1309-505">XButton1 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-505">XButton1 Mouse Double-Click</span></span> | <span data-ttu-id="a1309-506">Xbutton2를 놓으면 마우스 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-506">XButton2 Mouse Click</span></span> | <span data-ttu-id="a1309-507">Xbutton2를 놓으면 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-507">XButton2 Mouse Double-Click</span></span> | 
| ------- | ---------------- | ----------------------- | ----------------- | ------------------------ | ------------------ | ------------------------- | -------------------- | --------------------------- | -------------------- | --------------------------- |
| <span data-ttu-id="a1309-508"><xref:System.Windows.Forms.MonthCalendar>, <xref:System.Windows.Forms.DateTimePicker>, <xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span><span class="sxs-lookup"><span data-stu-id="a1309-508"><xref:System.Windows.Forms.MonthCalendar>, <xref:System.Windows.Forms.DateTimePicker>, <xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span></span> | <span data-ttu-id="a1309-509">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-509">none</span></span> | <span data-ttu-id="a1309-510">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-510">none</span></span> | <span data-ttu-id="a1309-511">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-511">none</span></span> | <span data-ttu-id="a1309-512">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-512">none</span></span> | <span data-ttu-id="a1309-513">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-513">none</span></span> | <span data-ttu-id="a1309-514">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-514">none</span></span> | <span data-ttu-id="a1309-515">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-515">none</span></span> | <span data-ttu-id="a1309-516">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-516">none</span></span> | <span data-ttu-id="a1309-517">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-517">none</span></span> | <span data-ttu-id="a1309-518">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-518">none</span></span> |
| <span data-ttu-id="a1309-519"><xref:System.Windows.Forms.Button>, <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span><span class="sxs-lookup"><span data-stu-id="a1309-519"><xref:System.Windows.Forms.Button>, <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span></span> | <span data-ttu-id="a1309-520">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-520">Click</span></span> | <span data-ttu-id="a1309-521">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-521">Click, Click</span></span> | <span data-ttu-id="a1309-522">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-522">none</span></span> | <span data-ttu-id="a1309-523">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-523">none</span></span> | <span data-ttu-id="a1309-524">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-524">none</span></span> | <span data-ttu-id="a1309-525">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-525">none</span></span> | <span data-ttu-id="a1309-526">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-526">none</span></span> | <span data-ttu-id="a1309-527">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-527">none</span></span> | <span data-ttu-id="a1309-528">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-528">none</span></span> | <span data-ttu-id="a1309-529">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-529">none</span></span> |
| <span data-ttu-id="a1309-530"><xref:System.Windows.Forms.ListBox>, <xref:System.Windows.Forms.CheckedListBox>, <xref:System.Windows.Forms.ComboBox></span><span class="sxs-lookup"><span data-stu-id="a1309-530"><xref:System.Windows.Forms.ListBox>, <xref:System.Windows.Forms.CheckedListBox>, <xref:System.Windows.Forms.ComboBox></span></span> | <span data-ttu-id="a1309-531">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-531">Click</span></span> | <span data-ttu-id="a1309-532">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-532">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-533">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-533">none</span></span> | <span data-ttu-id="a1309-534">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-534">none</span></span> | <span data-ttu-id="a1309-535">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-535">none</span></span> | <span data-ttu-id="a1309-536">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-536">none</span></span> | <span data-ttu-id="a1309-537">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-537">none</span></span> | <span data-ttu-id="a1309-538">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-538">none</span></span> | <span data-ttu-id="a1309-539">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-539">none</span></span> | <span data-ttu-id="a1309-540">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-540">none</span></span> |
| <span data-ttu-id="a1309-541"><xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.DomainUpDown>, <xref:System.Windows.Forms.NumericUpDown></span><span class="sxs-lookup"><span data-stu-id="a1309-541"><xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.DomainUpDown>, <xref:System.Windows.Forms.NumericUpDown></span></span> | <span data-ttu-id="a1309-542">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-542">Click</span></span> | <span data-ttu-id="a1309-543">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-543">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-544">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-544">none</span></span> | <span data-ttu-id="a1309-545">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-545">none</span></span> | <span data-ttu-id="a1309-546">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-546">none</span></span> | <span data-ttu-id="a1309-547">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-547">none</span></span> | <span data-ttu-id="a1309-548">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-548">none</span></span> | <span data-ttu-id="a1309-549">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-549">none</span></span> | <span data-ttu-id="a1309-550">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-550">none</span></span> | <span data-ttu-id="a1309-551">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-551">none</span></span> |
| <span data-ttu-id="a1309-552">\* <xref:System.Windows.Forms.TreeView>, \* <xref:System.Windows.Forms.ListView></span><span class="sxs-lookup"><span data-stu-id="a1309-552">\* <xref:System.Windows.Forms.TreeView>, \* <xref:System.Windows.Forms.ListView></span></span> | <span data-ttu-id="a1309-553">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-553">Click</span></span> | <span data-ttu-id="a1309-554">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-554">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-555">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-555">Click</span></span> | <span data-ttu-id="a1309-556">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-556">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-557">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-557">none</span></span> | <span data-ttu-id="a1309-558">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-558">none</span></span> | <span data-ttu-id="a1309-559">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-559">none</span></span> | <span data-ttu-id="a1309-560">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-560">none</span></span> | <span data-ttu-id="a1309-561">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-561">none</span></span> | <span data-ttu-id="a1309-562">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-562">none</span></span> |
| <span data-ttu-id="a1309-563"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span><span class="sxs-lookup"><span data-stu-id="a1309-563"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span></span> | <span data-ttu-id="a1309-564">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-564">Click</span></span> | <span data-ttu-id="a1309-565">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-565">Click, Click</span></span> | <span data-ttu-id="a1309-566">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-566">Click</span></span> | <span data-ttu-id="a1309-567">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-567">Click, Click</span></span> | <span data-ttu-id="a1309-568">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-568">Click</span></span> | <span data-ttu-id="a1309-569">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-569">Click, Click</span></span> | <span data-ttu-id="a1309-570">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-570">Click</span></span> | <span data-ttu-id="a1309-571">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-571">Click, Click</span></span> | <span data-ttu-id="a1309-572">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-572">Click</span></span> | <span data-ttu-id="a1309-573">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-573">Click, Click</span></span> |
| <span data-ttu-id="a1309-574"><xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.LinkLabel>, <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.GroupBox>, <xref:System.Windows.Forms.PictureBox>, <xref:System.Windows.Forms.Splitter>, <xref:System.Windows.Forms.StatusBar>, <xref:System.Windows.Forms.ToolBar>, <xref:System.Windows.Forms.TabPage>, \*\* <xref:System.Windows.Forms.TabControl></span><span class="sxs-lookup"><span data-stu-id="a1309-574"><xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.LinkLabel>, <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.GroupBox>, <xref:System.Windows.Forms.PictureBox>, <xref:System.Windows.Forms.Splitter>, <xref:System.Windows.Forms.StatusBar>, <xref:System.Windows.Forms.ToolBar>, <xref:System.Windows.Forms.TabPage>, \*\* <xref:System.Windows.Forms.TabControl></span></span> | <span data-ttu-id="a1309-575">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-575">Click</span></span> | <span data-ttu-id="a1309-576">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-576">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-577">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-577">Click</span></span> | <span data-ttu-id="a1309-578">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-578">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-579">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-579">Click</span></span> | <span data-ttu-id="a1309-580">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-580">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-581">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-581">Click</span></span> | <span data-ttu-id="a1309-582">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-582">Click, DoubleClick</span></span> | <span data-ttu-id="a1309-583">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-583">Click</span></span> | <span data-ttu-id="a1309-584">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-584">Click, DoubleClick</span></span> |

<span data-ttu-id="a1309-585">\* 자식 개체 위로 마우스 포인터 여야 합니다 (<xref:System.Windows.Forms.TreeNode> 또는 <xref:System.Windows.Forms.ListViewItem>).</span><span class="sxs-lookup"><span data-stu-id="a1309-585">\* The mouse pointer must be over a child object (<xref:System.Windows.Forms.TreeNode> or <xref:System.Windows.Forms.ListViewItem>).</span></span>  
  
 <span data-ttu-id="a1309-586">\* \*은 <xref:System.Windows.Forms.TabControl> 하나 이상 있어야 <xref:System.Windows.Forms.TabPage> 에서 해당 <xref:System.Windows.Forms.TabControl.TabPages> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-586">\*\* The <xref:System.Windows.Forms.TabControl> must have at least one <xref:System.Windows.Forms.TabPage> in its <xref:System.Windows.Forms.TabControl.TabPages> collection.</span></span>

## Examples  
 <span data-ttu-id="a1309-587">다음 코드 예제는 <xref:System.Windows.Forms.Control.Click> 이벤트 처리기에서 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-587">The following code example shows the <xref:System.Windows.Forms.Control.Click> event in an event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-588">컨트롤의 클라이언트 영역을 나타내는 사각형을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-588">Gets the rectangle that represents the client area of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-589">컨트롤의 클라이언트 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-589">A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-590">컨트롤의 클라이언트 영역은 제외한 스크롤 막대, 테두리, 제목 표시줄 및 메뉴 같은 비클라이언트 요소를 사용 하는 컨트롤의 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-590">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span>  
  
 <span data-ttu-id="a1309-591">클라이언트 좌표로 나타낸 컨트롤의 클라이언트 영역의 왼쪽 위 모퉁이 기준으로 이기 때문에이 속성에서 반환 하는 사각형의 왼쪽 위 모퉁이의 좌표는 (0, 0).</span><span class="sxs-lookup"><span data-stu-id="a1309-591">Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</span></span> <span data-ttu-id="a1309-592">크기와 컨트롤의 화면에서 그리기 등의 작업에 대 한 컨트롤의 클라이언트 영역 좌표를 가져오려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-592">You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="a1309-593">컨트롤에서 그리기에 대 한 자세한 내용은 참조 [Windows Forms 컨트롤 렌더링](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-593">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-594">다음 코드 예제에서는 폼에 대 한 자동 스크롤을 사용할 수 폼의 크기를 조정 하며 단추 계속 표시 되는 폼 크기가 조정 되 면 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-594">The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized.</span></span> <span data-ttu-id="a1309-595">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여는 <xref:System.Windows.Forms.Button> 라는 `button2` 에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-595">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#2)]
 [!code-csharp[Windows.Forms.Control Member5#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#2)]
 [!code-vb[Windows.Forms.Control Member5#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size ClientSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.ClientSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-596">컨트롤 클라이언트 영역의 높이와 너비를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-596">Gets or sets the height and width of the client area of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-597">컨트롤 클라이언트 영역의 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-597">A <see cref="T:System.Drawing.Size" /> that represents the dimensions of the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-598">컨트롤의 클라이언트 영역은 제외한 스크롤 막대, 테두리, 제목 표시줄 및 메뉴 같은 비클라이언트 요소를 사용 하는 컨트롤의 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-598">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="a1309-599">합니다 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 메서드를 호출을 설정 하는 <xref:System.Windows.Forms.Control.ClientSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-599">The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the <xref:System.Windows.Forms.Control.ClientSize%2A> property.</span></span> <span data-ttu-id="a1309-600"><xref:System.Windows.Forms.Control.ClientSize%2A> 속성을 통해 변경 되지 않습니다 해당 `set` 메서드를 재정의 해야 하는 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 메서드는 코드가 실행 되도록 때를 <xref:System.Windows.Forms.Control.ClientSize%2A> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-600">The <xref:System.Windows.Forms.Control.ClientSize%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.ClientSize%2A> property is set.</span></span>  
  
 <span data-ttu-id="a1309-601">합니다 <xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> 고 <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> 속성은 컨트롤의 클라이언트 영역의 높이 너비를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-601">The <xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> and <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> properties represent the width and height of the client area of the control.</span></span> <span data-ttu-id="a1309-602">컨트롤의 화면에서 그리기 등의 작업에 대 한 컨트롤의 클라이언트 영역 크기를 얻으려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-602">You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="a1309-603">컨트롤에서 그리기에 대 한 자세한 내용은 참조 [Windows Forms 컨트롤 렌더링](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-603">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-604">애플리케이션 설정을이 속성에 바인딩할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-604">You cannot bind application settings to this property.</span></span> <span data-ttu-id="a1309-605">애플리케이션 설정에 대 한 자세한 내용은 참조 하세요. [애플리케이션 설정 개요](~/docs/framework/winforms/advanced/application-settings-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-605">For more information on application settings, see [Application Settings Overview](~/docs/framework/winforms/advanced/application-settings-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-606">컨트롤의 서식 있는 텍스트에 연결할 수 있도록 다음 코드 예제에서는 지정된 된 컨트롤을 크기 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-606">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="a1309-607">서식이 지정 된 텍스트를 <xref:System.Windows.Forms.Control.Text%2A> 컨트롤을 사용 하 여 속성의 할당 된 <xref:System.Windows.Forms.Control.Font%2A> 텍스트에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-607">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="a1309-608">합니다 `AutoSizeControl` 이 예제의 메서드 역시는 `textPadding` 컨트롤의 모든 가장자리에 적용할 안쪽 여백을 나타내는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-608">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="a1309-609">안쪽 여백을 동일 하 게 나타나는 하도록 텍스트를 정렬 합니다는 <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> 값 컨트롤에서 지 원하는 경우 해당 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-609">To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> value, if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ClientSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ClientSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ClientSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.ClientSizeChanged : EventHandler " Usage="member this.ClientSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-610"><see cref="P:System.Windows.Forms.Control.ClientSize" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-610">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-611">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-611">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-612">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-612">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-613">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.ClientSizeChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-613">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span> <span data-ttu-id="a1309-614">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-614">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-615">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-615">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-616">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-616">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-617">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.ClientSizeChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-617">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#12)]
 [!code-vb[System.Windows.Forms.EventExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Control.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-618">컨트롤을 포함하고 있는 애플리케이션의 회사 이름이나 작성자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-618">Gets the name of the company or creator of the application containing the control.</span></span></summary>
        <value><span data-ttu-id="a1309-619">컨트롤을 포함하고 있는 애플리케이션의 회사 이름이나 작성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-619">The company name or creator of the application containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-620"><xref:System.Windows.Forms.Control.CompanyName%2A> 속성은 읽기 전용 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-620">The <xref:System.Windows.Forms.Control.CompanyName%2A> property is a read-only property.</span></span> <span data-ttu-id="a1309-621">이 속성의 값을 변경 하려면 설정 합니다 <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> 속성 값을 <xref:System.Reflection.AssemblyCompanyAttribute>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-621">To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>.</span></span> <span data-ttu-id="a1309-622">C# 코드 집합의 다음 줄을 <xref:System.Windows.Forms.Control.CompanyName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-622">The following line of C# code sets the <xref:System.Windows.Forms.Control.CompanyName%2A> property.</span></span>  
  
```csharp  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="a1309-623">회사 이름, 제품 이름 및 제품 버전에 대 한 앱 제공 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-623">It is strongly recommended that you provide the company name, product name, and product version for your app.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-624">애플리케이션에 대 한 정보를 표시 하는 다음 코드 예제는 <xref:System.Windows.Forms.Label> 에 포함 된를 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-624">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-625">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> 및 <xref:System.Windows.Forms.Control.ProductVersion%2A> 설정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-625">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyCompanyAttribute.Company" />
        <altmember cref="P:System.Diagnostics.FileVersionInfo.CompanyName" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (ctl As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::Control ^ ctl);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.Control -&gt; bool" Usage="control.Contains ctl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="a1309-626">실행할 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-626">The <see cref="T:System.Windows.Forms.Control" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="a1309-627">지정된 컨트롤이 특정 컨트롤의 자식인지를 나타내는 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-627">Retrieves a value indicating whether the specified control is a child of the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-628">지정된 컨트롤이 특정 컨트롤의 자식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-628"><see langword="true" /> if the specified control is a child of the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-629">되도록 다음 코드 예제는 <xref:System.Windows.Forms.Label> 를 호출 하 여 표시 되는 해당 <xref:System.Windows.Forms.Control.BringToFront%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-629">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="a1309-630">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여는 <xref:System.Windows.Forms.Panel> 라는 `panel1`, 및 <xref:System.Windows.Forms.Label> 라는 `label1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-630">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContainsFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainsFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContainsFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsFocus : bool" Usage="System.Windows.Forms.Control.ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-631">컨트롤이나 해당 컨트롤의 자식 컨트롤이 현재 입력 포커스를 가지고 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-631">Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</span></span></summary>
        <value><span data-ttu-id="a1309-632">컨트롤이나 해당 컨트롤의 자식 컨트롤이 현재 입력 포커스를 가지고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-632"><see langword="true" /> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-633">이 속성을 사용 하 여 컨트롤 또는 그 안에 포함 된 컨트롤에 입력된 포커스가 있는지 여부를 결정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-633">You can use this property to determine whether a control or any of the controls contained within it has the input focus.</span></span> <span data-ttu-id="a1309-634">컨트롤에 포커스를 해당 자식 컨트롤의 모든 권한이 있는지 여부에 관계 없이 포커스가 있는지 여부를 확인 하려면 사용 된 <xref:System.Windows.Forms.Control.Focused%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-634">To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property.</span></span> <span data-ttu-id="a1309-635">컨트롤에 입력된 포커스를 부여 하려면 사용 합니다 <xref:System.Windows.Forms.Control.Focus%2A> 또는 <xref:System.Windows.Forms.Control.Select%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-635">To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenu ^ ContextMenu { System::Windows::Forms::ContextMenu ^ get(); void set(System::Windows::Forms::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Forms.ContextMenu with get, set" Usage="System.Windows.Forms.Control.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-636">컨트롤과 연결된 바로 가기 메뉴를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-636">Gets or sets the shortcut menu associated with the control.</span></span></summary>
        <value><span data-ttu-id="a1309-637">해당 컨트롤과 연결된 바로 가기 메뉴를 나타내는 <see cref="T:System.Windows.Forms.ContextMenu" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-637">A <see cref="T:System.Windows.Forms.ContextMenu" /> that represents the shortcut menu associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-638">이러한 컨트롤에 마우스 오른쪽 단추로 때 사용자에 게 상황에 맞는 메뉴 옵션을 제공 하려면 바로 가기 메뉴를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-638">Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-639">다음 코드 예제는 <xref:System.Windows.Forms.ContextMenu> 할당할는 <xref:System.Windows.Forms.TreeView> 마우스 오른쪽 단추를 클릭 한 후 해제 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-639">The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released.</span></span> <span data-ttu-id="a1309-640">이 코드를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여를 <xref:System.Windows.Forms.TreeView> 에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-640">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it.</span></span> <span data-ttu-id="a1309-641">도 필요 하는 합니다 <xref:System.Windows.Forms.TreeView> 에 <xref:System.Windows.Forms.ContextMenu> 에 할당 된 해당 <xref:System.Windows.Forms.Control.ContextMenu%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-641">It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its <xref:System.Windows.Forms.Control.ContextMenu%2A> property.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#5)]
 [!code-csharp[Windows.Forms.Control Properties2#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#5)]
 [!code-vb[Windows.Forms.Control Properties2#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-642">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.ContextMenu" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.ContextMenu" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-642">When overriding the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-643">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-643">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-644">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.ContextMenu" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-644">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuChanged : EventHandler " Usage="member this.ContextMenuChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-645"><see cref="P:System.Windows.Forms.Control.ContextMenu" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-645">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-646">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.ContextMenu%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-646">This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-647">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-647">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-648">다음 코드 예제에서는 바로 가기 메뉴에 변경이 발생할 때 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-648">The following code example displays a message when a change occurs to the shortcut menu.</span></span>  
  
 [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CPP/control_contextmenu_creategraphics.cpp#2)]
 [!code-csharp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CS/control_contextmenu_creategraphics.cs#2)]
 [!code-vb[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/VB/control_contextmenu_creategraphics.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenuStrip As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenuStrip ^ ContextMenuStrip { System::Windows::Forms::ContextMenuStrip ^ get(); void set(System::Windows::Forms::ContextMenuStrip ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStrip : System.Windows.Forms.ContextMenuStrip with get, set" Usage="System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-649">이 컨트롤과 연결된 <see cref="T:System.Windows.Forms.ContextMenuStrip" />을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-649">Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with this control.</span></span></summary>
        <value><span data-ttu-id="a1309-650">이 컨트롤의 <see cref="T:System.Windows.Forms.ContextMenuStrip" />이거나, <see langword="null" />이 없는 경우 <see cref="T:System.Windows.Forms.ContextMenuStrip" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-650">The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> for this control, or <see langword="null" /> if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip" />.</span></span> <span data-ttu-id="a1309-651">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-651">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-652">경우는 <xref:System.Windows.Forms.ContextMenu> 가 컨트롤에 할당 된를 <xref:System.Windows.Forms.ContextMenu> 보다 우선 합니다 <xref:System.Windows.Forms.ContextMenuStrip>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-652">If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-653">다음 코드 예제에서는 3 개를 추가 하는 방법을 보여 줍니다 <xref:System.Windows.Forms.ToolStripMenuItem> 개체는 <xref:System.Windows.Forms.ContextMenuStrip>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-653">The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="a1309-654">또한 설정을 보여 줍니다는 <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> 폼의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-654">In addition it demonstrates setting the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property of the form.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuStripChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStripChanged : EventHandler " Usage="member this.ContextMenuStripChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-655"><see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-655">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-656">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-656">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-657">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-657">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-658">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.ContextMenuStripChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-658">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span> <span data-ttu-id="a1309-659">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-659">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-660">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-660">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-661">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-661">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-662">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.ContextMenuStripChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-662">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#14)]
 [!code-vb[System.Windows.Forms.EventExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlAdded As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlAdded;" />
      <MemberSignature Language="F#" Value="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-663"><see cref="T:System.Windows.Forms.Control.ControlCollection" />에 새로운 컨트롤이 추가되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-663">Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-664">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-664">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-665">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.ControlAdded> 폼에 컨트롤을 추가 하려면에 추가 된 컨트롤의 이름을 표시 하 고는 <xref:System.Windows.Forms.MessageBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-665">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlRemoved As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlRemoved;" />
      <MemberSignature Language="F#" Value="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-666"><see cref="T:System.Windows.Forms.Control.ControlCollection" />에서 컨트롤이 제거되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-666">Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-667">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-667">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-668">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.ControlRemoved> 폼에서 컨트롤을 제거 하려면 제거 컨트롤의 이름을 표시 하 고는 <xref:System.Windows.Forms.MessageBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-668">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control::ControlCollection ^ Controls { System::Windows::Forms::Control::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Windows.Forms.Control.ControlCollection" Usage="System.Windows.Forms.Control.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-669">컨트롤에 포함된 컨트롤의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-669">Gets the collection of controls contained within the control.</span></span></summary>
        <value><span data-ttu-id="a1309-670">컨트롤에 포함된 컨트롤의 컬렉션을 나타내는 <see cref="T:System.Windows.Forms.Control.ControlCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-670">A <see cref="T:System.Windows.Forms.Control.ControlCollection" /> representing the collection of controls contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-671"><xref:System.Windows.Forms.Control> 컨트롤의 컬렉션에 대 한 부모로 동작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-671">A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls.</span></span> <span data-ttu-id="a1309-672">여러 컨트롤에 추가 될 때에 예를 들어를 <xref:System.Windows.Forms.Form>, 각 컨트롤의 멤버인를 <xref:System.Windows.Forms.Control.ControlCollection> 에 할당 된를 <xref:System.Windows.Forms.Control.Controls%2A> 에서 파생 된 폼의 속성을 <xref:System.Windows.Forms.Control> 클래스.</span><span class="sxs-lookup"><span data-stu-id="a1309-672">For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 <span data-ttu-id="a1309-673">컨트롤을 조작할 수 있습니다는 <xref:System.Windows.Forms.Control.ControlCollection> 에 할당 합니다 <xref:System.Windows.Forms.Control.Controls%2A> 속성에서 사용할 수 있는 메서드를 사용 하 여는 <xref:System.Windows.Forms.Control.ControlCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="a1309-673">You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.</span></span>  
  
 <span data-ttu-id="a1309-674">부모 컨트롤에 여러 컨트롤을 추가, 것이 좋습니다를 호출 하는 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 추가할 컨트롤을 초기화 하기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-674">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="a1309-675">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-675">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="a1309-676">이렇게 하면 많은 컨트롤을 사용 하 여 애플리케이션의 성능을 향상 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-676">Doing so will increase the performance of applications with many controls.</span></span>  
  
 <span data-ttu-id="a1309-677">사용 된 <xref:System.Windows.Forms.Control.Controls%2A> 중첩 된 컨트롤을 포함 하 여 양식의 모든 컨트롤을 반복 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-677">Use the <xref:System.Windows.Forms.Control.Controls%2A> property to iterate through all controls of a form, including nested controls.</span></span> <span data-ttu-id="a1309-678">사용 된 <xref:System.Windows.Forms.Control.GetNextControl%2A> 탭 순서에서 이전 또는 다음 자식 컨트롤을 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-678">Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order.</span></span> <span data-ttu-id="a1309-679">사용 된 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> 가져오거나 컨테이너 컨트롤의 활성 컨트롤을 설정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-679">Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-680">다음 코드 예제에서는 제거는 <xref:System.Windows.Forms.Control> 에서 합니다 <xref:System.Windows.Forms.Control.ControlCollection> 파생된 클래스의 <xref:System.Windows.Forms.Panel> 컬렉션의 멤버인 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-680">The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection.</span></span> <span data-ttu-id="a1309-681">만든이 예제는 <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>와 하나 이상의 <xref:System.Windows.Forms.RadioButton> 대 한 control 권한를 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-681">The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-682"><xref:System.Windows.Forms.RadioButton> 컨트롤에 추가 되는 <xref:System.Windows.Forms.Panel> 컨트롤 및 <xref:System.Windows.Forms.Panel> 에 추가 된 컨트롤은 <xref:System.Windows.Forms.Form>.</span><span class="sxs-lookup"><span data-stu-id="a1309-682">The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-683">라디오 단추 라는 단추를 클릭 하면 `removeButton` 에서 제거 되는 <xref:System.Windows.Forms.Control.ControlCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-683">When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControlsInstance" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="control.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-684">컨트롤의 액세스 가능성 개체를 새로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-684">Creates a new accessibility object for the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-685">컨트롤의 새로운 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-685">A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-686"><xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 메서드를 명시적으로 호출하지 않으면 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 속성을 참조할 때 이 메서드가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-686">If you do not explicitly call the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-687">가져오거나 설정 합니다 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 속성에 대 한 참조를 추가 해야 합니다는 `Accessibility` 어셈블리와 함께 설치는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-687">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-688">다음 코드 예제에서는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다 컨트롤을 사용 하 여 <xref:System.Windows.Forms.AccessibleObject> 및 <xref:System.Windows.Forms.Control.ControlAccessibleObject> 액세스할 수 있는 정보를 노출 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-688">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="a1309-689">컨트롤은 범례를 따라 두 곡선을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-689">The control plots two curves along with a legend.</span></span> <span data-ttu-id="a1309-690">합니다 `ChartControlAccessibleObject` 클래스에서 파생 되는 `ControlAccessibleObject`에 사용 되는 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-690">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="a1309-691">차트 범례 실제 아니므로 <xref:System.Windows.Forms.Control> -컨트롤을 따르지만 그려지며 차트 컨트롤에 의해 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-691">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="a1309-692">이 인해 합니다 `ChartControlAccessibleObject` 재정의 클래스를 <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> 반환 하는 방법은 `CurveLegendAccessibleObject` 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-692">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="a1309-693">인식 액세스할 수 있는 애플리케이션에서이 컨트롤을 사용 하는 경우 컨트롤이 필요한 액세스할 수 있는 정보를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-693">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="a1309-694">이 코드 예제를 재정의 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-694">This code excerpt demonstrates overriding the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span> <span data-ttu-id="a1309-695">참조 된 <xref:System.Windows.Forms.AccessibleObject> 전체 코드 예제에 대 한 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-695">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#2)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#2)]
 [!code-vb[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-696">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> 파생된 클래스에서 기본 클래스의을 호출 하지 마십시오 <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-696">When overriding <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> in a derived class, do not call the base class's <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> method.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControl" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateControl();" />
      <MemberSignature Language="F#" Value="member this.CreateControl : unit -&gt; unit" Usage="control.CreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-697">핸들과 모든 표시되는 자식 컨트롤을 포함하여 표시 가능한 컨트롤을 강제로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-697">Forces the creation of the visible control, including the creation of the handle and any visible child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-698"><xref:System.Windows.Forms.Control.CreateControl%2A> 메서드를 사용 하면 컨트롤과 해당 자식 컨트롤에 대해 만들 수에 대 한 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-698">The <xref:System.Windows.Forms.Control.CreateControl%2A> method forces a handle to be created for the control and its child controls.</span></span> <span data-ttu-id="a1309-699">컨트롤의 자식; 조작에 대 한 핸들을 즉시 필요한 경우이 메서드를 사용 합니다. 단순히 호출 컨트롤의 생성자를 만들지 않습니다는 <xref:System.Windows.Forms.Control.Handle%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-699">This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.</span></span>  
  
 <span data-ttu-id="a1309-700"><xref:System.Windows.Forms.Control.CreateControl%2A> 하는 경우 컨트롤 핸들을 만들지 않으므로 컨트롤의 <xref:System.Windows.Forms.Control.Visible%2A> 속성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-700"><xref:System.Windows.Forms.Control.CreateControl%2A> does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`.</span></span> <span data-ttu-id="a1309-701">호출할 수 있습니다 합니다 <xref:System.Windows.Forms.Control.CreateHandle%2A> 메서드 또는 액세스는 <xref:System.Windows.Forms.Control.Handle%2A> 만들 컨트롤의 속성 처리 컨트롤의 표시 여부에 관계 없이 하지만 경우 컨트롤의 자식에 대 한 핸들이 만들어집니다 창이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-701">You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection&#xA;override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="control.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-702">컨트롤에 대한 컨트롤 컬렉션의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-702">Creates a new instance of the control collection for the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-703">컨트롤에 할당된 <see cref="T:System.Windows.Forms.Control.ControlCollection" />의 새 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-703">A new instance of <see cref="T:System.Windows.Forms.Control.ControlCollection" /> assigned to the control.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-704">이 메서드의 기본 클래스 버전을 파생된 클래스에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-704">The base class version of this method should not be called by a derived class.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Created" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Created As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Created { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Created : bool" Usage="System.Windows.Forms.Control.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-705">컨트롤이 만들어졌는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-705">Gets a value indicating whether the control has been created.</span></span></summary>
        <value><span data-ttu-id="a1309-706">컨트롤이 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-706"><see langword="true" /> if the control has been created; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-707">합니다 <xref:System.Windows.Forms.Control.Created%2A> 속성이 반환 `true` 경우는 <xref:System.Windows.Forms.Control> 컨트롤의 핸들 수 하지 생성 되었거나 아직 다시 생성 하는 경우에 성공적으로 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-707">The <xref:System.Windows.Forms.Control.Created%2A> property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateGraphics" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateGraphics () As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateGraphics();" />
      <MemberSignature Language="F#" Value="member this.CreateGraphics : unit -&gt; System.Drawing.Graphics" Usage="control.CreateGraphics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-708">해당 컨트롤에 대한 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-708">Creates the <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-709">컨트롤에 대한 <see cref="T:System.Drawing.Graphics" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-709">The <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-710">합니다 <xref:System.Drawing.Graphics> 를 통해 검색 하는 개체는 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 메서드는 일반적으로 유지 되지 현재 Windows 메시지 처리 된 후 해당 개체를 사용 하 여 색칠 다음 WM_PAINT 메시지를 사용 하 여 지워집니다 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-710">The <xref:System.Drawing.Graphics> object that you retrieve through the <xref:System.Windows.Forms.Control.CreateGraphics%2A> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</span></span> <span data-ttu-id="a1309-711">캐시할 수 없으며 따라서 합니다 <xref:System.Drawing.Graphics> 개체와 같은 비 가시적 메서드를 사용 하는 제외 하 고 다시 사용 하기 위해 <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-711">Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1309-712">대신 호출 해야 합니다 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 사용할 때마다 합니다 <xref:System.Drawing.Graphics> 개체를 호출 <xref:System.Drawing.Graphics.Dispose%2A> 사용 했으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-712">Instead, you must call <xref:System.Windows.Forms.Control.CreateGraphics%2A> every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it.</span></span> <span data-ttu-id="a1309-713">Windows 메시지에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Forms.Control.WndProc%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-713">For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.</span></span>  
  
 <span data-ttu-id="a1309-714">기본적으로 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 호출 스레드로 소유권을 설정 하 고 다른 스레드에서 호출 될 경우 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-714">By design, <xref:System.Windows.Forms.Control.CreateGraphics%2A> sets ownership to the calling thread, and fails if it is called on other threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-715">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-715">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-716">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-716">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-717">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-717">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-718">컨트롤의 서식 있는 텍스트에 연결할 수 있도록 다음 코드 예제에서는 지정된 된 컨트롤을 크기 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-718">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="a1309-719">서식이 지정 된 텍스트를 <xref:System.Windows.Forms.Control.Text%2A> 컨트롤을 사용 하 여 속성의 할당 된 <xref:System.Windows.Forms.Control.Font%2A> 텍스트에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-719">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="a1309-720">합니다 `AutoSizeControl` 이 예제의 메서드 역시는 `textPadding` 컨트롤의 모든 가장자리에 적용할 안쪽 여백을 나타내는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-720">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="a1309-721">안쪽 여백을 동일 하 게 나타나는 하도록 텍스트를 정렬 합니다는 `MiddleCenter` 의 값 <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> 컨트롤에서 지 원하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-721">To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-722">이 메서드를 호출 하 여 안전한 하위 창에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-722">for safe subwindows to call this method.</span></span> <span data-ttu-id="a1309-723">연관 된 열거형: <see langword="SafeSubWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-723">Associated enumeration: <see langword="SafeSubWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CreateHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : unit -&gt; unit&#xA;override this.CreateHandle : unit -&gt; unit" Usage="control.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-724">컨트롤의 핸들을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-724">Creates a handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-725">일반적으로 호출 하지 않아야 합니다 <xref:System.Windows.Forms.Control.CreateHandle%2A> 메서드를 직접.</span><span class="sxs-lookup"><span data-stu-id="a1309-725">You typically should not call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method directly.</span></span> <span data-ttu-id="a1309-726">기본 메서드를 호출 하는 것을 <xref:System.Windows.Forms.Control.CreateControl%2A> 컨트롤을 만들 때 만들 컨트롤 및 해당 자식 컨트롤에 대 한 핸들을 강제 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-726">The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1309-727">개체가 삭제된 상태인 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-727">The object is in a disposed state.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-728">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-728">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-729">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-729">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-730">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.CreateHandle" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.CreateHandle" /> 핸들이 만들어졌는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-730">When overriding <see cref="M:System.Windows.Forms.Control.CreateHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.CreateHandle" /> method to ensure that the handle is created.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.Control.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-731">컨트롤 핸들이 만들어지는 경우 필요한 작성 매개 변수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-731">Gets the required creation parameters when the control handle is created.</span></span></summary>
        <value><span data-ttu-id="a1309-732">컨트롤 핸들을 만들 때 필요한 작성 매개 변수가 포함된 <see cref="T:System.Windows.Forms.CreateParams" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-732">A <see cref="T:System.Windows.Forms.CreateParams" /> that contains the required creation parameters when the handle to the control is created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-733"><xref:System.Windows.Forms.Control.CreateParams%2A> 속성 재정의 되 고 파생된 컨트롤의 속성을 조정 하는 데 사용 하지 않을 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-733">The <xref:System.Windows.Forms.Control.CreateParams%2A> property should not be overridden and used to adjust the properties of your derived control.</span></span> <span data-ttu-id="a1309-734">와 같은 속성을 <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> 와 같은 컨트롤에서 해당 속성으로 설정 해야 <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>를 <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-734">Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1309-735"><xref:System.Windows.Forms.CreateParams> 표준 Windows 컨트롤 클래스를 래핑하는 또는 Windows Forms 네임 스페이스에서 제공 하지 않는 스타일을 설정할 때만 확장 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-735">The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</span></span> <span data-ttu-id="a1309-736">제어 매개 변수를 만드는 방법에 대 한 자세한 내용은 참조는 `CreateWindow` 및 `CreateWindowEx` 함수 및 [CREATESTRUCT](https://msdn.microsoft.com/library/windows/desktop/ms632603.aspx) 설명서 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-736">For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](https://msdn.microsoft.com/library/windows/desktop/ms632603.aspx) structure documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-737">다음 코드 예제를 확장 합니다 <xref:System.Windows.Forms.Control.CreateParams%2A> 의 속성을 <xref:System.Windows.Forms.Button> 파생 클래스.</span><span class="sxs-lookup"><span data-stu-id="a1309-737">The following code example extends the <xref:System.Windows.Forms.Control.CreateParams%2A> property of a <xref:System.Windows.Forms.Button> derived class.</span></span> <span data-ttu-id="a1309-738">합니다 <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> 속성이 변경 될 표시할 단추를 <xref:System.Drawing.Icon> 아닌 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-738">The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-739">이 예제에서 상속한 클래스가 있다고 필요는 <xref:System.Windows.Forms.Button> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-739">This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-740">속성 값을 가져올 때 관리 되지 않는 코드를 호출 하려면 호출자가 즉시입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-740">for the immediate caller to call unmanaged code when getting the property value.</span></span> <span data-ttu-id="a1309-741">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-741">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-742">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.CreateParams" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.CreateParams" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-742">When overriding the <see cref="P:System.Windows.Forms.Control.CreateParams" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.CreateParams" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-743">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-743">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.Control.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-744">마우스 포인터가 컨트롤 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-744">Gets or sets the cursor that is displayed when the mouse pointer is over the control.</span></span></summary>
        <value><span data-ttu-id="a1309-745">마우스 포인터가 컨트롤 위에 있을 때 표시되는 커서를 나타내는 <see cref="T:System.Windows.Forms.Cursor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-745">A <see cref="T:System.Windows.Forms.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-746">할당을 <xref:System.Windows.Forms.Cursor> 에 <xref:System.Windows.Forms.Control.Cursor%2A> 마우스 포인터가 컨트롤 위에 있을 때 표시 되는 커서를 변경 하려면 컨트롤의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-746">Assign a <xref:System.Windows.Forms.Cursor> to the <xref:System.Windows.Forms.Control.Cursor%2A> property of the control to change the cursor displayed when the mouse pointer is over the control.</span></span> <span data-ttu-id="a1309-747">일시적으로 애플리케이션 집합에 대해 모든 컨트롤에 대 한 마우스 커서를 변경 하 여 <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-747">To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1309-748">일반적으로 설정할 수 있습니다는 <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> 속성을 채울 때 대기 커서를 <xref:System.Windows.Forms.ComboBox> 또는 저장 하거나 파일을 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-748">Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.</span></span>  
  
 <span data-ttu-id="a1309-749"><xref:System.Windows.Forms.Control.Cursor%2A> 속성이 앰비언트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-749">The <xref:System.Windows.Forms.Control.Cursor%2A> property is an ambient property.</span></span> <span data-ttu-id="a1309-750">그렇지 않은 경우, 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-750">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-751">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-751">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-752">앰비언트 속성에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.AmbientProperties> 클래스 또는 <xref:System.Windows.Forms.Control> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-752">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-753">다음 코드 예에서는 채우기는 <xref:System.Windows.Forms.ComboBox> 사용자의 사용 가능한 논리 드라이브를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-753">The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives.</span></span> <span data-ttu-id="a1309-754">콤보 상자의 또한 설정 <xref:System.Windows.Forms.Cursor> 속성 이므로 <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> 커서 마우스 포인터를 드롭다운 단추 위로 가져갈 때 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-754">The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> cursor is displayed when the mouse pointer is over the drop-down button.</span></span> <span data-ttu-id="a1309-755">이 코드를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여를 <xref:System.Windows.Forms.ComboBox> 에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-755">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-756">이 속성 값을 설정 하려면 안전한 하위 창에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-756">for safe subwindows to set this property value.</span></span> <span data-ttu-id="a1309-757">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span><span class="sxs-lookup"><span data-stu-id="a1309-757">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-758">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Cursor" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Cursor" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-758">When overriding the <see cref="P:System.Windows.Forms.Control.Cursor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Cursor" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-759">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-759">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-760">모두 재정의할 필요가 없습니다를 <see langword="get" /> 하 고 <see langword="set" /> 의 메서드는 <see cref="P:System.Windows.Forms.Control.Cursor" /> 속성 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-760">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursors" />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CursorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CursorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CursorChanged;" />
      <MemberSignature Language="F#" Value="member this.CursorChanged : EventHandler " Usage="member this.CursorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-761"><see cref="P:System.Windows.Forms.Control.Cursor" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-761">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-762">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Cursor%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-762">This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-763">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-763">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-764">다음 코드 예제에서는 사용 하 여 마우스 커서를 변경 하는 방법을 보여 줍니다 합니다 <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> 속성을 <xref:System.Windows.Forms.Cursor> 클래스 및 <xref:System.Windows.Forms.Cursors> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-764">The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="a1309-765">이 예제에서는 포함 된 폼을 만듭니다는 <xref:System.Windows.Forms.ComboBox> 컨트롤을 <xref:System.Windows.Forms.Panel> 컨트롤 및 <xref:System.Windows.Forms.ListView> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-765">The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control.</span></span> <span data-ttu-id="a1309-766">합니다 <xref:System.Windows.Forms.ComboBox> 에서 제공 하는 모든 커서를 포함 합니다 <xref:System.Windows.Forms.Cursors> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-766">The <xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="a1309-767">사용자가에 마우스 커서를 선택 하는 경우는 <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> 선택한 커서에 대 한 커서를 업데이트 하는 속성을 <xref:System.Windows.Forms.Panel>.</span><span class="sxs-lookup"><span data-stu-id="a1309-767">When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-768">합니다 <xref:System.Windows.Forms.ListView> 때마다 업데이트 됩니다는 <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-768">The <xref:System.Windows.Forms.ListView> is updated every time the <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> event occurs.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Cursors#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CPP/cursorexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CS/cursorexample.cs#1)]
 [!code-vb[System.Windows.Forms.Cursors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursors/VB/cursorexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DataBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBindings As ControlBindingsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlBindingsCollection ^ DataBindings { System::Windows::Forms::ControlBindingsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataBindings : System.Windows.Forms.ControlBindingsCollection" Usage="System.Windows.Forms.Control.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-769">컨트롤에 대한 데이터 바인딩을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-769">Gets the data bindings for the control.</span></span></summary>
        <value><span data-ttu-id="a1309-770">컨트롤의 <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> 개체를 포함하는 <see cref="T:System.Windows.Forms.Binding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-770">A <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> that contains the <see cref="T:System.Windows.Forms.Binding" /> objects for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-771">사용 된 <xref:System.Windows.Forms.Control.DataBindings%2A> 속성에 액세스를 <xref:System.Windows.Forms.ControlBindingsCollection>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-771">Use the <xref:System.Windows.Forms.Control.DataBindings%2A> property to access the <xref:System.Windows.Forms.ControlBindingsCollection>.</span></span> <span data-ttu-id="a1309-772">추가 하 여 <xref:System.Windows.Forms.Binding> 개체를 컬렉션에 개체의 속성에 컨트롤의 속성을 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-772">By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-773">다음 코드 예제에서는 <xref:System.Windows.Forms.Binding> 개체를 <xref:System.Windows.Forms.ControlBindingsCollection> 다섯 개의 컨트롤의: 4 <xref:System.Windows.Forms.TextBox> 컨트롤 및 <xref:System.Windows.Forms.DateTimePicker> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-773">The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="a1309-774"><xref:System.Windows.Forms.ControlBindingsCollection>는 <xref:System.Windows.Forms.Control.DataBindings%2A> 클래스의 <xref:System.Windows.Forms.Control> 속성을 통해 액세스됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-774">The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the <xref:System.Windows.Forms.Control.DataBindings%2A> property of the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Classic Control.DataBindings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.DataBindings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CS/source.cs#1)]
 [!code-vb[Classic Control.DataBindings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.DataBindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultBackColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBackColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-775">컨트롤의 기본 배경색을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-775">Gets the default background color of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-776">컨트롤의 기본 배경 <see cref="T:System.Drawing.Color" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-776">The default background <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="a1309-777">기본값은 <see cref="P:System.Drawing.SystemColors.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-777">The default is <see cref="P:System.Drawing.SystemColors.Control" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-778">이것이 기본 <xref:System.Windows.Forms.Control.BackColor%2A> 일반 최상위 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-778">This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control.</span></span> <span data-ttu-id="a1309-779">파생된 클래스는 다른 기본값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-779">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-780">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, 및 <xref:System.Windows.Forms.Control.DefaultForeColor%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-780">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="a1309-781">예제를 실행 하려면 다음 코드를 포함 하는 폼의 붙여를 <xref:System.Windows.Forms.ListBox> ListBox1를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-781">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="a1309-782">호출 된 `Populate_ListBox` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-782">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Cursor ^ DefaultCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.Control.DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-783">컨트롤의 기본 커서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-783">Gets or sets the default cursor for the control.</span></span></summary>
        <value><span data-ttu-id="a1309-784">현재 기본 커서를 나타내는 <see cref="T:System.Windows.Forms.Cursor" /> 형식의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-784">An object of type <see cref="T:System.Windows.Forms.Cursor" /> representing the current default cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-785">재정의 <xref:System.Windows.Forms.Control.DefaultCursor%2A> 컨트롤에 대 한 기본 커서를 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-785">Override <xref:System.Windows.Forms.Control.DefaultCursor%2A> to configure a default cursor for your control.</span></span> <span data-ttu-id="a1309-786">컨트롤의 생성자에서 커서를 설정 하는 보다 효율적 이며 특정 커서와 관련 된 디자이너 기능에 대 한 자동 지원 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-786">This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultFont" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Font ^ DefaultFont { System::Drawing::Font ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFont : System.Drawing.Font" Usage="System.Windows.Forms.Control.DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-787">컨트롤의 기본 글꼴을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-787">Gets the default font of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-788">컨트롤의 기본 <see cref="T:System.Drawing.Font" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-788">The default <see cref="T:System.Drawing.Font" /> of the control.</span></span> <span data-ttu-id="a1309-789">반환되는 값은 운영 체제와 시스템의 로컬 문화권 설정에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-789">The value returned will vary depending on the user's operating system the local culture setting of their system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-790">다음 표에서 값을 반환 <xref:System.Windows.Forms.Control.DefaultFont%2A> 운영 체제 및 로컬 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-790">The following table describes the value returned by <xref:System.Windows.Forms.Control.DefaultFont%2A> depending on the operating system and local culture.</span></span>  
  
|<span data-ttu-id="a1309-791">시스템 / 및 또는 문화권</span><span class="sxs-lookup"><span data-stu-id="a1309-791">System/and or Culture</span></span>|<span data-ttu-id="a1309-792">글꼴</span><span class="sxs-lookup"><span data-stu-id="a1309-792">Font</span></span>|  
|----------------------------|----------|  
|<span data-ttu-id="a1309-793">Windows NT 4 x, 일본어 버전</span><span class="sxs-lookup"><span data-stu-id="a1309-793">Windows NT 4x, Japanese version</span></span>|<span data-ttu-id="a1309-794">MS UI Gothic, 9 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-794">MS UI Gothic, 9 point.</span></span>|  
|<span data-ttu-id="a1309-795">아랍어 Windows</span><span class="sxs-lookup"><span data-stu-id="a1309-795">Arabic Windows</span></span>|<span data-ttu-id="a1309-796">Tahoma, 8 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-796">Tahoma, 8 point.</span></span>|  
|<span data-ttu-id="a1309-797">다른 운영 체제/문화권</span><span class="sxs-lookup"><span data-stu-id="a1309-797">Other operating system/culture</span></span>|<span data-ttu-id="a1309-798">MS Shell Dlg logical font를 일반적으로 Microsoft San Serif 8 지점입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-798">MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</span></span>|  
  
 <span data-ttu-id="a1309-799">MS Shell Dlg 글꼴을 시스템 레지스트리에 설정에 매핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-799">MS Shell Dlg maps to a font set in the system registry.</span></span>  
  
 <span data-ttu-id="a1309-800">이전 글꼴이 설치 되어 있지 않으면 기본 글꼴이 Tahoma, 8 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-800">If the previous fonts are not installed, the default font is Tahoma, 8 point.</span></span> <span data-ttu-id="a1309-801">8 포인트 Tahoma, 설치 되지 않은 경우 <xref:System.Windows.Forms.Control.DefaultFont%2A> 의 값을 반환 합니다 <xref:System.Drawing.FontFamily.GenericSansSerif%2A> 속성</span><span class="sxs-lookup"><span data-stu-id="a1309-801">If Tahoma, 8 point, is not installed, <xref:System.Windows.Forms.Control.DefaultFont%2A> returns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-802">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, 및 <xref:System.Windows.Forms.Control.DefaultForeColor%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-802">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="a1309-803">예제를 실행 하려면 다음 코드를 포함 하는 폼의 붙여를 <xref:System.Windows.Forms.ListBox> ListBox1를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-803">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="a1309-804">호출 된 `Populate_ListBox` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-804">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1309-805">클라이언트 컴퓨터에 기본 글꼴이나 국가별 대체 글꼴이 설치되어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-805">The default font or the regional alternative fonts are not installed on the client computer.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultForeColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultForeColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-806">컨트롤의 기본 전경색을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-806">Gets the default foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-807">컨트롤의 기본 전경 <see cref="T:System.Drawing.Color" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-807">The default foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="a1309-808">기본값은 <see cref="P:System.Drawing.SystemColors.ControlText" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-808">The default is <see cref="P:System.Drawing.SystemColors.ControlText" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-809">이것이 기본 <xref:System.Windows.Forms.Control.ForeColor%2A> 부모로 지정 되지 않은 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-809">This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control.</span></span> <span data-ttu-id="a1309-810">파생된 클래스는 다른 기본값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-810">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-811">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, 및 <xref:System.Windows.Forms.Control.DefaultForeColor%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-811">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="a1309-812">예제를 실행 하려면 다음 코드를 포함 하는 폼의 붙여를 <xref:System.Windows.Forms.ListBox> ListBox1를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-812">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="a1309-813">호출 된 `Populate_ListBox` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-813">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode DefaultImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-814">컨트롤에서 지원하는 기본 IME(입력기) 모드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-814">Gets the default Input Method Editor (IME) mode supported by the control.</span></span></summary>
        <value><span data-ttu-id="a1309-815"><see cref="T:System.Windows.Forms.ImeMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-815">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-816">(입력기)는 표준 키보드를 사용 하 여 복잡 한 예: 일본어 간지 문자 기호를 입력할 수 있도록 하는 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-816">An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</span></span>  
  
 <span data-ttu-id="a1309-817">구현 되는 <xref:System.Windows.Forms.Control> 클래스에서이 속성은 항상 반환는 <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-817">As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="a1309-818"><xref:System.Windows.Forms.ImeMode.Inherit> 값 IME 모드 부모 컨트롤에서 상속 되도록 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-818">The <xref:System.Windows.Forms.ImeMode.Inherit> value specifies that the IME mode is inherited from the parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-819">다음 코드 예제에서는 재정의 <xref:System.Windows.Forms.Control.DefaultImeMode%2A> 속성을 입력 방법 편집기 해제를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-819">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultImeMode%2A> property to turn off the Input Method Editor.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#4)]
 [!code-csharp[Windows.Forms.Control Properties2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#4)]
 [!code-vb[Windows.Forms.Control Properties2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-820">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-820">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-821">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-821">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMargin" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMargin As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultMargin { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMargin : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-822">컨트롤 사이에 기본적으로 지정되는 공백(픽셀)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-822">Gets the space, in pixels, that is specified by default between controls.</span></span></summary>
        <value><span data-ttu-id="a1309-823">컨트롤 사이의 기본 공백을 나타내는 <see cref="T:System.Windows.Forms.Padding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-823">A <see cref="T:System.Windows.Forms.Padding" /> that represents the default space between controls.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMaximumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-824">컨트롤의 기본 최대 크기로 지정되는 길이와 높이를 픽셀 단위로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-824">Gets the length and height, in pixels, that is specified as the default maximum size of a control.</span></span></summary>
        <value><span data-ttu-id="a1309-825">컨트롤의 크기를 나타내는 <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-825">A <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMinimumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMinimumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-826">컨트롤의 기본 최소 크기로 지정되는 길이와 높이를 픽셀 단위로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-826">Gets the length and height, in pixels, that is specified as the default minimum size of a control.</span></span></summary>
        <value><span data-ttu-id="a1309-827">컨트롤의 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-827">A <see cref="T:System.Drawing.Size" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultPadding" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultPadding As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultPadding { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPadding : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-828">컨트롤 내용의 내부 간격(픽셀)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-828">Gets the internal spacing, in pixels, of the contents of a control.</span></span></summary>
        <value><span data-ttu-id="a1309-829">컨트롤 내용의 내부 간격을 나타내는 <see cref="T:System.Windows.Forms.Padding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-829">A <see cref="T:System.Windows.Forms.Padding" /> that represents the internal spacing of the contents of a control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-830">컨트롤의 기본 크기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-830">Gets the default size of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-831">컨트롤의 기본 <see cref="T:System.Drawing.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-831">The default <see cref="T:System.Drawing.Size" /> of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-832">합니다 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성이 나타내는 <xref:System.Drawing.Size> 처음 만들어질 때 컨트롤의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-832">The <xref:System.Windows.Forms.Control.DefaultSize%2A> property represents the <xref:System.Drawing.Size> of the control when it is initially created.</span></span> <span data-ttu-id="a1309-833">설정 하 여 컨트롤의 크기를 조정할 수 해당 <xref:System.Windows.Forms.Control.Size%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-833">You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-834">더 나은 성능을 유지 하기 위해 설정 하지 마십시오는 <xref:System.Drawing.Size> 생성자의 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-834">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="a1309-835">재정의 하는 방법이 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-835">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-836">Windows Server 2003 시스템의 크기는 <xref:System.Windows.Forms.Form> 최대 픽셀 너비와 높이의 모니터에 의해 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-836">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-837">다음 코드 예제에서는 재정의 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성 폼 500 픽셀 사각형의 기본 크기를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-837">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultSize%2A> property, and makes the default size of the form 500 pixels square.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-838">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.DefaultSize" /> 파생된 클래스에서 속성을는 것이 좋습니다 반환할는 <see cref="T:System.Drawing.Size" /> 모든 구현을 재정의 하는 대신 원하는 크기를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-838">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultSize" /> property in a derived class, it is preferable to return a <see cref="T:System.Drawing.Size" /> with the desired dimensions rather than to override all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member DefWndProc :  -&gt; unit&#xA;override this.DefWndProc :  -&gt; unit" Usage="control.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-839">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-839">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="a1309-840">지정된 메시지를 기본 창 프로시저로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-840">Sends the specified message to the default window procedure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-841">Windows 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는 [WindowProc 함수](https://go.microsoft.com/fwlink/?LinkId=181565)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-841">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-842">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-842">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-843">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-843">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="control.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-844">컨트롤과 연결된 핸들을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-844">Destroys the handle associated with the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-845">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-845">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-846">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-846">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-847">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> 메서드 핸들을 소멸 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-847">When overriding <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> method to ensure that the handle is destroyed.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="DeviceDpi">
      <MemberSignature Language="C#" Value="public int DeviceDpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DeviceDpi" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DeviceDpi" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeviceDpi As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DeviceDpi { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DeviceDpi : int" Usage="System.Windows.Forms.Control.DeviceDpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-848">컨트롤을 현재 표시 중인 디스플레이 디바이스의 DPI 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-848">Gets the DPI value for the display device where the control is currently being displayed.</span></span></summary>
        <value><span data-ttu-id="a1309-849">디스플레이 디바이스의 DPI 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-849">The DPI value of the display device.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DisplayRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle DisplayRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-850">컨트롤의 표시 영역을 나타내는 사각형을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-850">Gets the rectangle that represents the display area of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-851">컨트롤의 표시 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-851">A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-852"><xref:System.Windows.Forms.Control.DisplayRectangle%2A> 속성의 표시 영역 컨트롤의 클라이언트 사각형을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-852">The <xref:System.Windows.Forms.Control.DisplayRectangle%2A> property returns the client rectangle of the display area of the control.</span></span> <span data-ttu-id="a1309-853">기본 컨트롤 클래스에 대 한 클라이언트 사각형에는이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-853">For the base control class, this is equal to the client rectangle.</span></span> <span data-ttu-id="a1309-854">그러나 상속 하는 컨트롤 해당 클라이언트 영역 표시 영역과 다를 경우이 변경 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-854">However, inheriting controls might want to change this if their client area differs from their display area.</span></span> <span data-ttu-id="a1309-855">표시 사각형을가 가장 작은 <xref:System.Drawing.Rectangle> 컨트롤을 포함 하 고 컨트롤을 배치 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-855">The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-856">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-856">When overriding the <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-857">또는 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-857">Alternatively, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="control.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="a1309-858">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-858"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="a1309-859"><see cref="T:System.Windows.Forms.Control" />과 해당 자식 컨트롤에서 사용하는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-859">Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-860">이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.`Dispose()`</span><span class="sxs-lookup"><span data-stu-id="a1309-860">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()`</span></span> <span data-ttu-id="a1309-861">보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-861">invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="a1309-862"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-862"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="a1309-863">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Windows.Forms.Control>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-863">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references.</span></span> <span data-ttu-id="a1309-864">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-864">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-865">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-865">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="a1309-866">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-866">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="a1309-867">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-867">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="a1309-868">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-868">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Disposing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Disposing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Disposing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Disposing : bool" Usage="System.Windows.Forms.Control.Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-869">기본 <see cref="T:System.Windows.Forms.Control" /> 클래스에 대한 삭제 작업이 진행되고 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-869">Gets a value indicating whether the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing.</span></span></summary>
        <value><span data-ttu-id="a1309-870">기본 <see cref="T:System.Windows.Forms.Control" /> 클래스에 대한 삭제 작업이 진행되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-870"><see langword="true" /> if the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-871">이 속성이 반환 하는 경우 `true`, 기본 <xref:System.Windows.Forms.Control> 클래스 삭제 작업이 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-871">When this property returns `true`, the base <xref:System.Windows.Forms.Control> class is in the process of disposing.</span></span> <span data-ttu-id="a1309-872">삭제 된 컨트롤은 더 이상 올바른 Windows 컨트롤로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-872">After the control is disposed of, it can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="a1309-873">컨트롤의 인스턴스를 삭제 하는 경우에 가비지 수집을 통해 메모리에서 제거 될 때까지 메모리에 유지 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-873">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="a1309-874">호출할 수 없습니다 컨트롤을 삭제 하는 경우 해당 <xref:System.Windows.Forms.Control.RecreateHandle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-874">When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Dock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Dock As DockStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DockStyle Dock { System::Windows::Forms::DockStyle get(); void set(System::Windows::Forms::DockStyle value); };" />
      <MemberSignature Language="F#" Value="member this.Dock : System.Windows.Forms.DockStyle with get, set" Usage="System.Windows.Forms.Control.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-875">어느 컨트롤 테두리가 부모 컨트롤에 도킹되는지를 가져오거나 설정하고 해당 부모를 기초로 컨트롤 크기를 조정하는 방법을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-875">Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="a1309-876"><see cref="T:System.Windows.Forms.DockStyle" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-876">One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span> <span data-ttu-id="a1309-877">기본값은 <see cref="F:System.Windows.Forms.DockStyle.None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-877">The default is <see cref="F:System.Windows.Forms.DockStyle.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-878">사용 하 여는 <xref:System.Windows.Forms.Control.Dock%2A> 속성 조정 방법을 정의 하려면 컨트롤은 자동으로 부모 컨트롤 크기가 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-878">Use the <xref:System.Windows.Forms.Control.Dock%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="a1309-879">예를 들어, 설정 <xref:System.Windows.Forms.Control.Dock%2A> 를 <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> 컨트롤이 부모 컨트롤의 왼쪽된 가장자리에 맞춰지고 하는 데 부모 컨트롤의 크기 조정으로 크기를 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-879">For example, setting <xref:System.Windows.Forms.Control.Dock%2A> to <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</span></span> <span data-ttu-id="a1309-880">폼의 z 축 (깊이)에 따라 폼에서 컨트롤의 시각적 계층에는 Z 순서에 컨트롤 도킹 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-880">Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</span></span>  
  
 <span data-ttu-id="a1309-881">해당 부모 컨테이너의 한쪽 가장자리에 도킹 될 수 있습니다 또는 모든 가장자리에 도킹 될 수 있습니다 컨트롤과 부모 컨테이너를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-881">A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</span></span>  
  
 <span data-ttu-id="a1309-882">설정 된 <xref:System.Windows.Forms.Control.Margin%2A> 도킹 된 컨트롤의 속성에 해당 컨테이너의 가장자리에서 컨트롤의 거리에 대 한 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-882">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-883">합니다 <xref:System.Windows.Forms.Control.Anchor%2A> 고 <xref:System.Windows.Forms.Control.Dock%2A> 속성은 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-883">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="a1309-884">한 번에 하나만 설정할 수 있습니다 하 고 우선적으로 마지막으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-884">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-885">다음 코드 예제는 <xref:System.Windows.Forms.GroupBox> 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-885">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="a1309-886">이 예에서는 만듭니다는 <xref:System.Windows.Forms.TextBox> 설정 및 해당 <xref:System.Windows.Forms.Control.Location%2A> 그룹 상자 내에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-886">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="a1309-887">그런 다음 설정의 <xref:System.Windows.Forms.Control.Text%2A> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-887">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="a1309-888">마지막으로, 그룹 상자를 설정 하 여 비활성화 된 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 `false`, 사용 하지 않도록 설정할 그룹 상자 내에 포함 된 모든 컨트롤에 이르게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-888">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a1309-889">할당된 값이 <see cref="T:System.Windows.Forms.DockStyle" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-889">The value assigned is not one of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-890">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Dock" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Dock" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-890">When overriding the <see cref="P:System.Windows.Forms.Control.Dock" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Dock" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-891">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-891">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-892">모두 재정의할 필요가 없습니다를 <see langword="get" /> 하 고 <see langword="set" /> 의 메서드는 <see cref="P:System.Windows.Forms.Control.Dock" /> 속성 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-892">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Dock" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DockStyle" />
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DockChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DockChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DockChanged;" />
      <MemberSignature Language="F#" Value="member this.DockChanged : EventHandler " Usage="member this.DockChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-893"><see cref="P:System.Windows.Forms.Control.Dock" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-893">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Dock" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-894">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Dock%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-894">This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-895">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-895">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-896">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-896">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-897"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-897">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-898">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-898">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-899">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-899">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-900">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-900">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="T:System.Windows.Forms.DockStyle" />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Function DoDragDrop (data As Object, allowedEffects As DragDropEffects) As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DragDropEffects DoDragDrop(System::Object ^ data, System::Windows::Forms::DragDropEffects allowedEffects);" />
      <MemberSignature Language="F#" Value="member this.DoDragDrop : obj * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragDropEffects" Usage="control.DoDragDrop (data, allowedEffects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a1309-901">끌 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-901">The data to drag.</span></span></param>
        <param name="allowedEffects"><span data-ttu-id="a1309-902"><see cref="T:System.Windows.Forms.DragDropEffects" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-902">One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-903">끌어서 놓기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-903">Begins a drag-and-drop operation.</span></span></summary>
        <returns><span data-ttu-id="a1309-904">끌어서 놓기 작업 동안 수행된 마지막 효과를 나타내는 <see cref="T:System.Windows.Forms.DragDropEffects" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-904">A value from the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-905">`allowedEffects` 매개 변수는 끌기 작업이 발생할 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-905">The `allowedEffects` parameter determines which drag operations can occur.</span></span> <span data-ttu-id="a1309-906">관리 되는 기본 클래스는 끌기 작업을 다른 프로세스에서 애플리케이션과 상호 운용 하는 경우 데이터 해야 하거나 (<xref:System.String>, <xref:System.Drawing.Bitmap>, 또는 <xref:System.Drawing.Imaging.Metafile>)를 구현 하는 개체 또는 <xref:System.Runtime.Serialization.ISerializable> 또는 <xref:System.Windows.Forms.IDataObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-906">If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.</span></span>  
  
 <span data-ttu-id="a1309-907">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-907">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-908"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-908">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-909">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-909">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-910">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-910">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-911">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-911">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-912">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-912">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-913">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-913">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-914">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-914">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-915">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-915">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-916">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-916">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-917">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Continue`, <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-917">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-918">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-918">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-919">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-919">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-920">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-920">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-921">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-921">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-922"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드가 모든 예외를 catch 하 고 다음과 같은 보안 또는 심각한 예외만 다시 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-922">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method catches all exceptions and rethrows only the following security or critical exceptions:</span></span>  
  
-   <span data-ttu-id="a1309-923">SecurityException</span><span class="sxs-lookup"><span data-stu-id="a1309-923">SecurityException</span></span>  
  
-   <span data-ttu-id="a1309-924">NullReferenceException</span><span class="sxs-lookup"><span data-stu-id="a1309-924">NullReferenceException</span></span>  
  
-   <span data-ttu-id="a1309-925">StackOverflowException</span><span class="sxs-lookup"><span data-stu-id="a1309-925">StackOverflowException</span></span>  
  
-   <span data-ttu-id="a1309-926">OutOfMemoryException</span><span class="sxs-lookup"><span data-stu-id="a1309-926">OutOfMemoryException</span></span>  
  
-   <span data-ttu-id="a1309-927">ThreadAbortException</span><span class="sxs-lookup"><span data-stu-id="a1309-927">ThreadAbortException</span></span>  
  
-   <span data-ttu-id="a1309-928">ExecutionEngineException</span><span class="sxs-lookup"><span data-stu-id="a1309-928">ExecutionEngineException</span></span>  
  
-   <span data-ttu-id="a1309-929">IndexOutOfRangeException</span><span class="sxs-lookup"><span data-stu-id="a1309-929">IndexOutOfRangeException</span></span>  
  
-   <span data-ttu-id="a1309-930">AccessViolationException</span><span class="sxs-lookup"><span data-stu-id="a1309-930">AccessViolationException</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-931">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-931">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-932">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-932">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-933">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-933">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-934">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-934">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-935">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-935">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-936">예제를 실행 하려면 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-936">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-937">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-937">The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-938">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-938">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-939">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-939">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-940">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-940">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-941">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-941">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-942">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-942">Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-943">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-943">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-944">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-944">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#1)]  
  
 <span data-ttu-id="a1309-945">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.DragDropEffects> 끌어서 놓기 작업에 관련 된 컨트롤 간에 데이터를 전송 하는 방법을 지정 하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-945">The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation.</span></span> <span data-ttu-id="a1309-946">이 예제에서는 폼에는 <xref:System.Windows.Forms.RichTextBox> 컨트롤 및 <xref:System.Windows.Forms.ListBox> 컨트롤과는 <xref:System.Windows.Forms.ListBox> 컨트롤 유효한 파일 이름 목록이 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-946">This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names.</span></span> <span data-ttu-id="a1309-947">사용자의 파일 이름을 끌 때 합니다 <xref:System.Windows.Forms.RichTextBox> 컨트롤, 컨트롤의 <xref:System.Windows.Forms.Control.DragEnter> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-947">When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised.</span></span> <span data-ttu-id="a1309-948">이벤트 처리기 내에서 <xref:System.Windows.Forms.DragEventArgs.Effect%2A> 의 속성을 <xref:System.Windows.Forms.DragEventArgs> 으로 초기화 됩니다 <xref:System.Windows.Forms.DragDropEffects> 파일 경로에서 참조 하는 데이터를 복사 되어야 함을 나타내려면는 <xref:System.Windows.Forms.RichTextBox> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="a1309-948">Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.</span></span>  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AllowDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.Control.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-949">이 컨트롤에서 깜빡임을 줄이거나 방지하기 위해 보조 버퍼를 사용하여 화면을 다시 그려야 하는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-949">Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</span></span></summary>
        <value><span data-ttu-id="a1309-950">이중 버퍼링을 사용하여 컨트롤의 화면을 그려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-950"><see langword="true" /> if the surface of the control should be drawn using double buffering; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-951">버퍼링 된 그래픽을 줄이거나 없앨 점진적 표시 된 화면 부분 그려서 발생 하는 깜박임을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-951">Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</span></span> <span data-ttu-id="a1309-952">버퍼링 된 그래픽 업데이트 그래픽 데이터가 버퍼에 먼저 기록 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-952">Buffered graphics require that the updated graphics data is first written to a buffer.</span></span> <span data-ttu-id="a1309-953">다음 그래픽 버퍼의 데이터가 표시 된 화면 메모리에 신속 하 게 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-953">The data in the graphics buffer is then quickly written to displayed surface memory.</span></span> <span data-ttu-id="a1309-954">표시 된 그래픽 메모리 비교적 빠른 전환에는 일반적으로 그 밖에 발생할 수 있는 깜박임을 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-954">The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-955"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> 바인딩 가능한 속성이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-955"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> is not a bindable property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.BufferedGraphicsContext" />
        <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-956">컨트롤을 두 번 클릭하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-956">Occurs when the control is double-clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-957">두 번 클릭은 운영 체제의 마우스 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-957">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="a1309-958">천천히 두 번 클릭하는 것이 아닌 두 번 클릭(double-click)으로 간주될 수 있도록 마우스 단추 클릭 간격을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-958">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="a1309-959"><xref:System.Windows.Forms.Control.Click> 컨트롤을 두 번 클릭할 때마다 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-959">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="a1309-960">예를 들어에 대 한 이벤트 처리기가 합니다 <xref:System.Windows.Forms.Control.Click> 및 <xref:System.Windows.Forms.Control.DoubleClick> 의 이벤트를 <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Control.Click> 및 <xref:System.Windows.Forms.Control.DoubleClick> 폼을 두 번 클릭 하 고 두 메서드를 호출 하는 경우 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-960">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="a1309-961">컨트롤을 두 번 클릭 하는 경우 및 컨트롤을 지원 하지 않습니다 합니다 <xref:System.Windows.Forms.Control.DoubleClick> 이벤트는 <xref:System.Windows.Forms.Control.Click> 이벤트가 두 번 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-961">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="a1309-962">설정 해야 합니다는 `StandardDoubleClick` 및 `StandardClick` 의 값 <xref:System.Windows.Forms.ControlStyles> 에 `true` 이 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-962">You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span> <span data-ttu-id="a1309-963">이러한 값을 설정할 수 있습니다 이미 `true` 기존 계획에서 상속 하는 경우 Windows Forms 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-963">These values might already be set to `true` if you are inheriting from existing Windows Forms controls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-964">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-964">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-965">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-965">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-966">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-966">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-967">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-967">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-968">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.DoubleClick> 의 이벤트를 <xref:System.Windows.Forms.ListBox> 에 나열 된 텍스트 파일을 로드 하는 <xref:System.Windows.Forms.ListBox> 에 <xref:System.Windows.Forms.TextBox> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="a1309-968">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-969">표준 Windows Forms 컨트롤에서 상속 하 고 변경 합니다 <see langword="StandardClick" /> 또는 <see langword="StandardDoubleClick" /> 의 값 <see cref="T:System.Windows.Forms.ControlStyles" /> 에 <see langword="true" /> 예기치 않은 동작이 발생할 수 있습니다 또는 영향을 주지 않습니다 전혀 컨트롤을 지원 하지 않는 경우는 <see cref="E:System.Windows.Forms.Control.Click" /> 또는 <see cref="E:System.Windows.Forms.Control.DoubleClick" />이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-969">Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.</span></span>  
  
<span data-ttu-id="a1309-970">다음 표에서 Windows Forms 컨트롤 및 이벤트 (<see cref="E:System.Windows.Forms.Control.Click" /> 또는 <see cref="E:System.Windows.Forms.Control.DoubleClick" />) 지정 된 마우스 작업에 대 한 응답에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-970">The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="a1309-971">Control</span><span class="sxs-lookup"><span data-stu-id="a1309-971">Control</span></span> 
 </term><description> <span data-ttu-id="a1309-972">마우스 왼쪽된 단추 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-972">Left Mouse Click</span></span> 
 </description><description> <span data-ttu-id="a1309-973">왼쪽된 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-973">Left Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="a1309-974">마우스 오른쪽 단추로 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-974">Right Mouse Click</span></span> 
 </description><description> <span data-ttu-id="a1309-975">마우스 오른쪽 단추 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-975">Right Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="a1309-976">마우스 가운데 단추 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-976">Middle Mouse Click</span></span> 
 </description><description> <span data-ttu-id="a1309-977">마우스 가운데 단추 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-977">Middle Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="a1309-978">XButton1 마우스 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-978">XButton1 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="a1309-979">XButton1 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-979">XButton1 Mouse Double-Click</span></span> 
 </description><description> <span data-ttu-id="a1309-980">Xbutton2를 놓으면 마우스 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-980">XButton2 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="a1309-981">Xbutton2를 놓으면 마우스 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-981">XButton2 Mouse Double-Click</span></span> 
 </description></listheader><item><term><span data-ttu-id="a1309-982"><see cref="T:System.Windows.Forms.MonthCalendar" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-982"><see cref="T:System.Windows.Forms.MonthCalendar" />,</span></span> 
 <span data-ttu-id="a1309-983"><see cref="T:System.Windows.Forms.DateTimePicker" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-983"><see cref="T:System.Windows.Forms.DateTimePicker" />,</span></span> 
 <span data-ttu-id="a1309-984"><see cref="T:System.Windows.Forms.RichTextBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-984"><see cref="T:System.Windows.Forms.RichTextBox" />,</span></span> 
 <span data-ttu-id="a1309-985"><see cref="T:System.Windows.Forms.HScrollBar" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-985"><see cref="T:System.Windows.Forms.HScrollBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> <span data-ttu-id="a1309-986">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-986">none</span></span> 
 </description><description> <span data-ttu-id="a1309-987">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-987">none</span></span> 
 </description><description> <span data-ttu-id="a1309-988">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-988">none</span></span> 
 </description><description> <span data-ttu-id="a1309-989">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-989">none</span></span> 
 </description><description> <span data-ttu-id="a1309-990">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-990">none</span></span> 
 </description><description> <span data-ttu-id="a1309-991">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-991">none</span></span> 
 </description><description> <span data-ttu-id="a1309-992">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-992">none</span></span> 
 </description><description> <span data-ttu-id="a1309-993">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-993">none</span></span> 
 </description><description> <span data-ttu-id="a1309-994">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-994">none</span></span> 
 </description><description> <span data-ttu-id="a1309-995">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-995">none</span></span> 
 </description></item><item><term><span data-ttu-id="a1309-996"><see cref="T:System.Windows.Forms.Button" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-996"><see cref="T:System.Windows.Forms.Button" />,</span></span> 
 <span data-ttu-id="a1309-997"><see cref="T:System.Windows.Forms.CheckBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-997"><see cref="T:System.Windows.Forms.CheckBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.RadioButton" /></term><description> <span data-ttu-id="a1309-998">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-998">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-999">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-999">Click, Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1000">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1000">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1001">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1001">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1002">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1002">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1003">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1003">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1004">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1004">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1005">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1005">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1006">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1006">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1007">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1007">none</span></span> 
 </description></item><item><term><span data-ttu-id="a1309-1008"><see cref="T:System.Windows.Forms.ListBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1008"><see cref="T:System.Windows.Forms.ListBox" />,</span></span> 
 <span data-ttu-id="a1309-1009"><see cref="T:System.Windows.Forms.CheckedListBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1009"><see cref="T:System.Windows.Forms.CheckedListBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.ComboBox" /></term><description> <span data-ttu-id="a1309-1010">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1010">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1011">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1011">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1012">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1012">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1013">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1013">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1014">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1014">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1015">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1015">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1016">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1016">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1017">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1017">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1018">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1018">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1019">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1019">none</span></span> 
 </description></item><item><term><span data-ttu-id="a1309-1020"><see cref="T:System.Windows.Forms.TextBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1020"><see cref="T:System.Windows.Forms.TextBox" />,</span></span> 
 <span data-ttu-id="a1309-1021"><see cref="T:System.Windows.Forms.DomainUpDown" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1021"><see cref="T:System.Windows.Forms.DomainUpDown" />,</span></span> 
 <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> <span data-ttu-id="a1309-1022">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1022">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1023">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1023">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1024">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1024">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1025">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1025">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1026">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1026">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1027">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1027">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1028">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1028">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1029">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1029">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1030">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1030">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1031">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1031">none</span></span> 
 </description></item><item><term> <span data-ttu-id="a1309-1032">\* <see cref="T:System.Windows.Forms.TreeView" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1032">\* <see cref="T:System.Windows.Forms.TreeView" />,</span></span> 
<span data-ttu-id="a1309-1033">\* <see cref="T:System.Windows.Forms.ListView" /></span><span class="sxs-lookup"><span data-stu-id="a1309-1033">\* <see cref="T:System.Windows.Forms.ListView" /></span></span></term><description> <span data-ttu-id="a1309-1034">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1034">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1035">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1035">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1036">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1036">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1037">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1037">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1038">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1038">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1039">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1039">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1040">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1040">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1041">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1041">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1042">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1042">none</span></span> 
 </description><description> <span data-ttu-id="a1309-1043">없음</span><span class="sxs-lookup"><span data-stu-id="a1309-1043">none</span></span> 
 </description></item><item><term><span data-ttu-id="a1309-1044"><see cref="T:System.Windows.Forms.ProgressBar" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1044"><see cref="T:System.Windows.Forms.ProgressBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.TrackBar" /></term><description> <span data-ttu-id="a1309-1045">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1045">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1046">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-1046">Click, Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1047">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1047">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1048">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-1048">Click, Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1049">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1049">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1050">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-1050">Click, Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1051">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1051">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1052">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-1052">Click, Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1053">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1053">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1054">클릭 하 고</span><span class="sxs-lookup"><span data-stu-id="a1309-1054">Click, Click</span></span> 
 </description></item><item><term><span data-ttu-id="a1309-1055"><see cref="T:System.Windows.Forms.Form" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1055"><see cref="T:System.Windows.Forms.Form" />,</span></span> 
 <span data-ttu-id="a1309-1056"><see cref="T:System.Windows.Forms.DataGrid" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1056"><see cref="T:System.Windows.Forms.DataGrid" />,</span></span> 
 <span data-ttu-id="a1309-1057"><see cref="T:System.Windows.Forms.Label" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1057"><see cref="T:System.Windows.Forms.Label" />,</span></span> 
 <span data-ttu-id="a1309-1058"><see cref="T:System.Windows.Forms.LinkLabel" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1058"><see cref="T:System.Windows.Forms.LinkLabel" />,</span></span> 
 <span data-ttu-id="a1309-1059"><see cref="T:System.Windows.Forms.Panel" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1059"><see cref="T:System.Windows.Forms.Panel" />,</span></span> 
 <span data-ttu-id="a1309-1060"><see cref="T:System.Windows.Forms.GroupBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1060"><see cref="T:System.Windows.Forms.GroupBox" />,</span></span> 
 <span data-ttu-id="a1309-1061"><see cref="T:System.Windows.Forms.PictureBox" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1061"><see cref="T:System.Windows.Forms.PictureBox" />,</span></span> 
 <span data-ttu-id="a1309-1062"><see cref="T:System.Windows.Forms.Splitter" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1062"><see cref="T:System.Windows.Forms.Splitter" />,</span></span> 
 <span data-ttu-id="a1309-1063"><see cref="T:System.Windows.Forms.StatusBar" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1063"><see cref="T:System.Windows.Forms.StatusBar" />,</span></span> 
 <span data-ttu-id="a1309-1064"><see cref="T:System.Windows.Forms.ToolBar" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1064"><see cref="T:System.Windows.Forms.ToolBar" />,</span></span> 
 <span data-ttu-id="a1309-1065"><see cref="T:System.Windows.Forms.TabPage" />,</span><span class="sxs-lookup"><span data-stu-id="a1309-1065"><see cref="T:System.Windows.Forms.TabPage" />,</span></span> 
 ** <see cref="T:System.Windows.Forms.TabControl" /></term><description> <span data-ttu-id="a1309-1066">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1066">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1067">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1067">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1068">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1068">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1069">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1069">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1070">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1070">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1071">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1071">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1072">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1072">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1073">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1073">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="a1309-1074">클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1074">Click</span></span> 
 </description><description> <span data-ttu-id="a1309-1075">클릭, 두 번 클릭</span><span class="sxs-lookup"><span data-stu-id="a1309-1075">Click, DoubleClick</span></span> 
 </description></item></list>  

 <span data-ttu-id="a1309-1076">\* 자식 개체 위로 마우스 포인터 여야 합니다 (<see cref="T:System.Windows.Forms.TreeNode" /> 또는 <see cref="T:System.Windows.Forms.ListViewItem" />).</span><span class="sxs-lookup"><span data-stu-id="a1309-1076">\* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).</span></span>  
  
<span data-ttu-id="a1309-1077">\* \*은 <see cref="T:System.Windows.Forms.TabControl" /> 하나 이상 있어야 <see cref="T:System.Windows.Forms.TabPage" /> 에서 해당 <see cref="P:System.Windows.Forms.TabControl.TabPages" /> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1077">\*\* The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="DpiChangedAfterParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedAfterParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedAfterParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedAfterParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedAfterParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedAfterParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedAfterParent : EventHandler " Usage="member this.DpiChangedAfterParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1078">부모 컨트롤 또는 양식의 DPI가 변경된 후에 컨트롤의 DPI 설정이 프로그래밍 방식으로 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1078">Occurs when the DPI setting for a control is changed programmatically after the DPI of its parent control or form has changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedBeforeParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedBeforeParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedBeforeParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedBeforeParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedBeforeParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedBeforeParent : EventHandler " Usage="member this.DpiChangedBeforeParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1079">부모 컨트롤 또는 양식에 대한 DPI 변경 이벤트가 발생하기 전에 컨트롤의 DPI 설정이 프로그래밍 방식으로 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1079">Occurs when the DPI setting for a control is changed programmatically before a DPI change event for its parent control or form has occurred.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1080">끌어서 놓기 작업이 완료될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1080">Occurs when a drag-and-drop operation is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1081">합니다 <xref:System.Windows.Forms.DragEventArgs.X%2A> 및 <xref:System.Windows.Forms.DragEventArgs.Y%2A> 의 속성을 <xref:System.Windows.Forms.DragEventArgs> 클라이언트 좌표가 아닌 화면 좌표에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1081">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="a1309-1082">Visual C# 코드의 다음 줄을 클라이언트에 속성을 변환 <xref:System.Drawing.Point>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1082">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1083">버전에서 이전의 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]을 추가한 경우는 <xref:System.Windows.Forms.UserControl> 사용 하 여 <xref:System.Windows.Forms.Control.DragEnter> 및 <xref:System.Windows.Forms.Control.DragDrop> Windows Form에 이벤트 끌어서 특정 항목에 <xref:System.Windows.Forms.UserControl> 디자인 타임에 `DropDrop` 및 `DropEnter` 이벤트는 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1083">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="a1309-1084">그러나 닫았다가 솔루션을 다시 합니다 <xref:System.Windows.Forms.Control.DragEnter> 고 <xref:System.Windows.Forms.Control.DragDrop> 이벤트가 다시 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1084">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="a1309-1085">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1085">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1086">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1086">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragDrop> event.</span></span> <span data-ttu-id="a1309-1087">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1087">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
        <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1088">개체를 컨트롤의 범위 안으로 끌 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1088">Occurs when an object is dragged into the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1089"><xref:System.Windows.Forms.Control.DragEnter> 처음으로 가져왔을 마우스 커서를 컨트롤 위로 끌어서 놓기 작업 중 때 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1089">The <xref:System.Windows.Forms.Control.DragEnter> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1090">버전에서 이전의 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]을 추가한 경우는 <xref:System.Windows.Forms.UserControl> 사용 하 여 <xref:System.Windows.Forms.Control.DragEnter> 및 <xref:System.Windows.Forms.Control.DragDrop> Windows Form에 이벤트 끌어서 특정 항목에 <xref:System.Windows.Forms.UserControl> 디자인 타임에 `DropDrop` 및 `DropEnter` 이벤트는 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1090">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="a1309-1091">그러나 닫았다가 솔루션을 다시 합니다 <xref:System.Windows.Forms.Control.DragEnter> 고 <xref:System.Windows.Forms.Control.DragDrop> 이벤트가 다시 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1091">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="a1309-1092">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1092">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-1093"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1093">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-1094">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1094">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-1095">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1095">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-1096">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1096">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-1097">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1097">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-1098">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1098">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1099">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1099">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1100">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1100">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1101">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1101">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-1102">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Continue`, <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1102">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-1103">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1103">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1104">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1104">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-1105">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1105">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-1106">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1106">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1107">합니다 <xref:System.Windows.Forms.DragEventArgs.X%2A> 및 <xref:System.Windows.Forms.DragEventArgs.Y%2A> 의 속성을 <xref:System.Windows.Forms.DragEventArgs> 클라이언트 좌표가 아닌 화면 좌표에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1107">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="a1309-1108">Visual C# 코드의 다음 줄을 클라이언트에 속성을 변환 <xref:System.Drawing.Point>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1108">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 <span data-ttu-id="a1309-1109">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1109">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1110">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1110">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-1111">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1111">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-1112">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1112">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-1113">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1113">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-1114">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1114">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-1115">예제를 실행 하려면 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-1115">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-1116">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1116">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-1117">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1117">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1118">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1118">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-1119">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1119">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-1120">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1120">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-1121">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1121">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-1122">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-1122">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-1123">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1123">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1124">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.DragEnter> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1124">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragEnter> event.</span></span> <span data-ttu-id="a1309-1125">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1125">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1126">컨트롤의 범위 밖으로 개체를 끌 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1126">Occurs when an object is dragged out of the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1127"><xref:System.Windows.Forms.Control.DragLeave> 현재의 끌어서 놓기 작업을 취소 하는 사용자 또는 사용자가 컨트롤에서 커서를 끌 때 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1127">The <xref:System.Windows.Forms.Control.DragLeave> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="a1309-1128">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1128">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-1129"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1129">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-1130">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1130">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-1131">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1131">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-1132">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1132">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-1133">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1133">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-1134">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1134">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1135">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1135">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1136">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1136">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1137">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1137">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-1138">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Continue`, <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1138">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-1139">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1139">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1140">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1140">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-1141">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1141">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-1142">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1142">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1143">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1143">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1144">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1144">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-1145">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1145">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-1146">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1146">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-1147">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1147">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-1148">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1148">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-1149">예제를 실행 하려면 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-1149">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-1150">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1150">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-1151">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1151">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1152">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1152">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-1153">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1153">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-1154">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1154">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-1155">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1155">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-1156">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-1156">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-1157">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1157">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1158">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1158">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragLeave> event.</span></span> <span data-ttu-id="a1309-1159">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1159">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1160">개체를 컨트롤의 범위 위로 끌 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1160">Occurs when an object is dragged over the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1161"><xref:System.Windows.Forms.Control.DragOver> 이벤트는 끌어서 놓기 작업 중 컨트롤의 범위 내에서 마우스 커서를 이동 하면 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1161">The <xref:System.Windows.Forms.Control.DragOver> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="a1309-1162">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1162">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-1163"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1163">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-1164">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1164">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-1165">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1165">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-1166">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1166">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-1167">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1167">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-1168">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1168">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1169">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1169">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1170">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1170">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1171">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1171">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-1172">경우 값 <xref:System.Windows.Forms.DragAction> 값이 `Continue`의 <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1172">If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-1173">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1173">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1174">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1174">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-1175">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1175">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-1176">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1176">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1177">합니다 <xref:System.Windows.Forms.DragEventArgs.X%2A> 및 <xref:System.Windows.Forms.DragEventArgs.Y%2A> 의 속성을 <xref:System.Windows.Forms.DragEventArgs> 클라이언트 좌표가 아닌 화면 좌표에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1177">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="a1309-1178">C# 코드의 다음 줄을 클라이언트에 속성을 변환 <xref:System.Drawing.Point>:</span><span class="sxs-lookup"><span data-stu-id="a1309-1178">The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:</span></span>  
    >   
    >  <span data-ttu-id="a1309-1179">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span><span class="sxs-lookup"><span data-stu-id="a1309-1179">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span></span>  
  
 <span data-ttu-id="a1309-1180">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1180">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1181">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1181">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-1182">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1182">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-1183">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1183">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-1184">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1184">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-1185">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1185">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-1186">예제를 실행 하려면 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-1186">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-1187">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1187">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-1188">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1188">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1189">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1189">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-1190">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1190">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-1191">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1191">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-1192">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1192">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-1193">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-1193">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-1194">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1194">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1195">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.DragOver> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1195">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragOver> event.</span></span> <span data-ttu-id="a1309-1196">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1196">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="member this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="control.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap"><span data-ttu-id="a1309-1197">그릴 비트맵입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1197">The bitmap to be drawn to.</span></span></param>
        <param name="targetBounds"><span data-ttu-id="a1309-1198">컨트롤이 렌더링되는 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1198">The bounds within which the control is rendered.</span></span></param>
        <summary><span data-ttu-id="a1309-1199">지정한 비트맵에서의 렌더링을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1199">Supports rendering to the specified bitmap.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1200"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> ActiveX 컨트롤에 대 한 메서드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1200">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method is not supported for ActiveX controls.</span></span> <span data-ttu-id="a1309-1201">재정의할 수 있습니다는 <xref:System.Windows.Forms.Control.OnPrint%2A> 이벤트 하 고 필요한 경우 사용자 지정 인쇄 논리를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1201">You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.</span></span>  
  
 <span data-ttu-id="a1309-1202"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 메서드는 다음과 같은 제한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1202">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method has the following limitations:</span></span>  
  
-   <span data-ttu-id="a1309-1203"><xref:System.ArgumentException> 큰 비트맵에 대해 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1203">An <xref:System.ArgumentException> might be thrown for large bitmaps.</span></span> <span data-ttu-id="a1309-1204">최대 허용 크기는 컴퓨터에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1204">The maximum allowable size varies by machine.</span></span>  
  
-   <span data-ttu-id="a1309-1205"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 지원 하지 않습니다는 `Ink` Windows XP Tablet PC Edition 2005 운영 체제에 대 한 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1205"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.</span></span>  
  
-   <span data-ttu-id="a1309-1206"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 자식을 그리지 않습니다 <xref:System.Windows.Forms.TextBox> 경우는 <xref:System.Windows.Forms.Control.Visible%2A> 의 속성을 <xref:System.Windows.Forms.TextBox> 로 설정 되어 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1206"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.</span></span>  
  
-   <span data-ttu-id="a1309-1207">컨테이너 내에서 컨트롤은 반대 순서로 렌더링 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1207">Controls inside containers are rendered in reverse order.</span></span>  
  
-   <span data-ttu-id="a1309-1208"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 에 대 한 완전히 작동 하지 않습니다는 <xref:System.Windows.Forms.RichTextBox>의해서만 비트맵의 테두리를 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1208"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Control.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1209">컨트롤이 사용자 상호 작용에 응답할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1209">Gets or sets a value indicating whether the control can respond to user interaction.</span></span></summary>
        <value><span data-ttu-id="a1309-1210">컨트롤이 사용자 상호 작용에 응답할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1210"><see langword="true" /> if the control can respond to user interaction; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-1211">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1211">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1212">사용 하 여는 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 런타임에 컨트롤을 사용 하지 않도록 설정 하거나 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1212">With the <xref:System.Windows.Forms.Control.Enabled%2A> property, you can enable or disable controls at run time.</span></span> <span data-ttu-id="a1309-1213">예를 들어, 애플리케이션의 현재 상태에 적용 되지 않는 컨트롤을 비활성화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1213">For example, you can disable controls that do not apply to the current state of the application.</span></span> <span data-ttu-id="a1309-1214">또한 해당 사용을 제한 하기 위한 컨트롤을 비활성화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1214">You can also disable a control to restrict its use.</span></span> <span data-ttu-id="a1309-1215">예를 들어 사용자가 클릭 하지 않도록 하려면 단추를 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1215">For example, a button can be disabled to prevent the user from clicking it.</span></span> <span data-ttu-id="a1309-1216">컨트롤을 사용 하지 않도록 설정 하는 경우에 선택할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1216">If a control is disabled, it cannot be selected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1309-1217">설정 된 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 `false` 애플리케이션의 컨트롤 상자를 사용 하지 않도록 설정 하거나 애플리케이션 창에서 포커스를 받을 방지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1217">Setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false` does not disable the application's control box or prevent the application window from receiving the focus.</span></span>  
  
 <span data-ttu-id="a1309-1218">컨테이너 컨트롤의 해당 활성화 속성이 설정 된 경우 `false`, 포함 된 모든 컨트롤도 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1218">When a container control has its enabled property set to `false`, all its contained controls are disabled, as well.</span></span> <span data-ttu-id="a1309-1219">예를 들어, 사용자가 사용 되지 않는 포함 된 컨트롤 중 하나를 클릭 하면 <xref:System.Windows.Forms.GroupBox> 제어 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1219">For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1220">스크롤할 수 있는 컨트롤을 사용 하지 않도록 설정 하는 경우 스크롤 막대 조건도 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1220">When a scrollable control is disabled, the scroll bars are also disabled.</span></span> <span data-ttu-id="a1309-1221">예를 들어, 비활성화 된 여러 줄 textbox 텍스트의 모든 줄에 표시할 스크롤할 수 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1221">For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1222">다음 코드 예제는 <xref:System.Windows.Forms.GroupBox> 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1222">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="a1309-1223">이 예에서는 만듭니다는 <xref:System.Windows.Forms.TextBox> 설정 및 해당 <xref:System.Windows.Forms.Control.Location%2A> 그룹 상자 내에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-1223">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="a1309-1224">그런 다음 설정의 <xref:System.Windows.Forms.Control.Text%2A> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1224">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="a1309-1225">마지막으로, 그룹 상자를 설정 하 여 비활성화 된 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 `false`, 사용 하지 않도록 설정할 그룹 상자 내에 포함 된 모든 컨트롤에 이르게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1225">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.EnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EnabledChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.EnabledChanged : EventHandler " Usage="member this.EnabledChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1226"><see cref="P:System.Windows.Forms.Control.Enabled" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1226">Occurs when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1227">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1227">This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-1228">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1228">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1229">다음 코드 예제에서는 두 <xref:System.Windows.Forms.RadioButton> 컨트롤을 보여 주기 위해는 <xref:System.Windows.Forms.Control.EnabledChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1229">The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the <xref:System.Windows.Forms.Control.EnabledChanged> event.</span></span> <span data-ttu-id="a1309-1230">값을 변경 단추 하나를 클릭 합니다 <xref:System.Windows.Forms.Control.Enabled%2A> 다른 단추 속성 `false` 표시는 <xref:System.Windows.Forms.MessageBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1230">Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj&#xA;override this.EndInvoke : IAsyncResult -&gt; obj" Usage="control.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="a1309-1231"><see cref="T:System.IAsyncResult" />를 호출할 때 반환되는 특정 호출 비동기 작업을 나타내는 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1231">The <see cref="T:System.IAsyncResult" /> that represents a specific invoke asynchronous operation, returned when calling <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />.</span></span></param>
        <summary><span data-ttu-id="a1309-1232">전달된 <see cref="T:System.IAsyncResult" />가 나타내는 비동기 작업의 반환 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1232">Retrieves the return value of the asynchronous operation represented by the <see cref="T:System.IAsyncResult" /> passed.</span></span></summary>
        <returns><span data-ttu-id="a1309-1233">비동기 작업을 통해 생성되는 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1233">The <see cref="T:System.Object" /> generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1234">비동기 작업이 완료 되지 않은 경우이 함수는 결과 제공 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1234">If the asynchronous operation has not been completed, this function will block until the result is available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1235">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1235">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-1236">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1236">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-1237">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1237">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1309-1238"><paramref name="asyncResult" /> 매개 변수 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-1238">The <paramref name="asyncResult" /> parameter value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1309-1239">이전에 동일한 컨트롤에서 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 메서드를 호출하여 <paramref name="asyncResult" /> 개체를 만들지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-1239">The <paramref name="asyncResult" /> object was not created by a preceding call of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> method from the same control.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Enter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Enter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Enter;" />
      <MemberSignature Language="F#" Value="member this.Enter : EventHandler " Usage="member this.Enter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1240">컨트롤이 입력되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1240">Occurs when the control is entered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1241">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-1241">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-1242">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1242">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-1243">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1243">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1244">합니다 <xref:System.Windows.Forms.Control.Enter> 하 고 <xref:System.Windows.Forms.Control.Leave> 이벤트에 의해 표시 되지를 <xref:System.Windows.Forms.Form> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1244">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="a1309-1245">이벤트에는 <xref:System.Windows.Forms.Form> 클래스를 <xref:System.Windows.Forms.Form.Activated> 및 <xref:System.Windows.Forms.Form.Deactivate> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1245">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="a1309-1246">합니다 <xref:System.Windows.Forms.Control.Enter> 고 <xref:System.Windows.Forms.Control.Leave> 이벤트는 계층적 이며 적절 한 컨트롤에 도달할 때까지 부모 체인 위/아래로 계단식으로 배열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1246">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="a1309-1247">예를 들어 있다고 가정를 <xref:System.Windows.Forms.Form> 두 개의 <xref:System.Windows.Forms.GroupBox> 컨트롤 및 각 <xref:System.Windows.Forms.GroupBox> 컨트롤에 하나 <xref:System.Windows.Forms.TextBox> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1247">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="a1309-1248">하나에서 캐럿을 이동할 때 <xref:System.Windows.Forms.TextBox> 다른를 <xref:System.Windows.Forms.Control.Leave> 에 대 한 이벤트가 발생 합니다 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.GroupBox>, 및 <xref:System.Windows.Forms.Control.Enter> 다른 이벤트가 발생 <xref:System.Windows.Forms.GroupBox> 및 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1248">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-1249">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1249">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-1250">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1250">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-1251">자세한 내용은 참조 하세요. 합니다 `WM_KILLFOCUS` "키보드 입력 참조" 섹션의 "메시지 교착 상태" 섹션에서 항목을 [에 대 한 메시지와 메시지 큐](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) 항목.</span><span class="sxs-lookup"><span data-stu-id="a1309-1251">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the [About Messages and Message Queues](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-1252">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1252">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1253">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.Enter> 의 전경과 배경 색상을 변경 하는 이벤트를 <xref:System.Windows.Forms.TextBox> 특정 조건입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1253">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FindForm" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ FindForm();" />
      <MemberSignature Language="F#" Value="member this.FindForm : unit -&gt; System.Windows.Forms.Form" Usage="control.FindForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1254">컨트롤이 포함된 폼을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1254">Retrieves the form that the control is on.</span></span></summary>
        <returns><span data-ttu-id="a1309-1255">컨트롤이 포함된 <see cref="T:System.Windows.Forms.Form" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1255">The <see cref="T:System.Windows.Forms.Form" /> that the control is on.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1256">컨트롤의 <xref:System.Windows.Forms.Control.Parent%2A> 속성 값 아닐 동일 합니다 <xref:System.Windows.Forms.Form> 반환한 <xref:System.Windows.Forms.Control.FindForm%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1256">The control's <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by <xref:System.Windows.Forms.Control.FindForm%2A> method.</span></span> <span data-ttu-id="a1309-1257">예를 들어 경우는 <xref:System.Windows.Forms.RadioButton> 컨트롤 내에 포함 된를 <xref:System.Windows.Forms.GroupBox> 컨트롤 및 <xref:System.Windows.Forms.GroupBox> 에 <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.RadioButton> 컨트롤의 <xref:System.Windows.Forms.Control.Parent%2A> 은 <xref:System.Windows.Forms.GroupBox> 및 <xref:System.Windows.Forms.GroupBox> 컨트롤의 <xref:System.Windows.Forms.Control.Parent%2A>되는 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1257">For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1258">다음 코드 예제에서는 지정 된 단추를 포함 하는 폼을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1258">The following code example finds the form that contains the specified button.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1259">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1259">for all windows to call this method.</span></span> <span data-ttu-id="a1309-1260">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1260">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; bool" Usage="control.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1261">컨트롤에 대한 입력 포커스를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1261">Sets input focus to the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-1262">입력 포커스 요청이 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1262"><see langword="true" /> if the input focus request was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1263">합니다 <xref:System.Windows.Forms.Control.Focus%2A> 메서드가 반환 되는 `true` 컨트롤이 입력된 포커스를 성공적으로 수신 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1263">The <xref:System.Windows.Forms.Control.Focus%2A> method returns `true` if the control successfully received input focus.</span></span> <span data-ttu-id="a1309-1264">컨트롤 표시 하지 않고도 모든 시각적 포커스의 입력된 포커스를 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1264">The control can have the input focus while not displaying any visual cues of having the focus.</span></span> <span data-ttu-id="a1309-1265">이 동작은 아래에 나열 된 선택할 수 없는 컨트롤에서 관찰 하는 주로 또는 모든 컨트롤에서 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1265">This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</span></span>  
  
 <span data-ttu-id="a1309-1266">컨트롤을 선택할 수 있으며 다음에 해당할 경우 입력된 포커스를 받을: 합니다 `Selectable` 의 값 <xref:System.Windows.Forms.ControlStyles> 로 설정 된 `true`, 다른 컨트롤에 포함 된와 모든 부모 컨트롤 모두 표시 되 고 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1266">A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="a1309-1267">다음 목록에 Windows Forms 컨트롤에서 선택할 수 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1267">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="a1309-1268">이러한 컨트롤에서 파생 된 컨트롤은 또한 선택할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1268">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="a1309-1269"><xref:System.Windows.Forms.LinkLabel> (컨트롤에 있는 링크가 없는 경우)</span><span class="sxs-lookup"><span data-stu-id="a1309-1269"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1270"><xref:System.Windows.Forms.Control.Focus%2A> 하위 수준 메서드는 주로 사용자 지정 컨트롤 작성자를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1270"><xref:System.Windows.Forms.Control.Focus%2A> is a low-level method intended primarily for custom control authors.</span></span> <span data-ttu-id="a1309-1271">애플리케이션 프로그래머 대신 사용 해야 합니다 <xref:System.Windows.Forms.Control.Select%2A> 메서드 또는 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> 자식 컨트롤에 대 한 속성 또는 <xref:System.Windows.Forms.Form.Activate%2A> forms에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1271">Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1272">다음 코드 예제에서는 지정 된 포커스를 설정 합니다. <xref:System.Windows.Forms.Control>이면 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1272">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1273">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1273">for all windows to call this method.</span></span> <span data-ttu-id="a1309-1274">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1274">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Focused" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.Control.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1275">컨트롤에 입력 포커스가 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1275">Gets a value indicating whether the control has input focus.</span></span></summary>
        <value><span data-ttu-id="a1309-1276">컨트롤에 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1276"><see langword="true" /> if the control has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-1277">다음 코드 예제에서는 사용 하지 않도록 설정 된 <xref:System.Windows.Forms.MenuItem> 경우를 <xref:System.Windows.Forms.TextBox> 에 포커스가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1277">The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus.</span></span> <span data-ttu-id="a1309-1278">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여는 <xref:System.Windows.Forms.TextBox> 라는 `textBox1` 두 개의 <xref:System.Windows.Forms.MenuItem> 명명 된 개체 `menuItemEdit` 및 `menuItemEditInsertCustomerInfo`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1278">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.</span></span>  
  
 [!code-cpp[Windows.FOrms.Control Members2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#4)]
 [!code-csharp[Windows.FOrms.Control Members2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#4)]
 [!code-vb[Windows.FOrms.Control Members2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-1279">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Focused" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Focused" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1279">When overriding the <see cref="P:System.Windows.Forms.Control.Focused" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Focused" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-1280">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1280">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.Control.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1281">컨트롤에서 표시되는 텍스트의 글꼴을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1281">Gets or sets the font of the text displayed by the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1282">컨트롤에 표시되는 텍스트에 적용되는 <see cref="T:System.Drawing.Font" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1282">The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</span></span> <span data-ttu-id="a1309-1283">기본값은 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1283">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1284"><xref:System.Windows.Forms.Control.Font%2A> 속성이 앰비언트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1284">The <xref:System.Windows.Forms.Control.Font%2A> property is an ambient property.</span></span> <span data-ttu-id="a1309-1285">그렇지 않은 경우, 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1285">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-1286">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1286">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-1287">앰비언트 속성에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.AmbientProperties> 클래스 또는 <xref:System.Windows.Forms.Control> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1287">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="a1309-1288">때문에 합니다 <xref:System.Drawing.Font> 변경할 수 없는 (조정할 수 없는 해당 속성 의미)에 할당할 수 있습니다 합니다 <xref:System.Windows.Forms.Control.Font%2A> 는 새 <xref:System.Drawing.Font>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1288">Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font>.</span></span> <span data-ttu-id="a1309-1289">그러나 기존 글꼴에 따라 새 글꼴을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1289">However, you can base the new font on the existing font.</span></span>  
  
 <span data-ttu-id="a1309-1290">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="a1309-1290">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="a1309-1291">다음은 기존 글꼴을 굵게 만드는 방법의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1291">The following is an example of how to adjust the existing font to make it bold:</span></span>  
  
```csharp  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1292">다음 코드 예제는 <xref:System.Windows.Forms.FontDialog> 사용자에 게 변경 합니다 <xref:System.Drawing.Font> 의 <xref:System.Windows.Forms.DateTimePicker> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="a1309-1292">The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="a1309-1293">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 사용 하 여 <xref:System.Windows.Forms.Button> 및 <xref:System.Windows.Forms.DateTimePicker> 에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1293">This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.</span></span>  
  
 [!code-cpp[Control_Font#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Font/CPP/control_font.cpp#1)]
 [!code-csharp[Control_Font#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Font/CS/control_font.cs#1)]
 [!code-vb[Control_Font#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Font/VB/control_font.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-1294">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Font" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Font" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1294">When overriding the <see cref="P:System.Windows.Forms.Control.Font" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Font" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-1295">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1295">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-1296">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.Font" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1296">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Font" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.FontChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FontChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FontChanged;" />
      <MemberSignature Language="F#" Value="member this.FontChanged : EventHandler " Usage="member this.FontChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1297"><see cref="P:System.Windows.Forms.Control.Font" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1297">Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1298">이 이벤트는 <xref:System.Windows.Forms.Control.Font%2A> 속성 중 하나를 프로그래밍 방식으로 수정 하거나 상호 작용을 통해 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1298">This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="a1309-1299">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1299">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1300">다음 코드 예제는 <xref:System.Windows.Forms.Control.FontChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1300">The following code example demonstrates the <xref:System.Windows.Forms.Control.FontChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.FontHeight" />
      <MemberSignature Language="VB.NET" Value="Protected Property FontHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int FontHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FontHeight : int with get, set" Usage="System.Windows.Forms.Control.FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1301">컨트롤의 글꼴 높이를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1301">Gets or sets the height of the font of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1302">컨트롤의 <see cref="T:System.Drawing.Font" /> 높이(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1302">The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1303">합니다 <xref:System.Windows.Forms.Control.FontHeight%2A> 속성을 컨트롤의 이외의 값으로 설정할 수 없습니다 <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> 값 또는-1입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1303">The <xref:System.Windows.Forms.Control.FontHeight%2A> property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> value, or -1.</span></span> <span data-ttu-id="a1309-1304">설정 <xref:System.Windows.Forms.Control.FontHeight%2A> -1로 효과가 캐시 된 높이 값 지우기 및 값 속성이 참조 되는 다음에 다시 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1304">Setting <xref:System.Windows.Forms.Control.FontHeight%2A> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Height" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1305">컨트롤의 전경색을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1305">Gets or sets the foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1306">컨트롤의 전경 <see cref="T:System.Drawing.Color" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1306">The foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="a1309-1307">기본값은 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1307">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1308"><xref:System.Windows.Forms.Control.ForeColor%2A> 속성이 앰비언트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1308">The <xref:System.Windows.Forms.Control.ForeColor%2A> property is an ambient property.</span></span> <span data-ttu-id="a1309-1309">그렇지 않은 경우, 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1309">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-1310">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1310">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-1311">앰비언트 속성에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.AmbientProperties> 클래스 또는 <xref:System.Windows.Forms.Control> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1311">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1312">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.BackColor%2A> 및 <xref:System.Windows.Forms.Control.ForeColor%2A> 컨트롤을 기본 시스템 색상입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1312">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="a1309-1313">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1313">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="a1309-1314">그러나이 코드 예제에서는 있다고를 <xref:System.Windows.Forms.Form> 하나 이상의 자식 컨트롤을 사용 하 여 자식 컨테이너가 컨트롤 같은 <xref:System.Windows.Forms.Panel> 또는 <xref:System.Windows.Forms.GroupBox>, 개의 고유한 자식 컨트롤은 더 잘 보여 주기는 재귀 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1314">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-1315">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1315">When overriding the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-1316">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1316">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-1317">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1317">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ForeColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ForeColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ForeColorChanged;" />
      <MemberSignature Language="F#" Value="member this.ForeColorChanged : EventHandler " Usage="member this.ForeColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1318"><see cref="P:System.Windows.Forms.Control.ForeColor" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1318">Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1319">이 이벤트는 <xref:System.Windows.Forms.Control.ForeColor%2A> 속성 중 하나를 프로그래밍 방식으로 수정 하거나 상호 작용을 통해 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1319">This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="a1309-1320">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1320">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1321">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1321">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-1322"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-1322">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-1323">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1323">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-1324">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1324">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-1325">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1325">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromChildHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromChildHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromChildHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromChildHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="a1309-1326">검색할 창 핸들(<see langword="HWND" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1326">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="a1309-1327">지정된 핸들이 포함된 컨트롤을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1327">Retrieves the control that contains the specified handle.</span></span></summary>
        <returns><span data-ttu-id="a1309-1328">지정된 핸들과 연결된 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다. 지정된 핸들이 있는 컨트롤이 없으면 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1328">The <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1329">이 메서드는 컨트롤과 연결 된 핸들을 찾을 때까지 창 핸들 부모 체인을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1329">This method searches up the window handle parent chain until it finds a handle that is associated with a control.</span></span> <span data-ttu-id="a1309-1330">이 메서드는 보다 안정적는 <xref:System.Windows.Forms.Control.FromHandle%2A> 메서드를 둘 이상의 핸들을 소유 하는 컨트롤을 올바르게 반환 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1330">This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1331">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1331">for all windows to call this method.</span></span> <span data-ttu-id="a1309-1332">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1332">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="a1309-1333">검색할 창 핸들(<see langword="HWND" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1333">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="a1309-1334">지정된 핸들과 연결된 컨트롤을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1334">Returns the control that is currently associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="a1309-1335">지정된 핸들과 연결된 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다. 지정된 핸들이 있는 컨트롤이 없으면 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1335">A <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1336">사용 된 <xref:System.Windows.Forms.Control.FromChildHandle%2A> 메서드 둘 이상의 핸들을 소유 하는 컨트롤을 반환 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1336">Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1337">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1337">for all windows to call this method.</span></span> <span data-ttu-id="a1309-1338">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1338">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetAccessibilityObjectById (objectId As Integer) As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ GetAccessibilityObjectById(int objectId);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject" Usage="control.GetAccessibilityObjectById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId"><span data-ttu-id="a1309-1339">검색할 <see langword="Int32" />를 식별하는 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1339">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</span></span></param>
        <summary><span data-ttu-id="a1309-1340">지정된 <see cref="T:System.Windows.Forms.AccessibleObject" />를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1340">Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></summary>
        <returns><span data-ttu-id="a1309-1341">지정된 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1341">The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAutoSizeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAutoSizeMode () As AutoSizeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::AutoSizeMode GetAutoSizeMode();" />
      <MemberSignature Language="F#" Value="member this.GetAutoSizeMode : unit -&gt; System.Windows.Forms.AutoSizeMode" Usage="control.GetAutoSizeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1342">해당 <see cref="P:System.Windows.Forms.Control.AutoSize" /> 속성을 사용할 수 있을 때 컨트롤이 동작하는 방법을 나타내는 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1342">Retrieves a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <returns><span data-ttu-id="a1309-1343"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1343">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildAtPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-1344">지정한 위치에 있는 자식 컨트롤을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1344">Retrieves the child control at a specified location.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="a1309-1345">컨트롤을 찾을 좌표가 포함된 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1345">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="a1309-1346">좌표는 컨트롤 클라이언트 영역의 왼쪽 위 모퉁이를 기준으로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1346">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <summary><span data-ttu-id="a1309-1347">지정된 좌표에 위치한 자식 컨트롤을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1347">Retrieves the child control that is located at the specified coordinates.</span></span></summary>
        <returns><span data-ttu-id="a1309-1348">지정된 지점에 위치한 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1348">A <see cref="T:System.Windows.Forms.Control" /> that represents the control that is located at the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1349">지정된 된 지점에 자식 컨트롤이 없는 경우는 <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> 메서드가 반환 되는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1349">If there is no child control at the specified point, the <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1350">모든 windows 컨트롤을 반환 하는 경우이 메서드를 호출 하려면 아닌 경우 컨트롤의 자식</span><span class="sxs-lookup"><span data-stu-id="a1309-1350">for all windows to call this method if the control returned is not a child of the control.</span></span> <span data-ttu-id="a1309-1351">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1351">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point, skipValue As GetChildAtPointSkip) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt, System::Windows::Forms::GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point * System.Windows.Forms.GetChildAtPointSkip -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint (pt, skipValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="a1309-1352">컨트롤을 찾을 좌표가 포함된 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1352">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="a1309-1353">좌표는 컨트롤 클라이언트 영역의 왼쪽 위 모퉁이를 기준으로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1353">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <param name="skipValue"><span data-ttu-id="a1309-1354">특정 형식의 자식 컨트롤을 무시할지를 결정하는 <see cref="T:System.Windows.Forms.GetChildAtPointSkip" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1354">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</span></span></param>
        <summary><span data-ttu-id="a1309-1355">지정한 좌표에 있는 자식 컨트롤을 검색하여 특정 형식의 자식 컨트롤을 무시할지를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1355">Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</span></span></summary>
        <returns><span data-ttu-id="a1309-1356">지정한 좌표의 자식 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1356">The child <see cref="T:System.Windows.Forms.Control" /> at the specified coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetContainerControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainerControl () As IContainerControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IContainerControl ^ GetContainerControl();" />
      <MemberSignature Language="F#" Value="member this.GetContainerControl : unit -&gt; System.Windows.Forms.IContainerControl" Usage="control.GetContainerControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1357">해당 컨트롤의 부모 컨트롤 체인까지 다음 <see cref="T:System.Windows.Forms.ContainerControl" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1357">Returns the next <see cref="T:System.Windows.Forms.ContainerControl" /> up the control's chain of parent controls.</span></span></summary>
        <returns><span data-ttu-id="a1309-1358"><see cref="T:System.Windows.Forms.IContainerControl" />의 부모를 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1358">An <see cref="T:System.Windows.Forms.IContainerControl" />, that represents the parent of the <see cref="T:System.Windows.Forms.Control" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1359">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1359">for all windows to call this method.</span></span> <span data-ttu-id="a1309-1360">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1360">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="T:System.Windows.Forms.IContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextControl (ctl As Control, forward As Boolean) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetNextControl(System::Windows::Forms::Control ^ ctl, bool forward);" />
      <MemberSignature Language="F#" Value="member this.GetNextControl : System.Windows.Forms.Control * bool -&gt; System.Windows.Forms.Control" Usage="control.GetNextControl (ctl, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="a1309-1361">검색을 시작하는 데 사용할 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1361">The <see cref="T:System.Windows.Forms.Control" /> to start the search with.</span></span></param>
        <param name="forward"><span data-ttu-id="a1309-1362">탭 순서에서 앞으로 검색하면 <see langword="true" />이고, 뒤로 검색하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1362"><see langword="true" /> to search forward in the tab order; <see langword="false" /> to search backward.</span></span></param>
        <summary><span data-ttu-id="a1309-1363">자식 컨트롤의 탭 순서에서 앞뒤에 있는 다음 컨트롤을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1363">Retrieves the next control forward or back in the tab order of child controls.</span></span></summary>
        <returns><span data-ttu-id="a1309-1364">탭 순서에서 다음 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1364">The next <see cref="T:System.Windows.Forms.Control" /> in the tab order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1365"><xref:System.Windows.Forms.Control.GetNextControl%2A> 메서드는 탭 순서에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1365">The <xref:System.Windows.Forms.Control.GetNextControl%2A> method is dependent on tab order.</span></span> <span data-ttu-id="a1309-1366">사용 하 여 중첩 된 컨트롤을 포함 하 여 양식의 모든 컨트롤을 반복 하 여 <xref:System.Windows.Forms.Control.Controls%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1366">To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="a1309-1367">가져오거나 설정할 컨테이너 컨트롤의 활성 컨트롤을 사용 하 여는 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1367">To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredSize (proposedSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Size GetPreferredSize(System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.GetPreferredSize proposedSize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(System.Drawing.Size)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="proposedSize"><span data-ttu-id="a1309-1368">컨트롤의 사용자 지정 크기 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1368">The custom-sized area for a control.</span></span></param>
        <summary><span data-ttu-id="a1309-1369">컨트롤이 들어갈 수 있는 사각형 영역의 크기를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1369">Retrieves the size of a rectangular area into which a control can be fitted.</span></span></summary>
        <returns><span data-ttu-id="a1309-1370">사각형의 너비와 높이를 나타내는 <see cref="T:System.Drawing.Size" /> 형식의 정렬된 쌍입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1370">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1371">동작 <xref:System.Windows.Forms.Control.GetPreferredSize%2A> 컨트롤에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1371">The behavior of <xref:System.Windows.Forms.Control.GetPreferredSize%2A> differs by control.</span></span> <span data-ttu-id="a1309-1372"><xref:System.Windows.Forms.Control.LayoutEngine%2A> 컨트롤에 반환 되는 크기를 할당 하는 일을 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1372">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control.</span></span> <span data-ttu-id="a1309-1373">에 지정 된 제약 조건 보다 큰 크기를 반환할 수 있습니다 합니다 `proposedSize` 매개 변수를 하지만 `proposedSize` 감소 하는 제약 조건으로 감소 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1373">You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases.</span></span> <span data-ttu-id="a1309-1374">예를 들어 `GetPreferredSize(new Size(100, 0))` 보다 더 광범위 한 안 `GetPreferredSize(new Size(200, 0))`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1374">For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`.</span></span> <span data-ttu-id="a1309-1375">예외는 `proposedSize` 0 또는 `Size.Empty`, 비제한으로 정의 된.</span><span class="sxs-lookup"><span data-stu-id="a1309-1375">The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle&#xA;override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="control.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds"><span data-ttu-id="a1309-1376">디스플레이 범위를 검색할 영역을 지정하는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1376">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds.</span></span></param>
        <param name="factor"><span data-ttu-id="a1309-1377">컨트롤 범위의 높이 및 너비입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1377">The height and width of the control's bounds.</span></span></param>
        <param name="specified"><span data-ttu-id="a1309-1378">크기 및 위치를 정의하는 데 사용할 컨트롤 범위를 지정하는 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1378">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="a1309-1379">컨트롤의 배율이 조정되는 범위를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1379">Retrieves the bounds within which the control is scaled.</span></span></summary>
        <returns><span data-ttu-id="a1309-1380">컨트롤의 크기가 조정되는 범위를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1380">A <see cref="T:System.Drawing.Rectangle" /> representing the bounds within which the control is scaled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1381">이 호출 하는 도우미 메서드입니다 <xref:System.Windows.Forms.Control.ScaleControl%2A> 컨트롤 크기가 조정 되는 범위를 검색할 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1381">This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled.</span></span> <span data-ttu-id="a1309-1382">다시 사용 하려면이 메서드를 재정의할 수 있습니다는 <xref:System.Windows.Forms.Control.ScaleControl%2A> 범위를 직접 제공 해야 하지만 논리를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1382">You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds.</span></span> <span data-ttu-id="a1309-1383">기본 구현은 계정으로 사용 하는 크기 조정 된 범위를 반환 합니다 `specified` 범위 컨트롤을 최상위 수준에 있는지 여부를 고정 되어 너비 또는 자동 크기 조정 및 컨트롤에 있을 수 있는 장식을 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1383">The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyle (flag As ControlStyles) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetStyle(System::Windows::Forms::ControlStyles flag);" />
      <MemberSignature Language="F#" Value="member this.GetStyle : System.Windows.Forms.ControlStyles -&gt; bool" Usage="control.GetStyle flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="a1309-1384">값을 반환할 <see cref="T:System.Windows.Forms.ControlStyles" /> 비트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1384">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to return the value from.</span></span></param>
        <summary><span data-ttu-id="a1309-1385">컨트롤에 대해 지정된 컨트롤 스타일 비트의 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1385">Retrieves the value of the specified control style bit for the control.</span></span></summary>
        <returns><span data-ttu-id="a1309-1386">지정된 컨트롤 스타일 비트가 <see langword="true" />로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1386"><see langword="true" /> if the specified control style bit is set to <see langword="true" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1387">컨트롤 스타일 비트 플래그는 지원 되는 동작을 분류 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1387">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="a1309-1388">컨트롤을 호출 하 여 스타일을 설정할 수 있습니다.는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드와 해당 전달 <xref:System.Windows.Forms.ControlStyles> 비트 및 비트를 설정는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1388">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to.</span></span> <span data-ttu-id="a1309-1389">지정 된 할당 된 값을 확인 하려면 <xref:System.Windows.Forms.ControlStyles> 비트를 사용 하 여는 <xref:System.Windows.Forms.Control.GetStyle%2A> 메서드와 전달은 <xref:System.Windows.Forms.ControlStyles> 멤버 평가를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1389">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1390">다음 코드 예제는 이중 버퍼링 관련된 스타일의 값에 대 한 비트를 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1390">The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-1391">이 예제에서는 반환 `true` 모든 스타일 비트가 설정 된 경우에 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1391">This example returns `true` only if all the style bits are set to `true`.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#4)]
 [!code-csharp[Windows.Forms.ControlMembers6#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#4)]
 [!code-vb[Windows.Forms.ControlMembers6#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetTopLevel" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTopLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetTopLevel();" />
      <MemberSignature Language="F#" Value="member this.GetTopLevel : unit -&gt; bool" Usage="control.GetTopLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1392">컨트롤이 최상위 컨트롤인지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1392">Determines if the control is a top-level control.</span></span></summary>
        <returns><span data-ttu-id="a1309-1393">해당 컨트롤이 최상위 컨트롤이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1393"><see langword="true" /> if the control is a top-level control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1394">끌기 작업을 수행하는 동안 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1394">Occurs during a drag operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1395"><xref:System.Windows.Forms.Control.GiveFeedback> 는 끌어서 놓기 작업이 시작 될 때 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1395">The <xref:System.Windows.Forms.Control.GiveFeedback> event is raised when a drag-and-drop operation is started.</span></span> <span data-ttu-id="a1309-1396">사용 하 여는 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 끌기 이벤트의 소스를 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1396">With the <xref:System.Windows.Forms.Control.GiveFeedback> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="a1309-1397">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1397">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-1398"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1398">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-1399">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1399">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-1400">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1400">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-1401">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1401">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-1402">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1402">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-1403">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1403">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1404">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1404">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-1405">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1405">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1406">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1406">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-1407">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Continue`, <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1407">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-1408">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1408">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-1409">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1409">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-1410">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1410">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-1411">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1411">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-1412">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1412">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1413">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1413">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-1414">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1414">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-1415">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1415">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-1416">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1416">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-1417">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1417">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-1418">예제를 실행 하려면 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-1418">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-1419">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1419">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-1420">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1420">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1421">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1421">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-1422">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1422">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-1423">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1423">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-1424">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1424">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-1425">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-1425">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-1426">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1426">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="a1309-1427">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1427">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.GiveFeedback> event.</span></span> <span data-ttu-id="a1309-1428">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1428">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : EventHandler " Usage="member this.GotFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1429">컨트롤이 포커스를 받으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1429">Occurs when the control receives focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1430">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-1430">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-1431">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1431">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-1432">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1432">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="a1309-1433">**참고** 는 <xref:System.Windows.Forms.Control.GotFocus> 고 <xref:System.Windows.Forms.Control.LostFocus> WM_KILLFOCUS 및 WM_SETFOCUS Windows 메시지에 연결 된 하위 수준 포커스 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1433">**Note** The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="a1309-1434">일반적으로 <xref:System.Windows.Forms.Control.GotFocus> 하 고 <xref:System.Windows.Forms.Control.LostFocus> 이벤트는 업데이트 하는 경우에 사용 됩니다 <xref:System.Windows.Forms.UICues> 때나 사용자 지정 컨트롤을 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1434">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="a1309-1435">대신 합니다 <xref:System.Windows.Forms.Control.Enter> 및 <xref:System.Windows.Forms.Control.Leave> 제외 하 고 모든 컨트롤에 대 한 이벤트를 사용 해야 합니다 <xref:System.Windows.Forms.Form> 클래스를 사용 하는 <xref:System.Windows.Forms.Form.Activated> 및 <xref:System.Windows.Forms.Form.Deactivate> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-1435">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="a1309-1436">에 대 한 자세한 내용은 <xref:System.Windows.Forms.Control.GotFocus> 및 <xref:System.Windows.Forms.Control.LostFocus> 이벤트를 참조 합니다 [WM_SETFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx) 및 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 항목.</span><span class="sxs-lookup"><span data-stu-id="a1309-1436">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx) and [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-1437">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1437">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-1438">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1438">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-1439">자세한 내용은 참조는 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1439">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-1440">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1440">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1441">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1441">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1442">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.GotFocus> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1442">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span> <span data-ttu-id="a1309-1443">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1443">This report helps you to learn when the event occurs and can assist you in debugging.</span></span>  
  
 <span data-ttu-id="a1309-1444">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1444">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1445">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.GotFocus> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1445">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#47)]
 [!code-vb[System.Windows.Forms.EventExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
        <altmember cref="E:System.Windows.Forms.Form.Activated" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Control.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1446">컨트롤이 바인딩되는 창 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1446">Gets the window handle that the control is bound to.</span></span></summary>
        <value><span data-ttu-id="a1309-1447">컨트롤의 창 핸들(<see cref="T:System.IntPtr" />)이 포함된 <see langword="HWND" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1447">An <see cref="T:System.IntPtr" /> that contains the window handle (<see langword="HWND" />) of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1448">값을 <xref:System.Windows.Forms.Control.Handle%2A> 속성은 Windows를 `HWND`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1448">The value of the <xref:System.Windows.Forms.Control.Handle%2A> property is a Windows `HWND`.</span></span> <span data-ttu-id="a1309-1449">핸들을 아직 만들지 않은 경우이 속성을 참조 하면 만들려는 핸들을 강제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1449">If the handle has not yet been created, referencing this property will force the handle to be created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1450">다음 코드 예제는 <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.Handle%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1450">The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> and the <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="a1309-1451">실행 하려면이 예제에서는 폼에 다음 코드를 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1451">To run the example paste the following code in a form.</span></span> <span data-ttu-id="a1309-1452">라는 두 개의 단추를 추가 `Button1` 및 `Button2` 양식으로 해당 이벤트 처리기에 연결 된 모든 이벤트를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1452">Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleCreated;" />
      <MemberSignature Language="F#" Value="member this.HandleCreated : EventHandler " Usage="member this.HandleCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1453">컨트롤의 핸들을 만들면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1453">Occurs when a handle is created for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1454">핸들을 만들 때의 <xref:System.Windows.Forms.Control> 처음으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1454">A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time.</span></span> <span data-ttu-id="a1309-1455">예를 들어 경우는 <xref:System.Windows.Forms.Control> 만들어집니다에 <xref:System.Windows.Forms.Control.Visible%2A> 로 설정 `false`, <xref:System.Windows.Forms.Control.HandleCreated> 까지 이벤트를 발생 하지 것입니다 <xref:System.Windows.Forms.Control.Visible%2A> 로 설정 되어 `true`.</span><span class="sxs-lookup"><span data-stu-id="a1309-1455">For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the <xref:System.Windows.Forms.Control.HandleCreated> event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="a1309-1456">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1456">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1457">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1457">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1458">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.HandleCreated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1458">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span> <span data-ttu-id="a1309-1459">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1459">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1460">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1460">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1461">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1461">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1462">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.HandleCreated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1462">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#37)]
 [!code-vb[System.Windows.Forms.EventExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleDestroyed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleDestroyed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleDestroyed;" />
      <MemberSignature Language="F#" Value="member this.HandleDestroyed : EventHandler " Usage="member this.HandleDestroyed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1463">컨트롤의 핸들이 소멸될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1463">Occurs when the control's handle is in the process of being destroyed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1464">중 합니다 <xref:System.Windows.Forms.Control.HandleDestroyed> 이벤트가 발생할 때는 컨트롤이 여전히 유효한 Windows 컨트롤 및 <xref:System.Windows.Forms.Control.Handle%2A> 를 호출 하 여 다시 만들 수 있습니다는 <xref:System.Windows.Forms.Control.RecreateHandle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1464">During the <xref:System.Windows.Forms.Control.HandleDestroyed> event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 <span data-ttu-id="a1309-1465">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1465">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1466">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1466">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1467">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.HandleDestroyed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1467">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span> <span data-ttu-id="a1309-1468">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1468">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1469">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1469">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1470">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1470">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1471">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.HandleDestroyed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1471">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#38)]
 [!code-vb[System.Windows.Forms.EventExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Windows.Forms.Control.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1472">컨트롤에 자식 컨트롤이 하나 이상 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1472">Gets a value indicating whether the control contains one or more child controls.</span></span></summary>
        <value><span data-ttu-id="a1309-1473">컨트롤에 자식 컨트롤이 하나 이상 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1473"><see langword="true" /> if the control contains one or more child controls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1474">경우는 <xref:System.Windows.Forms.Control.Controls%2A> 컬렉션에는 <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> 0 보다 큰를 <xref:System.Windows.Forms.Control.HasChildren%2A> 속성은 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1474">If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the <xref:System.Windows.Forms.Control.HasChildren%2A> property will return `true`.</span></span> <span data-ttu-id="a1309-1475">에 액세스 하는 <xref:System.Windows.Forms.Control.HasChildren%2A> 속성의 생성을 사용 하지 않는다는 <xref:System.Windows.Forms.Control.ControlCollection> 컨트롤에 자식이 없는 경우이 속성을 참조 하므로 때 제공할 수 성능 이점을 컨트롤의 트리를 탐색 하기.</span><span class="sxs-lookup"><span data-stu-id="a1309-1475">Accessing the <xref:System.Windows.Forms.Control.HasChildren%2A> property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1476">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.BackColor%2A> 및 <xref:System.Windows.Forms.Control.ForeColor%2A> 컨트롤을 기본 시스템 색상입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1476">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="a1309-1477">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1477">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="a1309-1478">그러나이 코드 예제에서는 있다고를 <xref:System.Windows.Forms.Form> 하나 이상의 자식 컨트롤을 사용 하 여 자식 컨테이너가 컨트롤 같은 <xref:System.Windows.Forms.Panel> 또는 <xref:System.Windows.Forms.GroupBox>, 개의 고유한 자식 컨트롤은 더 잘 보여 주기는 재귀 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1478">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Height : int with get, set" Usage="System.Windows.Forms.Control.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1479">컨트롤의 높이를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1479">Gets or sets the height of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1480">컨트롤의 높이(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1480">The height of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1481">변경 합니다 <xref:System.Windows.Forms.Control.Height%2A> 및 <xref:System.Windows.Forms.Control.Top%2A> 속성 값을 <xref:System.Windows.Forms.Control.Bottom%2A> 변경 하려면 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1481">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1482">파생된 컨트롤의 최소 높이 <xref:System.Windows.Forms.Splitter> 은 1 픽셀입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1482">The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel.</span></span> <span data-ttu-id="a1309-1483">에 대 한 기본 높이 <xref:System.Windows.Forms.Splitter> 컨트롤은 세 가지 픽셀입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1483">The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels.</span></span> <span data-ttu-id="a1309-1484">높이 설정 합니다 <xref:System.Windows.Forms.Splitter> 기본 높이 속성 값을 다시 설정 됩니다 하나 보다 작은 값으로 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1484">Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1485">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1485">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-1486">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1486">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
        <altmember cref="P:System.Drawing.Size.Height" />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HelpRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequested As HelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HelpEventHandler ^ HelpRequested;" />
      <MemberSignature Language="F#" Value="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " Usage="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1487">사용자가 컨트롤에 대한 도움말을 요청하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1487">Occurs when the user requests help for a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1488"><xref:System.Windows.Forms.Control.HelpRequested> 일반적으로 이벤트는 사용자가 F1 키 또는 연결된 상황에 맞는 도움말 단추를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1488">The <xref:System.Windows.Forms.Control.HelpRequested> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</span></span>  
  
 <span data-ttu-id="a1309-1489">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1489">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1490">다음 코드 예제에서는 처리 된 <xref:System.Windows.Forms.Control.HelpRequested> 4 개 주소 필드가 포함 된 폼에서 사용자 지정 도움말 콘텐츠를 표시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1490">The following code example demonstrates handling the <xref:System.Windows.Forms.Control.HelpRequested> event to display custom Help content on a form containing four address fields.</span></span> <span data-ttu-id="a1309-1491"><xref:System.Windows.Forms.Control.HelpRequested> 주소 필드에 포커스가 있는 F1 키를 눌러 또는 상황에 맞는 도움말 단추를 사용 하 고 주소 필드에서 도움말 커서를 클릭 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1491">The <xref:System.Windows.Forms.Control.HelpRequested> event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field.</span></span> <span data-ttu-id="a1309-1492"><xref:System.Windows.Forms.HelpEventArgs.Handled%2A> 나타내려면 true로 설정 합니다 `HelpRequested` 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1492">The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled.</span></span> <span data-ttu-id="a1309-1493">또한 예제에 도움말 텍스트를 저장 합니다 <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1493">The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CPP/helpevent.cpp#1)]
 [!code-csharp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CS/helpevent.cs#1)]
 [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/VB/helpevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
        <altmember cref="T:System.Windows.Forms.HelpProvider" />
        <altmember cref="T:System.Windows.Forms.Help" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="control.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1494">사용자에게 컨트롤을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1494">Conceals the control from the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1495">설정에 해당 하는 컨트롤을 숨기는 <xref:System.Windows.Forms.Control.Visible%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1495">Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`.</span></span> <span data-ttu-id="a1309-1496">후는 <xref:System.Windows.Forms.Control.Hide%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Control.Visible%2A> 속성의 값을 반환 `false` 될 때까지 <xref:System.Windows.Forms.Control.Show%2A> 메서드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1496">After the <xref:System.Windows.Forms.Control.Hide%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1497">다음 코드 예제는 단추를 클릭할 때 CTRL 키를 누르는 경우 단추를 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1497">The following code example hides a button if the CTRL key is pressed when the button is clicked.</span></span> <span data-ttu-id="a1309-1498">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Button> 라는 `button1` 에 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1498">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImeMode ImeMode { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeMode : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1499">컨트롤의 IME(입력기) 모드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1499">Gets or sets the Input Method Editor (IME) mode of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1500"><see cref="T:System.Windows.Forms.ImeMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1500">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span> <span data-ttu-id="a1309-1501">기본값은 <see cref="F:System.Windows.Forms.ImeMode.Inherit" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1501">The default is <see cref="F:System.Windows.Forms.ImeMode.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1502">IME는 표준 키보드를 사용 하 여 사용자가 복잡 한 예: 일본어 간지 문자 기호를 입력할 수 있는 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1502">An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</span></span> <span data-ttu-id="a1309-1503">합니다 <xref:System.Windows.Forms.Control.ImeMode%2A> 일반적으로 속성 <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> 에 대 한는 <xref:System.Windows.Forms.TextBox> 만 숫자 값을 입력 하는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1503">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is typically set to <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values.</span></span> <span data-ttu-id="a1309-1504">합니다 <xref:System.Windows.Forms.Control.ImeMode%2A> 속성 값으로 설정 됩니다 <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> 에 대 한는 <xref:System.Windows.Forms.Form> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1504">The <xref:System.Windows.Forms.Control.ImeMode%2A> property value is set to <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> for the <xref:System.Windows.Forms.Form> class.</span></span>  
  
 <span data-ttu-id="a1309-1505">대부분의 클래스 직접적 입력 방법 편집기를 지원 하거나, IME에서 직접 입력을 허용 하려면이 속성의 값을 설정 합니다 <xref:System.Windows.Forms.ImeMode.NoControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1505">Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode.NoControl>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1309-1506">사용자가 대화형으로 변경할 수는 <xref:System.Windows.Forms.Control.ImeMode%2A> 프로그래밍 방식으로 설정 하지 않은 경우 <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1506">The user can interactively change the <xref:System.Windows.Forms.Control.ImeMode%2A> unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1309-1507">이 경우 사용자는 IME를 사용 하도록 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1507">In this case, the user will not be able to use the IME.</span></span>  
>   
>  <span data-ttu-id="a1309-1508"><xref:System.Windows.Forms.Control.ImeMode%2A> 전역 입력된 모드를 적용 되 면 속성은 Windows 8에서 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1508">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is ignored on Windows 8 when the global input mode is in effect.</span></span> <span data-ttu-id="a1309-1509">자세한 내용은 참조 하세요. [스위치 텍스트 입력에서에서 변경 스레드별 사용자별](https://go.microsoft.com/fwlink/?LinkID=256509)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1509">For more info, see [Switch Text Input Changed from Per-Thread to Per-User](https://go.microsoft.com/fwlink/?LinkID=256509).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a1309-1510">할당된 값이 <see cref="T:System.Windows.Forms.ImeMode" /> 열거형 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-1510">The assigned value is not one of the <see cref="T:System.Windows.Forms.ImeMode" /> enumeration values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeModeBase" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ImeModeBase As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode ImeModeBase { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeModeBase : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1511">컨트롤의 IME 모드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1511">Gets or sets the IME mode of a control.</span></span></summary>
        <value><span data-ttu-id="a1309-1512">컨트롤의 IME 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1512">The IME mode of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ImeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ImeModeChanged : EventHandler " Usage="member this.ImeModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1513"><see cref="P:System.Windows.Forms.Control.ImeMode" /> 속성이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1513">Occurs when the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1514">이 이벤트는 <xref:System.Windows.Forms.Control.ImeMode%2A> 속성 중 하나를 프로그래밍 방식으로 수정 하거나 상호 작용을 통해 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1514">This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="a1309-1515">입력기를 지원 하지 않는 컨트롤은이 이벤트를 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1515">Controls that do not support Input Method Managers will never raise this event.</span></span>  
  
 <span data-ttu-id="a1309-1516">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1516">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1517">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1517">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-1518"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-1518">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-1519">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1519">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-1520">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1520">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-1521">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1521">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InitLayout" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitLayout ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitLayout();" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : unit -&gt; unit&#xA;override this.InitLayout : unit -&gt; unit" Usage="control.InitLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1522">컨트롤을 다른 컨테이너에 추가한 후 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1522">Called after the control has been added to another container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1523"><xref:System.Windows.Forms.Control.InitLayout%2A> 컨테이너에 컨트롤을 추가한 후 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1523">The <xref:System.Windows.Forms.Control.InitLayout%2A> method is called immediately after adding a control to a container.</span></span> <span data-ttu-id="a1309-1524"><xref:System.Windows.Forms.Control.InitLayout%2A> 메서드 수 있게 하 여 해당 컨테이너에 따라 레이아웃 상태로 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1524">The <xref:System.Windows.Forms.Control.InitLayout%2A> method enables a control to initialize its layout state based on its container.</span></span> <span data-ttu-id="a1309-1525">예를 들어, 일반적으로 적용 고정 및 도킹 컨트롤에 <xref:System.Windows.Forms.Control.InitLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1525">For example, you would typically apply anchoring and docking to the control in the <xref:System.Windows.Forms.Control.InitLayout%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-1526">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.InitLayout" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.InitLayout" /> 메서드 컨트롤이 올바르게 표시 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1526">When overriding <see cref="M:System.Windows.Forms.Control.InitLayout" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.InitLayout" /> method so that the control is displayed correctly.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-1527">특정 컨트롤 영역을 무효화하고 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1527">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="control.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-1528">컨트롤의 전체 화면을 무효화하고 컨트롤을 다시 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1528">Invalidates the entire surface of the control and causes the control to be redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1529">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1529">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1530">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1530">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1531">이미지 또는 이미지 파일을 폼으로 끌어 해당 지점에 표시 되 게 하는 사용자를 삭제할는 다음 코드 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1531">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="a1309-1532"><xref:System.Windows.Forms.Control.OnPaint%2A> 는 다음에 다시 그릴 때까지 유지 하는 이미지가 고, 그렇지 않으면 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1532">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="a1309-1533"><xref:System.Windows.Forms.Control.DragEnter> 이벤트 처리 메서드를 폼으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1533">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="a1309-1534">합니다 <xref:System.Windows.Forms.Control.DragDrop> 하는 경우 이벤트 처리 메서드를 폼에 이미지를 표시는 <xref:System.Drawing.Image> 데이터로 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1534">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="a1309-1535">때문에 <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> 하 고 <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> 값은 화면 좌표를 사용 하 여는 <xref:System.Windows.Forms.Control.PointToClient%2A> 클라이언트 좌표로 변환 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a1309-1535">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : bool -&gt; unit" Usage="control.Invalidate invalidateChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren"><span data-ttu-id="a1309-1536">컨트롤의 자식 컨트롤을 무효화하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1536"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-1537">특정 컨트롤 영역을 무효화하고 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1537">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="a1309-1538">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1538">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1539">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1539">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1540">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1540">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.Invalidate rc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="a1309-1541">무효화할 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1541">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <summary><span data-ttu-id="a1309-1542">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1542">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1543">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1543">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1544">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1544">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region -&gt; unit" Usage="control.Invalidate region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="a1309-1545">무효화할 <see cref="T:System.Drawing.Region" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1545">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <summary><span data-ttu-id="a1309-1546">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1546">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1547">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1547">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1548">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1548">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle, invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle * bool -&gt; unit" Usage="control.Invalidate (rc, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="a1309-1549">무효화할 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1549">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="a1309-1550">컨트롤의 자식 컨트롤을 무효화하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1550"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-1551">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1551">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="a1309-1552">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1552">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1553">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1553">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1554">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1554">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region * bool -&gt; unit" Usage="control.Invalidate (region, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="a1309-1555">무효화할 <see cref="T:System.Drawing.Region" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1555">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="a1309-1556">컨트롤의 자식 컨트롤을 무효화하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1556"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-1557">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1557">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="a1309-1558">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1558">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1559">호출 된 <xref:System.Windows.Forms.Control.Invalidate%2A> 동기 그리기를 강제 적용 하려면 호출; 메서드를 동기 그리기 강제로 적용 하지 않습니다는 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출한 후는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1559">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="a1309-1560">이 메서드 매개 변수 없이 호출 되 면 전체 클라이언트 영역을 업데이트 영역에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1560">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Invalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Invalidated As InvalidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::InvalidateEventHandler ^ Invalidated;" />
      <MemberSignature Language="F#" Value="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " Usage="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1561">컨트롤을 다시 그려야 할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1561">Occurs when a control's display requires redrawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1562">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1562">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1563">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1563">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1564">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.Invalidated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1564">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span> <span data-ttu-id="a1309-1565">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1565">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1566">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1566">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1567">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1567">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1568">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.Invalidated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1568">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#40)]
 [!code-vb[System.Windows.Forms.EventExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-1569">컨트롤의 내부 창 핸들이 있는 스레드에서 대리자를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1569">Executes a delegate on the thread that owns the control's underlying window handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate -&gt; obj" Usage="control.Invoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="a1309-1570">컨트롤의 스레드 컨텍스트에서 호출될 메서드가 있는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1570">A delegate that contains a method to be called in the control's thread context.</span></span></param>
        <summary><span data-ttu-id="a1309-1571">컨트롤의 내부 창 핸들이 있는 스레드에서 지정된 대리자를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1571">Executes the specified delegate on the thread that owns the control's underlying window handle.</span></span></summary>
        <returns><span data-ttu-id="a1309-1572">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1572">The return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1573">대리자는 C 또는 c + + 언어의 함수 포인터와 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1573">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="a1309-1574">대리자를 대리자 개체 내의 메서드에 대 한 참조를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1574">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="a1309-1575">대리자 개체는 참조 된 메서드를 호출 하는 코드 다음 전달할 수 있습니다 하 고 컴파일 시간에는 메서드를 호출할 수 있습니다 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1575">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="a1309-1576">C 또는 c + + 함수 포인터와 달리 대리자는 개체 지향이 고 형식이 안전 하며 더 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1576">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="a1309-1577"><xref:System.Windows.Forms.Control.Invoke%2A> 메서드 검색 컨트롤의 부모 체인 컨트롤이 나 창에 있는 폼을 찾을 때까지 현재 컨트롤의 내부 창 핸들이 아직 존재 하지 않는 경우를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1577">The <xref:System.Windows.Forms.Control.Invoke%2A> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</span></span> <span data-ttu-id="a1309-1578">적절 한 핸들을 찾지는 <xref:System.Windows.Forms.Control.Invoke%2A> 메서드는 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1578">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.Invoke%2A> method will throw an exception.</span></span> <span data-ttu-id="a1309-1579">호출 하는 동안 발생 하는 예외를 호출자로 다시 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1579">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1580">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1580">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-1581">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1581">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-1582">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1582">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="a1309-1583">대리자의 인스턴스 수 <xref:System.EventHandler>,이 경우 sender 매개 변수는이 컨트롤에 포함 됩니다 및 이벤트 매개 변수 사용 될 <xref:System.EventArgs.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1583">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1309-1584">대리자의 인스턴스 수도 있습니다 <xref:System.Windows.Forms.MethodInvoker>, 또는 void 매개 변수 목록을 사용 하는 다른 모든 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1584">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="a1309-1585">에 대 한 호출을 <xref:System.EventHandler> 또는 <xref:System.Windows.Forms.MethodInvoker> 대리자 보다 빨리 다른 유형의 대리자에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1585">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1586">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태가 되는 경우 예외가 throw 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1586">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1587">다음 코드 예제에서는 대리자를 포함 하는 컨트롤을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1587">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="a1309-1588">대리자 목록 상자에 항목을 추가 하는 메서드를 캡슐화 하 고이 메서드는 폼의 기본 핸들이 있는 스레드에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1588">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form.</span></span> <span data-ttu-id="a1309-1589">단추를 클릭할 때 `Invoke` 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1589">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke2/CPP/control_invoke2.cpp#1)]
 [!code-csharp[Control_Invoke2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke2/CS/control_invoke2.cs#1)]
 [!code-vb[Control_Invoke2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke2/VB/control_invoke2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj&#xA;override this.Invoke : Delegate * obj[] -&gt; obj" Usage="control.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="a1309-1590"><paramref name="args" /> 매개 변수에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1590">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="a1309-1591">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1591">An array of objects to pass as arguments to the specified method.</span></span> <span data-ttu-id="a1309-1592">메서드가 인수를 사용하지 않으면 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1592">This parameter can be <see langword="null" /> if the method takes no arguments.</span></span></param>
        <summary><span data-ttu-id="a1309-1593">컨트롤의 내부 창 핸들이 있는 스레드에서 특정 인수 목록을 사용하여 지정된 대리자를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1593">Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</span></span></summary>
        <returns><span data-ttu-id="a1309-1594">호출되는 대리자의 반환 값이 있는 <see cref="T:System.Object" />이거나, 대리자에 반환 값이 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1594">An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1595">대리자는 C 또는 c + + 언어의 함수 포인터와 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1595">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="a1309-1596">대리자를 대리자 개체 내의 메서드에 대 한 참조를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1596">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="a1309-1597">대리자 개체는 참조 된 메서드를 호출 하는 코드 다음 전달할 수 있습니다 하 고 컴파일 시간에는 메서드를 호출할 수 있습니다 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1597">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="a1309-1598">C 또는 c + + 함수 포인터와 달리 대리자는 개체 지향이 고 형식이 안전 하며 더 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1598">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="a1309-1599">컨트롤의 핸들이 없는 아직 경우이 메서드는 컨트롤이 나 창 핸들이 있는 양식을 찾을 때까지 컨트롤의 부모 체인 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1599">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="a1309-1600">적절 한 핸들을 찾을 수 있는 경우이 메서드는 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1600">If no appropriate handle can be found, this method throws an exception.</span></span> <span data-ttu-id="a1309-1601">호출 하는 동안 발생 하는 예외를 호출자로 다시 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1601">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1602">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성인 네 가지 메서드로 컨트롤에는 스레드로부터 안전 하: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1602">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-1603">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1603">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-1604">다른 모든 메서드 호출에 대 한 하나를 사용 해야 invoke 메서드의 호출 컨트롤의 스레드로 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1604">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="a1309-1605">대리자의 인스턴스 수 <xref:System.EventHandler>,이 경우 sender 매개 변수는이 컨트롤에 포함 됩니다 및 이벤트 매개 변수 사용 될 <xref:System.EventArgs.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1605">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1309-1606">대리자의 인스턴스 수도 있습니다 <xref:System.Windows.Forms.MethodInvoker>, 또는 void 매개 변수 목록을 사용 하는 다른 모든 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1606">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="a1309-1607">에 대 한 호출을 <xref:System.EventHandler> 또는 <xref:System.Windows.Forms.MethodInvoker> 대리자 보다 빨리 다른 유형의 대리자에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1607">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1608">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태가 되는 경우 예외가 throw 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1608">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1609">다음 코드 예제에서는 대리자를 포함 하는 컨트롤을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1609">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="a1309-1610">대리자 목록 상자에 항목을 추가 하는 메서드를 캡슐화 하 고이 메서드는 지정된 된 인수를 사용 하 여 폼의 기본 핸들이 있는 스레드에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1610">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments.</span></span> <span data-ttu-id="a1309-1611">단추를 클릭할 때 `Invoke` 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1611">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke1/CPP/control_invoke1.cpp#1)]
 [!code-csharp[Control_Invoke1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke1/CS/control_invoke1.cs#1)]
 [!code-vb[Control_Invoke1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke1/VB/control_invoke1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeGotFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeGotFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeGotFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeGotFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="a1309-1612">해당 이벤트를 할당할 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1612">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-1613">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1613">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-1614">지정된 컨트롤에 대해 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1614">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeLostFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeLostFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeLostFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeLostFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="a1309-1615">해당 이벤트를 할당할 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1615">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-1616">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1616">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-1617">지정된 컨트롤에 대해 <see cref="E:System.Windows.Forms.Control.LostFocus" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1617">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeOnClick (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeOnClick(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeOnClick : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeOnClick (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="a1309-1618"><see cref="T:System.Windows.Forms.Control" /> 이벤트를 할당할 <see cref="E:System.Windows.Forms.Control.Click" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1618">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Click" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-1619">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1619">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-1620">지정된 컨트롤에 대해 <see cref="E:System.Windows.Forms.Control.Click" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1620">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaint (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaint(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaint : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaint (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="a1309-1621"><see cref="T:System.Windows.Forms.Control" /> 이벤트를 할당할 <see cref="E:System.Windows.Forms.Control.Paint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1621">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-1622">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1622">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-1623">지정된 컨트롤에 대해 <see cref="E:System.Windows.Forms.Control.Paint" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1623">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaintBackground (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaintBackground(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaintBackground : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaintBackground (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="a1309-1624"><see cref="T:System.Windows.Forms.Control" /> 이벤트를 할당할 <see cref="E:System.Windows.Forms.Control.Paint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1624">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-1625">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1625">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-1626">지정된 컨트롤에 대해 <see langword="PaintBackground" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1626">Raises the <see langword="PaintBackground" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.Windows.Forms.Control.InvokeRequired" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1627">호출자가 컨트롤이 만들어진 스레드와 다른 스레드에 있기 때문에 메서드를 통해 컨트롤을 호출하는 경우 해당 호출자가 호출 메서드를 호출해야 하는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1627">Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</span></span></summary>
        <value><span data-ttu-id="a1309-1628">컨트롤의 <see langword="true" />이 호출 스레드와 다른 스레드에서 만들어져 호출 메서드를 통해 해당 컨트롤을 호출해야 하는 경우 <see cref="P:System.Windows.Forms.Control.Handle" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1628"><see langword="true" /> if the control's <see cref="P:System.Windows.Forms.Control.Handle" /> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1629">Windows Forms에서 컨트롤은 특정 스레드에 바인딩되고 스레드로부터 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1629">Controls in Windows Forms are bound to a specific thread and are not thread safe.</span></span> <span data-ttu-id="a1309-1630">따라서 다른 스레드에서 컨트롤의 메서드를 호출 하는 경우 하나를 사용 해야의 컨트롤의 적절 한 스레드에 대 한 호출을 마샬링하는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1630">Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</span></span> <span data-ttu-id="a1309-1631">이 속성은 어떤 스레드에서 컨트롤을 소유 하는 알 수 없는 경우에 유용할 수 있는 호출 메서드를 호출 해야 하는 경우 확인에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1631">This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1632">외에 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 속성을 컨트롤에는 스레드로부터 안전 하 게 호출할 네 가지 메서드가 있습니다: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> 및 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 컨트롤에 대 한 핸들을 이미 만든 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1632">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="a1309-1633">호출 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 백그라운드 스레드에서 컨트롤의 핸들이 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1633">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="a1309-1634">다른 모든 메서드 호출에 대 한 하나를 사용 해야 이러한 다른 스레드에서 호출 하는 경우 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1634">For all other method calls, you should use one of these invoke methods when calling from a different thread.</span></span>  
  
 <span data-ttu-id="a1309-1635">컨트롤의 핸들이 없는 경우 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 검색 컨트롤이 나 창 핸들이 있는 폼을 찾을 때까지 해당 컨트롤의 부모 체인을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1635">If the control's handle does not yet exist, <xref:System.Windows.Forms.Control.InvokeRequired%2A> searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="a1309-1636">적절 한 핸들을 찾을 수 있는 경우는 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 메서드가 반환 되는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1636">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.InvokeRequired%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="a1309-1637">즉 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 반환할 수 있습니다 `false` 경우 <xref:System.Windows.Forms.Control.Invoke%2A> 필요 하지 않습니다 (호출이 동일한 스레드에서 발생), 또는 다른 스레드에서 컨트롤 만들어졌지만 컨트롤의 핸들 아직 만들어지지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-1637">This means that <xref:System.Windows.Forms.Control.InvokeRequired%2A> can return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</span></span>  
  
 <span data-ttu-id="a1309-1638">여기서 컨트롤의 핸들 아직 만들어지지 않은 경우에서 호출 하지 않아야 단순히 속성, 메서드 또는 이벤트 컨트롤에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1638">In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</span></span> <span data-ttu-id="a1309-1639">메시지 펌프 없이 스레드에서 컨트롤을 격리하고 애플리케이션이 불안정 백그라운드 스레드에서 만들어질 컨트롤의 핸들이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1639">This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</span></span>  
  
 <span data-ttu-id="a1309-1640">이 경우 값을 확인 하 여 방지할 수 있습니다 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> 때 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 반환 `false` 백그라운드 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1640">You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when <xref:System.Windows.Forms.Control.InvokeRequired%2A> returns `false` on a background thread.</span></span> <span data-ttu-id="a1309-1641">컨트롤 핸들을 아직 만들지 않은 경우 호출 하기 전에 만들어질 때까지 대기 해야 합니다 <xref:System.Windows.Forms.Control.Invoke%2A> 또는 <xref:System.Windows.Forms.Control.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1641">If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>.</span></span> <span data-ttu-id="a1309-1642">일반적으로 이런 백그라운드 스레드 애플리케이션에 대 한 기본 폼의 생성자에서 만들어진 경우에 (에서처럼 `Application.Run(new MainForm())`는 폼이 표시 되기 전에, 또는 `Application.Run` 가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1642">Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.</span></span>  
  
 <span data-ttu-id="a1309-1643">하나의 방법은 폼의 핸들을 백그라운드 스레드를 시작 하기 전에 만든 될 때까지 대기 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1643">One solution is to wait until the form's handle has been created before starting the background thread.</span></span> <span data-ttu-id="a1309-1644">핸들을 강제로 만들거나 호출 하 여 합니다 <xref:System.Windows.Forms.Control.Handle%2A> 속성 또는 될 때까지 대기 합니다 <xref:System.Windows.Forms.Form.Load> 백그라운드 프로세스를 시작 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1644">Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.</span></span>  
  
 <span data-ttu-id="a1309-1645">더 나은 솔루션을 사용 하는 것은 `SynchronizationContext` 반환한 <xref:System.Threading.SynchronizationContext> 크로스 스레드 마샬링을 제어 하는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1645">An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1646">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태가 되는 경우 예외가 throw 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1646">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
 <span data-ttu-id="a1309-1647">다중 스레드 Windows Forms 컨트롤에 대 한 자세한 내용은 참조 하세요. [방법: 파일을 검색 하는 백그라운드 스레드를 사용](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md) 하 고 [방법: Windows Forms 컨트롤에 스레드로부터 안전한 호출 수행](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1647">For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsAccessible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAccessible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAccessible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAccessible : bool with get, set" Usage="System.Windows.Forms.Control.IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1648">컨트롤이 내게 필요한 옵션 지원 애플리케이션에 표시되는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1648">Gets or sets a value indicating whether the control is visible to accessibility applications.</span></span></summary>
        <value><span data-ttu-id="a1309-1649">컨트롤이 내게 필요한 옵션 지원 애플리케이션에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1649"><see langword="true" /> if the control is visible to accessibility applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Windows.Forms.Control.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1650">컨트롤이 삭제되었는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1650">Gets a value indicating whether the control has been disposed of.</span></span></summary>
        <value><span data-ttu-id="a1309-1651">컨트롤이 삭제되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1651"><see langword="true" /> if the control has been disposed of; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1652">이 속성이 반환 하는 경우 `true`, 컨트롤의 삭제 되 고 올바른 Windows 컨트롤로 더 이상 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1652">When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="a1309-1653">컨트롤의 인스턴스를 삭제 하는 경우에 가비지 수집을 통해 메모리에서 제거 될 때까지 메모리에 유지 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1653">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="a1309-1654">호출할 수 없습니다 컨트롤 삭제 될 때 해당 <xref:System.Windows.Forms.Control.RecreateHandle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1654">When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsHandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHandleCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHandleCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHandleCreated : bool" Usage="System.Windows.Forms.Control.IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1655">컨트롤에 연결된 핸들이 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1655">Gets a value indicating whether the control has a handle associated with it.</span></span></summary>
        <value><span data-ttu-id="a1309-1656">컨트롤에 핸들이 할당되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1656"><see langword="true" /> if a handle has been assigned to the control; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1657">사용 하 여는 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> 속성을 여부를 <xref:System.Windows.Forms.Control.CreateHandle%2A> 가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1657">Use the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member IsInputChar : char -&gt; bool&#xA;override this.IsInputChar : char -&gt; bool" Usage="control.IsInputChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="a1309-1658">테스트할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1658">The character to test.</span></span></param>
        <summary><span data-ttu-id="a1309-1659">문자가 컨트롤이 인식하는 입력 문자인지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1659">Determines if a character is an input character that the control recognizes.</span></span></summary>
        <returns><span data-ttu-id="a1309-1660">문자가 컨트롤로 직접 보내지고 전처리되지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1660"><see langword="true" /> if the character should be sent directly to the control and not preprocessed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1661">호출을 <xref:System.Windows.Forms.Control.IsInputChar%2A> 여부를 지정 된 문자를 확인 하는 방법의 `charCode` 매개 변수를 제어 하려고 하는 입력된 문자 인지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1661">Call the <xref:System.Windows.Forms.Control.IsInputChar%2A> method to determine whether the character specified by the `charCode` parameter is an input character that the control wants.</span></span> <span data-ttu-id="a1309-1662">이 메서드는 지정된 된 입력된 문자를 전처리 또는 컨트롤에 직접 전송 여부를 결정 하기 위해 창 메시지 전처리 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1662">This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="a1309-1663">하는 경우 <xref:System.Windows.Forms.Control.IsInputChar%2A> 반환 `true`, 지정된 된 문자가 컨트롤에 직접 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1663">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `true`, the specified character is sent directly to the control.</span></span> <span data-ttu-id="a1309-1664">하는 경우 <xref:System.Windows.Forms.Control.IsInputChar%2A> 반환 `false`, 지정된 된 문자를 전처리 되 고 전처리 단계에서 사용 하지 않은 경우에 컨트롤을 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1664">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="a1309-1665">문자의 전처리 다른 컨트롤의 니모닉 문자 인지 확인이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1665">The preprocessing of a character includes checking whether the character is a mnemonic of another control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1666">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1666">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-1667">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1667">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member IsInputKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="a1309-1668"><see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1668">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-1669">지정된 키가 일반 입력 키인지 또는 전처리가 필요한 특수 키인지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1669">Determines whether the specified key is a regular input key or a special key that requires preprocessing.</span></span></summary>
        <returns><span data-ttu-id="a1309-1670">지정된 키가 일반 입력 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1670"><see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1671">호출을 <xref:System.Windows.Forms.Control.IsInputKey%2A> 키가 지정 여부를 결정 하는 방법을 `keyData` 매개 변수는 컨트롤이 키를 입력된 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1671">Call the <xref:System.Windows.Forms.Control.IsInputKey%2A> method to determine whether the key specified by the `keyData` parameter is an input key that the control wants.</span></span> <span data-ttu-id="a1309-1672">이 메서드는 지정된 된 입력된 키 전처리 또는 컨트롤에 직접 전송 여부를 결정 하기 위해 창 메시지 전처리 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1672">This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="a1309-1673">하는 경우 <xref:System.Windows.Forms.Control.IsInputKey%2A> 반환 `true`, 지정된 된 키가 컨트롤에 직접 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1673">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `true`, the specified key is sent directly to the control.</span></span> <span data-ttu-id="a1309-1674">하는 경우 <xref:System.Windows.Forms.Control.IsInputKey%2A> 반환 `false`, 지정된 된 키가 전처리 및 전처리 단계에서 사용 하지 않은 경우에 컨트롤을 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1674">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="a1309-1675">키 전처리 되 탭, 리턴, ESC 키를 및 위쪽 화살표, 아래쪽 화살표, 왼쪽 화살표 및 오른쪽 화살표 키를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1675">Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1676">다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.Control.IsInputKey%2A> 에 대 한 메서드는 <xref:System.Windows.Forms.TextBox> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1676">The following code example shows you how to override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method for a <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="a1309-1677">이 예제는 `TabTextBox` TAB 키를 처리 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1677">In this example, the `TabTextBox` class handles the TAB key.</span></span> <span data-ttu-id="a1309-1678">경우는 `TabTextBox` 포커스를가지고 있는 사용자 TAB 키를 눌러 텍스트 삽입 지점에 4 개의 공백이 추가 되어 선택한 모든 텍스트를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1678">When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text.</span></span> <span data-ttu-id="a1309-1679">기본적으로 <xref:System.Windows.Forms.TextBox> 컨트롤이 입력된 포커스를 다음 컨트롤로 이동 하 여 TAB 키를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1679">By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control.</span></span> <span data-ttu-id="a1309-1680">이 경우에 keypress에 도달 하지 않습니다는 <xref:System.Windows.Forms.Control.OnKeyDown%2A> 메서드 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1680">In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override.</span></span> <span data-ttu-id="a1309-1681">이 기본 동작을 방지 하기 위해 합니다 <xref:System.Windows.Forms.Control.IsInputKey%2A> 메서드 재정의 반환 `true` TAB 키를 누를 때.</span><span class="sxs-lookup"><span data-stu-id="a1309-1681">To prevent this default behavior, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns `true` when the user presses the TAB key.</span></span> <span data-ttu-id="a1309-1682">다른 모든 키 누르기를 <xref:System.Windows.Forms.Control.IsInputKey%2A> 메서드 재정의 기본 클래스 버전의 메서드를 호출 하는 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1682">For all other keypresses, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns the result of calling the base-class version of the method.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/cs/form1.cs#0)]
 [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/vb/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1683">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1683">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-1684">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1684">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Windows.Forms.Keys" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="P:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKeyLocked (keyVal As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyLocked(System::Windows::Forms::Keys keyVal);" />
      <MemberSignature Language="F#" Value="static member IsKeyLocked : System.Windows.Forms.Keys -&gt; bool" Usage="System.Windows.Forms.Control.IsKeyLocked keyVal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyVal"><span data-ttu-id="a1309-1685"><see cref="T:System.Windows.Forms.Keys" /> 열거형의 Caps Lock, Num Lock 또는 Scroll Lock 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1685">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:System.Windows.Forms.Keys" /> enumeration.</span></span></param>
        <summary><span data-ttu-id="a1309-1686">Caps Lock, Num Lock 또는 Scroll Lock 키가 유효한지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1686">Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</span></span></summary>
        <returns><span data-ttu-id="a1309-1687">지정한 키가 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1687"><see langword="true" /> if the specified key or keys are in effect; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1688">사용 된 <xref:System.Windows.Forms.Control.IsKeyLocked%2A> 여부를 개별적으로 또는 함께에서 CAPS LOCK, NUM LOCK 또는 SCROLL LOCK 키가 있는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1688">Use the <xref:System.Windows.Forms.Control.IsKeyLocked%2A> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1689">다음 코드 예제에서는 지정된 된 키 (이 예제의 Caps Lock 키)에 적용 되는지 여부를 나타내는 메시지 상자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1689">The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.</span></span>  
  
 [!code-cpp[ControlIsKeyLocked#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlIsKeyLocked/CPP/controliskeylocked.cpp#1)]
 [!code-csharp[ControlIsKeyLocked#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlIsKeyLocked/CS/controliskeylocked.cs#1)]
 [!code-vb[ControlIsKeyLocked#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlIsKeyLocked/VB/controliskeylocked.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="a1309-1690"><paramref name="keyVal" /> 매개 변수는 Caps Lock, Num Lock 또는 Scroll Lock 키 이외의 키를 참조합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1690">The <paramref name="keyVal" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsMirrored" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMirrored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMirrored { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMirrored : bool" Usage="System.Windows.Forms.Control.IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1691">컨트롤이 미러링되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1691">Gets a value indicating whether the control is mirrored.</span></span></summary>
        <value><span data-ttu-id="a1309-1692">컨트롤이 미러링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1692"><see langword="true" /> if the control is mirrored; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1693">미러링된 컨트롤 레이아웃 및 오른쪽에서 왼쪽으로 텍스트를 모두 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1693">A mirrored control displays both layout and text from right to left.</span></span> <span data-ttu-id="a1309-1694">자세한 내용은 [방법: 미러링된 Windows Forms 만들기 및 컨트롤](https://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1694">For more information, see [How to: Create Mirrored Windows Forms and Controls](https://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMnemonic (charCode As Char, text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMnemonic(char charCode, System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsMnemonic : char * string -&gt; bool" Usage="System.Windows.Forms.Control.IsMnemonic (charCode, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="a1309-1695">테스트할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1695">The character to test.</span></span></param>
        <param name="text"><span data-ttu-id="a1309-1696">검색할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1696">The string to search.</span></span></param>
        <summary><span data-ttu-id="a1309-1697">지정된 문자가 특정 문자열의 컨트롤에 할당된 니모닉 문자인지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1697">Determines if the specified character is the mnemonic character assigned to the control in the specified string.</span></span></summary>
        <returns><span data-ttu-id="a1309-1698"><paramref name="charCode" /> 문자가 컨트롤에 할당된 니모닉 문자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1698"><see langword="true" /> if the <paramref name="charCode" /> character is the mnemonic character assigned to the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1699">니모닉 문자는 문자 바로 다음에 "&"의 첫 번째 인스턴스는 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1699">The mnemonic character is the character immediately following the first instance of "&" in a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1700">다음 코드 예제에서는 재정의 하는 button 클래스의 확장을 <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> 메서드를 사용자 지정 동작을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1700">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="a1309-1701">예제에도 사용 방법을 설명 합니다 <xref:System.Windows.Forms.Control.CanSelect%2A> 및 <xref:System.Windows.Forms.Control.IsMnemonic%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1701">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="a1309-1702">실행 하려면이 예제에서는 후 form 클래스를 같은 파일에 다음 코드를 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1702">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="a1309-1703">형식의 단추 추가 `MnemonicButton` 폼입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1703">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-1704">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1704">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-1705">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1705">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1706">컨트롤에 포커스가 있을 때 키를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1706">Occurs when a key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1707">키 이벤트가 다음 순서 대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1707">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="a1309-1708">만 폼 수준에서 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정 합니다 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> 폼의 속성 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 처리 메서드를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1708">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="a1309-1709">컨트롤에서 탭, 리턴, ESC 키를 및 화살표 키와 같은 특정 키를 자동으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1709">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="a1309-1710">이러한 키에 <xref:System.Windows.Forms.Control.KeyDown> 재정의 해야 이벤트는 <xref:System.Windows.Forms.Control.IsInputKey%2A> 양식의 각 컨트롤의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1710">To have these keys raise the <xref:System.Windows.Forms.Control.KeyDown> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="a1309-1711">재정의 위한 코드를 <xref:System.Windows.Forms.Control.IsInputKey%2A> 특수 키 중 하나를 누를 경우 확인 하 고 값을 반환 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1711">The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span> <span data-ttu-id="a1309-1712">재정의 하는 대신 합니다 <xref:System.Windows.Forms.Control.IsInputKey%2A> 메서드를 처리할 수 있습니다 합니다 <xref:System.Windows.Forms.Control.PreviewKeyDown> 이벤트 집합과 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1712">Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="a1309-1713">코드 예제를 참조 하세요.를 <xref:System.Windows.Forms.Control.PreviewKeyDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1713">For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span>  
  
 <span data-ttu-id="a1309-1714">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1714">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1715">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.KeyDown> 컨트롤에 입력 한 문자의 형식을 확인 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1715">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
 <span data-ttu-id="a1309-1716">다음 코드 예제는 발생 순서를 보여 합니다 <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp>, <xref:System.Windows.Forms.Control.KeyPress> 이벤트 및 이벤트 처리기에 등록 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1716">The following code example demonstrates the order of raising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp>, <xref:System.Windows.Forms.Control.KeyPress> events, and how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyDown#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyDown#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
        <altmember cref="T:System.Windows.Forms.KeyEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As KeyPressEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyPressEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " Usage="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1717">컨트롤에 포커스가 있을 때 문자, 스페이스 또는 백스페이스 키를 누르면</span><span class="sxs-lookup"><span data-stu-id="a1309-1717">Occurs when a character.</span></span> <span data-ttu-id="a1309-1718">발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1718">space or backspace key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1719">키 이벤트가 다음 순서 대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1719">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="a1309-1720">그러나 합니다 <xref:System.Windows.Forms.Control.KeyPress> 공간과 백스페이스 이외의 문자가 아닌 키를 기준으로 이벤트가 발생 하지 않으면 문자가 아닌 키를 일으키지 합니다 <xref:System.Windows.Forms.Control.KeyDown> 및 <xref:System.Windows.Forms.Control.KeyUp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1720">The <xref:System.Windows.Forms.Control.KeyPress> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.</span></span>  
  
 <span data-ttu-id="a1309-1721">사용 된 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 샘플 키 입력을 런타임에 하 고 선택적으로 사용 하거나 공통 키 입력의 하위 집합을 수정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1721">Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</span></span>  
  
 <span data-ttu-id="a1309-1722">만 폼 수준에서 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정 합니다 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> 폼의 속성 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 처리 메서드를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1722">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span>  
  
 <span data-ttu-id="a1309-1723">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1723">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1724">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 문자로 컨트롤에 진입 하지 못하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1724">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="a1309-1725">다음 코드 예제에서는 증가의 순서를 보여 줍니다.는 <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> 및 <xref:System.Windows.Forms.Control.KeyPress> 이벤트에 이벤트 처리기를 등록 하는 방법에도 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1725">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyPress#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyPress#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1726">컨트롤에 포커스가 있을 때 키를 눌렀다 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1726">Occurs when a key is released while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1727">키 이벤트가 다음 순서 대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1727">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="a1309-1728">만 폼 수준에서 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정 합니다 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> 폼의 속성 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 처리 메서드를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1728">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="a1309-1729">컨트롤에서 탭, 리턴, ESC 키를 및 화살표 키와 같은 특정 키를 자동으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1729">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="a1309-1730">이러한 키에 <xref:System.Windows.Forms.Control.KeyUp> 재정의 해야 이벤트는 <xref:System.Windows.Forms.Control.IsInputKey%2A> 양식의 각 컨트롤의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1730">To have these keys raise the <xref:System.Windows.Forms.Control.KeyUp> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="a1309-1731">재정의 위한 코드 <xref:System.Windows.Forms.Control.IsInputKey%2A> 특수 키 중 하나를 누를 경우 확인 하 고 값을 반환 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1731">The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span>  
  
 <span data-ttu-id="a1309-1732">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1732">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1733">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.KeyUp> 이벤트는 <xref:System.Windows.Forms.Help> 사용자에 게 도움말 팝업 스타일을 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1733">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="a1309-1734">다음 코드 예제에서는 증가의 순서를 보여 줍니다.는 <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> 및 <xref:System.Windows.Forms.Control.KeyPress> 이벤트에 이벤트 처리기를 등록 하는 방법에도 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1734">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyUp#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyUp#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Layout" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Layout As LayoutEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LayoutEventHandler ^ Layout;" />
      <MemberSignature Language="F#" Value="member this.Layout : System.Windows.Forms.LayoutEventHandler " Usage="member this.Layout : System.Windows.Forms.LayoutEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1735">컨트롤이 자식 컨트롤의 위치를 변경하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1735">Occurs when a control should reposition its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1736"><xref:System.Windows.Forms.Control.Layout> 자식 컨트롤을 추가 하거나 범위 컨트롤 변경 하 고 있는 다른 변경 내용이 있을 수는 컨트롤의 레이아웃에 영향을 받는 경우 제거 하면 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1736">The <xref:System.Windows.Forms.Control.Layout> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</span></span> <span data-ttu-id="a1309-1737">레이아웃 이벤트를 사용 하 여 억제할 수 있습니다 합니다 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 고 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-1737">The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span> <span data-ttu-id="a1309-1738">레이아웃을 일시 중단을 사용 하면 각 변경에 대 한 레이아웃을 수행 하지 않고 컨트롤에 여러 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1738">Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</span></span> <span data-ttu-id="a1309-1739">예를 들어, 크기를 조정 하는 컨트롤을 이동 하는 경우 각 작업 발생을 <xref:System.Windows.Forms.Control.Layout> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1739">For example, if you resize and move a control, each operation would raise a <xref:System.Windows.Forms.Control.Layout> event.</span></span>  
  
 <span data-ttu-id="a1309-1740">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1740">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1741">다음 코드 예제에서는 센터를 <xref:System.Windows.Forms.Form> 화면에서 <xref:System.Windows.Forms.Control.Layout> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1741">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="a1309-1742">이렇게 하면 폼 가운데에 사용자가 크기 조정으로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1742">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="a1309-1743">이 예제에서는 만든를 <xref:System.Windows.Forms.Form> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1743">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.LayoutEngine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LayoutEngine As LayoutEngine" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Layout::LayoutEngine ^ LayoutEngine { System::Windows::Forms::Layout::LayoutEngine ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LayoutEngine : System.Windows.Forms.Layout.LayoutEngine" Usage="System.Windows.Forms.Control.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1744">컨트롤 레이아웃 엔진의 캐시된 인스턴스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1744">Gets a cached instance of the control's layout engine.</span></span></summary>
        <value><span data-ttu-id="a1309-1745">컨트롤의 내용에 대한 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1745">The <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> for the control's contents.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1746"><xref:System.Windows.Forms.Control.LayoutEngine%2A> 속성은 컨트롤 자체가 아닌 컨트롤의 자식에 대 한 레이아웃 엔진을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1746">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> property gets the layout engine for the control's children rather than for the control itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Layout.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Leave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Leave;" />
      <MemberSignature Language="F#" Value="member this.Leave : EventHandler " Usage="member this.Leave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1747">입력 포커스가 컨트롤을 벗어나면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1747">Occurs when the input focus leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1748">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-1748">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-1749">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1749">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-1750">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1750">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1751">합니다 <xref:System.Windows.Forms.Control.Enter> 하 고 <xref:System.Windows.Forms.Control.Leave> 이벤트에 의해 표시 되지를 <xref:System.Windows.Forms.Form> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1751">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="a1309-1752">이벤트에는 <xref:System.Windows.Forms.Form> 클래스를 <xref:System.Windows.Forms.Form.Activated> 및 <xref:System.Windows.Forms.Form.Deactivate> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1752">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="a1309-1753">합니다 <xref:System.Windows.Forms.Control.Enter> 고 <xref:System.Windows.Forms.Control.Leave> 이벤트는 계층적 이며 적절 한 컨트롤에 도달할 때까지 부모 체인 위/아래로 계단식으로 배열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1753">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="a1309-1754">예를 들어 있다고 가정를 <xref:System.Windows.Forms.Form> 두 개의 <xref:System.Windows.Forms.GroupBox> 컨트롤 및 각 <xref:System.Windows.Forms.GroupBox> 컨트롤에 하나 <xref:System.Windows.Forms.TextBox> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1754">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="a1309-1755">하나에서 캐럿을 이동할 때 <xref:System.Windows.Forms.TextBox> 다른를 <xref:System.Windows.Forms.Control.Leave> 에 대 한 이벤트가 발생 합니다 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.GroupBox>, 및 <xref:System.Windows.Forms.Control.Enter> 다른 이벤트가 발생 <xref:System.Windows.Forms.GroupBox> 및 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1755">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-1756">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1756">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-1757">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1757">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-1758">자세한 내용은 참조는 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1758">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-1759">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1759">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1760">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.Leave> 를 이전 상태로 컨트롤을 다시 설정 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1760">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Left : int with get, set" Usage="System.Windows.Forms.Control.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1761">컨트롤의 왼쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1761">Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="a1309-1762">컨트롤의 왼쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 나타내는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1762">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1763"><xref:System.Windows.Forms.Control.Left%2A> 속성 값이 해당 하는 <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> 의 속성을 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1763">The <xref:System.Windows.Forms.Control.Left%2A> property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="a1309-1764">변경 합니다 <xref:System.Windows.Forms.Control.Width%2A> 및 <xref:System.Windows.Forms.Control.Left%2A> 속성 값을 <xref:System.Windows.Forms.Control.Right%2A> 변경 하려면 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1764">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1765">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1765">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-1766">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1766">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.X" />
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1767">해당 컨테이너의 왼쪽 위 모퉁이를 기준으로 컨트롤의 왼쪽 위 모퉁이의 좌표를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1767">Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</span></span></summary>
        <value><span data-ttu-id="a1309-1768">해당 컨테이너의 왼쪽 위 모퉁이를 기준으로 하여 컨트롤의 왼쪽 위 모퉁이를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1768">The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1769">때문에 합니다 <xref:System.Drawing.Point> 클래스는 값 형식 (`Structure` Visual basic에서는 `struct` Visual C#), 컨트롤의 왼쪽 위 지점이의 복사본을 반환 속성에 액세스를 의미 하는 값으로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1769">Because the <xref:System.Drawing.Point> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</span></span> <span data-ttu-id="a1309-1770">따라서 조정를 <xref:System.Drawing.Point.X%2A> 또는 <xref:System.Drawing.Point.Y%2A> 의 속성을 <xref:System.Drawing.Point> 이 반환 속성에 영향을 주지 것입니다를 <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, 또는 <xref:System.Windows.Forms.Control.Bottom%2A> 컨트롤의 속성 값.</span><span class="sxs-lookup"><span data-stu-id="a1309-1770">So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control.</span></span> <span data-ttu-id="a1309-1771">각 속성 값을 개별적으로 설정 하거나 설정에 이러한 속성을 조정 합니다 <xref:System.Windows.Forms.Control.Location%2A> 새 속성 <xref:System.Drawing.Point>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1771">To adjust these properties set each property value individually, or set the <xref:System.Windows.Forms.Control.Location%2A> property with a new <xref:System.Drawing.Point>.</span></span>  
  
 <span data-ttu-id="a1309-1772">경우는 <xref:System.Windows.Forms.Control> 은 <xref:System.Windows.Forms.Form>의 <xref:System.Windows.Forms.Control.Location%2A> 속성 값의 왼쪽 위 모퉁이 나타내는 <xref:System.Windows.Forms.Form> 화면 좌표에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-1772">If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Location%2A> property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1773">다음 코드 예제는 <xref:System.Windows.Forms.GroupBox> 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1773">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="a1309-1774">이 예에서는 만듭니다는 <xref:System.Windows.Forms.TextBox> 설정 및 해당 <xref:System.Windows.Forms.Control.Location%2A> 그룹 상자 내에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-1774">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="a1309-1775">그런 다음 설정의 <xref:System.Windows.Forms.Control.Text%2A> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1775">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="a1309-1776">마지막으로, 그룹 상자를 설정 하 여 비활성화 된 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 `false`, 사용 하지 않도록 설정할 그룹 상자 내에 포함 된 모든 컨트롤에 이르게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1776">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1777"><see cref="P:System.Windows.Forms.Control.Location" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1777">Occurs when the <see cref="P:System.Windows.Forms.Control.Location" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1778">이 이벤트는 <xref:System.Windows.Forms.Control.Location%2A> 속성 중 하나를 프로그래밍 방식으로 수정 하거나 상호 작용을 통해 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1778">This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="a1309-1779">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1779">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1780">다음 코드 예제에서는 발생 합니다 <xref:System.Windows.Forms.Control.LocationChanged> 이벤트에는 <xref:System.Windows.Forms.StatusStrip> 폼 크기를 조정할 때.</span><span class="sxs-lookup"><span data-stu-id="a1309-1780">The following code example raises the <xref:System.Windows.Forms.Control.LocationChanged> event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.</span></span>  
  
 [!code-csharp[System.Windows.Forms.LocationChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LocationChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public System.Drawing.Size LogicalToDeviceUnits (System.Drawing.Size value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Size LogicalToDeviceUnits(valuetype System.Drawing.Size value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Size LogicalToDeviceUnits(System::Drawing::Size value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1309-1781">크기가 조정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1781">The size to be scaled.</span></span></param>
        <summary><span data-ttu-id="a1309-1782">현재 DPI에 대해 크기를 조정하고 너비와 높이에 대해 가장 가까운 정수 값으로 내림하여 논리에서 디바이스 단위로 크기를 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1782">Transforms a size from logical to device units by scaling it for the current DPI and rounding down to the nearest integer value for width and height.</span></span></summary>
        <returns><span data-ttu-id="a1309-1783">조정된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1783">The scaled size.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public int LogicalToDeviceUnits (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LogicalToDeviceUnits(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LogicalToDeviceUnits(int value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : int -&gt; int" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1309-1784">변환할 논리 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1784">The Logical value to convert.</span></span></param>
        <summary><span data-ttu-id="a1309-1785">논리적 DPI 값을 동등한 DeviceUnit DPI 값으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1785">Converts a Logical DPI value to its equivalent DeviceUnit DPI value.</span></span></summary>
        <returns><span data-ttu-id="a1309-1786">결과 DeviceUnit 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1786">The resulting DeviceUnit value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : EventHandler " Usage="member this.LostFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1787">컨트롤이 포커스를 잃을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1787">Occurs when the control loses focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1788">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-1788">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-1789">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1789">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-1790">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1790">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="a1309-1791">경우는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성을 <xref:System.ComponentModel.CancelEventArgs> 로 설정 되어 `true` 에 <xref:System.Windows.Forms.Control.Validating> 이벤트 대리자, 후 일반적으로 발생 하는 모든 이벤트는 <xref:System.Windows.Forms.Control.Validating> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1791">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1792">합니다 <xref:System.Windows.Forms.Control.GotFocus> 고 <xref:System.Windows.Forms.Control.LostFocus> WM_KILLFOCUS 및 WM_SETFOCUS Windows 메시지에 연결 된 하위 수준 포커스 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1792">The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="a1309-1793">일반적으로 <xref:System.Windows.Forms.Control.GotFocus> 하 고 <xref:System.Windows.Forms.Control.LostFocus> 이벤트는 업데이트 하는 경우에 사용 됩니다 <xref:System.Windows.Forms.UICues> 때나 사용자 지정 컨트롤을 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1793">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="a1309-1794">대신 합니다 <xref:System.Windows.Forms.Control.Enter> 및 <xref:System.Windows.Forms.Control.Leave> 제외 하 고 모든 컨트롤에 대 한 이벤트를 사용 해야 합니다 <xref:System.Windows.Forms.Form> 클래스를 사용 하는 <xref:System.Windows.Forms.Form.Activated> 및 <xref:System.Windows.Forms.Form.Deactivate> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-1794">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="a1309-1795">에 대 한 자세한 내용은 <xref:System.Windows.Forms.Control.GotFocus> 및 <xref:System.Windows.Forms.Control.LostFocus> 이벤트를 참조 합니다 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 및 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 항목.</span><span class="sxs-lookup"><span data-stu-id="a1309-1795">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) and [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-1796">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1796">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-1797">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1797">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-1798">자세한 내용은 참조는 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1798">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-1799">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1799">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1800">다음 코드 예제에서는 텍스트 TextBox1에 대 한 유효성 검사 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1800">The following code example demonstrates validating the text for TextBox1.</span></span> <span data-ttu-id="a1309-1801">처리 하는 방법도 보여 줍니다 합니다 <xref:System.Windows.Forms.Control.LostFocus> 설정 하 여 이벤트를 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> TextBox1에 있는 텍스트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1801">It also demonstrates handling the <xref:System.Windows.Forms.Control.LostFocus> event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> property to the text in TextBox1.</span></span> <span data-ttu-id="a1309-1802">사용 된 코드 예제는 <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> 파일 대화 상자를 열기 전에 오류를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1802">The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> method to check for an error before opening the file dialog box.</span></span> <span data-ttu-id="a1309-1803">이 예제를 실행 하려면 다음 코드를 포함 하는 폼에 붙여넣습니다를 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`, <xref:System.Windows.Forms.OpenFileDialog> 라는 `OpenFileDialog1`, <xref:System.Windows.Forms.Button> 라는 `Button1`, 및 <xref:System.Windows.Forms.ErrorProvider> 라는 `ErrorProvider1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1803">To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`.</span></span> <span data-ttu-id="a1309-1804">모든 이벤트가 해당 이벤트 처리기와 연결 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1804">Ensure all events are associated with their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#2)]
 [!code-csharp[System.Windows.Forms.FileDialog#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#2)]
 [!code-vb[System.Windows.Forms.FileDialog#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
        <altmember cref="E:System.Windows.Forms.Form.Deactivate" />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Margin { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1805">컨트롤 사이의 공백을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1805">Gets or sets the space between controls.</span></span></summary>
        <value><span data-ttu-id="a1309-1806">컨트롤 사이의 공백을 나타내는 <see cref="T:System.Windows.Forms.Padding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1806">A <see cref="T:System.Windows.Forms.Padding" /> representing the space between controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1807">컨트롤에 대 한 기본값을 받을 <xref:System.Windows.Forms.Control.Margin%2A> 는 가까워질 합리적으로 Windows 사용자 인터페이스 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1807">Controls receive default values for <xref:System.Windows.Forms.Control.Margin%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="a1309-1808">특정 애플리케이션에 필요한 일부 조정 중일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1808">Some adjustments might still be necessary for particular applications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1809">설정 된 <xref:System.Windows.Forms.Control.Margin%2A> 도킹 된 컨트롤의 속성에 해당 컨테이너의 가장자리에서 컨트롤의 거리에 대 한 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1809">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MarginChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MarginChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MarginChanged;" />
      <MemberSignature Language="F#" Value="member this.MarginChanged : EventHandler " Usage="member this.MarginChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1810">컨트롤의 여백이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1810">Occurs when the control's margin changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1811">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1811">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1812">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1812">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1813">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.MarginChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1813">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span> <span data-ttu-id="a1309-1814">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1814">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1815">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1815">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1816">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1816">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1817">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.MarginChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1817">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#21)]
 [!code-vb[System.Windows.Forms.EventExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MaximumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MaximumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1818"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />에서 지정할 수 있는 상한을 나타내는 크기를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1818">Gets or sets the size that is the upper limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="a1309-1819">사각형의 너비와 높이를 나타내는 <see cref="T:System.Drawing.Size" /> 형식의 정렬된 쌍입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1819">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MinimumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MinimumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1820"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />에서 지정할 수 있는 하한을 나타내는 크기를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1820">Gets or sets the size that is the lower limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="a1309-1821">사각형의 너비와 높이를 나타내는 <see cref="T:System.Drawing.Size" /> 형식의 정렬된 쌍입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1821">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ModifierKeys" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ModifierKeys As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Keys ModifierKeys { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.ModifierKeys : System.Windows.Forms.Keys" Usage="System.Windows.Forms.Control.ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1822">누른 상태에 있는 보조키(SHIFT, CTRL 및 ALT)를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1822">Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="a1309-1823"><see cref="T:System.Windows.Forms.Keys" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1823">A bitwise combination of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span> <span data-ttu-id="a1309-1824">기본값은 <see cref="F:System.Windows.Forms.Keys.None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1824">The default is <see cref="F:System.Windows.Forms.Keys.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-1825">다음 코드 예제에서는 단추를 클릭 하는 동안 CTRL 키를 누를 때 단추를 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1825">The following code example hides a button when the CTRL key is pressed while the button is clicked.</span></span> <span data-ttu-id="a1309-1826">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Button> 라는 `button1` 에 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1826">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MouseButtons" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MouseButtons As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::MouseButtons MouseButtons { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.MouseButtons : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.Control.MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1827">누른 상태에 있는 마우스 단추를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1827">Gets a value indicating which of the mouse buttons is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="a1309-1828"><see cref="T:System.Windows.Forms.MouseButtons" /> 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1828">A bitwise combination of the <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration values.</span></span> <span data-ttu-id="a1309-1829">기본값은 <see cref="F:System.Windows.Forms.MouseButtons.None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1829">The default is <see cref="F:System.Windows.Forms.MouseButtons.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-1830">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, 및 <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1830">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="a1309-1831">예제를 실행 하려면 Form1 이라는 폼에 다음 코드를 붙여 넣습니다 여러 컨트롤을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1831">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="a1309-1832">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, 및 <xref:System.Windows.Forms.Control.MouseUp> 예제에 정의 된 이벤트 처리기에 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1832">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseCaptureChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseCaptureChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseCaptureChanged;" />
      <MemberSignature Language="F#" Value="member this.MouseCaptureChanged : EventHandler " Usage="member this.MouseCaptureChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1833">컨트롤이 마우스 캡처를 잃을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1833">Occurs when the control loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1834">드문 시나리오에서 예기치 않은 입력을 검색 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1834">In rare scenarios, you might need to detect unexpected input.</span></span> <span data-ttu-id="a1309-1835">예를 들어, 다음 시나리오를 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1835">For example, consider the following scenarios.</span></span>  
  
-   <span data-ttu-id="a1309-1836">마우스 작업을 사용 하는 동안 사용자는 Windows 키 또는 CTRL + ESC를 눌러 시작 메뉴를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1836">During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</span></span>  
  
-   <span data-ttu-id="a1309-1837">마우스 작업을 사용 하는 동안 사용자가 ALT + TAB을 눌러 다른 프로그램으로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1837">During a mouse operation, the user switches to another program by pressing ALT+TAB.</span></span>  
  
-   <span data-ttu-id="a1309-1838">마우스 작업 중 다른 프로그램 창 또는 현재 애플리케이션에서 포커스를 사용 하는 메시지 상자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1838">During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</span></span>  
  
 <span data-ttu-id="a1309-1839">끌기 작업을 수행 하는 마우스 또는 폼 또는 컨트롤에서 마우스를 누르고 마우스 작업 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1839">Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</span></span> <span data-ttu-id="a1309-1840">검색할 폼 또는 컨트롤에 대 한 마우스 캡처를 잃을 경우 및 관련 된 예기치 않은 시나리오를 사용 하 여는 <xref:System.Windows.Forms.Control.MouseCaptureChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1840">If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1841">다음 코드 예제는 <xref:System.Windows.Forms.Control.MouseCaptureChanged> 에 대 한 이벤트를 <xref:System.Windows.Forms.Button> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1841">The following code example demonstrates the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event for a <xref:System.Windows.Forms.Button> control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/vb/form1.vb#1)]  
  
 <span data-ttu-id="a1309-1842">이 예제를 테스트 하려면 f5 키를 눌러 디버거 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1842">To test this example, run it in the debugger by pressing F5.</span></span> <span data-ttu-id="a1309-1843">엽니다는 **출력** Visual Studio의 창 이벤트가 발생 하는 경우를 볼 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1843">Open the **Output** window in Visual Studio so that you can see when events are raised.</span></span> <span data-ttu-id="a1309-1844">클릭 된 <xref:System.Windows.Forms.Button> 고 다음 출력을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1844">Click the <xref:System.Windows.Forms.Button> and notice the following output.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 <span data-ttu-id="a1309-1845">이제 누른 채로 마우스 왼쪽된 단추를 <xref:System.Windows.Forms.Button> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1845">Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="a1309-1846">마우스 클릭 한 상태에서 다른 프로그램으로 전환 하려면 ALT + TAB을 누릅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1846">While still clicking the mouse, press ALT+TAB to switch to another program.</span></span> <span data-ttu-id="a1309-1847">다음에 유의 합니다 <xref:System.Windows.Forms.Control.MouseCaptureChanged> 이벤트는 잠재적으로이 시나리오를 처리할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1847">Notice that the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event is raised enabling you to potentially handle this scenario.</span></span> <span data-ttu-id="a1309-1848">사용자의 작업에 따라는 <xref:System.Windows.Forms.Control.MouseUp> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1848">Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised.</span></span> <span data-ttu-id="a1309-1849">또한 Windows 키 또는 CTRL + ESC를 사용 하 여이 테스트를 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1849">You can also try this test with the Windows key or CTRL+ESC.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1850">컨트롤을 마우스로 클릭할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1850">Occurs when the control is clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1851">일반적으로 커서가 컨트롤 위에 있을 때 마우스 단추를 누르면 다음 일련을의 컨트롤에서 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1851">Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</span></span>  
  
1.  <span data-ttu-id="a1309-1852"><xref:System.Windows.Forms.Control.MouseDown> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1852"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="a1309-1853"><xref:System.Windows.Forms.Control.Click> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1853"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="a1309-1854"><xref:System.Windows.Forms.Control.MouseClick> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1854"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="a1309-1855"><xref:System.Windows.Forms.Control.MouseUp> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1855"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="a1309-1856">이 위해서는 컨트롤의 클래스에서 다양 한 이벤트를 해제할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1856">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
 <span data-ttu-id="a1309-1857">두 번 클릭, 시간 내에 사용자의 운영 체제의 마우스 설정에 의해 결정 된 대로 생성 됩니다 발생 하는 한 <xref:System.Windows.Forms.Control.MouseDoubleClick> 이벤트 대신 두 번째 <xref:System.Windows.Forms.Control.MouseClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1857">Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1309-1858"><xref:System.Windows.Forms.Control.Click> 이벤트는 컨트롤의 논리적으로 상위 수준 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-1858"><xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control.</span></span> <span data-ttu-id="a1309-1859">이러한 이벤트는 대개 컨트롤에 포커스가 있을 때 ENTER 키를 누르는 것과 같은 다른 작업에 의해 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1859">They are often raised by other actions, such as pressing the ENTER key when the control has focus.</span></span>  
  
 <span data-ttu-id="a1309-1860">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1860">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1861">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1861">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1862">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.MouseClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1862">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="a1309-1863">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1863">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1864">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1864">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1865">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1865">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1866">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.MouseClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1866">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1867">컨트롤을 마우스로 두 번 클릭할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1867">Occurs when the control is double clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1868"><xref:System.Windows.Forms.Control.MouseDoubleClick> 이벤트를 컨트롤 위로 커서를 가져갈 때 빠르게 연속적으로 두 번의 마우스 단추를 누를 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1868">The <xref:System.Windows.Forms.Control.MouseDoubleClick> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</span></span> <span data-ttu-id="a1309-1869">시간 간격을 두 번 클릭에서 두 번 클릭을 구분 하는 사용자의 운영 체제의 마우스 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1869">The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</span></span>  
  
 <span data-ttu-id="a1309-1870">다음 일련의 이벤트는 이러한 사용자 작업이 수행 될 때 컨트롤에 의해 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1870">The following series of events is raised by the control when such a user action takes place:</span></span>  
  
1.  <span data-ttu-id="a1309-1871"><xref:System.Windows.Forms.Control.MouseDown> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1871"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="a1309-1872"><xref:System.Windows.Forms.Control.Click> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1872"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="a1309-1873"><xref:System.Windows.Forms.Control.MouseClick> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1873"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="a1309-1874"><xref:System.Windows.Forms.Control.MouseUp> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1874"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
5.  <span data-ttu-id="a1309-1875"><xref:System.Windows.Forms.Control.MouseDown> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1875"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
6.  <span data-ttu-id="a1309-1876"><xref:System.Windows.Forms.Control.DoubleClick> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1876"><xref:System.Windows.Forms.Control.DoubleClick> event.</span></span>  
  
7.  <span data-ttu-id="a1309-1877"><xref:System.Windows.Forms.Control.MouseDoubleClick> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1877"><xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
8.  <span data-ttu-id="a1309-1878"><xref:System.Windows.Forms.Control.MouseUp> 이벤트</span><span class="sxs-lookup"><span data-stu-id="a1309-1878"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="a1309-1879">이 위해서는 컨트롤의 클래스에서 다양 한 이벤트를 해제할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1879">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1309-1880"><xref:System.Windows.Forms.Control.DoubleClick> 이벤트는 컨트롤의 논리적으로 상위 수준 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-1880"><xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control.</span></span> <span data-ttu-id="a1309-1881">이러한 바로 가기 키 조합 등의 다른 사용자 작업에 의해 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1881">They may be raised by other user actions, such as shortcut key combinations.</span></span>  
  
 <span data-ttu-id="a1309-1882">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1882">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1883">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1883">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-1884">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.MouseDoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1884">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span> <span data-ttu-id="a1309-1885">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1885">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-1886">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1886">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-1887">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1887">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-1888">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.MouseDoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1888">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#55)]
 [!code-vb[System.Windows.Forms.EventExamples#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDown : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1889">마우스 포인터가 컨트롤 위에 있을 때 마우스 단추를 클릭하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1889">Occurs when the mouse pointer is over the control and a mouse button is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1890">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1890">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1891">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1891">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1892">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1892">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1893">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1893">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1894">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1894">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1895">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1895">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1896">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1896">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1897">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1897">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1898">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1898">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1899">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1899">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1900">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1900">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : EventHandler " Usage="member this.MouseEnter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1901">마우스 포인터가 컨트롤에 들어가면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1901">Occurs when the mouse pointer enters the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1902">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1902">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1903">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1903">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1904">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1904">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1905">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1905">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1906">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1906">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1907">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1907">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1908">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1908">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1909">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1909">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1910">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1910">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1911">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1911">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1912">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1912">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseHover As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseHover;" />
      <MemberSignature Language="F#" Value="member this.MouseHover : EventHandler " Usage="member this.MouseHover : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1913">마우스 포인터가 컨트롤 위에 있을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1913">Occurs when the mouse pointer rests on the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1914">일반적인 사용 <xref:System.Windows.Forms.Control.MouseHover> 컨트롤 ("호버 사각형")으로 지정 된 영역 내에서 컨트롤에 마우스를 놓을 때 도구 설명 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1914">A typical use of <xref:System.Windows.Forms.Control.MouseHover> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</span></span> <span data-ttu-id="a1309-1915">이 이벤트를 발생 하는 데 필요한 일시 중지 하 여 밀리초 단위로 지정 된 된 <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1915">The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.</span></span>  
  
 <span data-ttu-id="a1309-1916">합니다 <xref:System.Windows.Forms.Control.MouseHover> 이벤트 정의 되 고 연결 하 여 검색 합니다 <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> 및 <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1916">The <xref:System.Windows.Forms.Control.MouseHover> event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.</span></span>  
  
 <span data-ttu-id="a1309-1917">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1917">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1918">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1918">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1919">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1919">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1920">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1920">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1921">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1921">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1922">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1922">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1923">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1923">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1924">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1924">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1925">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1925">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1926">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1926">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1927">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1927">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.SystemInformation.MouseHoverTime" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : EventHandler " Usage="member this.MouseLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1928">마우스 포인터가 컨트롤을 벗어나면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1928">Occurs when the mouse pointer leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1929">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1929">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1930">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1930">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1931">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1931">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1932">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1932">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1933">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1933">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1934">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1934">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1935">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1935">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1936">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1936">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1937">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1937">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1938">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1938">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1939">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1939">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1940">마우스 포인터를 컨트롤 위로 이동하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1940">Occurs when the mouse pointer is moved over the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1941">일반적인 용도 <xref:System.Windows.Forms.Control.MouseMove> 컨트롤의 색을 변경 하거나 컨트롤 주변의 볼록한 사각형을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1941">Typical uses of <xref:System.Windows.Forms.Control.MouseMove> are to change the control's color or to paint a raised rectangle around the control.</span></span>  
  
 <span data-ttu-id="a1309-1942">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1942">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1943">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1943">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1944">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1944">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1945">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1945">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1946">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1946">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1947">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1947">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1948">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1948">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1949">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1949">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1950">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1950">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1951">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1951">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1952">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1952">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MousePosition" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MousePosition As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point MousePosition { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.MousePosition : System.Drawing.Point" Usage="System.Windows.Forms.Control.MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1953">화면 좌표에서 마우스 커서의 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1953">Gets the position of the mouse cursor in screen coordinates.</span></span></summary>
        <value><span data-ttu-id="a1309-1954">화면의 왼쪽 위 모퉁이를 기준으로 마우스 커서의 좌표가 포함된 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1954">A <see cref="T:System.Drawing.Point" /> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1955">합니다 <xref:System.Windows.Forms.Control.MousePosition%2A> 속성이 반환을 <xref:System.Drawing.Point> 은 속성이 참조 시 마우스 커서의 위치를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1955">The <xref:System.Windows.Forms.Control.MousePosition%2A> property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced.</span></span> <span data-ttu-id="a1309-1956">좌표는 컨트롤에 상대적인 하지 화면에서 위치를 나타냅니다. 그리고 컨트롤 위에 커서가 배치 되는지 여부에 관계 없이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1956">The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</span></span> <span data-ttu-id="a1309-1957">화면의 왼쪽 위 모퉁이의 좌표는 0, 0입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1957">The coordinates of the upper-left corner of the screen are 0,0.</span></span>  
  
 <span data-ttu-id="a1309-1958">합니다 <xref:System.Windows.Forms.Control.MousePosition%2A> 속성이 동일 합니다 <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1958">The <xref:System.Windows.Forms.Control.MousePosition%2A> property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1959">다음 코드 예제에서는 put를 <xref:System.Windows.Forms.TreeNode> 레이블을 마우스 커서가 트리 노드 위에 있는 동안 사용자 ALT + E를 누르면 편집 가능한 상태에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1959">The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node.</span></span> <span data-ttu-id="a1309-1960">사용자가 완료 되 면 레이블의 편집 레이블을 편집할 수 없습니다 다시 ALT + E 키 조합을 다시 누를 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1960">After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again.</span></span> <span data-ttu-id="a1309-1961">이 예제를 실행 하려면를 <xref:System.Windows.Forms.TreeView> 에 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1961">This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-1962">트리 뷰에서 있어야 하나 이상의 <xref:System.Windows.Forms.TreeNode> 에서 해당 <xref:System.Windows.Forms.TreeView.Nodes%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1962">The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseUp : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1963">마우스 포인터가 컨트롤 위에 있을 때 마우스 단추를 눌렀다 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1963">Occurs when the mouse pointer is over the control and a mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1964">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1964">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-1965">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <xref:System.Windows.Forms.TabControl> 하나 이상의 경우가 아니라면 클래스 <xref:System.Windows.Forms.TabPage> 에 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> 컬렉션: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> 고 <xref:System.Windows.Forms.Control.MouseMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1965">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="a1309-1966">하나 이상 있으면 <xref:System.Windows.Forms.TabPage> 컬렉션에 탭 컨트롤의 헤더를 사용 하 여 사용자 상호 작용 하 고 (여기서는 <xref:System.Windows.Forms.TabPage> 이름이 표시), <xref:System.Windows.Forms.TabControl> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1966">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="a1309-1967">하지만 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <xref:System.Windows.Forms.TabPage> 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1967">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="a1309-1968">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1968">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1969">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1969">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1970">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1970">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1971">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1971">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1972">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1972">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1973">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1973">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1974">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1974">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1975">컨트롤에 포커스가 있을 때 마우스 휠을 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1975">Occurs when the mouse wheel moves while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1976">처리 하는 경우는 <xref:System.Windows.Forms.Control.MouseWheel> 마우스 휠과 사용 하 여 연결 된 사용자 인터페이스 (UI) 표준을 준수 해야 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1976">When handling the <xref:System.Windows.Forms.Control.MouseWheel> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</span></span> <span data-ttu-id="a1309-1977"><xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> 속성 값을 지정 양의 휠을 이동 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1977">The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> property value indicates the amount the mouse wheel has been moved.</span></span> <span data-ttu-id="a1309-1978">누적 된 델타 더하기 또는 빼기 120 때 UI 스크롤해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1978">The UI should scroll when the accumulated delta is plus or minus 120.</span></span> <span data-ttu-id="a1309-1979">델타 반환한 논리 줄의 수는 <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> 모든 델타 값에 대 한 속성에 도달 했습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1979">The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> property for every delta value reached.</span></span> <span data-ttu-id="a1309-1980">하지만 스크롤할 수 있습니다도 더 원활 하 게 작은 120 단위 증가 시키는 비율 즉 상수를 유지 해야 <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> 줄 스크롤 휠 이동 120 델타 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1980">You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> lines scrolled per 120 delta units of wheel movement.</span></span>  
  
 <span data-ttu-id="a1309-1981">마우스 휠 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는 [WM_MOUSEWHEEL](https://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1981">For more information about handling mouse wheel messages, see the [WM_MOUSEWHEEL](https://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-1982">마우스 이벤트는 다음 순서대로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1982">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 <span data-ttu-id="a1309-1983">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1983">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1984">다음 코드 예제 마우스의 경로 그릴 다른 마우스 이벤트를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.Panel>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1984">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="a1309-1985">선 세그먼트에 추가 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 각각에 대해 <xref:System.Windows.Forms.Control.MouseMove> 및 <xref:System.Windows.Forms.Control.MouseDown> 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1985">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="a1309-1986">그래픽을 업데이트 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Panel> 각 `MouseDown` 및 `MouseUp` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1986">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="a1309-1987">그래픽 경로 위나 아래로 때 스크롤되는 또한는 <xref:System.Windows.Forms.Control.MouseWheel> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1987">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="a1309-1988">와 같은 추가 마우스 이벤트가 <xref:System.Windows.Forms.Control.MouseHover>, 화면에서 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1988">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="a1309-1989">마우스에 대 한 추가 정보는 화면에 표시 된 <xref:System.Windows.Forms.SystemInformation> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1989">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Move" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Move As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Move;" />
      <MemberSignature Language="F#" Value="member this.Move : EventHandler " Usage="member this.Move : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1990">컨트롤이 이동하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1990">Occurs when the control is moved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1991">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-1991">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1992">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.Move> 폼의 캡션 표시줄의 화면 좌표에서 폼의 위치를 표시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1992">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Control.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-1993">컨트롤의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1993">Gets or sets the name of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-1994">컨트롤의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1994">The name of the control.</span></span> <span data-ttu-id="a1309-1995">기본값은 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1995">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-1996"><xref:System.Windows.Forms.Control.Name%2A> 속성 수 런타임 시 개체를 확인할 이름 보다는 형식 및 프로그래밍 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1996">The <xref:System.Windows.Forms.Control.Name%2A> property can be used at run time to evaluate the object by name rather than type and programmatic name.</span></span> <span data-ttu-id="a1309-1997">때문에 <xref:System.Windows.Forms.Control.Name%2A> 속성에서 반환을 <xref:System.String> 형식 대/소문자 스타일 논리 문에서 평가할 수 있습니다 (`Select` Visual basic에서는 문을 `switch` 문 Visual C#에서 및 [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]).</span><span class="sxs-lookup"><span data-stu-id="a1309-1997">Because the <xref:System.Windows.Forms.Control.Name%2A> property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in Visual Basic, `switch` statement in Visual C# and [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-1998">다음 코드 예제는 <xref:System.Windows.Forms.Control.Name%2A> 컨트롤의 한 <xref:System.Windows.Forms.MessageBox> 컨트롤 추가 또는 폼에서 제거할 때.</span><span class="sxs-lookup"><span data-stu-id="a1309-1998">The following code example displays the <xref:System.Windows.Forms.Control.Name%2A> of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.ISite.Name" />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub NotifyInvalidate (invalidatedArea As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void NotifyInvalidate(System::Drawing::Rectangle invalidatedArea);" />
      <MemberSignature Language="F#" Value="abstract member NotifyInvalidate : System.Drawing.Rectangle -&gt; unit&#xA;override this.NotifyInvalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.NotifyInvalidate invalidatedArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea"><span data-ttu-id="a1309-1999">무효화할 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-1999">A <see cref="T:System.Drawing.Rectangle" /> representing the area to invalidate.</span></span></param>
        <summary><span data-ttu-id="a1309-2000">무효화할 컨트롤의 지정한 영역에서 <see cref="E:System.Windows.Forms.Control.Invalidated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2000">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event with a specified region of the control to invalidate.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeChanged : EventArgs -&gt; unit&#xA;override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="control.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2001">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2001">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2002"><see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2002">Raises the <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2003">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2003">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2004">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2004">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2005">또한 <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2005">The <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2006">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2006">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2007">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2007">When overriding <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="control.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2008">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2008">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2009"><see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2009">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2010">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2010">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2011">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2011">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2012">또한 <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2012">The <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2013">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2013">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2014">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2014">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2015">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2015">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2016">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2016">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2017">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2017">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2018">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2018">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2019">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2019">When overriding <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2020">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2020">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2021"><see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2021">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2022">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2022">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2023">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2023">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2024">또한 <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2024">The <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2025">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2025">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2026">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2026">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2027">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2027">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2028">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2028">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2029">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2029">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2030">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2030">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2031">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2031">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageLayoutChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2032">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2032">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2033"><see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2033">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2034">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2034">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2035">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2035">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2036">또한 <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2036">The <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2037">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2037">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2038">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2038">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2039">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2039">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2040"><see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2040">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2041">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2041">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2042">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2042">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2043">또한 <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2043">The <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2044">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2044">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2045">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2045">When overriding <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCausesValidationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCausesValidationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCausesValidationChanged : EventArgs -&gt; unit&#xA;override this.OnCausesValidationChanged : EventArgs -&gt; unit" Usage="control.OnCausesValidationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2046">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2046">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2047"><see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2047">Raises the <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2048">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2048">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2049">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2049">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2050">또한 <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2050">The <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2051">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2051">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2052">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2052">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2053">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2053">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2054">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2054">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2055">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2055">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2056">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2056">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2057">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2057">When overriding <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CausesValidationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit&#xA;override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="control.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2058">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.UICuesEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2058">A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2059"><see cref="E:System.Windows.Forms.Control.ChangeUICues" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2059">Raises the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2060">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2060">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2061">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2061">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2062">또한 <xref:System.Windows.Forms.Control.OnChangeUICues%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2062">The <xref:System.Windows.Forms.Control.OnChangeUICues%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2063">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2063">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2064">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2064">When overriding <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="T:System.Windows.Forms.UICues" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="control.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2065">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2065">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2066"><see cref="E:System.Windows.Forms.Control.Click" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2066">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2067">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2067">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2068">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2068">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2069">또한 <xref:System.Windows.Forms.Control.OnClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2069">The <xref:System.Windows.Forms.Control.OnClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2070">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2070">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2071">다음 코드 예제에서는 재정의 <xref:System.Windows.Forms.Control.OnClick%2A> 파생된 클래스에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2071">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.OnClick%2A> method in a derived class.</span></span> <span data-ttu-id="a1309-2072">예제를 실행 하려면 폼 클래스를 같은 파일에 뒤 다음 코드를 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2072">To run the example, paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="a1309-2073">형식의 텍스트 상자를 추가 `SingleClickTextBox` 폼입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2073">Add a textbox of type `SingleClickTextBox` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/VB/form1.vb#1)]  
  
 <span data-ttu-id="a1309-2074">다음 코드 예제에서는의 여러 기능 중 하나는 <xref:System.Windows.Forms.Control.Click> 이벤트와 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2074">The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2075">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2075">When overriding <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClientSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClientSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClientSizeChanged : EventArgs -&gt; unit&#xA;override this.OnClientSizeChanged : EventArgs -&gt; unit" Usage="control.OnClientSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2076">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2076">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2077"><see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2077">Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2078">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2078">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2079">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2079">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2080">또한 <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2080">The <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2081">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2081">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2082">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2082">When overriding <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2083">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2083">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2084"><see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2084">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2085">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2085">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2086">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2086">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2087">또한 <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2087">The <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2088">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2088">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2089">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2089">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2090">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2090">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2091">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2091">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2092">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2092">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2093">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2093">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2094">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2094">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ContextMenuChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuStripChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuStripChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuStripChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuStripChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2095">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2095">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2096"><see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2096">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2097">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2097">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2098">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2098">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2099">또한 <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2099">The <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2100">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2100">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2101">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2101">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlAdded (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlAdded(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2102">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ControlEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2102">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2103"><see cref="E:System.Windows.Forms.Control.ControlAdded" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2103">Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2104">컨트롤에 자식 컨트롤이 추가 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2104">Called when a child control is added to the control.</span></span>  
  
 <span data-ttu-id="a1309-2105">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2105">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2106">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2106">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2107">또한 <xref:System.Windows.Forms.Control.OnControlAdded%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2107">The <xref:System.Windows.Forms.Control.OnControlAdded%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2108">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2108">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2109">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.ControlAdded> 폼에 컨트롤을 추가 하려면에 추가 된 컨트롤의 이름을 표시 하 고는 <xref:System.Windows.Forms.MessageBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2109">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2110">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2110">When overriding <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlRemoved (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlRemoved(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2111">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ControlEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2111">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2112"><see cref="E:System.Windows.Forms.Control.ControlRemoved" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2112">Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2113">자식 컨트롤을 컨트롤에서 제거 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2113">Called when a child control is removed from the control.</span></span>  
  
 <span data-ttu-id="a1309-2114">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2114">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2115">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2115">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2116">또한 <xref:System.Windows.Forms.Control.OnControlRemoved%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2116">The <xref:System.Windows.Forms.Control.OnControlRemoved%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2117">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2117">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2118">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.ControlRemoved> 폼에서 컨트롤을 제거 하려면 제거 컨트롤의 이름을 표시 하 고는 <xref:System.Windows.Forms.MessageBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2118">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2119">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2119">When overriding <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCreateControl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateControl();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateControl : unit -&gt; unit&#xA;override this.OnCreateControl : unit -&gt; unit" Usage="control.OnCreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-2120"><see cref="M:System.Windows.Forms.Control.CreateControl" /> 메서드를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2120">Raises the <see cref="M:System.Windows.Forms.Control.CreateControl" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2121"><xref:System.Windows.Forms.Control.OnCreateControl%2A> 메서드는 컨트롤을 처음으로 만들어질 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2121">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method is called when the control is first created.</span></span>  
  
 <span data-ttu-id="a1309-2122">또한 <xref:System.Windows.Forms.Control.OnCreateControl%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2122">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2123">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2123">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2124">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnCreateControl" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2124">When overriding <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCursorChanged : EventArgs -&gt; unit&#xA;override this.OnCursorChanged : EventArgs -&gt; unit" Usage="control.OnCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2125">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2125">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2126"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2126">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2127">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2127">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2128">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2128">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2129">또한 <xref:System.Windows.Forms.Control.OnCursorChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2129">The <xref:System.Windows.Forms.Control.OnCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2130">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2130">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2131">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2131">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2132">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2132">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2133">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2133">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2134">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2134">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2135">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2135">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2136">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2136">When overriding <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDockChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDockChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDockChanged : EventArgs -&gt; unit&#xA;override this.OnDockChanged : EventArgs -&gt; unit" Usage="control.OnDockChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2137">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2137">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2138"><see cref="E:System.Windows.Forms.Control.DockChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2138">Raises the <see cref="E:System.Windows.Forms.Control.DockChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2139">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2139">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2140">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2140">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2141">또한 <xref:System.Windows.Forms.Control.OnDockChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2141">The <xref:System.Windows.Forms.Control.OnDockChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2142">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2142">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2143">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2143">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2144">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2144">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2145">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2145">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2146">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2146">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2147">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2147">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2148">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2148">When overriding <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DockChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoubleClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoubleClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoubleClick : EventArgs -&gt; unit&#xA;override this.OnDoubleClick : EventArgs -&gt; unit" Usage="control.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2149">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2149">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2150"><see cref="E:System.Windows.Forms.Control.DoubleClick" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2150">Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2151">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2151">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2152">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2152">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2153">또한 <xref:System.Windows.Forms.Control.OnDoubleClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2153">The <xref:System.Windows.Forms.Control.OnDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2154">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2154">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2155">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.DoubleClick> 의 이벤트를 <xref:System.Windows.Forms.ListBox> 에 나열 된 텍스트 파일을 로드 하는 <xref:System.Windows.Forms.ListBox> 에 <xref:System.Windows.Forms.TextBox> 컨트롤.</span><span class="sxs-lookup"><span data-stu-id="a1309-2155">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2156">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2156">When overriding <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedAfterParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedAfterParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedAfterParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedAfterParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedAfterParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedAfterParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedAfterParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedAfterParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2157">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2157">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2158"><see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2158">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedBeforeParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedBeforeParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedBeforeParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedBeforeParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedBeforeParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedBeforeParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedBeforeParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2159">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2159">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2160"><see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2160">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragDrop (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragDrop drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="a1309-2161">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2161">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2162"><see cref="E:System.Windows.Forms.Control.DragDrop" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2162">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2163">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2163">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2164">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2164">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2165">또한 <xref:System.Windows.Forms.Control.OnDragDrop%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2165">The <xref:System.Windows.Forms.Control.OnDragDrop%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2166">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2166">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2167">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2167">When overriding <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragEnter drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="a1309-2168">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2168">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2169"><see cref="E:System.Windows.Forms.Control.DragEnter" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2169">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2170">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2170">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2171">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2171">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2172">또한 <xref:System.Windows.Forms.Control.OnDragEnter%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2172">The <xref:System.Windows.Forms.Control.OnDragEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2173">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2173">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2174">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2174">When overriding <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : EventArgs -&gt; unit&#xA;override this.OnDragLeave : EventArgs -&gt; unit" Usage="control.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2175">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2175">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2176"><see cref="E:System.Windows.Forms.Control.DragLeave" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2176">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2177">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2177">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2178">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2178">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2179">또한 <xref:System.Windows.Forms.Control.OnDragLeave%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2179">The <xref:System.Windows.Forms.Control.OnDragLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2180">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2180">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2181">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2181">When overriding <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragOver drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="a1309-2182">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2182">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2183"><see cref="E:System.Windows.Forms.Control.DragOver" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2183">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2184">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2184">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2185">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2185">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2186">또한 <xref:System.Windows.Forms.Control.OnDragOver%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2186">The <xref:System.Windows.Forms.Control.OnDragOver%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2187">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2187">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2188">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2188">When overriding <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="control.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2189">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2189">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2190"><see cref="E:System.Windows.Forms.Control.EnabledChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2190">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2191">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2192">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2193">또한 <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2193">The <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2194">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2195">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2195">When overriding <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnter : EventArgs -&gt; unit&#xA;override this.OnEnter : EventArgs -&gt; unit" Usage="control.OnEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2196">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2196">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2197"><see cref="E:System.Windows.Forms.Control.Enter" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2197">Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2198">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2198">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2199">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2199">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2200">또한 <xref:System.Windows.Forms.Control.OnEnter%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2200">The <xref:System.Windows.Forms.Control.OnEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2201">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2201">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2202">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.Enter> 의 전경과 배경 색상을 변경 하는 이벤트를 <xref:System.Windows.Forms.TextBox> 특정 조건입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2202">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2203">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2203">When overriding <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFontChanged : EventArgs -&gt; unit&#xA;override this.OnFontChanged : EventArgs -&gt; unit" Usage="control.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2204">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2204">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2205"><see cref="E:System.Windows.Forms.Control.FontChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2205">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2206">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2206">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2207">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2207">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2208">또한 <xref:System.Windows.Forms.Control.OnFontChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2208">The <xref:System.Windows.Forms.Control.OnFontChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2209">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2209">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2210">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2210">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2211">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2211">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2212">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2212">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2213">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2213">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2214">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2214">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2215">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2215">When overriding <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnForeColorChanged : EventArgs -&gt; unit" Usage="control.OnForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2216">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2216">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2217"><see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2217">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2218">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2218">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2219">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2219">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2220">또한 <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2220">The <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2221">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2221">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2222">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2222">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2223">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2223">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2224">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2224">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2225">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2225">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2226">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2226">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2227">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2227">When overriding <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (gfbevent As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ gfbevent);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="control.OnGiveFeedback gfbevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent"><span data-ttu-id="a1309-2228">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2228">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2229"><see cref="E:System.Windows.Forms.Control.GiveFeedback" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2229">Raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2230">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2230">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2231">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2231">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2232">또한 <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2232">The <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2233">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2233">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2234">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2234">When overriding <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : EventArgs -&gt; unit&#xA;override this.OnGotFocus : EventArgs -&gt; unit" Usage="control.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2235">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2235">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2236"><see cref="E:System.Windows.Forms.Control.GotFocus" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2236">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2237">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2237">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2238">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2238">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2239">또한 <xref:System.Windows.Forms.Control.OnGotFocus%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2239">The <xref:System.Windows.Forms.Control.OnGotFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2240">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2240">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2241">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2241">When overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleCreated : EventArgs -&gt; unit&#xA;override this.OnHandleCreated : EventArgs -&gt; unit" Usage="control.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2242">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2242">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2243"><see cref="E:System.Windows.Forms.Control.HandleCreated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2243">Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2244">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2244">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2245">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2245">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2246">또한 <xref:System.Windows.Forms.Control.OnHandleCreated%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2246">The <xref:System.Windows.Forms.Control.OnHandleCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2247">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2247">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2248">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2248">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleDestroyed : EventArgs -&gt; unit&#xA;override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="control.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2249">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2249">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2250"><see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2250">Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2251">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2251">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2252">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2252">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2253">또한 <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2253">The <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2254">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2254">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2255">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2255">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleDestroyed" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequested (hevent As HelpEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequested(System::Windows::Forms::HelpEventArgs ^ hevent);" />
      <MemberSignature Language="F#" Value="abstract member OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit&#xA;override this.OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit" Usage="control.OnHelpRequested hevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent"><span data-ttu-id="a1309-2256">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.HelpEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2256">A <see cref="T:System.Windows.Forms.HelpEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2257"><see cref="E:System.Windows.Forms.Control.HelpRequested" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2257">Raises the <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2258">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2258">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2259">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2259">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2260">또한 <xref:System.Windows.Forms.Control.OnHelpRequested%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2260">The <xref:System.Windows.Forms.Control.OnHelpRequested%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2261">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2261">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2262">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2262">When overriding <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HelpRequested" />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeModeChanged : EventArgs -&gt; unit&#xA;override this.OnImeModeChanged : EventArgs -&gt; unit" Usage="control.OnImeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2263">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2263">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2264"><see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2264">Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2265">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2265">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2266">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2266">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2267">또한 <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2267">The <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2268">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2268">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2269">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2269">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2270">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2270">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2271">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2271">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2272">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2272">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2273">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2273">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2274">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2274">When overriding <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ImeModeChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInvalidated (e As InvalidateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInvalidated(System::Windows::Forms::InvalidateEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit&#xA;override this.OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit" Usage="control.OnInvalidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2275">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.InvalidateEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2275">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2276"><see cref="E:System.Windows.Forms.Control.Invalidated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2276">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2277">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2277">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2278">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2278">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2279">또한 <xref:System.Windows.Forms.Control.OnInvalidated%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2279">The <xref:System.Windows.Forms.Control.OnInvalidated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2280">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2280">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2281">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2281">When overriding <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Invalidated" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2282">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2282">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2283"><see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2283">Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2284">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2284">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2285">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2285">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2286">또한 <xref:System.Windows.Forms.Control.OnKeyDown%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2286">The <xref:System.Windows.Forms.Control.OnKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2287">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2287">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2288">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.KeyDown> 컨트롤에 입력 한 문자의 형식을 확인 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2288">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2289">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2289">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit&#xA;override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="control.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2290">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2290">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2291"><see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2291">Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2292">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2292">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2293">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2293">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2294">또한 <xref:System.Windows.Forms.Control.OnKeyPress%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2294">The <xref:System.Windows.Forms.Control.OnKeyPress%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2295">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2295">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2296">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 문자로 컨트롤에 진입 하지 못하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2296">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2297">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2297">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2298">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2298">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2299"><see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2299">Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2300">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2300">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2301">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2301">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2302">또한 <xref:System.Windows.Forms.Control.OnKeyUp%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2302">The <xref:System.Windows.Forms.Control.OnKeyUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2303">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2303">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2304">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.KeyUp> 이벤트는 <xref:System.Windows.Forms.Help> 사용자에 게 도움말 팝업 스타일을 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2304">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2305">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2305">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="abstract member OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit&#xA;override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="control.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent"><span data-ttu-id="a1309-2306">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.LayoutEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2306">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2307"><see cref="E:System.Windows.Forms.Control.Layout" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2307">Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2308">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2308">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2309">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2309">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2310">또한 <xref:System.Windows.Forms.Control.OnLayout%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2310">The <xref:System.Windows.Forms.Control.OnLayout%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2311">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2311">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2312">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 수신할 수 있도록 및 일반 도킹 및 고정 기능이 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2312">When overriding <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event and for typical docking and anchoring functions to work.</span></span> <span data-ttu-id="a1309-2313">파생된 클래스는 모든 사용자 지정 레이아웃 논리를 수행 하려면이 메서드를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2313">Derived classes should override this method to do any custom layout logic.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLeave : EventArgs -&gt; unit&#xA;override this.OnLeave : EventArgs -&gt; unit" Usage="control.OnLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2314">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2314">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2315"><see cref="E:System.Windows.Forms.Control.Leave" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2315">Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2316">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2316">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2317">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2317">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2318">또한 <xref:System.Windows.Forms.Control.OnLeave%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2318">The <xref:System.Windows.Forms.Control.OnLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2319">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2319">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2320">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.Leave> 를 이전 상태로 컨트롤을 다시 설정 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2320">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2321">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2321">When overriding <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="control.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2322">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2322">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2323"><see cref="E:System.Windows.Forms.Control.LocationChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2323">Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2324">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2324">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2325">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2325">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2326">또한 <xref:System.Windows.Forms.Control.OnLocationChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2326">The <xref:System.Windows.Forms.Control.OnLocationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2327">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2327">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2328">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2328">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2329">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2329">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2330">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2330">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2331">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2331">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2332">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2332">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2333">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2333">When overriding <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LocationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : EventArgs -&gt; unit&#xA;override this.OnLostFocus : EventArgs -&gt; unit" Usage="control.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2334">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2334">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2335"><see cref="E:System.Windows.Forms.Control.LostFocus" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2335">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2336">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2336">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2337">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2337">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2338">또한 <xref:System.Windows.Forms.Control.OnLostFocus%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2338">The <xref:System.Windows.Forms.Control.OnLostFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2339">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2339">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2340">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2340">When overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMarginChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMarginChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMarginChanged : EventArgs -&gt; unit&#xA;override this.OnMarginChanged : EventArgs -&gt; unit" Usage="control.OnMarginChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2341">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2341">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2342"><see cref="E:System.Windows.Forms.Control.MarginChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2342">Raises the <see cref="E:System.Windows.Forms.Control.MarginChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2343">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2343">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2344">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2344">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2345">또한 <xref:System.Windows.Forms.Control.OnMarginChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2345">The <xref:System.Windows.Forms.Control.OnMarginChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2346">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2346">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2347">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2347">When overriding <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseCaptureChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseCaptureChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseCaptureChanged : EventArgs -&gt; unit&#xA;override this.OnMouseCaptureChanged : EventArgs -&gt; unit" Usage="control.OnMouseCaptureChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2348">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2348">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2349"><see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2349">Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2350">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2350">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2351">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2351">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2352">또한 <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2352">The <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2353">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2353">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2354">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2354">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2355">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2355">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2356"><see cref="E:System.Windows.Forms.Control.MouseClick" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2356">Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2357">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2357">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2358">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2358">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2359">또한 <xref:System.Windows.Forms.Control.OnMouseClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2359">The <xref:System.Windows.Forms.Control.OnMouseClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2360">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2360">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2361">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2361">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2362">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2362">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2363"><see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2363">Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2364">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2364">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2365">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2365">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2366">또한 <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2366">The <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2367">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2367">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2368">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2368">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2369">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2369">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2370"><see cref="E:System.Windows.Forms.Control.MouseDown" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2370">Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2371">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2371">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2372">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2372">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2373">또한 <xref:System.Windows.Forms.Control.OnMouseDown%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2373">The <xref:System.Windows.Forms.Control.OnMouseDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2374">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2374">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2375">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2375">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : EventArgs -&gt; unit&#xA;override this.OnMouseEnter : EventArgs -&gt; unit" Usage="control.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2376">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2376">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2377"><see cref="E:System.Windows.Forms.Control.MouseEnter" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2377">Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2378">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2378">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2379">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2379">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2380">또한 <xref:System.Windows.Forms.Control.OnMouseEnter%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2380">The <xref:System.Windows.Forms.Control.OnMouseEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2381">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2381">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2382">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2382">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseEnter" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : EventArgs -&gt; unit&#xA;override this.OnMouseHover : EventArgs -&gt; unit" Usage="control.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2383">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2383">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2384"><see cref="E:System.Windows.Forms.Control.MouseHover" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2384">Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2385">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2385">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2386">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2386">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2387">또한 <xref:System.Windows.Forms.Control.OnMouseHover%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2387">The <xref:System.Windows.Forms.Control.OnMouseHover%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2388">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2388">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2389">다음 코드 예제에서는 재정의 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.OnMouseHover%2A> 및 <xref:System.Windows.Forms.Control.OnMouseMove%2A> 파생된 클래스에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2389">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="a1309-2390">예제를 실행, 새 폼에 다음 코드를 붙여 붙여넣습니다이 클래스를 같은 파일 형식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2390">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="a1309-2391">형식의 단추 추가 `FunButton` 폼입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2391">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2392">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2392">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : EventArgs -&gt; unit&#xA;override this.OnMouseLeave : EventArgs -&gt; unit" Usage="control.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2393">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2393">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2394"><see cref="E:System.Windows.Forms.Control.MouseLeave" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2394">Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2395">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2395">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2396">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2396">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2397">또한 <xref:System.Windows.Forms.Control.OnMouseLeave%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2397">The <xref:System.Windows.Forms.Control.OnMouseLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2398">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2398">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2399">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2399">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2400">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2400">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2401"><see cref="E:System.Windows.Forms.Control.MouseMove" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2401">Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2402">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2402">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2403">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2403">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2404">또한 <xref:System.Windows.Forms.Control.OnMouseMove%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2404">The <xref:System.Windows.Forms.Control.OnMouseMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2405">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2405">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2406">다음 코드 예제에서는 재정의 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.OnMouseHover%2A> 및 <xref:System.Windows.Forms.Control.OnMouseMove%2A> 파생된 클래스에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2406">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="a1309-2407">예제를 실행, 새 폼에 다음 코드를 붙여 붙여넣습니다이 클래스를 같은 파일 형식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2407">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="a1309-2408">형식의 단추 추가 `FunButton` 폼입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2408">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2409">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2409">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2410">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2410">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2411"><see cref="E:System.Windows.Forms.Control.MouseUp" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2411">Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2412">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2412">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2413">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2413">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2414">또한 <xref:System.Windows.Forms.Control.OnMouseUp%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2414">The <xref:System.Windows.Forms.Control.OnMouseUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2415">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2415">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2416">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2416">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2417">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2417">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2418"><see cref="E:System.Windows.Forms.Control.MouseWheel" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2418">Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2419">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2419">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2420">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2420">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2421">또한 <xref:System.Windows.Forms.Control.OnMouseWheel%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2421">The <xref:System.Windows.Forms.Control.OnMouseWheel%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2422">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2422">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2423">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2423">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseWheel" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMove (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMove(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMove : EventArgs -&gt; unit&#xA;override this.OnMove : EventArgs -&gt; unit" Usage="control.OnMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2424">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2424">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2425"><see cref="E:System.Windows.Forms.Control.Move" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2425">Raises the <see cref="E:System.Windows.Forms.Control.Move" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2426">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2426">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2427">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2427">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2428">또한 <xref:System.Windows.Forms.Control.OnMove%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2428">The <xref:System.Windows.Forms.Control.OnMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2429">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2429">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2430">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.Move> 폼의 캡션 표시줄의 화면 좌표에서 폼의 위치를 표시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2430">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2431">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2431">When overriding <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Move" />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNotifyMessage (m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNotifyMessage(System::Windows::Forms::Message m);" />
      <MemberSignature Language="F#" Value="abstract member OnNotifyMessage : System.Windows.Forms.Message -&gt; unit&#xA;override this.OnNotifyMessage : System.Windows.Forms.Message -&gt; unit" Usage="control.OnNotifyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-2432">Windows 메시지를 나타내는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2432">A <see cref="T:System.Windows.Forms.Message" /> that represents the Windows message.</span></span></param>
        <summary><span data-ttu-id="a1309-2433">컨트롤에 Windows 메시지를 알립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2433">Notifies the control of Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2434">합니다 <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> 경우 메서드는 컨트롤의 `EnableNotifyMessage` 에 스타일 비트가 설정 <xref:System.Windows.Forms.ControlStyles>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2434">The <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> method is called if the control's `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>.</span></span> <span data-ttu-id="a1309-2435">`EnableNotifyMessage` 의 스타일 지정 <xref:System.Windows.Forms.ControlStyles> 때 알림을 받도록 제어할 수 있습니다는 <xref:System.Windows.Forms.Control.WndProc%2A> 메서드 Windows 메시지를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2435">The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message.</span></span> <span data-ttu-id="a1309-2436">이 메서드를 사용 하 여 부분적으로 신뢰할 수 있는 컨트롤 메시지를 수정 하기를 사용 하지 않고 Windows 메시지를 수신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2436">With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2437">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> 파생된 클래스에서 기본 클래스의 호출 <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> 초기 구현이 없으므로 메서드는 필요 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2437">When overriding <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> in a derived class, calling the base class's <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is not necessary because there is no initial implementation.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaddingChanged : EventArgs -&gt; unit&#xA;override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="control.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2438">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2438">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2439"><see cref="E:System.Windows.Forms.Control.PaddingChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2439">Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2440">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2440">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2441">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2441">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2442">또한 <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2442">The <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2443">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2443">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2444">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2444">When overriding <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2445">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2445">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2446"><see cref="E:System.Windows.Forms.Control.Paint" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2446">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2447">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2447">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2448">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2448">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2449"><xref:System.Windows.Forms.Control.OnPaint%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2449">The <xref:System.Windows.Forms.Control.OnPaint%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2450">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2450">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2451">다음 코드 예제에서는 사용 하면 이미지 또는 이미지 파일을 폼으로 끌어을 하 게 삭제 하는 지점에 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2451">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped.</span></span> <span data-ttu-id="a1309-2452"><xref:System.Windows.Forms.Control.OnPaint%2A> 는 다음에 다시 그릴 때까지 유지 하는 이미지가 고, 그렇지 않으면 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2452">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="a1309-2453"><xref:System.Windows.Forms.Control.DragEnter> 이벤트 처리 메서드를 폼으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2453">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="a1309-2454">합니다 <xref:System.Windows.Forms.Control.DragDrop> 하는 경우 이벤트 처리 메서드를 폼에 이미지를 표시는 <xref:System.Drawing.Image> 데이터로 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2454">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="a1309-2455">때문에 <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> 하 고 <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> 값은 화면 좌표를 사용 하 여는 <xref:System.Windows.Forms.Control.PointToClient%2A> 클라이언트 좌표로 변환 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a1309-2455">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2456">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2456">When overriding <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaintBackground (pevent As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ pevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaintBackground pevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent"><span data-ttu-id="a1309-2457">그리려는 컨트롤에 대한 정보가 포함된 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2457">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</span></span></param>
        <summary><span data-ttu-id="a1309-2458">컨트롤의 배경을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2458">Paints the background of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2459"><xref:System.Windows.Forms.Control.OnPaintBackground%2A> 메서드 파생된 클래스가 Windows 백그라운드 처리를 사용 하도록 설정 지우기 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2459">The <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method enables derived classes to handle Windows background erase requests.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2460">클래스를 상속 하면 windows에서 배경 지우기 요청을 처리 하려면이 메서드를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2460">Inheriting classes should override this method to handle the erase background request from windows.</span></span> <span data-ttu-id="a1309-2461">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> 파생된 클래스에서 필요한 경우가 아니라면 기본 클래스의 호출 <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2461">When overriding <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> in a derived class it is not necessary to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackColorChanged : EventArgs -&gt; unit" Usage="control.OnParentBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2462">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2462">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2463">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.BackColor" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2463">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2464">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2464">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2465">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2465">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2466"><xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2466">The <xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2467">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2467">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2468">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2468">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2469">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2469">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2470">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2470">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2471">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2471">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2472">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2472">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2473">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2473">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnParentBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2474">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2474">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2475">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2475">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2476">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2476">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2477">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2477">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2478"><xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2478">The <xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2479">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2479">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2480">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2480">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2481">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2481">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2482">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2482">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2483">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2483">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2484">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2484">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2485">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2485">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnParentBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnParentBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2486">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2486">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2487">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2487">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2488">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2488">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2489">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2489">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2490"><xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2490">The <xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2491">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2491">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2492">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2492">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2493">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2493">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2494">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2494">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2495">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2495">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2496">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2496">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2497">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2497">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentChanged : EventArgs -&gt; unit&#xA;override this.OnParentChanged : EventArgs -&gt; unit" Usage="control.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2498">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2498">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2499"><see cref="E:System.Windows.Forms.Control.ParentChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2499">Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2500">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2500">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2501">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2501">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2502"><xref:System.Windows.Forms.Control.OnParentChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2502">The <xref:System.Windows.Forms.Control.OnParentChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2503">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2503">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2504">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2504">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2505">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2505">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2506">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2506">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2507">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2507">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2508">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2508">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2509">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2509">When overriding <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ParentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentCursorChanged : EventArgs -&gt; unit&#xA;override this.OnParentCursorChanged : EventArgs -&gt; unit" Usage="control.OnParentCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2510">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2510">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2511"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2511">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2512">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2512">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2513">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2513">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2514">또한 <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2514">The <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2515">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2515">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2516">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2516">When overriding <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnParentEnabledChanged : EventArgs -&gt; unit" Usage="control.OnParentEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2517">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2517">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2518">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.Enabled" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2518">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2519">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2519">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2520">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2520">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2521"><xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2521">The <xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2522">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2522">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2523">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2523">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2524">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2524">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2525">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2525">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2526">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2526">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2527">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2527">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2528">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2528">When overriding <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentFontChanged : EventArgs -&gt; unit&#xA;override this.OnParentFontChanged : EventArgs -&gt; unit" Usage="control.OnParentFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2529">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2529">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2530">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.Font" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2530">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Font" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2531">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2531">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2532">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2532">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2533"><xref:System.Windows.Forms.Control.OnParentFontChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2533">The <xref:System.Windows.Forms.Control.OnParentFontChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2534">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2534">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2535">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2535">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2536">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2536">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2537">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2537">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2538">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2538">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2539">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2539">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2540">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2540">When overriding <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentForeColorChanged : EventArgs -&gt; unit" Usage="control.OnParentForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2541">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2541">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2542">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2542">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2543">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2543">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2544">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2544">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2545"><xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2545">The <xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2546">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2546">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2547">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2547">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2548">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2548">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2549">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2549">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2550">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2550">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2551">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2551">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2552">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2552">When overriding <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnParentRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnParentRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2553">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2553">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2554">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2554">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2555">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2555">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2556">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2556">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2557"><xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2557">The <xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2558">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2558">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2559">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2559">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2560">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2560">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2561">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2561">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2562">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2562">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2563">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2563">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2564">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2564">When overriding <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnParentVisibleChanged : EventArgs -&gt; unit" Usage="control.OnParentVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2565">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2565">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2566">컨트롤 컨테이너의 <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> 속성 값이 변경되면 <see cref="P:System.Windows.Forms.Control.Visible" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2566">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2567">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2567">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2568">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2568">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2569"><xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2569">The <xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2570">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2570">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2571">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2571">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2572">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2572">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2573">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2573">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2574">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2574">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2575">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2575">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2576">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2576">When overriding <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As PreviewKeyDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Forms::PreviewKeyDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit" Usage="control.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2577">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2577">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2578"><see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2578">Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2579">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2579">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2580">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2580">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2581">또한 <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2581">The <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2582">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2582">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2583">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2583">When overriding <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPrint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPrint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPrint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2584">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2584">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2585"><see cref="E:System.Windows.Forms.Control.Paint" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2585">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2586">경우는 `UserPaint` 의 비트를 <xref:System.Windows.Forms.ControlStyles> 설정 재정의할 수 있습니다 <xref:System.Windows.Forms.Control.OnPrint%2A> 계층화 된 그리기 작업을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2586">If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override <xref:System.Windows.Forms.Control.OnPrint%2A> to do layered painting.</span></span> <span data-ttu-id="a1309-2587">자세한 내용은 <xref:System.Windows.Forms.Control.SetStyle%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a1309-2587">See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1309-2588"><paramref name="e" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-2588">The <paramref name="e" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (qcdevent As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ qcdevent);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="control.OnQueryContinueDrag qcdevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent"><span data-ttu-id="a1309-2589">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2589">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2590"><see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2590">Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2591">이 메서드는 반복적으로 호출 끌기가 시작 되는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 끌기 작업 취소 또는 완료 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2591">After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-2592">끌기가 취소 또는 놓기를 수행 하는 시점을 변경 하려는 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2592">Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</span></span>  
  
 <span data-ttu-id="a1309-2593">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2593">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2594">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2594">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2595"><xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2595">The <xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2596">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2596">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2597">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2597">When overriding <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRegionChanged : EventArgs -&gt; unit&#xA;override this.OnRegionChanged : EventArgs -&gt; unit" Usage="control.OnRegionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2598">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2598">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2599"><see cref="E:System.Windows.Forms.Control.RegionChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2599">Raises the <see cref="E:System.Windows.Forms.Control.RegionChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2600">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2600">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2601">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2601">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2602">또한 <xref:System.Windows.Forms.Control.OnRegionChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2602">The <xref:System.Windows.Forms.Control.OnRegionChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2603">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2603">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2604">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2604">When overriding <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResize : EventArgs -&gt; unit&#xA;override this.OnResize : EventArgs -&gt; unit" Usage="control.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2605">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2605">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2606"><see cref="E:System.Windows.Forms.Control.Resize" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2606">Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2607">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2607">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2608">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2608">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2609"><xref:System.Windows.Forms.Control.OnResize%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2609">The <xref:System.Windows.Forms.Control.OnResize%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2610">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2610">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2611">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2611">When overriding <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method so that registered delegates receive the event.</span></span> <span data-ttu-id="a1309-2612"><see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> 메서드를 생성 하는 동안 호출할 수 있도록 재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> 컨트롤 생성자가 호출 되기 전에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2612">The <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method can be called during construction, so if you override <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> it can be called before the control constructor is called.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2613">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2613">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2614"><see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2614">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2615">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2615">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2616">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2616">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2617"><xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2617">The <xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2618">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2618">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2619">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2619">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2620">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2620">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2621">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2621">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2622">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2622">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2623">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2623">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2624">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2624">When overriding <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSizeChanged : EventArgs -&gt; unit&#xA;override this.OnSizeChanged : EventArgs -&gt; unit" Usage="control.OnSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2625">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2625">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2626"><see cref="E:System.Windows.Forms.Control.SizeChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2626">Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2627">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2627">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2628">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2628">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2629"><xref:System.Windows.Forms.Control.OnSizeChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2629">The <xref:System.Windows.Forms.Control.OnSizeChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2630">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2630">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2631">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2631">When overriding <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SizeChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : EventArgs -&gt; unit&#xA;override this.OnStyleChanged : EventArgs -&gt; unit" Usage="control.OnStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2632">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2632">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2633"><see cref="E:System.Windows.Forms.Control.StyleChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2633">Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2634">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2634">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2635">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2635">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2636"><xref:System.Windows.Forms.Control.OnStyleChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2636">The <xref:System.Windows.Forms.Control.OnStyleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2637">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2637">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2638">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2638">When overriding <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.StyleChanged" />
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSystemColorsChanged : EventArgs -&gt; unit&#xA;override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="control.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2639">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2639">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2640"><see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2640">Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2641">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2641">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2642">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2642">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2643"><xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2643">The <xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2644">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2644">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2645">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2645">When overriding <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SystemColorsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabIndexChanged : EventArgs -&gt; unit&#xA;override this.OnTabIndexChanged : EventArgs -&gt; unit" Usage="control.OnTabIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2646">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2646">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2647"><see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2647">Raises the <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2648">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2648">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2649">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2649">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2650"><xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2650">The <xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2651">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2651">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2652">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2652">When overriding <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabIndexChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabStopChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabStopChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabStopChanged : EventArgs -&gt; unit&#xA;override this.OnTabStopChanged : EventArgs -&gt; unit" Usage="control.OnTabStopChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2653">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2653">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2654"><see cref="E:System.Windows.Forms.Control.TabStopChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2654">Raises the <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2655">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2655">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2656">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2656">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2657"><xref:System.Windows.Forms.Control.OnTabStopChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2657">The <xref:System.Windows.Forms.Control.OnTabStopChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2658">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2658">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2659">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2659">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2660">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2660">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2661">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2661">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2662">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2662">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2663">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2663">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2664">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2664">When overriding <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabStopChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextChanged : EventArgs -&gt; unit&#xA;override this.OnTextChanged : EventArgs -&gt; unit" Usage="control.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2665">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2665">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2666"><see cref="E:System.Windows.Forms.Control.TextChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2666">Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2667">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2667">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2668">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2668">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2669"><xref:System.Windows.Forms.Control.OnTextChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2669">The <xref:System.Windows.Forms.Control.OnTextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2670">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2670">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2671">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2671">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2672">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2672">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2673">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2673">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2674">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2674">When overriding <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidated : EventArgs -&gt; unit&#xA;override this.OnValidated : EventArgs -&gt; unit" Usage="control.OnValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2675">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2675">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2676"><see cref="E:System.Windows.Forms.Control.Validated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2676">Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2677">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2677">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2678">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2678">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2679"><xref:System.Windows.Forms.Control.OnValidated%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2679">The <xref:System.Windows.Forms.Control.OnValidated%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2680">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2680">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2681">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2681">When overriding <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="control.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2682">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2682">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2683"><see cref="E:System.Windows.Forms.Control.Validating" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2683">Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2684">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2684">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2685">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2685">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2686"><xref:System.Windows.Forms.Control.OnValidating%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2686">The <xref:System.Windows.Forms.Control.OnValidating%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2687">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2687">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2688">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2688">When overriding <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnVisibleChanged : EventArgs -&gt; unit" Usage="control.OnVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-2689">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2689">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2690"><see cref="E:System.Windows.Forms.Control.VisibleChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2690">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2691">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2691">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a1309-2692">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2692">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a1309-2693"><xref:System.Windows.Forms.Control.OnVisibleChanged%2A> 메서드는 파생된 클래스가 대리자를 연결 하지 않고 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2693">The <xref:System.Windows.Forms.Control.OnVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a1309-2694">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2694">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2695">다음 코드 예제는 이벤트를 발생 시키는 메서드를 실행 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2695">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-2696">합니다 <xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 `On` *PropertyName* `Changed` 해당 발생 하는 *PropertyName* `Changed` 이벤트 경우는 *PropertyName* 값이 변경 (*PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-2696">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-2697">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2697">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="a1309-2698">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2698">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-2699">이 예제에서는 있어야에서 파생 된 클래스는 <xref:System.Windows.Forms.TextBox> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2699">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2700">파생 클래스에서 <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2700">When overriding <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2701">컨트롤의 안쪽 여백을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2701">Gets or sets padding within the control.</span></span></summary>
        <value><span data-ttu-id="a1309-2702">컨트롤의 내부 간격 특성을 나타내는 <see cref="T:System.Windows.Forms.Padding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2702">A <see cref="T:System.Windows.Forms.Padding" /> representing the control's internal spacing characteristics.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2703">와 같은 컨테이너에 대 한 <xref:System.Windows.Forms.GroupBox> 하 고 <xref:System.Windows.Forms.TabControl>의 <xref:System.Windows.Forms.Control.Padding%2A> 속성을 가져오거나 해당 <xref:System.Windows.Forms.Control.DisplayRectangle%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2703">For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the <xref:System.Windows.Forms.Control.Padding%2A> property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties.</span></span> <span data-ttu-id="a1309-2704">합니다 <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> 속성이 해당 <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2704">The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> property is equal to its <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a1309-2705">컨트롤에 대 한 기본값을 받을 <xref:System.Windows.Forms.Control.Padding%2A> 는 가까워질 합리적으로 Windows 사용자 인터페이스 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2705">Controls receive default values for <xref:System.Windows.Forms.Control.Padding%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="a1309-2706">특정 애플리케이션에 필요한 일부 조정 중일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2706">Some adjustments might still be necessary for particular applications.</span></span>  
  
 <span data-ttu-id="a1309-2707">구현 하는 모든 컨트롤 <xref:System.Windows.Forms.Control.GetPreferredSize%2A> 의 크기 만큼 확대 됩니다 <xref:System.Windows.Forms.Control.Padding%2A> 때 <xref:System.Windows.Forms.Control.AutoSize%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2707">All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in <xref:System.Windows.Forms.Control.Padding%2A> when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a1309-2708">다음과 같은 컨트롤을 사용 하지 않는 <xref:System.Windows.Forms.Control.Padding%2A>:</span><span class="sxs-lookup"><span data-stu-id="a1309-2708">The following controls do not use <xref:System.Windows.Forms.Control.Padding%2A>:</span></span>  
  
-   <span data-ttu-id="a1309-2709">컨트롤을 구현 하지 않는 <xref:System.Windows.Forms.Control.AutoSize%2A> 통해 <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span><span class="sxs-lookup"><span data-stu-id="a1309-2709">Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span></span>  
  
-   <span data-ttu-id="a1309-2710">직접 상속 하는 사용자 지정 컨트롤 <xref:System.Windows.Forms.Control></span><span class="sxs-lookup"><span data-stu-id="a1309-2710">Custom controls that directly inherit from <xref:System.Windows.Forms.Control></span></span>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2711">컨트롤의 안쪽 여백이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2711">Occurs when the control's padding changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2712">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2712">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2713">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2713">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-2714">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.PaddingChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2714">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span> <span data-ttu-id="a1309-2715">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2715">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-2716">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2716">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-2717">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2717">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-2718">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.PaddingChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2718">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#41)]
 [!code-vb[System.Windows.Forms.EventExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2719">컨트롤을 다시 그리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2719">Occurs when the control is redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2720"><xref:System.Windows.Forms.Control.Paint> 이벤트는 컨트롤을 다시 그리면 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2720">The <xref:System.Windows.Forms.Control.Paint> event is raised when the control is redrawn.</span></span> <span data-ttu-id="a1309-2721">인스턴스를 전달 <xref:System.Windows.Forms.PaintEventArgs> 처리 하는 메서드에 <xref:System.Windows.Forms.Control.Paint> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2721">It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
 <span data-ttu-id="a1309-2722">새 사용자 지정 컨트롤 또는 상속 된 컨트롤 모양이 다른을 사용 하 여를 만들 때 재정의 하 여 컨트롤을 렌더링 하는 코드를 제공 해야 합니다 <xref:System.Windows.Forms.Control.OnPaint%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2722">When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method.</span></span> <span data-ttu-id="a1309-2723">자세한 내용은 [OnPaint 메서드 재정의](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md) 하 고 [사용자 지정 컨트롤 그리기 및 렌더링](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2723">For more information, see [Overriding the OnPaint Method](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md) and [Custom Control Painting and Rendering](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md).</span></span>  
  
 <span data-ttu-id="a1309-2724">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2724">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2725">다음 코드 예제에서는 <xref:System.Windows.Forms.PictureBox> 사용 하 고 폼에서 컨트롤을 <xref:System.Windows.Forms.Control.Paint> 를 그릴 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-2725">The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the <xref:System.Windows.Forms.Control.Paint> event to draw to it.</span></span>  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Parent { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Control with get, set" Usage="System.Windows.Forms.Control.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2726">컨트롤의 부모 컨테이너를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2726">Gets or sets the parent container of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-2727">컨트롤의 부모 또는 컨테이너 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2727">A <see cref="T:System.Windows.Forms.Control" /> that represents the parent or container control of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2728">설정 된 <xref:System.Windows.Forms.Control.Parent%2A> 속성 값을 `null` 에서 컨트롤을 제거 합니다 <xref:System.Windows.Forms.Control.ControlCollection> 현재 부모 컨트롤의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2728">Setting the <xref:System.Windows.Forms.Control.Parent%2A> property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2729">다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.Control.Parent%2A> 속성 및 <xref:System.Windows.Forms.Control.FindForm%2A> 단추와 해당 폼의 부모 컨트롤의 속성을 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2729">The following code example uses the <xref:System.Windows.Forms.Control.Parent%2A> property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2730">이 속성 값을 얻으려면 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2730">for all windows to get this property value.</span></span> <span data-ttu-id="a1309-2731">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="a1309-2731">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ParentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ParentChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ParentChanged;" />
      <MemberSignature Language="F#" Value="member this.ParentChanged : EventHandler " Usage="member this.ParentChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2732"><see cref="P:System.Windows.Forms.Control.Parent" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2732">Occurs when the <see cref="P:System.Windows.Forms.Control.Parent" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2733">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Parent%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2733">This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-2734">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2734">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PerformLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-2735">컨트롤이 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2735">Forces the control to apply layout logic to child controls.</span></span></summary>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout();" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : unit -&gt; unit" Usage="control.PerformLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-2736">컨트롤이 모든 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2736">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2737">경우는 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 메서드를 호출한 호출 하기 전에 <xref:System.Windows.Forms.Control.PerformLayout%2A> 메서드를 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2737">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="a1309-2738"><xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> 및 <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> 의 속성을 <xref:System.Windows.Forms.LayoutEventArgs> 로 생성 된 `null` 때 지정 된 값이 없으면는 <xref:System.Windows.Forms.Control.PerformLayout%2A> 메서드를 호출한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2738">The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the <xref:System.Windows.Forms.Control.PerformLayout%2A> method was called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2739">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.PerformLayout%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2739">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="a1309-2740">방법도 보여 줍니다는 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2740">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="a1309-2741">이 예제는 `Click` 에 대 한 이벤트 처리기 `Button1` 명시적으로 호출 <xref:System.Windows.Forms.Control.PerformLayout%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2741">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="a1309-2742">합니다 `Click` 에 대 한 이벤트 처리기 `Button2` 암시적으로 호출 <xref:System.Windows.Forms.Control.PerformLayout%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2742">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="a1309-2743"><xref:System.Windows.Forms.Control.PerformLayout%2A> 폼이 로드 될 때 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2743"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="a1309-2744">`Button3` 컨트롤을 로드할 때의 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2744">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="a1309-2745">각각의 경우에는 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2745">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-2746">전체 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2746">This is a complete example.</span></span> <span data-ttu-id="a1309-2747">예제를 실행 하려면 빈 폼에 다음 코드를 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2747">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout (affectedControl As Control, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout(System::Windows::Forms::Control ^ affectedControl, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : System.Windows.Forms.Control * string -&gt; unit" Usage="control.PerformLayout (affectedControl, affectedProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl"><span data-ttu-id="a1309-2748">가장 최근에 변경된 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2748">A <see cref="T:System.Windows.Forms.Control" /> that represents the most recently changed control.</span></span></param>
        <param name="affectedProperty"><span data-ttu-id="a1309-2749">컨트롤에서 가장 최근에 변경된 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2749">The name of the most recently changed property on the control.</span></span></param>
        <summary><span data-ttu-id="a1309-2750">컨트롤이 모든 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2750">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2751">경우는 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 메서드를 호출한 호출 하기 전에 <xref:System.Windows.Forms.Control.PerformLayout%2A> 메서드를 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2751">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="a1309-2752">합니다 `affectedControl` 하 고 `affectedProperty` 매개 변수 둘 다로 설정할 수 있습니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2752">The `affectedControl` and `affectedProperty` parameters can both be set to `null`.</span></span> <span data-ttu-id="a1309-2753">이렇게 하면 합니다 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> 및 <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> 의 속성을 <xref:System.Windows.Forms.LayoutEventArgs> 로 설정 하기 위해 만든 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2753">Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2754">다음 코드 예제에서는 <xref:System.Windows.Forms.Control.PerformLayout%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2754">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="a1309-2755">방법도 보여 줍니다는 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2755">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="a1309-2756">이 예제는 `Click` 에 대 한 이벤트 처리기 `Button1` 명시적으로 호출 <xref:System.Windows.Forms.Control.PerformLayout%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2756">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="a1309-2757">합니다 `Click` 에 대 한 이벤트 처리기 `Button2` 암시적으로 호출 <xref:System.Windows.Forms.Control.PerformLayout%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2757">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="a1309-2758"><xref:System.Windows.Forms.Control.PerformLayout%2A> 폼이 로드 될 때 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2758"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="a1309-2759">`Button3` 컨트롤을 로드할 때의 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2759">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="a1309-2760">각각의 경우에는 <xref:System.Windows.Forms.Control.Layout> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2760">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-2761">전체 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2761">This is a complete example.</span></span> <span data-ttu-id="a1309-2762">예제를 실행 하려면 빈 폼에 다음 코드를 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2762">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToClient (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToClient(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToClient : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToClient p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="a1309-2763">변환할 화면 좌표 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2763">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="a1309-2764">특정 화면 지점의 위치를 클라이언트 좌표로 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2764">Computes the location of the specified screen point into client coordinates.</span></span></summary>
        <returns><span data-ttu-id="a1309-2765">변환된 <see cref="T:System.Drawing.Point" />인 <see cref="T:System.Drawing.Point" />를 클라이언트 좌표로 나타내는 <paramref name="p" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2765">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in client coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-2766">이미지 또는 이미지 파일을 폼으로 끌어 해당 지점에 표시 되 게 하는 사용자를 삭제할는 다음 코드 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2766">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="a1309-2767"><xref:System.Windows.Forms.Control.OnPaint%2A> 는 다음에 다시 그릴 때까지 유지 하는 이미지가 고, 그렇지 않으면 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2767">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="a1309-2768"><xref:System.Windows.Forms.Control.DragEnter> 이벤트 처리 메서드를 폼으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2768">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="a1309-2769">합니다 <xref:System.Windows.Forms.Control.DragDrop> 하는 경우 이벤트 처리 메서드를 폼에 이미지를 표시는 <xref:System.Drawing.Image> 데이터로 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2769">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="a1309-2770">때문에 <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> 하 고 <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> 값은 화면 좌표를 사용 하 여는 <xref:System.Windows.Forms.Control.PointToClient%2A> 클라이언트 좌표로 변환 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a1309-2770">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToScreen (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToScreen(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToScreen p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="a1309-2771">변환할 클라이언트 좌표 <see cref="T:System.Drawing.Point" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2771">The client coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="a1309-2772">특정 클라이언트 지점의 위치를 화면 좌표로 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2772">Computes the location of the specified client point into screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="a1309-2773">변환된 <see cref="T:System.Drawing.Point" />인 <see cref="T:System.Drawing.Point" />를 화면 좌표로 나타내는 <paramref name="p" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2773">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-2774">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, 및 <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2774">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="a1309-2775">예제를 실행 하려면 Form1 이라는 폼에 다음 코드를 붙여 넣습니다 여러 컨트롤을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2775">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="a1309-2776">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, 및 <xref:System.Windows.Forms.Control.MouseUp> 예제에 정의 된 이벤트 처리기에 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2776">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PreferredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size PreferredSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2777">컨트롤이 들어갈 수 있는 사각형 영역의 크기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2777">Gets the size of a rectangular area into which the control can fit.</span></span></summary>
        <value><span data-ttu-id="a1309-2778">너비와 높이가 포함된 <see cref="T:System.Drawing.Size" />(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2778">A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function PreProcessControlMessage (ByRef msg As Message) As PreProcessControlState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::PreProcessControlState PreProcessControlMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="member this.PreProcessControlMessage :  -&gt; System.Windows.Forms.PreProcessControlState" Usage="control.PreProcessControlMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="a1309-2779">처리할 메시지를 나타내는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2779">A <see cref="T:System.Windows.Forms.Message" /> that represents the message to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2780">메시지 루프 내에 있는 키보드 또는 입력 메시지를 전처리한 다음 디스패치합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2780">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="a1309-2781"><see cref="T:System.Windows.Forms.PreProcessControlState" />가 <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> 또는 <see langword="true" />인지 여부와 <see langword="false" />나 <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />가 <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> 또는 <see langword="true" />인지 여부에 따라 다른 <see langword="false" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2781">One of the <see cref="T:System.Windows.Forms.PreProcessControlState" /> values, depending on whether <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> is <see langword="true" /> or <see langword="false" /> and whether <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> or <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> are <see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PreProcessMessage (ByRef msg As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PreProcessMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="abstract member PreProcessMessage :  -&gt; bool&#xA;override this.PreProcessMessage :  -&gt; bool" Usage="control.PreProcessMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="a1309-2782">처리할 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2782">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the message to process.</span></span> <span data-ttu-id="a1309-2783">가능한 값은 WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR 및 WM_SYSCHAR입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2783">The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span></param>
        <summary><span data-ttu-id="a1309-2784">메시지 루프 내에 있는 키보드 또는 입력 메시지를 전처리한 다음 디스패치합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2784">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="a1309-2785">컨트롤이 메시지를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2785"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2786"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> 입력된 메시지를 디스패치하기 전에 전처리 하는 애플리케이션의 메시지 루프에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2786"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> is called by the application's message loop to preprocess input messages before they are dispatched.</span></span> <span data-ttu-id="a1309-2787">가능한 값은 `msg` 매개 변수는 WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR 및 WM_SYSCHAR입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2787">Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span>  
  
 <span data-ttu-id="a1309-2788">재정의 하는 경우 <xref:System.Windows.Forms.Control.PreProcessMessage%2A>에 컨트롤을 반환 해야 `true` 메시지를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2788">When overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>, a control should return `true` to indicate that it has processed the message.</span></span> <span data-ttu-id="a1309-2789">컨트롤의 결과 의해 처리 되지 않는 메시지에 대 한 `base.PreProcessMessage` 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2789">For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned.</span></span> <span data-ttu-id="a1309-2790">컨트롤은 일반적으로 재정의 보다 특수 한 방법 중 하나 같은 <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>합니다 <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, 또는 <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> 재정의 하는 대신 <xref:System.Windows.Forms.Control.PreProcessMessage%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2790">Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2791">이 메서드를 호출 하 여 직접 실행 호출자에 대 한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2791">for all windows for the immediate caller to call this method.</span></span> <span data-ttu-id="a1309-2792">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2792">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As PreviewKeyDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PreviewKeyDownEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2793">이 컨트롤에 포커스가 있는 동안 키를 누르면 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트 전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2793">Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2794">탭, 리턴, ESC 키를 및 화살표 키 같은 일부 키 누름 키 누름을 입력된 하지 간주 되기 때문에 일반적으로 일부 컨트롤에서 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2794">Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</span></span> <span data-ttu-id="a1309-2795">예를 들어, 기본적으로 <xref:System.Windows.Controls.Button> 컨트롤에서 화살표 키를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2795">For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys.</span></span> <span data-ttu-id="a1309-2796">일반적으로 화살표 키를 눌러 포커스를 이전 또는 다음 컨트롤로 이동 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2796">Pressing the arrow keys typically causes the focus to move to the previous or next control.</span></span> <span data-ttu-id="a1309-2797">화살표 키를 탐색 키 및 키를 눌러 이러한 키가 일반적으로 발생 하지 않는 것으로 간주 합니다 <xref:System.Windows.Forms.Control.KeyDown> 에 대 한 이벤트를 <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="a1309-2797">The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a <xref:System.Windows.Controls.Button>.</span></span> <span data-ttu-id="a1309-2798">그러나 화살표 키를 눌러에 대 한 키를 <xref:System.Windows.Controls.Button> 에서 발생 합니다 <xref:System.Windows.Forms.Control.PreviewKeyDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2798">However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span> <span data-ttu-id="a1309-2799">처리 하 여는 <xref:System.Windows.Forms.Control.PreviewKeyDown> 에 대 한 이벤트를 <xref:System.Windows.Controls.Button> 설정를 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> 속성을 `true`를 발생 시킬 수 있습니다는 <xref:System.Windows.Forms.Control.KeyDown> 화살표 키를 누르면 이벤트.</span><span class="sxs-lookup"><span data-stu-id="a1309-2799">By handling the <xref:System.Windows.Forms.Control.PreviewKeyDown> event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed.</span></span> <span data-ttu-id="a1309-2800">그러나 화살표 키를 처리 하면 더 이상 포커스는 이전 또는 다음 컨트롤로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2800">However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</span></span>  
  
 <span data-ttu-id="a1309-2801">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2801">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2802">다음 코드 예제는 <xref:System.Windows.Forms.Button> 포함 하는 <xref:System.Windows.Forms.ContextMenuStrip>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2802">The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="a1309-2803">경우는 <xref:System.Windows.Forms.Button> 포커스를가지고 있는 위쪽 화살표 또는 아래쪽 화살표 키를 누르면는 <xref:System.Windows.Forms.ContextMenuStrip> 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2803">When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears.</span></span> <span data-ttu-id="a1309-2804">합니다 <xref:System.Windows.Forms.Control.PreviewKeyDown> 위쪽 화살표 또는 아래쪽 화살표 키를 누를 때 검색 하 고 설정 하는 이벤트 처리기는 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2804">The <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="a1309-2805">이 발생 합니다 <xref:System.Windows.Forms.Control.KeyDown> 이벤트 표시할 수 있도록는 <xref:System.Windows.Forms.ContextMenuStrip>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2805">This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="a1309-2806">모든 논리를 넣지 않아야 합니다 <xref:System.Windows.Forms.Control.PreviewKeyDown> 설정 이외의 이벤트 처리기는 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2806">You should not put any logic in the <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property.</span></span> <span data-ttu-id="a1309-2807">대신 논리를 삽입 해야 하는 <xref:System.Windows.Forms.Control.KeyDown> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2807">Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="a1309-2808">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2808">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <param name="keyData"><span data-ttu-id="a1309-2809">처리할 키를 나타내는 <see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2809">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2810">명령 키를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2810">Processes a command key.</span></span></summary>
        <returns><span data-ttu-id="a1309-2811">컨트롤이 문자를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2811"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2812">이 메서드는 명령 키를 처리 하기 위해 메시지를 전처리 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2812">This method is called during message preprocessing to handle command keys.</span></span> <span data-ttu-id="a1309-2813">명령 키가 일반 입력된 키 보다 항상 우선 하는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2813">Command keys are keys that always take precedence over regular input keys.</span></span> <span data-ttu-id="a1309-2814">명령 키의 예로 가속기 및 바로 가기 메뉴를 들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2814">Examples of command keys include accelerators and menu shortcuts.</span></span> <span data-ttu-id="a1309-2815">메서드를 반환 해야 합니다 `true` 명령 키를 처리 했음을 나타내기 위해 또는 `false` 키 명령 키 임을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2815">The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key.</span></span> <span data-ttu-id="a1309-2816">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 애플리케이션에서 호스트 되는 경우에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2816">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 <span data-ttu-id="a1309-2817"><xref:System.Windows.Forms.Control.ProcessCmdKey%2A> 메서드는 컨트롤에 있는지 여부를 먼저 확인을 <xref:System.Windows.Forms.ContextMenu>, 그럴 경우 사용 하도록 설정 하 고는 <xref:System.Windows.Forms.ContextMenu> 명령 키를 처리 하는 데.</span><span class="sxs-lookup"><span data-stu-id="a1309-2817">The <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key.</span></span> <span data-ttu-id="a1309-2818">부모에 전달 된 키에 명령 키가 메뉴 바로 가기 컨트롤에 부모를 <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2818">If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method.</span></span> <span data-ttu-id="a1309-2819">이렇게 하면은 키는 "버블링" 컨트롤 계층 구조는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2819">The net effect is that command keys are "bubbled" up the control hierarchy.</span></span> <span data-ttu-id="a1309-2820">사용자가 누른 키 외에도 키 데이터도 나타냅니다에서 보조키를 눌렀는지 있는 경우 키와 같은 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2820">In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</span></span> <span data-ttu-id="a1309-2821">보조키는 SHIFT, CTRL 및 ALT 키를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2821">Modifier keys include the SHIFT, CTRL, and ALT keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-2822">직접 실행 호출자 및 클래스를 상속 합니다.이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2822">for the immediate caller and inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2823">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-2823">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2824">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 키를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2824">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="a1309-2825">기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> 메서드 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2825">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method should be returned.</span></span> <span data-ttu-id="a1309-2826">컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2826">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogChar : char -&gt; bool&#xA;override this.ProcessDialogChar : char -&gt; bool" Usage="control.ProcessDialogChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="a1309-2827">처리할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2827">The character to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2828">대화 상자 문자를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2828">Processes a dialog character.</span></span></summary>
        <returns><span data-ttu-id="a1309-2829">컨트롤이 문자를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2829"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2830">이 메서드는 메시지 대화 상자 문자를 니모닉 컨트롤 등을 처리 하기 위해 전처리 중에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2830">This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</span></span> <span data-ttu-id="a1309-2831">경우에이 메서드는 호출 된 <xref:System.Windows.Forms.Control.IsInputChar%2A> 메서드는 제어 문자를 처리 하지 않는다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2831">This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character.</span></span> <span data-ttu-id="a1309-2832"><xref:System.Windows.Forms.Control.ProcessDialogChar%2A> 메서드는 단순히 문자 부모의 보냅니다 <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> 메서드 또는 반환 `false` 컨트롤 부모가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-2832">The <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="a1309-2833"><xref:System.Windows.Forms.Form> 클래스 대화 문자의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2833">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters.</span></span> <span data-ttu-id="a1309-2834">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 애플리케이션에서 호스트 되는 경우에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2834">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2835">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2835">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2836">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2836">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2837">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 문자를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2837">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the character.</span></span> <span data-ttu-id="a1309-2838">기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 문자에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> 메서드 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2838">For characters that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="a1309-2839">컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2839">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="a1309-2840">처리할 키를 나타내는 <see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2840">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2841">대화 상자 키를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2841">Processes a dialog key.</span></span></summary>
        <returns><span data-ttu-id="a1309-2842">컨트롤이 키를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2842"><see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2843">이 메서드는 탭, 리턴, ESC 키를 및 화살표 키와 같은 대화 상자 문자를 처리 하기 위해 메시지를 전처리 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2843">This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</span></span> <span data-ttu-id="a1309-2844">경우에이 메서드는 호출 된 <xref:System.Windows.Forms.Control.IsInputKey%2A> 메서드 컨트롤 키를 처리 하지 않는다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2844">This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key.</span></span> <span data-ttu-id="a1309-2845">합니다 <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> 단순히 부모의 문자를 보냅니다 <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> 메서드 또는 반환 `false` 컨트롤 부모가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-2845">The <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="a1309-2846"><xref:System.Windows.Forms.Form> 클래스 대화 상자 키의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2846">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span> <span data-ttu-id="a1309-2847">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 애플리케이션에서 호스트 되는 경우에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2847">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2848">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2848">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2849">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2849">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2850">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 키를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2850">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="a1309-2851">기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> 메서드 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2851">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="a1309-2852">컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2852">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyEventArgs (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyEventArgs(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyEventArgs :  -&gt; bool&#xA;override this.ProcessKeyEventArgs :  -&gt; bool" Usage="control.ProcessKeyEventArgs m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-2853">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2853">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2854">키 메시지를 처리하고 적합한 컨트롤 이벤트를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2854">Processes a key message and generates the appropriate control events.</span></span></summary>
        <returns><span data-ttu-id="a1309-2855">컨트롤이 메시지를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2855"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2856">이 메서드는 키보드 메시지를 받을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2856">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="a1309-2857">이 메서드는 호출 하 여 메시지에 대 한 적절 한 키 이벤트를 생성 하는 것에 대 한 합니다 <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, 또는 <xref:System.Windows.Forms.Control.OnKeyUp%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2857">The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods.</span></span> <span data-ttu-id="a1309-2858">`m` 매개 변수 처리 해야 하는 창 메시지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2858">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="a1309-2859">가능한 값은 <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> 속성은 WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, 및 WM_IME_CHAR 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2859">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2860">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2860">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2861">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2861">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-2862">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2862">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-2863">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-2863">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2864">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 키를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2864">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="a1309-2865">기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> 메서드 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2865">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method should be returned.</span></span> <span data-ttu-id="a1309-2866">컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2866">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyMessage :  -&gt; bool&#xA;override this.ProcessKeyMessage :  -&gt; bool" Usage="control.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-2867">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2867">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2868">키보드 메시지를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2868">Processes a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="a1309-2869">컨트롤이 메시지를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2869"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2870">이 메서드는 키보드 메시지를 받을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2870">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="a1309-2871">메서드는 컨트롤을 부모;에 있는지 여부를 먼저 확인 따라서 부모를 호출 하는 경우 <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2871">The method first determines whether the control has a parent; if so, it calls the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method.</span></span> <span data-ttu-id="a1309-2872">경우 부모의 <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> 메서드는 메시지를 처리 하지 않습니다는 <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> 메서드는 해당 하는 키보드 이벤트를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2872">If the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events.</span></span> <span data-ttu-id="a1309-2873">`m` 매개 변수 처리 해야 하는 창 메시지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2873">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="a1309-2874">가능한 값은 <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> 속성은 WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, 및 WM_SYSKEYUP 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2874">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2875">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2875">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2876">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2876">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2877">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> 컨트롤은 반환 메서드를 <see langword="true" /> 키를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2877">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> method, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="a1309-2878">컨트롤의 기본 클래스의 결과 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2878">For keys that are not processed by the control, the result of the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> should be returned.</span></span> <span data-ttu-id="a1309-2879">컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2879">Controls will seldom, if ever, need to override this method.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyPreview (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyPreview(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyPreview :  -&gt; bool&#xA;override this.ProcessKeyPreview :  -&gt; bool" Usage="control.ProcessKeyPreview m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-2880">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2880">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2881">키보드 메시지를 미리 봅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2881">Previews a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="a1309-2882">컨트롤이 메시지를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2882"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2883">이 메서드는 자식 컨트롤에 키보드 메시지를 받을 때 자식 컨트롤에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2883">This method is called by a child control when the child control receives a keyboard message.</span></span> <span data-ttu-id="a1309-2884">자식 컨트롤 메시지에 대 한 키보드 이벤트를 생성 하기 전에이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2884">The child control calls this method before generating any keyboard events for the message.</span></span> <span data-ttu-id="a1309-2885">이 메서드가 반환 하는 경우 `true`, 자식 컨트롤에서 메시지가 처리 및 키보드 이벤트를 생성 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2885">If this method returns `true`, the child control considers the message processed and does not generate any keyboard events.</span></span> <span data-ttu-id="a1309-2886">`m` 매개 변수 창 메시지 미리 보기를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2886">The `m` parameter contains the window message to preview.</span></span> <span data-ttu-id="a1309-2887">가능한 값은 <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> 속성은 WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, 및 WM_SYSKEYUP 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2887">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span> <span data-ttu-id="a1309-2888"><xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> 메서드는 단순히 문자 부모의 보냅니다 <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> 메서드 또는 반환 `false` 컨트롤 부모가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-2888">The <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="a1309-2889"><xref:System.Windows.Forms.Form> 클래스 대화 상자 키의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2889">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2890">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2890">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2891">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2891">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-2892">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2892">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-2893">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-2893">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-2894">재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 키를 처리 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2894">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="a1309-2895">기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> 메서드 반환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2895">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method should be returned.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessMnemonic(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMnemonic : char -&gt; bool&#xA;override this.ProcessMnemonic : char -&gt; bool" Usage="control.ProcessMnemonic charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="a1309-2896">처리할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2896">The character to process.</span></span></param>
        <summary><span data-ttu-id="a1309-2897">니모닉 문자를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2897">Processes a mnemonic character.</span></span></summary>
        <returns><span data-ttu-id="a1309-2898">컨트롤이 문자를 니모닉으로 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2898"><see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2899">이 메서드는 컨트롤을 니모닉 문자를 처리할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2899">This method is called to give a control the opportunity to process a mnemonic character.</span></span> <span data-ttu-id="a1309-2900">메서드를 결정 해야와 컨트롤은 니모닉 처리 하는 상태에 있는지 여부를 지정 된 문자를 니모닉을 나타내는지 여부를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2900">The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</span></span> <span data-ttu-id="a1309-2901">따라서 메서드 해야 작업을 수행할 연결 된 니모닉 및 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2901">If so, the method should perform the action associated with the mnemonic and return `true`.</span></span> <span data-ttu-id="a1309-2902">그렇지 않은 메서드를 반환 하면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2902">If not, the method should return `false`.</span></span> <span data-ttu-id="a1309-2903">이 메서드의 구현에서는 자주 사용 하 여는 <xref:System.Windows.Forms.Control.IsMnemonic%2A> 지정 된 문자를 니모닉 컨트롤의 텍스트 일치 하는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2903">Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control's text.</span></span>  
  
 <span data-ttu-id="a1309-2904">예:</span><span class="sxs-lookup"><span data-stu-id="a1309-2904">For example:</span></span>  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 <span data-ttu-id="a1309-2905">이 기본 구현은 합니다 <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> 메서드는 반환 `false` 컨트롤에 없는 니모닉 있음을 나타내기 위해.</span><span class="sxs-lookup"><span data-stu-id="a1309-2905">This default implementation of the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method simply returns `false` to indicate that the control has no mnemonic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2906">다음 코드 예제에서는 재정의 하는 button 클래스의 확장을 <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> 메서드를 사용자 지정 동작을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2906">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="a1309-2907">예제에도 사용 방법을 설명 합니다 <xref:System.Windows.Forms.Control.CanSelect%2A> 및 <xref:System.Windows.Forms.Control.IsMnemonic%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2907">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="a1309-2908">실행 하려면이 예제에서는 후 form 클래스를 같은 파일에 다음 코드를 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2908">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="a1309-2909">형식의 단추 추가 `MnemonicButton` 폼입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2909">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-2910">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2910">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="a1309-2911">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2911">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Control.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2912">컨트롤이 포함된 어셈블리의 제품 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2912">Gets the product name of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="a1309-2913">컨트롤이 포함된 어셈블리의 제품 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2913">The product name of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2914"><xref:System.Windows.Forms.Control.ProductName%2A> 속성은 읽기 전용 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2914">The <xref:System.Windows.Forms.Control.ProductName%2A> property is a read-only property.</span></span> <span data-ttu-id="a1309-2915">이 속성의 값을 변경 하려면 설정 합니다 <xref:System.Reflection.AssemblyProductAttribute.Product%2A> 속성 값을 <xref:System.Reflection.AssemblyProductAttribute>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2915">To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>.</span></span> <span data-ttu-id="a1309-2916">C# 코드 집합의 다음 줄을 <xref:System.Windows.Forms.Control.ProductName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2916">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductName%2A> property.</span></span>  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="a1309-2917">회사 이름, 제품 이름 및 제품 버전을 제공 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2917">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="a1309-2918">이 정보를 제공 합니다. 사용할 수 있도록 Windows Forms 기능 같은 <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> "Windows 인증" 프로그램을 준수 하는 애플리케이션을 작성할 쉽게 만들어 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2918">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="a1309-2919">Windows에 대 한 인증 프로그램에 대 한 자세한 내용은 참조 하세요. http://msdn.microsoft.com/certification합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2919">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2920">애플리케이션에 대 한 정보를 표시 하는 다음 코드 예제는 <xref:System.Windows.Forms.Label> 에 포함 된를 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2920">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-2921">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> 및 <xref:System.Windows.Forms.Control.ProductVersion%2A> 설정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2921">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyProductAttribute.Product" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Control.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2922">컨트롤이 포함된 어셈블리의 버전을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2922">Gets the version of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="a1309-2923">컨트롤이 포함된 어셈블리의 파일 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2923">The file version of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2924"><xref:System.Windows.Forms.Control.ProductVersion%2A> 속성은 읽기 전용 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2924">The <xref:System.Windows.Forms.Control.ProductVersion%2A> property is a read-only property.</span></span> <span data-ttu-id="a1309-2925">이 속성의 값을 변경 하려면 설정 합니다 <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> 속성 값을 <xref:System.Reflection.AssemblyVersionAttribute>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2925">To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>.</span></span> <span data-ttu-id="a1309-2926">C# 코드 집합의 다음 줄을 <xref:System.Windows.Forms.Control.ProductVersion%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2926">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductVersion%2A> property.</span></span>  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="a1309-2927">회사 이름, 제품 이름 및 제품 버전을 제공 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2927">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="a1309-2928">이 정보를 제공 합니다. 사용할 수 있도록 Windows Forms 기능 같은 <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> "Windows 인증" 프로그램을 준수 하는 애플리케이션을 작성할 쉽게 만들어 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2928">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="a1309-2929">Windows에 대 한 인증 프로그램에 대 한 자세한 내용은 참조 하세요. http://msdn.microsoft.com/certification합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2929">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2930">애플리케이션에 대 한 정보를 표시 하는 다음 코드 예제는 <xref:System.Windows.Forms.Label> 에 포함 된를 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2930">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-2931">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> 및 <xref:System.Windows.Forms.Control.ProductVersion%2A> 설정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2931">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyVersionAttribute.Version" />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property PropagatingImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property System::Windows::Forms::ImeMode PropagatingImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.PropagatingImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2932">전파 IME 모드를 나타내는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2932">Gets an object that represents a propagating IME mode.</span></span></summary>
        <value><span data-ttu-id="a1309-2933">전파 IME 모드를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2933">An object that represents a propagating IME mode.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryAccessibilityHelp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryAccessibilityHelp As QueryAccessibilityHelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryAccessibilityHelpEventHandler ^ QueryAccessibilityHelp;" />
      <MemberSignature Language="F#" Value="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " Usage="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2934"><see cref="T:System.Windows.Forms.AccessibleObject" />가 내게 필요한 옵션 지원 애플리케이션에 도움말을 제공하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2934">Occurs when <see cref="T:System.Windows.Forms.AccessibleObject" /> is providing help to accessibility applications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2935">기능을 사용할지는 <xref:System.Windows.Forms.HelpProvider> 클래스를 사용 하는 사용자가 F1 키를 눌러 액세스할 수 있는 개체에 대 한 도움말을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2935">You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key.</span></span> <span data-ttu-id="a1309-2936">사용 하 여는 <xref:System.Windows.Forms.HelpProvider> 에서 전체 정보를 제공 합니다 <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2936">Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>.</span></span> <span data-ttu-id="a1309-2937">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2937">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2938">다음 코드 예제에서는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다 컨트롤을 사용 하 여 <xref:System.Windows.Forms.AccessibleObject> 및 <xref:System.Windows.Forms.Control.ControlAccessibleObject> 액세스할 수 있는 정보를 노출 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2938">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="a1309-2939">컨트롤은 범례를 따라 두 곡선을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2939">The control plots two curves along with a legend.</span></span> <span data-ttu-id="a1309-2940">합니다 `ChartControlAccessibleObject` 클래스에서 파생 되는 `ControlAccessibleObject`에 사용 되는 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2940">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="a1309-2941">차트 범례 실제 아니므로 <xref:System.Windows.Forms.Control> -컨트롤을 따르지만 그려지며 차트 컨트롤에 의해 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2941">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="a1309-2942">이 인해 합니다 `ChartControlAccessibleObject` 재정의 클래스를 <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> 반환 하는 방법은 `CurveLegendAccessibleObject` 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2942">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="a1309-2943">인식 액세스할 수 있는 애플리케이션에서이 컨트롤을 사용 하는 경우 컨트롤이 필요한 액세스할 수 있는 정보를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2943">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="a1309-2944">이 코드 예제에는 처리 방법을 보여 줍니다.는 <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2944">This code excerpt demonstrates handling the <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> event.</span></span> <span data-ttu-id="a1309-2945">참조 된 <xref:System.Windows.Forms.AccessibleObject> 전체 코드 예제에 대 한 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2945">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#3)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#3)]
 [!code-vb[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2946">끌어서 놓기 작업 중에 발생하며 끌기 소스가 끌어서 놓기 작업을 취소해야 할지를 결정하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2946">Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2947"><xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트는 끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경 될 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2947">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span> <span data-ttu-id="a1309-2948"><xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 결정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2948">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="a1309-2949">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2949">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="a1309-2950"><xref:System.Windows.Forms.Control.DoDragDrop%2A> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2950">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="a1309-2951">컨트롤의 유효한 놓기 대상 인지 확인 한 다음 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2951">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="a1309-2952">컨트롤이 유효한 놓기 대상에 있으면는 <xref:System.Windows.Forms.Control.GiveFeedback> 지정 끌어서 놓기 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2952">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="a1309-2953">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2953">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="a1309-2954">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2954">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="a1309-2955">사용자가 창의 외부로 이동하면 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2955">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="a1309-2956">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <xref:System.Windows.Forms.Control.DragEnter>가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2956">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="a1309-2957">마우스를 동일한 컨트롤 내에서 이동하면 <xref:System.Windows.Forms.Control.DragOver> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2957">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-2958">키보드 또는 마우스 단추 상태가 변경 될 경우는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 의 값을 기준으로 작업을 취소 하려면 또는 이벤트가 발생 하 고 데이터를 놓을지 끌기를 계속할지 여부를 결정 합니다 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 이벤트의 속성 <xref:System.Windows.Forms.QueryContinueDragEventArgs>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2958">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="a1309-2959">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Continue`, <xref:System.Windows.Forms.Control.DragOver> 이벤트는 작업을 계속 하려면 및 <xref:System.Windows.Forms.Control.GiveFeedback> 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2959">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="a1309-2960">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <xref:System.Windows.Forms.DragDropEffects> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2960">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a1309-2961">합니다 <xref:System.Windows.Forms.Control.DragOver> 고 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 사용자 마우스의 위치에 대 한 최신 피드백이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2961">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="a1309-2962">경우 값 <xref:System.Windows.Forms.DragAction> 는 `Drop`놓기 결과 값이 소스로 반환은, 원본 애플리케이션은 원본 데이터에 대해 적절 한 작업을 수행할 수 있도록 예의 경우 데이터 잘라내기 작업이 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2962">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="a1309-2963">경우 값 <xref:System.Windows.Forms.DragAction> 됩니다 `Cancel`는 <xref:System.Windows.Forms.Control.DragLeave> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2963">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="a1309-2964">기본적으로 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 집합 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 하 `Cancel` 에서 <xref:System.Windows.Forms.DragAction> ESC 키를 눌렀는지 및 설정 하는 경우 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> 에 `Drop` 에서 <xref:System.Windows.Forms.DragAction> 왼쪽, 가운데 또는 오른쪽 마우스 단추를 누르는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-2964">By default, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.</span></span>  
  
 <span data-ttu-id="a1309-2965">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-2965">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-2966">다음 코드 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2966">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="a1309-2967">예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2967">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="a1309-2968">마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2968">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="a1309-2969">합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2969">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="a1309-2970">또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2970">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="a1309-2971">예제를 실행 하려면 커서 파일인`3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 존재 놓기-커서, 각각.</span><span class="sxs-lookup"><span data-stu-id="a1309-2971">The example requires that two cursor files,`3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="a1309-2972">사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2972">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="a1309-2973">에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2973">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="a1309-2974">키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2974">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="a1309-2975">위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2975">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="a1309-2976">데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 `None` 에서 <xref:System.Windows.Forms.DragDropEffects>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2976">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="a1309-2977">드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2977">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="a1309-2978">데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`.</span><span class="sxs-lookup"><span data-stu-id="a1309-2978">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="a1309-2979">끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2979">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="a1309-2980">이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2980">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.QueryContinueDrag> event.</span></span> <span data-ttu-id="a1309-2981">참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-2981">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseDragEvent (key As Object, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseDragEvent(System::Object ^ key, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseDragEvent : obj * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.RaiseDragEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a1309-2982">발생시킬 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2982">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-2983">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2983">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2984">적합한 끌기 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2984">Raises the appropriate drag event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseKeyEvent (key As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseKeyEvent(System::Object ^ key, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseKeyEvent : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.RaiseKeyEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a1309-2985">발생시킬 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2985">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-2986">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2986">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2987">적합한 키 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2987">Raises the appropriate key event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseMouseEvent (key As Object, e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseMouseEvent(System::Object ^ key, System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseMouseEvent : obj * System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.RaiseMouseEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a1309-2988">발생시킬 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2988">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-2989">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2989">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2990">적합한 마우스 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2990">Raises the appropriate mouse event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaisePaintEvent (key As Object, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaisePaintEvent(System::Object ^ key, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaisePaintEvent : obj * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.RaisePaintEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a1309-2991">발생시킬 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2991">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="a1309-2992">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2992">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-2993">적합한 Paint 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2993">Raises the appropriate paint event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RecreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RecreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RecreateHandle();" />
      <MemberSignature Language="F#" Value="member this.RecreateHandle : unit -&gt; unit" Usage="control.RecreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-2994">해당 컨트롤의 핸들을 강제로 다시 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2994">Forces the re-creation of the handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2995"><xref:System.Windows.Forms.Control.RecreateHandle%2A> 메서드는 새 컨트롤에 대 한 매개 변수가 필요 하지만에서 호출을 사용 하 여 <xref:System.Windows.Forms.Control.UpdateStyles%2A> 에 <xref:System.Windows.Forms.Control.CreateParams%2A> 충분 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2995">The <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient.</span></span> <span data-ttu-id="a1309-2996">또한이 메서드 호출 <xref:System.Windows.Forms.Control.DestroyHandle%2A> 하 고 <xref:System.Windows.Forms.Control.CreateHandle%2A> 설정 <xref:System.Windows.Forms.Control.RecreatingHandle%2A> 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2996">This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and <xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RecreatingHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecreatingHandle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecreatingHandle { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RecreatingHandle : bool" Usage="System.Windows.Forms.Control.RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-2997">컨트롤이 현재 자신의 핸들을 다시 만들고 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2997">Gets a value indicating whether the control is currently re-creating its handle.</span></span></summary>
        <value><span data-ttu-id="a1309-2998">컨트롤이 현재 자신의 핸들을 다시 만들고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2998"><see langword="true" /> if the control is currently re-creating its handle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-2999"><xref:System.Windows.Forms.Control.RecreatingHandle%2A> 속성이 반환 `true` 경우는 <xref:System.Windows.Forms.Control.RecreateHandle%2A> 메서드가 계속 실행 되 고 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-2999">The <xref:System.Windows.Forms.Control.RecreatingHandle%2A> property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToClient (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToClient(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToClient : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToClient r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="a1309-3000">변환할 화면 좌표 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3000">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="a1309-3001">지정된 화면 사각형의 크기와 위치를 클라이언트 좌표로 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3001">Computes the size and location of the specified screen rectangle in client coordinates.</span></span></summary>
        <returns><span data-ttu-id="a1309-3002">변환된 <see cref="T:System.Drawing.Rectangle" />인 <see cref="T:System.Drawing.Rectangle" />를 클라이언트 좌표로 나타내는 <paramref name="r" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3002">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="r" />, in client coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToScreen (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToScreen(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToScreen : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToScreen r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="a1309-3003">변환할 클라이언트 좌표 <see cref="T:System.Drawing.Rectangle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3003">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="a1309-3004">지정된 클라이언트 사각형의 크기와 위치를 화면 좌표로 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3004">Computes the size and location of the specified client rectangle in screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="a1309-3005">변환된 <see cref="T:System.Drawing.Rectangle" />인 <see cref="T:System.Drawing.Rectangle" />를 화면 좌표로 나타내는 <paramref name="p" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3005">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-3006">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, 및 <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3006">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="a1309-3007">예제를 실행 하려면 이라는 폼에 다음 코드를 붙여 넣습니다 **Form1** 여러 컨트롤을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3007">To run the example, paste the following code in a form called **Form1** containing several controls.</span></span> <span data-ttu-id="a1309-3008">이 예제에서는 합니다 <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, 및 <xref:System.Windows.Forms.Control.MouseUp> 예제에 정의 된 이벤트 처리기에 연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3008">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReflectMessage (hWnd As IntPtr, ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool ReflectMessage(IntPtr hWnd, System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="static member ReflectMessage : nativeint *  -&gt; bool" Usage="System.Windows.Forms.Control.ReflectMessage (hWnd, m)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd"><span data-ttu-id="a1309-3009">메시지를 반영할 컨트롤 핸들을 나타내는 <see cref="T:System.IntPtr" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3009">An <see cref="T:System.IntPtr" /> representing the handle of the control to reflect the message to.</span></span></param>
        <param name="m"><span data-ttu-id="a1309-3010">반영할 Windows 메시지를 나타내는 <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3010">A <see cref="T:System.Windows.Forms.Message" /> representing the Windows message to reflect.</span></span></param>
        <summary><span data-ttu-id="a1309-3011">지정된 메시지를 특정 핸들에 바인딩된 컨트롤에 반영합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3011">Reflects the specified message to the control that is bound to the specified handle.</span></span></summary>
        <returns><span data-ttu-id="a1309-3012">메시지가 반영되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3012"><see langword="true" /> if the message was reflected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3013"><xref:System.Windows.Forms.Control.ReflectMessage%2A> 메서드는 인프라 메서드이며 사용 되며 일반적으로 코드에서 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3013">The <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is an infrastructure method and typically should not be called from your code.</span></span>  
  
 <span data-ttu-id="a1309-3014">경우는 `hWnd` 매개 변수가 유효한 컨트롤을 나타내지 않습니다 합니다 <xref:System.Windows.Forms.Control.ReflectMessage%2A> 메서드가 반환 되는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3014">If the `hWnd` parameter does not represent a valid control, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="a1309-3015">Windows 메시지는 최상위 창에 반환 되므로 <xref:System.Windows.Forms.Control.ReflectMessage%2A> 메서드는 반환 메시지는 메시지를 전송 하는 컨트롤에 전파를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3015">Because Windows messages are returned to the top-level window, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is used to propagate the return message to the control that sent the message.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-3016">이 메서드를 호출 하는 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3016">for all windows to call this method.</span></span> <span data-ttu-id="a1309-3017">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3017">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Refresh();" />
      <MemberSignature Language="F#" Value="abstract member Refresh : unit -&gt; unit&#xA;override this.Refresh : unit -&gt; unit" Usage="control.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3018">컨트롤이 해당 컨트롤의 클라이언트 영역을 강제로 무효화하도록 하고 컨트롤 자체와 모든 자식 컨트롤을 즉시 다시 그리도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3018">Forces the control to invalidate its client area and immediately redraw itself and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3019">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.Refresh" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.Refresh" /> 메서드 컨트롤과 해당 자식 컨트롤을 무효화 하 고 다시 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3019">When overriding <see cref="M:System.Windows.Forms.Control.Refresh" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.Refresh" /> method so the control and its child controls are invalidated and redrawn.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.Update" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Region" />
      <MemberSignature Language="VB.NET" Value="Public Property Region As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Region { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Region : System.Drawing.Region with get, set" Usage="System.Windows.Forms.Control.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3020">컨트롤과 연결된 창 영역을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3020">Gets or sets the window region associated with the control.</span></span></summary>
        <value><span data-ttu-id="a1309-3021">컨트롤과 연결된 창 <see cref="T:System.Drawing.Region" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3021">The window <see cref="T:System.Drawing.Region" /> associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3022">창 지역은 운영 체제에서 그리기를 허용 하는 위치는 창 내의 픽셀의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3022">The window region is a collection of pixels within the window where the operating system permits drawing.</span></span> <span data-ttu-id="a1309-3023">운영 체제 창의 창 영역 외부에 있는 일부가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3023">The operating system does not display any portion of a window that lies outside of the window region.</span></span> <span data-ttu-id="a1309-3024">컨트롤의 영역 좌표가 되지 않은 컨트롤의 클라이언트 영역 컨트롤의 왼쪽 위 모퉁이 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3024">The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3025">픽셀 영역에 포함 컬렉션 인접 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3025">The collection of pixels contained with the region can be noncontiguous.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3026">다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.Region%2A> 원형 단추를 만들어 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3026">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.Region%2A> property by creating a round button.</span></span> <span data-ttu-id="a1309-3027">예제를 실행 하려면 이라는 단추가 있는 폼에 다음 코드를 붙여넣습니다 `roundButton`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3027">To run the example, paste the following code in a form containing a button called `roundButton`.</span></span> <span data-ttu-id="a1309-3028">이 예제에서는 <xref:System.Windows.Forms.Control.Paint> 이벤트가 예제에 정의 된 이벤트 처리기에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3028">This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.Region#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.Region#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.Region#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-3029">이 속성 값을 설정 하려면 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3029">for all windows to set this property value.</span></span> <span data-ttu-id="a1309-3030">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="a1309-3030">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RegionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RegionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RegionChanged;" />
      <MemberSignature Language="F#" Value="member this.RegionChanged : EventHandler " Usage="member this.RegionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3031"><see cref="P:System.Windows.Forms.Control.Region" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3031">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Region" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3032">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3032">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3033">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3033">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-3034">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.RegionChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3034">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span> <span data-ttu-id="a1309-3035">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3035">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-3036">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3036">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-3037">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3037">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-3038">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.RegionChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3038">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#22)]
 [!code-vb[System.Windows.Forms.EventExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected internal bool RenderRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property RenderRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property bool RenderRightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderRightToLeft : bool" Usage="System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3039">이 속성은 더 이상 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3039">This property is now obsolete.</span></span></summary>
        <value><span data-ttu-id="a1309-3040">컨트롤이 오른쪽에서 왼쪽으로 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3040"><see langword="true" /> if the control is rendered from right to left; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-3041">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3041">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected virtual void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="abstract member RescaleConstantsForDpi : int * int -&gt; unit&#xA;override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="control.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld"><span data-ttu-id="a1309-3042">변경 전의 DPI 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3042">The DPI value prior to the change.</span></span></param>
        <param name="deviceDpiNew"><span data-ttu-id="a1309-3043">변경 후의 DPI 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3043">The DPI value after the change.</span></span></param>
        <summary><span data-ttu-id="a1309-3044">DPI가 변경될 때 컨트롤 크기를 재조정하기 위한 상수를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3044">Provides constants for rescaling the control when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetBackColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetBackColor : unit -&gt; unit&#xA;override this.ResetBackColor : unit -&gt; unit" Usage="control.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3045"><see cref="P:System.Windows.Forms.Control.BackColor" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3045">Resets the <see cref="P:System.Windows.Forms.Control.BackColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3046">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3046">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBindings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetBindings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetBindings();" />
      <MemberSignature Language="F#" Value="member this.ResetBindings : unit -&gt; unit" Usage="control.ResetBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3047"><see cref="T:System.Windows.Forms.BindingSource" />에 바인딩된 컨트롤에서 목록의 모든 항목을 다시 읽고 표시된 값을 새로 고치도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3047">Causes a control bound to the <see cref="T:System.Windows.Forms.BindingSource" /> to reread all the items in the list and refresh their displayed values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3048">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3048">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.DataBindings" />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetCursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetCursor();" />
      <MemberSignature Language="F#" Value="abstract member ResetCursor : unit -&gt; unit&#xA;override this.ResetCursor : unit -&gt; unit" Usage="control.ResetCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3049"><see cref="P:System.Windows.Forms.Control.Cursor" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3049">Resets the <see cref="P:System.Windows.Forms.Control.Cursor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3050">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3050">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetFont" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetFont ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetFont();" />
      <MemberSignature Language="F#" Value="abstract member ResetFont : unit -&gt; unit&#xA;override this.ResetFont : unit -&gt; unit" Usage="control.ResetFont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3051"><see cref="P:System.Windows.Forms.Control.Font" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3051">Resets the <see cref="P:System.Windows.Forms.Control.Font" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3052">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3052">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetForeColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetForeColor : unit -&gt; unit&#xA;override this.ResetForeColor : unit -&gt; unit" Usage="control.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3053"><see cref="P:System.Windows.Forms.Control.ForeColor" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3053">Resets the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3054">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3054">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetImeMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetImeMode();" />
      <MemberSignature Language="F#" Value="member this.ResetImeMode : unit -&gt; unit" Usage="control.ResetImeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3055"><see cref="P:System.Windows.Forms.Control.ImeMode" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3055">Resets the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3056">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3056">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetMouseEventArgs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetMouseEventArgs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetMouseEventArgs();" />
      <MemberSignature Language="F#" Value="member this.ResetMouseEventArgs : unit -&gt; unit" Usage="control.ResetMouseEventArgs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3057">컨트롤을 다시 설정하여 <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 이벤트를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3057">Resets the control to handle the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetRightToLeft ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetRightToLeft();" />
      <MemberSignature Language="F#" Value="abstract member ResetRightToLeft : unit -&gt; unit&#xA;override this.ResetRightToLeft : unit -&gt; unit" Usage="control.ResetRightToLeft " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3058"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3058">Resets the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3059">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3059">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetText ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetText();" />
      <MemberSignature Language="F#" Value="abstract member ResetText : unit -&gt; unit&#xA;override this.ResetText : unit -&gt; unit" Usage="control.ResetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3060"><see cref="P:System.Windows.Forms.Control.Text" /> 속성을 기본값(<see cref="F:System.String.Empty" />)으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3060">Resets the <see cref="P:System.Windows.Forms.Control.Text" /> property to its default value (<see cref="F:System.String.Empty" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3061">중 하나에 대 한 디자이너를 만드는 경우 일반적으로이 메서드를 사용 합니다 <xref:System.Windows.Forms.Control> 포함 하는 고유한 컨트롤을 만드는 <xref:System.Windows.Forms.Control>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3061">You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : EventHandler " Usage="member this.Resize : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3062">컨트롤의 크기를 조정하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3062">Occurs when the control is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3063">확인 하는 <xref:System.Windows.Forms.Control.Size%2A> 크기가 조정 된 컨트롤의 캐스팅할 수 있습니다를 `sender` 등록된 된 매개 변수 <xref:System.Windows.Forms.ControlEventHandler> 메서드를를 <xref:System.Windows.Forms.Control> 받고 해당 <xref:System.Windows.Forms.Control.Size%2A> 속성 (또는 <xref:System.Windows.Forms.Control.Height%2A> 및 <xref:System.Windows.Forms.Control.Width%2A> 속성 개별적으로).</span><span class="sxs-lookup"><span data-stu-id="a1309-3063">To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).</span></span>  
  
 <span data-ttu-id="a1309-3064">사용자 지정 레이아웃을 처리 하려면는 <xref:System.Windows.Forms.Control.Layout> 크기 조정 이벤트 대신 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3064">To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event.</span></span> <span data-ttu-id="a1309-3065"><xref:System.Windows.Forms.Control.Layout> 대 한 응답으로 이벤트 발생을 <xref:System.Windows.Forms.Control.Resize> 컨트롤의 레이아웃에 영향을 주는 다른 변경에 대 한 응답 뿐만 아니라 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3065">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a <xref:System.Windows.Forms.Control.Resize> event, but also in response to other changes that affect the layout of the control.</span></span>  
  
 <span data-ttu-id="a1309-3066">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3066">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3067">다음 코드 예제에서는 처리 합니다 <xref:System.Windows.Forms.Control.Resize> 의 이벤트는 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3067">The following code example handles the <xref:System.Windows.Forms.Control.Resize> event of a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-3068">이벤트 처리기 폼 제곱 하 게 유지 되도록 폼 크기를 조정 하는 경우 (해당 <xref:System.Windows.Forms.Control.Height%2A> 고 <xref:System.Windows.Forms.Control.Width%2A> 같은 상태로 유지).</span><span class="sxs-lookup"><span data-stu-id="a1309-3068">When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal).</span></span> <span data-ttu-id="a1309-3069">이 예제를 실행 하려면 있는지 확인 하 고 폼의를 사용 하 여이 이벤트 처리 메서드에 연결 <xref:System.Windows.Forms.Control.Resize> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3069">To run this example, make sure and associate this event-handling method with the form's <xref:System.Windows.Forms.Control.Resize> event.</span></span>  
  
 [!code-cpp[WinForms.Control.Resize#1](~/samples/snippets/cpp/VS_Snippets_Winforms/WinForms.Control.Resize/CPP/form1.cpp#1)]
 [!code-csharp[WinForms.Control.Resize#1](~/samples/snippets/csharp/VS_Snippets_Winforms/WinForms.Control.Resize/CS/form1.cs#1)]
 [!code-vb[WinForms.Control.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/WinForms.Control.Resize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResizeRedraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ResizeRedraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeRedraw : bool with get, set" Usage="System.Windows.Forms.Control.ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3070">크기를 조정하는 경우 컨트롤이 자신을 다시 그리는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3070">Gets or sets a value indicating whether the control redraws itself when resized.</span></span></summary>
        <value><span data-ttu-id="a1309-3071">크기를 조정하는 경우 컨트롤이 자신을 다시 그리면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3071"><see langword="true" /> if the control redraws itself when resized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3072"><xref:System.Windows.Forms.Control.ResizeRedraw%2A> 속성 값이 반환 값에 해당 하는 <xref:System.Windows.Forms.Control.GetStyle%2A> 전달 하는 경우 메서드는 <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> 값을 매개 변수로.</span><span class="sxs-lookup"><span data-stu-id="a1309-3072">The <xref:System.Windows.Forms.Control.ResizeRedraw%2A> property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> value as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ResumeLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3073">일반 레이아웃 논리를 다시 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3073">Resumes the usual layout logic.</span></span></summary>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout();" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : unit -&gt; unit" Usage="control.ResumeLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3074">일반 레이아웃 논리를 다시 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3074">Resumes usual layout logic.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3075">호출 된 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 보류 중인 레이아웃 요청 내용이 있는 경우 메서드 강제로 즉시 레이아웃 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3075">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="a1309-3076"><xref:System.Windows.Forms.Control.SuspendLayout%2A> 하 고 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드는 동시에 표시 하지 않는 데 여러 <xref:System.Windows.Forms.Control.Layout> 컨트롤의 여러 특성을 조정 하는 동안 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3076">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="a1309-3077">예를 들어 호출를 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 메서드를 설정한를 <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, 또는 <xref:System.Windows.Forms.Control.Dock%2A> 컨트롤을 호출한 다음 속성은 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 변경 내용을 적용 하려면 사용 하도록 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3077">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="a1309-3078">에 대 한 보류 중인 호출 해야 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 에 대 한 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 성공적으로 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3078">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3079">다음 코드 예제에서는 폼에 단추 두 개를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3079">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="a1309-3080">예제에서는 단추를 사용 하 여 추가 합니다 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 및 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3080">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout (performLayout As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout(bool performLayout);" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : bool -&gt; unit" Usage="control.ResumeLayout performLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout"><span data-ttu-id="a1309-3081">보류 중인 레이아웃 요청을 실행하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3081"><see langword="true" /> to execute pending layout requests; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-3082">일반 레이아웃 논리를 다시 시작하여 필요에 따라 보류 중인 레이아웃 요청을 강제로 즉시 레이아웃합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3082">Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3083">호출 된 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 보류 중인 레이아웃 요청 내용이 있는 경우 메서드 강제로 즉시 레이아웃 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3083">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span> <span data-ttu-id="a1309-3084">경우는 `performLayout` 매개 변수는 설정 `true`, 보류 중인 레이아웃 요청 내용이 있는 경우 즉시 레이아웃 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3084">When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="a1309-3085"><xref:System.Windows.Forms.Control.SuspendLayout%2A> 하 고 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드는 동시에 표시 하지 않는 데 여러 <xref:System.Windows.Forms.Control.Layout> 컨트롤의 여러 특성을 조정 하는 동안 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3085">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="a1309-3086">예를 들어 호출를 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 메서드를 설정한를 <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, 또는 <xref:System.Windows.Forms.Control.Dock%2A> 컨트롤을 호출한 다음 속성은 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 변경 내용을 적용 하려면 사용 하도록 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3086">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="a1309-3087">에 대 한 보류 중인 호출 해야 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 에 대 한 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 성공적으로 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3087">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3088">부모 컨트롤에 여러 컨트롤을 추가, 것이 좋습니다를 호출 하는 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 추가할 컨트롤을 초기화 하기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3088">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="a1309-3089">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3089">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="a1309-3090">이렇게 하면 많은 컨트롤을 사용 하 여 애플리케이션의 성능을 늘어납니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3090">This will increase the performance of applications with many controls.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Right { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : int" Usage="System.Windows.Forms.Control.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3091">컨트롤의 오른쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3091">Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="a1309-3092">컨트롤의 오른쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 나타내는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3092">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3093">값을 <xref:System.Windows.Forms.Control.Right%2A> 속성의 합계와 같은지를 <xref:System.Windows.Forms.Control.Left%2A> 속성 값 및 <xref:System.Windows.Forms.Control.Width%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3093">The value of the <xref:System.Windows.Forms.Control.Right%2A> property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.</span></span>  
  
 <span data-ttu-id="a1309-3094"><xref:System.Windows.Forms.Control.Right%2A> 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3094">The <xref:System.Windows.Forms.Control.Right%2A> property is read-only.</span></span> <span data-ttu-id="a1309-3095">변경할 수 있습니다이 속성 값이 직접 값을 변경 하 여는 <xref:System.Windows.Forms.Control.Left%2A> 또는 <xref:System.Windows.Forms.Control.Width%2A> 호출 또는 속성을 <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, 또는 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3095">You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3096">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3096">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-3097">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3097">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.Control.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3098">오른쪽에서 왼쪽으로 쓰는 글꼴을 사용하는 로캘을 지원하도록 컨트롤 요소가 정렬되어 있는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3098">Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</span></span></summary>
        <value><span data-ttu-id="a1309-3099"><see cref="T:System.Windows.Forms.RightToLeft" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3099">One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span> <span data-ttu-id="a1309-3100">기본값은 <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3100">The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3101"><xref:System.Windows.Forms.Control.RightToLeft%2A> 속성이 앰비언트 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3101">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is an ambient property.</span></span> <span data-ttu-id="a1309-3102">그렇지 않은 경우, 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3102">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="a1309-3103">예를 들어, 한 <xref:System.Windows.Forms.Button> 동일 해야 <xref:System.Windows.Forms.Control.BackColor%2A> 부모로 <xref:System.Windows.Forms.Form> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3103">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="a1309-3104">앰비언트 속성에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.AmbientProperties> 클래스 또는 <xref:System.Windows.Forms.Control> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3104">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="a1309-3105"><xref:System.Windows.Forms.Control.RightToLeft%2A> 속성에서 오른쪽에서 왼쪽으로 히브리어 또는 아랍어 같은 언어를 쓸 국가별 애플리케이션에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3105">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</span></span> <span data-ttu-id="a1309-3106">이 속성 설정 된 경우 <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, 텍스트를 포함 하는 컨트롤 요소가 오른쪽에서 왼쪽으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3106">When this property is set to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, control elements that include text are displayed from right to left.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3107">경우 값은 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성이 런타임 시 변경 될, 서식이 없는 원시 텍스트에만 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3107">If the value of the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed at run time, only raw text without formatting is preserved.</span></span>  
  
 <span data-ttu-id="a1309-3108">다음은 컨트롤 요소에 주는 영향의 몇 가지 예는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성 값의 <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> :</span><span class="sxs-lookup"><span data-stu-id="a1309-3108">The following are a few examples of how control elements are affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property value of <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> :</span></span>  
  
-   <span data-ttu-id="a1309-3109">스크롤 가능한 컨트롤의 오른쪽이 아닌 왼쪽에 세로 스크롤 막대가 표시 됩니다 (예를 들어 <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, 여러 줄 <xref:System.Windows.Forms.TextBox>, 및 <xref:System.Windows.Forms.RichTextBox>).</span><span class="sxs-lookup"><span data-stu-id="a1309-3109">Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).</span></span>  
  
-   <span data-ttu-id="a1309-3110">가로 스크롤 막대 오른쪽 맞춤 스크롤 상자 (엄지 단추)를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3110">Horizontal scroll bars start with the scroll box (thumb) right-aligned.</span></span>  
  
-   <span data-ttu-id="a1309-3111">에 의해 제어 확인란 요소 맞춤 합니다 `CheckAlign` 속성에 대 한 반전 됩니다 <xref:System.Windows.Forms.CheckBox> 및 <xref:System.Windows.Forms.RadioButton> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3111">The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.</span></span>  
  
-   <span data-ttu-id="a1309-3112">Up-down 컨트롤, 목록 상자 및 콤보 상자에는 항목은 오른쪽에 맞춰집니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3112">Items in list box, combo box, and up-down controls are right aligned.</span></span>  
  
-   <span data-ttu-id="a1309-3113">왼쪽으로 정렬 됩니다. 위로 및 아래로 단추가 <xref:System.Windows.Forms.NumericUpDown> 고 <xref:System.Windows.Forms.DomainUpDown> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3113">Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.</span></span>  
  
-   <span data-ttu-id="a1309-3114">메뉴 (<xref:System.Windows.Forms.MainMenu>하십시오 <xref:System.Windows.Forms.MenuItem>, 및 <xref:System.Windows.Forms.ContextMenu>) 오른쪽 맞춤으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3114">Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.</span></span>  
  
-   <span data-ttu-id="a1309-3115">도구 모음 단추의 맞춤을 <xref:System.Windows.Forms.ToolBar> 컨트롤 또는 텍스트의 맞춤을 <xref:System.Windows.Forms.ToolBarButton> 영향을 받지는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-3115">The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property.</span></span>  
  
-   <span data-ttu-id="a1309-3116"><xref:System.Windows.Forms.AxHost> 오른쪽에서 왼쪽 맞춤; 지원 그러나 ActiveX 컨트롤에 대 한 효과는 컨트롤 작성자는 오른쪽에서 왼쪽에 표시에 대 한 지원을 구현 하는 범위 내에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3116"><xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a1309-3117">할당된 값이 <see cref="T:System.Windows.Forms.RightToLeft" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-3117">The assigned value is not one of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3118">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3118">When overriding the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-3119">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3119">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-3120">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3120">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RightToLeftChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftChanged : EventHandler " Usage="member this.RightToLeftChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3121"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3121">Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3122">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3122">This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3123">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3123">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3124">다음 코드 예제는 이벤트 처리기가 될 때 실행 되는 <xref:System.Windows.Forms.Control.Text%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3124">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="a1309-3125"><xref:System.Windows.Forms.Control> 클래스에는 이름 패턴을 사용 하 여 여러 메서드가 *PropertyName* `Changed` 는 발생 하는 경우 해당 *PropertyName* 값이 변경 ( *PropertyName* 해당 속성의 이름을 나타내는).</span><span class="sxs-lookup"><span data-stu-id="a1309-3125">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="a1309-3126">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3126">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-3127">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3127">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-3128">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3128">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RtlTranslateAlignment">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3129">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 현재 맞춤을 적합한 맞춤으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3129">Converts the current alignment to the appropriate alignment to support right-to-left text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::ContentAlignment RtlTranslateAlignment(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3130"><see cref="T:System.Drawing.ContentAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3130">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3131">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Drawing.ContentAlignment" />를 적절한 <see cref="T:System.Drawing.ContentAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3131">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3132"><see cref="T:System.Drawing.ContentAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3132">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3133">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3133">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateAlignment(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3134"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3134">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3135">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Windows.Forms.HorizontalAlignment" />를 적절한 <see cref="T:System.Windows.Forms.HorizontalAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3135">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3136"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3136">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3137">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3137">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateAlignment(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3138"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3138">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3139">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Windows.Forms.LeftRightAlignment" />를 적절한 <see cref="T:System.Windows.Forms.LeftRightAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3139">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3140"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3140">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3141">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3141">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected internal System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function RtlTranslateContent (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Drawing::ContentAlignment RtlTranslateContent(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateContent : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateContent align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3142"><see cref="T:System.Drawing.ContentAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3142">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3143">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Drawing.ContentAlignment" />를 적절한 <see cref="T:System.Drawing.ContentAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3143">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3144"><see cref="T:System.Drawing.ContentAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3144">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3145">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3145">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateHorizontal (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateHorizontal(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateHorizontal : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateHorizontal align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3146"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3146">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3147">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Windows.Forms.HorizontalAlignment" />를 적절한 <see cref="T:System.Windows.Forms.HorizontalAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3147">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3148"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3148">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3149">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3149">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateLeftRight (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateLeftRight(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateLeftRight : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateLeftRight align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="a1309-3150"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3150">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3151">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <see cref="T:System.Windows.Forms.LeftRightAlignment" />를 적절한 <see cref="T:System.Windows.Forms.LeftRightAlignment" />로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3151">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="a1309-3152"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3152">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3153">경우는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성을 <xref:System.Windows.Forms.RightToLeft> 로 설정 된 `No`, 반환 값은는 `align` 매개 변수가 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3153">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3154">컨트롤과 자식 컨트롤의 배율을 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3154">Scales the control and any child controls.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (factor As SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(System::Drawing::SizeF factor);" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Drawing.SizeF -&gt; unit" Usage="control.Scale factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="a1309-3155">가로 및 세로 배율 인수가 포함된 <see cref="T:System.Drawing.SizeF" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3155">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</span></span></param>
        <summary><span data-ttu-id="a1309-3156">컨트롤과 모든 자식 컨트롤의 배율을 지정한 배율 인수로 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3156">Scales the control and all child controls by the specified scaling factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3157">합니다 <xref:System.Windows.Forms.Control.Scale%2A> 메서드는 지정 된 크기 조정 하 여 컨트롤을 조정 `factor`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3157">The <xref:System.Windows.Forms.Control.Scale%2A> method scales the control by the specified scaling `factor`.</span></span> <span data-ttu-id="a1309-3158">이 경우 재귀적으로 모든 자식 컨트롤을 확장 하는 또한 합니다 <xref:System.Windows.Forms.Control.ScaleChildren%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3158">It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`.</span></span> <span data-ttu-id="a1309-3159">이 메서드를 호출 내부적으로 <xref:System.Windows.Forms.Control.ScaleControl%2A> 각 컨트롤의 배율을 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3159">Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (ratio As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float ratio);" />
      <MemberSignature Language="F#" Value="member this.Scale : single -&gt; unit" Usage="control.Scale ratio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio"><span data-ttu-id="a1309-3160">배율 조정에 사용할 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3160">The ratio to use for scaling.</span></span></param>
        <summary><span data-ttu-id="a1309-3161">컨트롤과 자식 컨트롤의 배율을 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3161">Scales the control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single -&gt; unit" Usage="control.Scale (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="a1309-3162">가로 배율 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3162">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="a1309-3163">세로 배율 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3163">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="a1309-3164">전체 컨트롤과 자식 컨트롤의 배율을 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3164">Scales the entire control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBitmapLogicalToDevice">
      <MemberSignature Language="C#" Value="public void ScaleBitmapLogicalToDevice (ref System.Drawing.Bitmap logicalBitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleBitmapLogicalToDevice(class System.Drawing.Bitmap&amp; logicalBitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleBitmapLogicalToDevice (ByRef logicalBitmap As Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleBitmapLogicalToDevice(System::Drawing::Bitmap ^ % logicalBitmap);" />
      <MemberSignature Language="F#" Value="member this.ScaleBitmapLogicalToDevice :  -&gt; unit" Usage="control.ScaleBitmapLogicalToDevice logicalBitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalBitmap" Type="System.Drawing.Bitmap" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="logicalBitmap"><span data-ttu-id="a1309-3165">크기를 조정할 비트맵입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3165">The bitmap to scale.</span></span></param>
        <summary><span data-ttu-id="a1309-3166">DPI가 변경될 때 논리적 비트맵 값을 동등한 디바이스 단위 값으로 크기 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3166">Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ScaleChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ScaleChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ScaleChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScaleChildren : bool" Usage="System.Windows.Forms.Control.ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3167">자식 컨트롤의 배율을 결정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3167">Gets a value that determines the scaling of child controls.</span></span></summary>
        <value><span data-ttu-id="a1309-3168">이 컨트롤에서 <see langword="true" /> 메서드가 호출될 때 자식 컨트롤의 배율이 조정되면 <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3168"><see langword="true" /> if child controls will be scaled when the <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /> method on this control is called; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-3169">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3169">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3170">경우는 <xref:System.Windows.Forms.Control.ScaleChildren%2A> 속성은 `true`, 해당 <xref:System.Windows.Forms.Control.Scale%2A> 메서드를 재귀적으로 호출할을 <xref:System.Windows.Forms.Control.ScaleControl%2A> 해당 자식 컨트롤의 각 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3170">If the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.</span></span>  
  
 <span data-ttu-id="a1309-3171">기본 구현의 <xref:System.Windows.Forms.Control.ScaleChildren%2A> 항상 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3171">The default implementation of <xref:System.Windows.Forms.Control.ScaleChildren%2A> always returns `true`.</span></span> <span data-ttu-id="a1309-3172">파생된 클래스에서 재정의할 수 있습니다 <xref:System.Windows.Forms.Control.ScaleChildren%2A> 반환할 `false` 확장은 수행 되지 않도록 자식 요소에 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3172">Derived classes can override <xref:System.Windows.Forms.Control.ScaleChildren%2A> to return `false` to indicate that scaling should not be performed on their children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="a1309-3173">컨트롤의 높이와 너비 크기를 조정하는 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3173">The factor by which the height and width of the control will be scaled.</span></span></param>
        <param name="specified"><span data-ttu-id="a1309-3174">컨트롤의 크기와 위치를 정의할 때 사용할 컨트롤 범위를 지정하는 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3174">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="a1309-3175">컨트롤의 위치, 크기, 안쪽 여백 및 여백을 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3175">Scales a control's location, size, padding and margin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3176">최상위 컨트롤을 사용 하는 경우 컨트롤의 위치를 조정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3176">If the control is top level, this will not scale the control's location.</span></span> <span data-ttu-id="a1309-3177">자식 또는 자동으로 조정된 된 컨트롤의 크기에는 확장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3177">This does not scale children or the size of automatically sized controls.</span></span> <span data-ttu-id="a1309-3178">값을 변경 하 여 모든 방향으로 확장을 생략할 수 있습니다는 `specified` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3178">You can omit scaling in any direction by changing the value of the `specified` parameter.</span></span>  
  
   
  
## Examples  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleCore (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleCore(float dx, float dy);" />
      <MemberSignature Language="F#" Value="abstract member ScaleCore : single * single -&gt; unit&#xA;override this.ScaleCore : single * single -&gt; unit" Usage="control.ScaleCore (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="a1309-3179">가로 배율 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3179">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="a1309-3180">세로 배율 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3180">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="a1309-3181">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3181">This method is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3182">이 메서드는 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3182">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3183">컨트롤을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3183">Activates a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a1309-3184"><xref:System.Windows.Forms.Control.Select%2A> 메서드 컨트롤을 활성화 하는 경우 컨트롤의 <xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType> 스타일 비트가 `true`, 다른 컨트롤에 포함 된와 모든 부모 컨트롤 모두 표시 되 고 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3184">The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's <xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType> style bit is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>

<span data-ttu-id="a1309-3185">다음 목록에 Windows Forms 컨트롤에서 선택할 수 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3185">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="a1309-3186">목록 컨트롤에서 파생 되는 컨트롤도 선택할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3186">Controls derived from controls in the list will also not be selectable.</span></span>
  
- <xref:System.Windows.Forms.Label>  
- <xref:System.Windows.Forms.Panel>  
- <xref:System.Windows.Forms.GroupBox>
- <xref:System.Windows.Forms.PictureBox>  
- <xref:System.Windows.Forms.ProgressBar>
- <xref:System.Windows.Forms.Splitter>
- <span data-ttu-id="a1309-3187"><xref:System.Windows.Forms.LinkLabel> (컨트롤에 있는 링크가 없는 경우)</span><span class="sxs-lookup"><span data-stu-id="a1309-3187"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="control.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3188">컨트롤을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3188">Activates the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  

<span data-ttu-id="a1309-3189">다음 코드 예제에서는 지정 된 선택 <xref:System.Windows.Forms.Control>선택할 수 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="a1309-3189">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>
  
[!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
[!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
[!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="abstract member Select : bool * bool -&gt; unit&#xA;override this.Select : bool * bool -&gt; unit" Usage="control.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed"><span data-ttu-id="a1309-3190">선택할 컨트롤의 방향을 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3190"><see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</span></span></param>
        <param name="forward"><span data-ttu-id="a1309-3191">탭 순서에서 앞으로 이동하려면 <see langword="true" />이고, 뒤로 이동하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3191"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <summary><span data-ttu-id="a1309-3192">자식 컨트롤을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3192">Activates a child control.</span></span> <span data-ttu-id="a1309-3193">또한 필요에 따라 컨트롤을 선택할 탭 순서의 방향을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3193">Optionally specifies the direction in the tab order to select the control from.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3194">합니다 `directed` 고 `forward` 컨테이너 스타일 컨트롤에서 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3194">The `directed` and `forward` parameters are used by container-style controls.</span></span> <span data-ttu-id="a1309-3195">경우는 `directed` 매개 변수는 설정 `true`는 `forward` 선택할 컨트롤을 확인 하려면 매개 변수가 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3195">When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select.</span></span> <span data-ttu-id="a1309-3196">때 `forward` 로 설정 되어 `true`를 탭 순서의 다음 컨트롤로 선택 때 `false`, 탭 순서의 이전 컨트롤을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3196">When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectNextControl (ctl As Control, forward As Boolean, tabStopOnly As Boolean, nested As Boolean, wrap As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SelectNextControl(System::Windows::Forms::Control ^ ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="F#" Value="member this.SelectNextControl : System.Windows.Forms.Control * bool * bool * bool * bool -&gt; bool" Usage="control.SelectNextControl (ctl, forward, tabStopOnly, nested, wrap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="a1309-3197">검색을 시작할 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3197">The <see cref="T:System.Windows.Forms.Control" /> at which to start the search.</span></span></param>
        <param name="forward"><span data-ttu-id="a1309-3198">탭 순서에서 앞으로 이동하려면 <see langword="true" />이고, 뒤로 이동하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3198"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <param name="tabStopOnly"><span data-ttu-id="a1309-3199"><see langword="true" /> 속성이 <see cref="P:System.Windows.Forms.Control.TabStop" />로 설정된 컨트롤을 무시하려면 <see langword="false" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3199"><see langword="true" /> to ignore the controls with the <see cref="P:System.Windows.Forms.Control.TabStop" /> property set to <see langword="false" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="nested"><span data-ttu-id="a1309-3200">중첩된(자식 컨트롤의 자식) 자식 컨트롤을 포함시키려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3200"><see langword="true" /> to include nested (children of child controls) child controls; otherwise, <see langword="false" />.</span></span></param>
        <param name="wrap"><span data-ttu-id="a1309-3201">탭 순서의 마지막 컨트롤에 도달한 후 첫째 컨트롤부터 검색을 계속하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3201"><see langword="true" /> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-3202">다음 컨트롤을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3202">Activates the next control.</span></span></summary>
        <returns><span data-ttu-id="a1309-3203">컨트롤이 활성화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3203"><see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3204">합니다 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드 탭 순서의 다음 컨트롤로 활성화 하는 경우 컨트롤의 `Selectable` 스타일 비트가 `true` 에서 <xref:System.Windows.Forms.ControlStyles>, 다른 컨트롤에 포함 된와 모든 부모 컨트롤 모두 표시 되 고 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3204">The <xref:System.Windows.Forms.Control.SelectNextControl%2A> method activates the next control in the tab order if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="a1309-3205">다음 목록에 Windows Forms 컨트롤에서 선택할 수 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3205">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="a1309-3206">목록 컨트롤에서 파생 되는 컨트롤도 선택할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3206">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="a1309-3207"><xref:System.Windows.Forms.LinkLabel> (컨트롤에 있는 링크가 없는 경우)</span><span class="sxs-lookup"><span data-stu-id="a1309-3207"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
 <span data-ttu-id="a1309-3208">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-3208">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-3209">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3209">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3210">다음 코드 exampleshows는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 일부 컨트롤을 폼에 사용 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3210">The following code exampleshows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has some controls.</span></span> <span data-ttu-id="a1309-3211">폼을 클릭할 때마다 다음 컨트롤이 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3211">Each time that you click the form, the next control is activated.</span></span> <span data-ttu-id="a1309-3212"><xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> 속성 컨테이너 컨트롤에서 현재 활성 컨트롤을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3212">The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#1)]  
  
 <span data-ttu-id="a1309-3213">다음 코드 예제는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 있는 폼에 사용 되는 메서드를 <xref:System.Windows.Forms.Button> 및 일부 기타 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3213">The following code example shows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls.</span></span> <span data-ttu-id="a1309-3214">클릭할 때 합니다 <xref:System.Windows.Forms.Button>, 후 다음 컨트롤로 <xref:System.Windows.Forms.Button> 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3214">When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated.</span></span> <span data-ttu-id="a1309-3215">부모를 가져오려는 것을 확인할는 <xref:System.Windows.Forms.Button> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3215">Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="a1309-3216">이후 <xref:System.Windows.Forms.Button> 는 컨테이너가 아닙니다 호출 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 에 직접는 <xref:System.Windows.Forms.Button> 활성화를 변경 하지 않으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3216">Since <xref:System.Windows.Forms.Button> is not a container, calling <xref:System.Windows.Forms.Control.SelectNextControl%2A> directly on the <xref:System.Windows.Forms.Button> would not change the activation.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#2)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SendToBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendToBack ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendToBack();" />
      <MemberSignature Language="F#" Value="member this.SendToBack : unit -&gt; unit" Usage="control.SendToBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3217">컨트롤을 Z 순서의 맨 뒤로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3217">Sends the control to the back of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3218">컨트롤을 z 순서의 맨 뒤로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3218">The control is moved to the back of the z-order.</span></span> <span data-ttu-id="a1309-3219">다른 컨트롤의 자식 컨트롤을 사용 하는 경우 자식 컨트롤에는 z 순서의 맨 뒤로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3219">If the control is a child of another control, the child control is moved to the back of the z-order.</span></span> <span data-ttu-id="a1309-3220">컨트롤이 최상위 컨트롤이 있으면 컨트롤이 활성화 된 경우가 아니면이 메서드가 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3220">If the control is a top-level control, this method will not work correctly unless the control is active.</span></span> <span data-ttu-id="a1309-3221">최상위 컨트롤은 컨트롤을 같은 <xref:System.Windows.Forms.Form>에 자식이 아닌 다른 컨트롤의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3221">A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control.</span></span> <span data-ttu-id="a1309-3222">활성 컨트롤은 입력 포커스가 있는 컨트롤을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3222">An active control is a visible control that has input focus.</span></span> <span data-ttu-id="a1309-3223">사용 하는 <xref:System.Windows.Forms.Control.SendToBack%2A> 메서드 비활성 최상위 컨트롤을 사용 하 여 먼저 호출을 <xref:System.Windows.Forms.Control.BringToFront%2A> 컨트롤 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3223">To use the <xref:System.Windows.Forms.Control.SendToBack%2A> method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetAutoSizeMode (mode As AutoSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetAutoSizeMode(System::Windows::Forms::AutoSizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetAutoSizeMode : System.Windows.Forms.AutoSizeMode -&gt; unit" Usage="control.SetAutoSizeMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="a1309-3224"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3224">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3225">해당 <see cref="P:System.Windows.Forms.Control.AutoSize" /> 속성을 사용할 수 있을 때 컨트롤이 동작하는 방법을 나타내는 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3225">Sets a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3226">컨트롤의 범위를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3226">Sets the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int -&gt; unit" Usage="control.SetBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3227">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Left" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3227">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3228">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Top" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3228">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-3229">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Width" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3229">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-3230">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Height" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3230">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <summary><span data-ttu-id="a1309-3231">컨트롤의 범위를 지정된 위치와 크기로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3231">Sets the bounds of the control to the specified location and size.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBounds (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3232">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Left" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3232">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3233">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Top" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3233">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-3234">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Width" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3234">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-3235">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Height" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3235">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="a1309-3236"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3236">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span> <span data-ttu-id="a1309-3237">매개 변수를 지정하지 않으면 현재 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3237">For any parameter not specified, the current value will be used.</span></span></param>
        <summary><span data-ttu-id="a1309-3238">컨트롤의 지정된 범위를 특정 위치와 크기로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3238">Sets the specified bounds of the control to the specified location and size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1309-3239">다음 코드 예제에서는 센터를 <xref:System.Windows.Forms.Form> 화면에서 <xref:System.Windows.Forms.Control.Layout> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3239">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="a1309-3240">이렇게 하면 폼 가운데에 사용자가 크기 조정으로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3240">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="a1309-3241">이 예제에서는 만든를 <xref:System.Windows.Forms.Form> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3241">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3242">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Left" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3242">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3243">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Top" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3243">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-3244">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Width" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3244">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-3245">컨트롤의 새 <see cref="P:System.Windows.Forms.Control.Height" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3245">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="a1309-3246"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3246">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span></param>
        <summary><span data-ttu-id="a1309-3247">이 컨트롤의 지정된 범위를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3247">Performs the work of setting the specified bounds of this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3248">에 포함 되지 않은 범위에 해당 하는 매개 변수가 일반적으로 `specified` 매개 변수는 현재 값과 함께 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3248">Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values.</span></span> <span data-ttu-id="a1309-3249">예를 들어, 합니다 <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, 또는 <xref:System.Drawing.Point.X%2A> 또는 <xref:System.Drawing.Point.Y%2A> 의 속성을 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤의 현재 인스턴스에 대 한 참조를 사용 하 여 로그인 속성을 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3249">For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control.</span></span> <span data-ttu-id="a1309-3250">하지만 전달 된 모든 값 적용 하 고 컨트롤에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3250">However all values passed in are honored and applied to the control.</span></span>  
  
 <span data-ttu-id="a1309-3251">합니다 `boundsSpecified` 매개 변수는 컨트롤의 요소를 나타냅니다 <xref:System.Windows.Forms.Control.Bounds%2A> 애플리케이션에서 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3251">The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application.</span></span> <span data-ttu-id="a1309-3252">예를 들어, 변경 하는 경우는 <xref:System.Windows.Forms.Control.Size%2A> 컨트롤의 합니다 `boundsSpecified` 매개 변수 값이를 `Size` 의 값 <xref:System.Windows.Forms.BoundsSpecified>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3252">For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span> <span data-ttu-id="a1309-3253">그러나 경우는 <xref:System.Windows.Forms.Control.Size%2A> 대 한 응답으로 조정 하는 <xref:System.Windows.Forms.Control.Dock%2A> 설정 되는 속성을 `boundsSpecified` 매개 변수 값이를 `None` 값 <xref:System.Windows.Forms.BoundsSpecified>.</span><span class="sxs-lookup"><span data-stu-id="a1309-3253">However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3254">Windows Server 2003 시스템의 크기는 <xref:System.Windows.Forms.Form> 최대 픽셀 너비와 높이의 모니터에 의해 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3254">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3255">다음 코드 예제에서는 재정의 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> 컨트롤 고정된 크기를 유지 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3255">The following code example overrides the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that the control remains a fixed size.</span></span> <span data-ttu-id="a1309-3256">이 예제에서는 있어야에서 직접 또는 간접적으로 파생 된 클래스는 <xref:System.Windows.Forms.Control> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3256">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#1)]
 [!code-csharp[Windows.Forms.Control_Methods#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#1)]
 [!code-vb[Windows.Forms.Control_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3257">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 메서드를 변경 하려면 컨트롤의 범위를 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3257">When overriding <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change.</span></span> <span data-ttu-id="a1309-3258">파생된 클래스에 대 한 크기 제한을 추가할 수는 <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3258">Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetClientSizeCore (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetClientSizeCore(int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member SetClientSizeCore : int * int -&gt; unit&#xA;override this.SetClientSizeCore : int * int -&gt; unit" Usage="control.SetClientSizeCore (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3259">클라이언트 영역의 너비(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3259">The client area width, in pixels.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3260">클라이언트 영역의 높이(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3260">The client area height, in pixels.</span></span></param>
        <summary><span data-ttu-id="a1309-3261">컨트롤 클라이언트 영역의 크기를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3261">Sets the size of the client area of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3262">클라이언트 영역에서 시작 합니다 (0, 0) 위치를 확장 하 고는 (`x`, `y`) 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3262">The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.</span></span>  
  
 <span data-ttu-id="a1309-3263">일반적으로 설정 해야 합니다 <xref:System.Windows.Forms.Control.ClientSize%2A> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3263">Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3264">다음 코드 예제에서는 재정의 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 컨트롤 사각형 유지 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3264">The following code example overrides the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that the control remains square.</span></span> <span data-ttu-id="a1309-3265">이 예제에서는 있어야에서 직접 또는 간접적으로 파생 된 클래스는 <xref:System.Windows.Forms.Control> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3265">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#2)]
 [!code-csharp[Windows.Forms.Control_Methods#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#2)]
 [!code-vb[Windows.Forms.Control_Methods#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3266">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> 파생된 클래스에서 사용할 기본 클래스를 호출 해야 <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> 메서드 있도록는 <see cref="P:System.Windows.Forms.Control.ClientSize" /> 속성 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3266">When overriding <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> method so that the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property is adjusted.</span></span>  
  
<span data-ttu-id="a1309-3267">컨트롤에서 그리기에 대 한 자세한 내용은 참조 [Windows Forms 컨트롤 렌더링](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3267">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetStyle (flag As ControlStyles, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetStyle(System::Windows::Forms::ControlStyles flag, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetStyle : System.Windows.Forms.ControlStyles * bool -&gt; unit" Usage="control.SetStyle (flag, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="a1309-3268">설정할 <see cref="T:System.Windows.Forms.ControlStyles" /> 비트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3268">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to set.</span></span></param>
        <param name="value"><span data-ttu-id="a1309-3269">지정된 스타일을 컨트롤에 적용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3269"><see langword="true" /> to apply the specified style to the control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-3270">지정된 <see cref="T:System.Windows.Forms.ControlStyles" /> 플래그를 <see langword="true" /> 또는 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3270">Sets a specified <see cref="T:System.Windows.Forms.ControlStyles" /> flag to either <see langword="true" /> or <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3271">컨트롤 스타일 비트 플래그는 지원 되는 동작을 분류 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3271">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="a1309-3272">컨트롤을 호출 하 여 스타일을 설정할 수 있습니다.는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드와 해당 전달 <xref:System.Windows.Forms.ControlStyles> 비트 (또는 비트) 및 비트가 설정 되도록는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3272">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to.</span></span> <span data-ttu-id="a1309-3273">지정 된 할당 된 값을 확인 하려면 <xref:System.Windows.Forms.ControlStyles> 비트를 사용 하 여는 <xref:System.Windows.Forms.Control.GetStyle%2A> 메서드와 전달은 <xref:System.Windows.Forms.ControlStyles> 멤버 평가를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3273">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-3274">컨트롤 스타일 비트가 설정 된 컨트롤의 동작을 충분히 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3274">Setting the control style bits can substantially change the behavior of the control.</span></span> <span data-ttu-id="a1309-3275">검토 합니다 <xref:System.Windows.Forms.ControlStyles> 호출 하기 전에 컨트롤 스타일 비트가 변경의 효과 이해 하려면 열거형 설명서는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3275">Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3276">다음 코드 예제에서 이중 버퍼링을 사용을 <xref:System.Windows.Forms.Form> 및 스타일 변경 내용을 반영 하도록 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3276">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTopLevel (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTopLevel(bool value);" />
      <MemberSignature Language="F#" Value="member this.SetTopLevel : bool -&gt; unit" Usage="control.SetTopLevel value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1309-3277">컨트롤을 최상위 컨트롤로 설정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3277"><see langword="true" /> to set the control as the top-level control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-3278">컨트롤을 최상위 컨트롤로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3278">Sets the control as the top-level control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3279">호출 하는 경우는 <xref:System.Windows.Forms.Control.SetTopLevel%2A> 메서드를 <xref:System.Windows.Forms.Form> 의 값을 전달 하 고 `false`를 호출할 때까지 폼 표시 되지 것입니다 <xref:System.Windows.Forms.Control.SetTopLevel%2A> 다시 값 전달 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3279">If you call the <xref:System.Windows.Forms.Control.SetTopLevel%2A> method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call <xref:System.Windows.Forms.Control.SetTopLevel%2A> again, passing in a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1309-3280"><paramref name="value" /> 매개 변수가 <see langword="true" />로 설정되고 해당 컨트롤이 ActiveX 컨트롤인 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-3280">The <paramref name="value" /> parameter is set to <see langword="true" /> and the control is an ActiveX control.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="a1309-3281"><see cref="M:System.Windows.Forms.Control.GetTopLevel" /> 반환 값이 <paramref name="value" /> 매개 변수와 같지 않고 <see cref="P:System.Windows.Forms.Control.Parent" /> 속성이 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1309-3281">The <see cref="M:System.Windows.Forms.Control.GetTopLevel" /> return value is not equal to the <paramref name="value" /> parameter and the <see cref="P:System.Windows.Forms.Control.Parent" /> property is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-3282">이외의 다른 모든 형식에는 컨트롤을 최상위 컨트롤로 설정 하려면 <see cref="T:System.Windows.Forms.Form" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3282">to set the control as a top-level control if it is of any type other than <see cref="T:System.Windows.Forms.Form" />.</span></span> <span data-ttu-id="a1309-3283">이 권한은 경우에 필요 합니다 <paramref name="value" /> 매개 변수는 <see langword="true" /> 컨트롤은 ActiveX 컨트롤이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3283">This permission is only demanded if the <paramref name="value" /> parameter is <see langword="true" /> and the control is not an ActiveX control.</span></span> <span data-ttu-id="a1309-3284">연관 된 열거형: <see langword="AllWindows" /> 의 값 <see cref="T:System.Security.Permissions.UIPermissionWindow" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3284">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetVisibleCore (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetVisibleCore(bool value);" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleCore : bool -&gt; unit&#xA;override this.SetVisibleCore : bool -&gt; unit" Usage="control.SetVisibleCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1309-3285">컨트롤을 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3285"><see langword="true" /> to make the control visible; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1309-3286">컨트롤을 지정된 표시 상태로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3286">Sets the control to the specified visible state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3287">일반적으로 컨트롤의 표시 동작을 변경 하려면이 메서드를 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3287">You would typically override this method to change the visibility behavior of the control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3288">재정의 하는 경우 <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> 메서드를 변경 하려면 컨트롤의 표시 여부.</span><span class="sxs-lookup"><span data-stu-id="a1309-3288">When overriding <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="control.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3289">컨트롤을 사용자에게 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3289">Displays the control to the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3290">설정에 해당 하는 컨트롤을 표시 합니다 <xref:System.Windows.Forms.Control.Visible%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3290">Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`.</span></span> <span data-ttu-id="a1309-3291">후는 <xref:System.Windows.Forms.Control.Show%2A> 메서드를 호출 합니다 <xref:System.Windows.Forms.Control.Visible%2A> 속성의 값을 반환 `true` 될 때까지 <xref:System.Windows.Forms.Control.Hide%2A> 메서드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3291">After the <xref:System.Windows.Forms.Control.Show%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3292">다음 코드 예제는 대화 상자에 대 한 일시적으로 해당 화면에 파란색 사각형을 그립니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3292">The following code example displays an about dialog box and temporarily draws a blue square on its surface.</span></span> <span data-ttu-id="a1309-3293">이 예제에서 파생 된 클래스를 정의 했다고 필요 <xref:System.Windows.Forms.Form> 라는 `AboutDialog`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3293">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#1)]
 [!code-vb[Windows.Forms.Control Members2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowFocusCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowFocusCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowFocusCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowFocusCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowFocusCues : bool" Usage="System.Windows.Forms.Control.ShowFocusCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3294">컨트롤이 포커스 영역을 표시할지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3294">Gets a value indicating whether the control should display focus rectangles.</span></span></summary>
        <value><span data-ttu-id="a1309-3295">컨트롤이 포커스 영역을 표시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3295"><see langword="true" /> if the control should display focus rectangles; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3296">이 기능에 대 한 자세한 내용은 참조는 [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)를 [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), 및 [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3296">For more information about this feature, see the [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx), [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3297">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3297">When overriding the <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-3298">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3298">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowKeyboardCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowKeyboardCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowKeyboardCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowKeyboardCues : bool" Usage="System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3299">사용자 인터페이스가 키보드 액셀러레이터 키를 표시하는지 아니면 숨기는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3299">Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</span></span></summary>
        <value><span data-ttu-id="a1309-3300">키보드 액셀러레이터 키가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3300"><see langword="true" /> if the keyboard accelerators are visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3301">Windows Forms 디자이너에서 만든 컨트롤에 키보드 액셀러레이터 키가 기본적으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3301">In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</span></span>  
  
 <span data-ttu-id="a1309-3302">이 기능에 대 한 자세한 내용은 참조는 [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)를 [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), 및 [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3302">For more information about this feature, see the [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx), [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowFocusCues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Windows.Forms.Control.Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IComponent.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3303">컨트롤의 사이트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3303">Gets or sets the site of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-3304"><see cref="T:System.ComponentModel.ISite" />가 있는 경우 이것과 관련된 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3304">The <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.Windows.Forms.Control" />, if any.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ISite" />
        <altmember cref="P:System.ComponentModel.IComponent.Site" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3305">컨트롤의 높이와 너비를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3305">Gets or sets the height and width of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-3306">컨트롤의 높이와 너비를 픽셀 단위로 나타내는 <see cref="T:System.Drawing.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3306">The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3307">때문에 합니다 <xref:System.Drawing.Size> 클래스는 값 형식 (`Structure` Visual basic에서는 `struct` Visual C#), 컨트롤의 크기의 복사본을 반환 하는 속성에 액세스를 의미 하는 값으로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3307">Because the <xref:System.Drawing.Size> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the size of the control.</span></span> <span data-ttu-id="a1309-3308">따라서 조정를 <xref:System.Drawing.Size.Width%2A> 또는 <xref:System.Drawing.Size.Height%2A> 의 속성을 <xref:System.Drawing.Size> 이 반환 속성에 영향을 주지 것입니다를 <xref:System.Windows.Forms.Control.Width%2A> 또는 <xref:System.Windows.Forms.Control.Height%2A> 컨트롤의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3308">So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control.</span></span> <span data-ttu-id="a1309-3309">조정 하는 <xref:System.Windows.Forms.Control.Width%2A> 또는 <xref:System.Windows.Forms.Control.Height%2A> 컨트롤의 컨트롤을 설정 해야 합니다 <xref:System.Windows.Forms.Control.Width%2A> 또는 <xref:System.Windows.Forms.Control.Height%2A> 속성을 설정 하거나 합니다 <xref:System.Windows.Forms.Control.Size%2A> 새 속성 <xref:System.Drawing.Size>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3309">To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control's <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the <xref:System.Windows.Forms.Control.Size%2A> property with a new <xref:System.Drawing.Size>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3310">더 나은 성능을 유지 하기 위해 설정 하지 마십시오는 <xref:System.Drawing.Size> 생성자의 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3310">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="a1309-3311">재정의 하는 방법이 <xref:System.Windows.Forms.Control.DefaultSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3311">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3312">Windows Server 2003 시스템의 크기는 <xref:System.Windows.Forms.Form> 최대 픽셀 너비와 높이의 모니터에 의해 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3312">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3313">다음 코드 예제에서는 추가 <xref:System.Windows.Forms.Button> 양식에 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3313">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="a1309-3314">이 예제에서는 폼 크기가 조정 될 때의 상대적 위치를 유지할 수 있도록 단추를 폼의 오른쪽 아래 모퉁이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3314">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="a1309-3315">설정 옆의 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 단추와 같은 크기를 조정 하 고는 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3315">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-3316">설정한 후 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 에 `true` 설정 하 고는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-3316">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="a1309-3317">마지막으로 처리 하는 이벤트 처리기 추가 <xref:System.Windows.Forms.Control.Click> 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3317">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="a1309-3318">이 예제를 실행 하려면 프로그램 <xref:System.Windows.Forms.ImageList> 라는 `imageList1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3318">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : EventHandler " Usage="member this.SizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3319"><see cref="P:System.Windows.Forms.Control.Size" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3319">Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3320">사용 하는 것이 좋습니다는 <xref:System.Windows.Forms.Control.Layout> 사용자 지정 레이아웃을 처리 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3320">It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts.</span></span> <span data-ttu-id="a1309-3321">합니다 <xref:System.Windows.Forms.Control.Layout> 대 한 응답으로 이벤트는 <xref:System.Windows.Forms.Control.Resize> 레이아웃을 적용 해야 하는 경우 다른 조건에서 뿐만 아니라 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3321">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.</span></span>  
  
 <span data-ttu-id="a1309-3322">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Size%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3322">This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3323">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3323">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3324">다음 코드 예제는 <xref:System.Windows.Forms.Control.SizeChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3324">The following code example demonstrates the <xref:System.Windows.Forms.Control.SizeChanged> event.</span></span> <span data-ttu-id="a1309-3325">인스턴스를 <xref:System.Windows.Forms.Button> 컨트롤 가로 세로 방향으로 확장할 수 있는 제공 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3325">An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically.</span></span> <span data-ttu-id="a1309-3326"><xref:System.Windows.Forms.NumericUpDown> 인스턴스 가로 및 세로 크기 조정 값을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3326">A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value.</span></span> <span data-ttu-id="a1309-3327"><xref:System.Windows.Forms.Button> 명명 된 인스턴스 **확인** 에 대 한 소수 자릿수 값을 설정 하는 데 사용 되는 <xref:System.Windows.Forms.Button> 컨트롤 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3327">The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance.</span></span> <span data-ttu-id="a1309-3328">변경 될 때마다 컨트롤의 크기, 연결 된 이벤트 처리기는 <xref:System.Windows.Forms.Control.SizeChanged> 컨트롤의 이벤트 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3328">Whenever the size of the control changes, the event handler associated with the <xref:System.Windows.Forms.Control.SizeChanged> event of the control is called.</span></span> <span data-ttu-id="a1309-3329">이 이벤트 처리기는 컨트롤의 크기 변경 되었음을 나타내는 메시지 상자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3329">This event handler displays a message box indicating that the size of the control has changed.</span></span>  
  
 [!code-cpp[Control_Scale1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Scale1/CPP/control_scale1.cpp#2)]
 [!code-csharp[Control_Scale1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Scale1/CS/control_scale1.cs#2)]
 [!code-vb[Control_Scale1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Scale1/VB/control_scale1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SizeFromClientSize (clientSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size SizeFromClientSize(System::Drawing::Size clientSize);" />
      <MemberSignature Language="F#" Value="abstract member SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.SizeFromClientSize clientSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="clientSize"><span data-ttu-id="a1309-3330">컨트롤에 있는 클라이언트 영역의 높이와 너비를 나타내는 <see cref="T:System.Drawing.Size" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3330">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the control's client area.</span></span></param>
        <summary><span data-ttu-id="a1309-3331">해당 클라이언트 영역의 높이와 너비로 전체 컨트롤의 크기를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3331">Determines the size of the entire control from the height and width of its client area.</span></span></summary>
        <returns><span data-ttu-id="a1309-3332">전체 컨트롤의 높이와 너비를 나타내는 <see cref="T:System.Drawing.Size" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3332">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the entire control.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.StyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StyleChanged;" />
      <MemberSignature Language="F#" Value="member this.StyleChanged : EventHandler " Usage="member this.StyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3333">컨트롤 스타일이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3333">Occurs when the control style changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3334"><xref:System.Windows.Forms.Control.StyleChanged> 이벤트가 발생할 때 <xref:System.Windows.Forms.ControlStyles> 추가 되거나 변경 된 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3334">The <xref:System.Windows.Forms.Control.StyleChanged> event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.</span></span>  
  
 <span data-ttu-id="a1309-3335">이 이벤트는 컨트롤의 스타일을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 되 면 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3335">This event is raised if the control style is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3336">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3336">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3337">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3337">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-3338">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.StyleChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3338">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span> <span data-ttu-id="a1309-3339">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3339">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-3340">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3340">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-3341">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3341">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-3342">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.StyleChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3342">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#68)]
 [!code-vb[System.Windows.Forms.EventExamples#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#68)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SuspendLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub SuspendLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SuspendLayout();" />
      <MemberSignature Language="F#" Value="member this.SuspendLayout : unit -&gt; unit" Usage="control.SuspendLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3343">컨트롤의 레이아웃 논리를 임시로 일시 중단합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3343">Temporarily suspends the layout logic for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3344">될 때까지 일시 중단 된 컨트롤의 레이아웃 논리를 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3344">The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.</span></span>  
  
 <span data-ttu-id="a1309-3345"><xref:System.Windows.Forms.Control.SuspendLayout%2A> 하 고 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드는 동시에 표시 하지 않는 데 여러 <xref:System.Windows.Forms.Control.Layout> 컨트롤의 여러 특성을 조정 하는 동안 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3345">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="a1309-3346">예를 들어 호출를 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 메서드를 설정한를 <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, 또는 <xref:System.Windows.Forms.Control.Dock%2A> 컨트롤을 호출한 다음 속성은 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 변경 내용을 적용 하려면 사용 하도록 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3346">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="a1309-3347">에 대 한 보류 중인 호출 해야 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 에 대 한 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 성공적으로 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3347">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1309-3348">부모 컨트롤에 여러 컨트롤을 추가, 것이 좋습니다를 호출 하는 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 추가할 컨트롤을 초기화 하기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3348">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="a1309-3349">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3349">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="a1309-3350">이렇게 하면 많은 컨트롤을 사용 하 여 애플리케이션의 성능을 늘어납니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3350">This will increase the performance of applications with many controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3351">다음 코드 예제에서는 폼에 단추 두 개를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3351">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="a1309-3352">예제에서는 단추를 사용 하 여 추가 합니다 <xref:System.Windows.Forms.Control.SuspendLayout%2A> 및 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3352">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragDrop (drgEvent As DragEventArgs) Implements IDropTarget.OnDragDrop" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragDrop;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="a1309-3353">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3353">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-3354"><see cref="E:System.Windows.Forms.Control.DragDrop" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3354">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragEnter (drgEvent As DragEventArgs) Implements IDropTarget.OnDragEnter" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragEnter;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="a1309-3355">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3355">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-3356"><see cref="E:System.Windows.Forms.Control.DragEnter" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3356">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragLeave (e As EventArgs) Implements IDropTarget.OnDragLeave" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs ^ e) = System::Windows::Forms::IDropTarget::OnDragLeave;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a1309-3357">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3357">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-3358"><see cref="E:System.Windows.Forms.Control.DragLeave" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3358">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragOver (drgEvent As DragEventArgs) Implements IDropTarget.OnDragOver" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragOver(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragOver;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="a1309-3359">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3359">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="a1309-3360"><see cref="E:System.Windows.Forms.Control.DragOver" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3360">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SystemColorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SystemColorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SystemColorsChanged;" />
      <MemberSignature Language="F#" Value="member this.SystemColorsChanged : EventHandler " Usage="member this.SystemColorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3361">시스템 색이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3361">Occurs when the system colors change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3362">이 이벤트가 발생 하는 경우는 <xref:System.Drawing.SystemColors> 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3362">This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3363">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3363">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3364">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3364">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-3365">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.SystemColorsChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3365">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span> <span data-ttu-id="a1309-3366">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3366">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-3367">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3367">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-3368">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3368">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-3369">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.SystemColorsChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3369">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#69)]
 [!code-vb[System.Windows.Forms.EventExamples#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#69)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int with get, set" Usage="System.Windows.Forms.Control.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3370">컨트롤 컨테이너 내의 컨트롤 탭 순서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3370">Gets or sets the tab order of the control within its container.</span></span></summary>
        <value><span data-ttu-id="a1309-3371">해당 컨테이너 내의 컨트롤 집합에 있는 컨트롤의 인덱스 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3371">The index value of the control within the set of controls within its container.</span></span> <span data-ttu-id="a1309-3372">컨테이너의 컨트롤은 탭 순서에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3372">The controls in the container are included in the tab order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3373">탭 순서에서 앞에 낮은 번호가 0 보다 크거나 같은 임의의 유효한 정수 탭 인덱스를 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3373">A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</span></span> <span data-ttu-id="a1309-3374">하나 이상의 컨트롤 같은 부모 컨트롤에서 동일한 탭 인덱스 있으면 컨트롤의 z 순서 컨트롤을 순환 하는 순서를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3374">If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</span></span>  
  
 <span data-ttu-id="a1309-3375">탭 순서에 포함 될 컨트롤에 대 한 해당 <xref:System.Windows.Forms.Control.TabStop%2A> 속성으로 설정 되어 있어야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3375">For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3376">다음 코드 예제에서는 추가 <xref:System.Windows.Forms.Button> 양식에 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3376">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="a1309-3377">이 예제에서는 폼 크기가 조정 될 때의 상대적 위치를 유지할 수 있도록 단추를 폼의 오른쪽 아래 모퉁이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3377">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="a1309-3378">설정 옆의 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 단추와 같은 크기를 조정 하 고는 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3378">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-3379">설정한 후 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 에 `true` 설정 하 고는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-3379">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="a1309-3380">마지막으로 처리 하는 이벤트 처리기 추가 <xref:System.Windows.Forms.Control.Click> 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3380">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="a1309-3381">이 예제를 실행 하려면 프로그램 <xref:System.Windows.Forms.ImageList> 라는 `imageList1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3381">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.TabIndexChanged : EventHandler " Usage="member this.TabIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3382"><see cref="P:System.Windows.Forms.Control.TabIndex" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3382">Occurs when the <see cref="P:System.Windows.Forms.Control.TabIndex" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3383">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3383">This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3384">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3384">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3385">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3385">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-3386">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.TabIndexChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3386">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span> <span data-ttu-id="a1309-3387">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3387">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-3388">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3388">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-3389">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3389">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-3390">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.TabIndexChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3390">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#25)]
 [!code-vb[System.Windows.Forms.EventExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.Control.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3391">Tab 키를 사용하여 이 컨트롤의 포커스를 이동할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3391">Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</span></span></summary>
        <value><span data-ttu-id="a1309-3392">Tab 키를 사용하여 컨트롤의 포커스를 이동할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3392"><see langword="true" /> if the user can give the focus to the control using the TAB key; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-3393">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3393">The default is <see langword="true" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="a1309-3394">이 속성은 <see langword="true" /> 클래스의 인스턴스에 대해 항상 <see cref="T:System.Windows.Forms.Form" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3394">This property will always return <see langword="true" /> for an instance of the <see cref="T:System.Windows.Forms.Form" /> class.</span></span>  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3395">사용자가 TAB 키를 누르면 입력된 포커스가 탭 순서의 다음 컨트롤로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3395">When the user presses the TAB key, the input focus is set to the next control in the tab order.</span></span> <span data-ttu-id="a1309-3396">사용 하 여 제어 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 속성 값의 `false` 탭 순서에 컨트롤의 컬렉션에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3396">Controls with the <xref:System.Windows.Forms.Control.TabStop%2A> property value of `false` are not included in the collection of controls in the tab order.</span></span> <span data-ttu-id="a1309-3397">컨트롤의 설정 탭 순서를 조작할 수 있습니다 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3397">The tab order can be manipulated by setting the control's <xref:System.Windows.Forms.Control.TabIndex%2A> property value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3398">다음 코드 예제에서는 추가 <xref:System.Windows.Forms.Button> 양식에 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3398">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="a1309-3399">이 예제에서는 폼 크기가 조정 될 때의 상대적 위치를 유지할 수 있도록 단추를 폼의 오른쪽 아래 모퉁이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3399">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="a1309-3400">설정 옆의 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 단추와 같은 크기를 조정 하 고는 <xref:System.Drawing.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3400">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="a1309-3401">설정한 후 합니다 <xref:System.Windows.Forms.Control.TabStop%2A> 에 `true` 설정 하 고는 <xref:System.Windows.Forms.Control.TabIndex%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-3401">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="a1309-3402">마지막으로 처리 하는 이벤트 처리기 추가 <xref:System.Windows.Forms.Control.Click> 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3402">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="a1309-3403">이 예제를 실행 하려면 프로그램 <xref:System.Windows.Forms.ImageList> 라는 `imageList1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3403">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3404"><see cref="P:System.Windows.Forms.Control.TabStop" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3404">Occurs when the <see cref="P:System.Windows.Forms.Control.TabStop" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3405">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.TabStop%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3405">This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3406">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3406">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3407">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3407">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="a1309-3408">예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.TabStopChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3408">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span> <span data-ttu-id="a1309-3409">이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3409">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="a1309-3410">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3410">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="a1309-3411">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3411">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="a1309-3412">다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.TabStopChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3412">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#26)]
 [!code-vb[System.Windows.Forms.EventExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Control.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3413">컨트롤에 대한 데이터가 포함된 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3413">Gets or sets the object that contains data about the control.</span></span></summary>
        <value><span data-ttu-id="a1309-3414">컨트롤에 대한 데이터가 포함된 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3414">An <see cref="T:System.Object" /> that contains data about the control.</span></span> <span data-ttu-id="a1309-3415">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3415">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3416">파생 된 형식은 <xref:System.Object> 클래스는이 속성에 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3416">Any type derived from the <xref:System.Object> class can be assigned to this property.</span></span> <span data-ttu-id="a1309-3417">경우는 <xref:System.Windows.Forms.Control.Tag%2A> Windows Forms 디자이너를 통해 속성을 설정 하면 텍스트에만 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3417">If the <xref:System.Windows.Forms.Control.Tag%2A> property is set through the Windows Forms designer, only text can be assigned.</span></span>  
  
 <span data-ttu-id="a1309-3418">일반적인 용도 <xref:System.Windows.Forms.Control.Tag%2A> 속성 컨트롤과 밀접 하 게 연결 된 데이터를 저장 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3418">A common use for the <xref:System.Windows.Forms.Control.Tag%2A> property is to store data that is closely associated with the control.</span></span> <span data-ttu-id="a1309-3419">예를 들어, 고객에 대 한 정보를 표시 하는 컨트롤에 있는 경우 저장할 수 있습니다는 <xref:System.Data.DataSet> 제어 하는 고객의 주문 기록이 포함 된 <xref:System.Windows.Forms.Control.Tag%2A> 속성 데이터를 신속 하 게 액세스할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3419">For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer's order history in that control's <xref:System.Windows.Forms.Control.Tag%2A> property so the data can be accessed quickly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3420">다음 코드 예제에서는 폼을 표시 하 고 저장을 `Customer` 에서 해당 <xref:System.Windows.Forms.Control.Tag%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="a1309-3420">The following code example displays a form and stores a `Customer` in its <xref:System.Windows.Forms.Control.Tag%2A> property.</span></span> <span data-ttu-id="a1309-3421">이 예제에서 파생 된 클래스를 정의 했다고 필요 <xref:System.Windows.Forms.Form> 라는 `CustomerForm` 및 사용자가 정의한는 `Customer`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3421">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#3)]
 [!code-vb[Windows.Forms.Control Members2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.Control.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3422">이 컨트롤과 관련된 텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3422">Gets or sets the text associated with this control.</span></span></summary>
        <value><span data-ttu-id="a1309-3423">이 컨트롤과 관련된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3423">The text associated with this control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3424"><xref:System.Windows.Forms.Control.Text%2A> 컨트롤의 속성은 각 파생된 클래스에서 다르게 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3424">The <xref:System.Windows.Forms.Control.Text%2A> property of the control is used differently by each derived class.</span></span> <span data-ttu-id="a1309-3425">예를 들어 합니다 <xref:System.Windows.Forms.Control.Text%2A> 의 속성을 <xref:System.Windows.Forms.Form> 폼의 맨 위에 있는 제목 표시줄에 표시 되는 문자 수가 매우 적고 이며 일반적으로 애플리케이션이 나 문서 이름이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3425">For example the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</span></span> <span data-ttu-id="a1309-3426">그러나 합니다 <xref:System.Windows.Forms.Control.Text%2A> 의 속성을 <xref:System.Windows.Forms.RichTextBox> 매우 커질 수 있으며 텍스트의 서식을 지정 하는 데 사용 되는 다양 한 보이지 않는 문자를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3426">However, the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text.</span></span> <span data-ttu-id="a1309-3427">에 표시할 텍스트를 예를 들어,를 <xref:System.Windows.Forms.RichTextBox> 조정 하 여 서식을 지정할 수는 <xref:System.Drawing.Font> 속성 또는 공백이 나 텍스트를 맞추는 탭 문자가 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3427">For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3428">다음 코드 예제는 <xref:System.Windows.Forms.GroupBox> 해당 공용 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3428">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="a1309-3429">이 예에서는 만듭니다는 <xref:System.Windows.Forms.TextBox> 설정 및 해당 <xref:System.Windows.Forms.Control.Location%2A> 그룹 상자 내에서.</span><span class="sxs-lookup"><span data-stu-id="a1309-3429">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="a1309-3430">그런 다음 설정의 <xref:System.Windows.Forms.Control.Text%2A> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3430">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="a1309-3431">마지막으로, 그룹 상자를 설정 하 여 비활성화 된 <xref:System.Windows.Forms.Control.Enabled%2A> 속성을 `false`, 사용 하지 않도록 설정할 그룹 상자 내에 포함 된 모든 컨트롤에 이르게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3431">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3432">재정의 하는 경우는 <see cref="P:System.Windows.Forms.Control.Text" /> 기본 클래스를 사용 하는 파생된 클래스에서 속성 <see cref="P:System.Windows.Forms.Control.Text" /> 속성을 기본 구현을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3432">When overriding the <see cref="P:System.Windows.Forms.Control.Text" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Text" /> property to extend the base implementation.</span></span> <span data-ttu-id="a1309-3433">그렇지 않으면 전체 구현을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3433">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="a1309-3434">모두 재정의할 필요가 없습니다를 <see langword="get" /> 및 <see langword="set" /> 접근자를 <see cref="P:System.Windows.Forms.Control.Text" /> 속성에 필요한 경우 하나만 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3434">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Text" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3435"><see cref="P:System.Windows.Forms.Control.Text" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3435">Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3436">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Text%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3436">This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3437">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3437">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3438">다음 코드 예제에서는 변경 된 <xref:System.Windows.Forms.Control.ForeColor%2A> 의 <xref:System.Windows.Forms.TextBox> 통화 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3438">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="a1309-3439">예제에서는 10 진수 숫자로 변경 하는 텍스트를 변환 합니다.는 <xref:System.Windows.Forms.Control.ForeColor%2A> 하 <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> 숫자가 음수입니다를 <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> 숫자가 양수 이면 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3439">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="a1309-3440">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3440">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Top : int with get, set" Usage="System.Windows.Forms.Control.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3441">컨트롤의 위쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3441">Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="a1309-3442">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 나타내는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3442">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3443"><xref:System.Windows.Forms.Control.Top%2A> 속성 값이 해당 하는 <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> 의 속성을 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3443">The <xref:System.Windows.Forms.Control.Top%2A> property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="a1309-3444">변경 합니다 <xref:System.Windows.Forms.Control.Height%2A> 및 <xref:System.Windows.Forms.Control.Top%2A> 속성 값을 <xref:System.Windows.Forms.Control.Bottom%2A> 변경 하려면 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3444">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3445">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3445">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-3446">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3446">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.Y" />
        <altmember cref="P:System.Windows.Forms.Control.Bottom" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TopLevelControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLevelControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ TopLevelControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLevelControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3447">다른 Windows Forms 컨트롤에 의해 부모로 지정될 수 없는 부모 컨트롤을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3447">Gets the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="a1309-3448">일반적으로 이것은 컨트롤이 포함된 가장 바깥쪽 <see cref="T:System.Windows.Forms.Form" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3448">Typically, this is the outermost <see cref="T:System.Windows.Forms.Form" /> that the control is contained in.</span></span></summary>
        <value><span data-ttu-id="a1309-3449">현재 컨트롤이 포함된 최상위 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3449">The <see cref="T:System.Windows.Forms.Control" /> that represents the top-level control that contains the current control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3450">다른 Windows Forms 컨트롤에 의해 부모로 지정 되어 있지는 부모 컨트롤을 최상위 컨트롤 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3450">The top-level control is defined as the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="a1309-3451">일반적으로 이것은 컨트롤이 포함된 가장 바깥쪽 <xref:System.Windows.Forms.Form>입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3451">Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in.</span></span> <span data-ttu-id="a1309-3452">예를 들어, 컨트롤을 MDI 자식에 포함 되어 있으면 <xref:System.Windows.Forms.Form>에서 최상위 컨트롤은 문서 MDI (다중 인터페이스) 부모 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3452">For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="a1309-3453">에 컨트롤의 부모가 없는 경우는 <xref:System.Windows.Forms.Form>,이 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3453">If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="a1309-3454">이 속성 값을 얻으려면 모든 창입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3454">for all windows to get this property value.</span></span> <span data-ttu-id="a1309-3455">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="a1309-3455">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Update" />
      <MemberSignature Language="VB.NET" Value="Public Sub Update ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; unit" Usage="control.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3456">해당 컨트롤이 컨트롤의 클라이언트 영역 내에 무효화된 영역을 다시 그리게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3456">Causes the control to redraw the invalidated regions within its client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3457">그리기에 대 한 보류 중인 요청을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3457">Executes any pending requests for painting.</span></span>  
  
 <span data-ttu-id="a1309-3458">두 가지 방법으로 폼 및 해당 콘텐츠를 다시 그려야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3458">There are two ways to repaint a form and its contents:</span></span>  
  
-   <span data-ttu-id="a1309-3459">오버 로드 중 하나를 사용 합니다 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드는 <xref:System.Windows.Forms.Control.Update%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3459">You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
-   <span data-ttu-id="a1309-3460">호출할 수 있습니다는 <xref:System.Windows.Forms.Control.Refresh%2A> 강제로 컨트롤 자체와 모든 해당 하위 항목을 다시 그리게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3460">You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children.</span></span> <span data-ttu-id="a1309-3461">이 설정에 해당 하는 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 `true` 와 함께 사용 하 <xref:System.Windows.Forms.Control.Update%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3461">This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with <xref:System.Windows.Forms.Control.Update%2A>.</span></span>  
  
 <span data-ttu-id="a1309-3462"><xref:System.Windows.Forms.Control.Invalidate%2A> 어떤 그리거나 다시 그리는 방법을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3462">The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted.</span></span> <span data-ttu-id="a1309-3463"><xref:System.Windows.Forms.Control.Update%2A> 그리기를 다시 그리기 발생 하면 메서드를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3463">The <xref:System.Windows.Forms.Control.Update%2A> method governs when the painting or repainting occurs.</span></span> <span data-ttu-id="a1309-3464">사용 하는 경우는 <xref:System.Windows.Forms.Control.Invalidate%2A> 및 <xref:System.Windows.Forms.Control.Update%2A> 메서드를 호출 하는 대신 함께 <xref:System.Windows.Forms.Control.Refresh%2A>는 오버 로드에 따라 달라 집니다 이어지기 가져옵니다 어떤 <xref:System.Windows.Forms.Control.Invalidate%2A> 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3464">If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and <xref:System.Windows.Forms.Control.Update%2A> methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use.</span></span> <span data-ttu-id="a1309-3465"><xref:System.Windows.Forms.Control.Update%2A> 메서드 바로 강제로 즉시 그릴 하지만 <xref:System.Windows.Forms.Control.Invalidate%2A> 메서드를 호출할 때 그리고 가져옵니다 무엇을 제어 합니다 <xref:System.Windows.Forms.Control.Update%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3465">The <xref:System.Windows.Forms.Control.Update%2A> method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
 <span data-ttu-id="a1309-3466">자세한 내용은 참조는 [WM_PAINT](https://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3466">For more information, see the [WM_PAINT](https://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1309-3467">컨트롤의 범위를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3467">Updates the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected internal void UpdateBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub UpdateBounds ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void UpdateBounds();" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : unit -&gt; unit" Usage="control.UpdateBounds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3468">현재 크기와 위치를 사용하여 컨트롤의 범위를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3468">Updates the bounds of the control with the current size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3469">하는 경우 새 <xref:System.Windows.Forms.Control.Size%2A> 컨트롤은 이전 다릅니다 <xref:System.Drawing.Size>는 <xref:System.Windows.Forms.Control.SizeChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3469">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="a1309-3470">마찬가지로, 경우 합니다 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤 변경는 <xref:System.Windows.Forms.Control.LocationChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3470">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3471">컨트롤의 <see cref="P:System.Drawing.Point.X" /> 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3471">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3472">컨트롤의 <see cref="P:System.Drawing.Point.Y" /> 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3472">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-3473">컨트롤의 <see cref="P:System.Drawing.Size.Width" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3473">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-3474">컨트롤의 <see cref="P:System.Drawing.Size.Height" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3474">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="a1309-3475">지정된 크기와 위치를 사용하여 컨트롤의 범위를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3475">Updates the bounds of the control with the specified size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3476">하는 경우 새 <xref:System.Windows.Forms.Control.Size%2A> 이전와 다른 경우 컨트롤의 <xref:System.Drawing.Size>는 <xref:System.Windows.Forms.Control.SizeChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3476">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="a1309-3477">마찬가지로 합니다 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤 변경의 <xref:System.Windows.Forms.Control.LocationChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3477">Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer, clientWidth As Integer, clientHeight As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height, clientWidth, clientHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a1309-3478">컨트롤의 <see cref="P:System.Drawing.Point.X" /> 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3478">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="a1309-3479">컨트롤의 <see cref="P:System.Drawing.Point.Y" /> 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3479">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="a1309-3480">컨트롤의 <see cref="P:System.Drawing.Size.Width" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3480">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="a1309-3481">컨트롤의 <see cref="P:System.Drawing.Size.Height" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3481">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <param name="clientWidth"><span data-ttu-id="a1309-3482">컨트롤의 클라이언트 <see cref="P:System.Drawing.Size.Width" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3482">The client <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="clientHeight"><span data-ttu-id="a1309-3483">컨트롤의 클라이언트 <see cref="P:System.Drawing.Size.Height" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3483">The client <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="a1309-3484">지정된 크기, 위치 및 클라이언트 크기를 사용하여 컨트롤의 범위를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3484">Updates the bounds of the control with the specified size, location, and client size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3485">하는 경우 새 <xref:System.Windows.Forms.Control.Size%2A> 컨트롤은 이전 다릅니다 <xref:System.Drawing.Size>는 <xref:System.Windows.Forms.Control.SizeChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3485">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="a1309-3486">마찬가지로, 경우 합니다 <xref:System.Windows.Forms.Control.Location%2A> 컨트롤 변경는 <xref:System.Windows.Forms.Control.LocationChanged> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3486">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateStyles : unit -&gt; unit" Usage="control.UpdateStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3487">할당된 스타일이 컨트롤에 강제로 다시 적용되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3487">Forces the assigned styles to be reapplied to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3488">이 메서드를 호출 합니다 <xref:System.Windows.Forms.Control.CreateParams%2A> 메서드를 적용할 스타일을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3488">This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply.</span></span> <span data-ttu-id="a1309-3489">할당할 스타일을 <xref:System.Windows.Forms.CreateParams.Style%2A> 및 <xref:System.Windows.Forms.CreateParams.ExStyle%2A> 의 속성을 <xref:System.Windows.Forms.CreateParams> 컨트롤에 할당 된 <xref:System.Windows.Forms.Control.CreateParams%2A> 속성 다시 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3489">The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control's <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied.</span></span> <span data-ttu-id="a1309-3490">필요한 경우 스타일 변경 내용을 반영 하기 위해 컨트롤 다시 그려집니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3490">The control is repainted to reflect the style changes if necessary.</span></span>  
  
 <span data-ttu-id="a1309-3491">합니다 <xref:System.Windows.Forms.Control.UpdateStyles%2A> 경우 메서드는 어떠한 영향도 합니다 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> 속성 값이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3491">The <xref:System.Windows.Forms.Control.UpdateStyles%2A> method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3492">다음 코드 예제에서 이중 버퍼링을 사용을 <xref:System.Windows.Forms.Form> 및 스타일 변경 내용을 반영 하도록 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3492">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateZOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateZOrder ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateZOrder();" />
      <MemberSignature Language="F#" Value="member this.UpdateZOrder : unit -&gt; unit" Usage="control.UpdateZOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1309-3493">컨트롤 부모의 Z 순서대로 컨트롤을 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3493">Updates the control in its parent's z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3494"><xref:System.Windows.Forms.Control.UpdateZOrder%2A> 메서드 부모 컨트롤의 z 순서에 컨트롤의 위치를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3494">The <xref:System.Windows.Forms.Control.UpdateZOrder%2A> method updates the position of the control in its parent control's z-order.</span></span> <span data-ttu-id="a1309-3495">이 컨트롤은 새로 만든 제어 하는 경우에 예를 들어, 추가한는 <xref:System.Windows.Forms.Control.ControlCollection>, z-순서 뒤에 추가 하는 새 컨트롤을 사용 하 여 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3495">For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Control.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3496">현재 컨트롤과 모든 자식 컨트롤에 대기 커서를 사용할지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3496">Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</span></span></summary>
        <value><span data-ttu-id="a1309-3497">현재 컨트롤과 모든 자식 컨트롤에 WaitCursor를 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3497"><see langword="true" /> to use the wait cursor for the current control and all child controls; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-3498">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3498">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3499">상당한 시간을 사용 하는 작업을 수행할 때마다 대기 커서를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3499">Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.</span></span> <span data-ttu-id="a1309-3500">그러나 UI 스레드를 차단 하는 작업 커서 변경도 차단 됩니다 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3500">However, note that operations that block the UI thread will also block a cursor change.</span></span> <span data-ttu-id="a1309-3501">따라서이 속성은 다른 스레드에서 시간이 많이 걸리는 작업을 수행할 때만 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3501">Therefore, this property should only be used when performing time-consuming operations in another thread.</span></span> <span data-ttu-id="a1309-3502">커서를 전역적으로 그리고 즉시 변경 하려면 참조는 <xref:System.Windows.Forms.Cursor.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3502">To change the cursor globally and immediately, see the <xref:System.Windows.Forms.Cursor.Current%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Validated;" />
      <MemberSignature Language="F#" Value="member this.Validated : EventHandler " Usage="member this.Validated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3503">컨트롤의 유효성 검사가 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3503">Occurs when the control is finished validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3504">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-3504">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-3505">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3505">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-3506">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3506">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="a1309-3507">경우는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성을 <xref:System.ComponentModel.CancelEventArgs> 로 설정 되어 `true` 에 <xref:System.Windows.Forms.Control.Validating> 이벤트 대리자, 후 일반적으로 발생 하는 모든 이벤트는 <xref:System.Windows.Forms.Control.Validating> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3507">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-3508">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3508">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-3509">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3509">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-3510">자세한 내용은 참조 하세요.는 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) 항목과의 "메시지 교착 상태" 섹션에는 [에 대 한 메시지와 메시지 큐](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3510">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) topic, and the "Message Deadlocks" section of the [About Messages and Message Queues](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="a1309-3511">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3511">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3512">다음 코드 예제에서는 파생된 클래스인 <xref:System.Windows.Forms.TextBox> 전자 메일 주소는 사용자가 입력의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3512">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="a1309-3513">전자 메일 주소 형식이 없는 경우 (포함 된 "@" and "."), 유효성 검사에 실패를 <xref:System.Windows.Forms.ErrorProvider> 아이콘이 표시 되며, 이벤트가 취소 되 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3513">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="a1309-3514">이 예제에서는 한 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.ErrorProvider> 폼에 컨트롤을 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3514">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validating As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Validating;" />
      <MemberSignature Language="F#" Value="member this.Validating : System.ComponentModel.CancelEventHandler " Usage="member this.Validating : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3515">컨트롤의 유효성을 검사할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3515">Occurs when the control is validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3516">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면 합니다 <xref:System.Windows.Forms.Control.Select%2A> 또는 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 메서드를 설정 하거나를 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> 속성을 현재 폼에 포커스 이벤트가 다음 순서 대로 발생:</span><span class="sxs-lookup"><span data-stu-id="a1309-3516">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="a1309-3517">마우스를 사용 하 여 또는 호출 하 여 포커스를 변경 하면를 <xref:System.Windows.Forms.Control.Focus%2A> 메서드 포커스 이벤트가 다음 순서 대로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3517">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="a1309-3518">경우는 <xref:System.Windows.Forms.Control.CausesValidation%2A> 속성이 `false`의 <xref:System.Windows.Forms.Control.Validating> 및 <xref:System.Windows.Forms.Control.Validated> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3518">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="a1309-3519">경우는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성을 <xref:System.ComponentModel.CancelEventArgs> 로 설정 되어 `true` 에 <xref:System.Windows.Forms.Control.Validating> 이벤트 대리자, 후 일반적으로 발생 하는 모든 이벤트는 <xref:System.Windows.Forms.Control.Validating> 이벤트는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3519">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a1309-3520">내에서 포커스를 설정 하지 마십시오는 <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>를 <xref:System.Windows.Forms.Control.Validating>, 또는 <xref:System.Windows.Forms.Control.Validated> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3520">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="a1309-3521">이렇게 하면 애플리케이션 또는 운영 체제 응답 하지 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3521">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="a1309-3522">자세한 내용은 참조는 `WM_KILLFOCUS` "키보드 입력 참조" 섹션 및 MSDN library에서 "에 대 한 메시지 및 메시지 큐" 항목의 "메시지 교착 상태" 섹션의 항목에서는 http://msdn.microsoft.com/library합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3522">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at http://msdn.microsoft.com/library.</span></span>  
  
 <span data-ttu-id="a1309-3523">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3523">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3524">다음 코드 예제에서는 파생된 클래스인 <xref:System.Windows.Forms.TextBox> 전자 메일 주소는 사용자가 입력의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3524">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="a1309-3525">전자 메일 주소 형식이 없는 경우 (포함 된 "@" and "."), 유효성 검사에 실패를 <xref:System.Windows.Forms.ErrorProvider> 아이콘이 표시 되며, 이벤트가 취소 되 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3525">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="a1309-3526">이 예제에서는 한 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.ErrorProvider> 폼에 컨트롤을 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3526">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.Control.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3527">컨트롤과 모든 해당 자식 컨트롤이 표시되는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3527">Gets or sets a value indicating whether the control and all its child controls are displayed.</span></span></summary>
        <value><span data-ttu-id="a1309-3528">컨트롤과 모든 해당 자식 컨트롤이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3528"><see langword="true" /> if the control and all its child controls are displayed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1309-3529">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3529">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3530">경우에도 유의 `Visible` 로 설정 된 `true`, 다른 컨트롤의 뒤에 가려져 있으면 컨트롤의 사용자에 게 표시 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3530">Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3531">다음 코드 예제에서는 파생된 클래스를 사용 <xref:System.Windows.Forms.VScrollBar> 및 <xref:System.Windows.Forms.HScrollBar> 설정 및 해당 <xref:System.Windows.Forms.Control.Visible%2A> 속성 값의 크기를 기준으로 <xref:System.Drawing.Image> 에 표시 되는 <xref:System.Windows.Forms.PictureBox> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3531">The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their <xref:System.Windows.Forms.Control.Visible%2A> property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control.</span></span> <span data-ttu-id="a1309-3532">이 예제에서는 <xref:System.Windows.Forms.PictureBox> 폼에서 만들어진 <xref:System.Windows.Forms.HScrollBar> 및 <xref:System.Windows.Forms.VScrollBar> 컨트롤에서 생성 된는 <xref:System.Windows.Forms.PictureBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3532">This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>.</span></span> <span data-ttu-id="a1309-3533">이 코드를 호출 해야 이미지를 로드할 때 및 그림 상자에는 <xref:System.Windows.Forms.Control.Resize> 폼의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3533">This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.</span></span>  
  
 [!code-cpp[Classic Control.Visible Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.Visible Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.Visible Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.Visible Example/CS/source.cs#1)]
 [!code-vb[Classic Control.Visible Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.Visible Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
        <altmember cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.VisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisibleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.VisibleChanged : EventHandler " Usage="member this.VisibleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3534"><see cref="P:System.Windows.Forms.Control.Visible" /> 속성 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3534">Occurs when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3535">이 이벤트가 발생 하는 경우는 <xref:System.Windows.Forms.Control.Visible%2A> 속성을 프로그래밍 방식으로 수정 하거나 사용자 상호 작용 하 여 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3535">This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="a1309-3536">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a1309-3536">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3537">다음 코드 예제에서는 발생을 <xref:System.Windows.Forms.Control.VisibleChanged> 이벤트 때를 <xref:System.Windows.Forms.Control.Visible%2A> 속성 값을 <xref:System.Windows.Forms.Label> 컨트롤이 변경 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3537">The following code example raises the <xref:System.Windows.Forms.Control.VisibleChanged> event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.</span></span>  
  
 [!code-cpp[Control_VisibleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_VisibleChanged/CPP/control_visiblechanged.cpp#1)]
 [!code-csharp[Control_VisibleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_VisibleChanged/CS/control_visiblechanged.cs#1)]
 [!code-vb[Control_VisibleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_VisibleChanged/VB/control_visiblechanged.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Width : int with get, set" Usage="System.Windows.Forms.Control.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3538">컨트롤의 너비를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3538">Gets or sets the width of the control.</span></span></summary>
        <value><span data-ttu-id="a1309-3539">컨트롤의 너비(픽셀)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3539">The width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3540">변경 합니다 <xref:System.Windows.Forms.Control.Width%2A> 및 <xref:System.Windows.Forms.Control.Left%2A> 속성 값을 <xref:System.Windows.Forms.Control.Right%2A> 변경 하려면 컨트롤의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3540">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3541">다음 코드 예제에서는 세 개를 만든 <xref:System.Windows.Forms.Button> 폼의 컨트롤 및 다양 한 크기 관련 및 위치와 관련 된 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3541">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="a1309-3542">이 예제를 실행 하려면를 <xref:System.Windows.Forms.Form> 너비 및 높이는 300 픽셀 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3542">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Drawing.Size.Width" />
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.WindowTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowTarget As IWindowTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IWindowTarget ^ WindowTarget { System::Windows::Forms::IWindowTarget ^ get(); void set(System::Windows::Forms::IWindowTarget ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTarget : System.Windows.Forms.IWindowTarget with get, set" Usage="System.Windows.Forms.Control.WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1309-3543">이 속성은 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3543">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="a1309-3544">컨트롤에 포함된 NativeWindow입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3544">The NativeWindow contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3545">이 속성은 이 클래스와 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3545">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="control.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="a1309-3546">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3546">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="a1309-3547">Windows 메시지를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3547">Processes Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1309-3548">모든 메시지를 전송 합니다 <xref:System.Windows.Forms.Control.WndProc%2A> 메서드를 통해 필터링 된 후의 <xref:System.Windows.Forms.Control.PreProcessMessage%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1309-3548">All messages are sent to the <xref:System.Windows.Forms.Control.WndProc%2A> method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.</span></span>  
  
 <span data-ttu-id="a1309-3549"><xref:System.Windows.Forms.Control.WndProc%2A> 메서드는 Windows `WindowProc` 함수와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3549">The <xref:System.Windows.Forms.Control.WndProc%2A> method corresponds exactly to the Windows `WindowProc` function.</span></span> <span data-ttu-id="a1309-3550">Windows 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는 [WindowProc 함수](https://go.microsoft.com/fwlink/?LinkId=181565)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3550">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1309-3551">다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다 합니다 <xref:System.Windows.Forms.Control.WndProc%2A> 에서 식별 하는 운영 체제 메시지를 처리 하는 메서드는 <xref:System.Windows.Forms.Message> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3551">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.WndProc%2A> method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure.</span></span> <span data-ttu-id="a1309-3552">합니다 [WM_ACTIVATEAPP](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) 다른 애플리케이션이 활성화 되 면 알아야이 예제에서 운영 체제 메시지를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3552">The [WM_ACTIVATEAPP](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) operating system message is handled in this example to know when another application is becoming active.</span></span> <span data-ttu-id="a1309-3553">사용 가능한 이해 하려면 다음 항목을 참조 하세요 <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3553">See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> values.</span></span> <span data-ttu-id="a1309-3554">Windows.h 헤더 파일에 실제 상수 값을 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3554">Actual constant values can be found in the Windows.h header file.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a1309-3555">비관리 코드를 호출할 즉각적인 호출자가입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3555">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="a1309-3556">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a1309-3556">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1309-3557">상속 하는 컨트롤 기본 클래스를 호출 해야 <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> 처리 하지 않는 모든 메시지를 처리 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a1309-3557">Inheriting controls should call the base class's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> method to process any messages that they do not handle.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
  </Members>
</Type>