<Type Name="NameObjectCollectionBase+KeysCollection" FullName="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1a157a1d76b7ff80535ca081f571251a6149996" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58687390" /></Metadata><TypeSignature Language="C#" Value="public class NameObjectCollectionBase.KeysCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable beforefieldinit NameObjectCollectionBase/KeysCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class NameObjectCollectionBase.KeysCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public: ref class NameObjectCollectionBase::KeysCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type NameObjectCollectionBase.KeysCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3f547-101">컬렉션의 <see cref="T:System.String" /> 키의 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-101">Represents a collection of the <see cref="T:System.String" /> keys of a collection.</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="3f547-102">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-102">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="3f547-103">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-103">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="3f547-104">이 구현은 동기화를 제공 하지 않습니다 스레드로부터 안전한 래퍼를 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />, 파생된 클래스의 자체 동기화 된 버전을 만들 수 있지만 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 사용 하 여를 <see cref="P:System.Collections.ICollection.SyncRoot" /> 속성.</span><span class="sxs-lookup"><span data-stu-id="3f547-104">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="3f547-105">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-105">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3f547-106">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-106">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f547-107">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-107">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f547-108"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />의 키 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-108">Gets the number of keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></summary>
        <value><span data-ttu-id="3f547-109"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />에 있는 키의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-109">The number of keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-110">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-110">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual string Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Get(int index);" />
      <MemberSignature Language="F#" Value="abstract member Get : int -&gt; string&#xA;override this.Get : int -&gt; string" Usage="keysCollection.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f547-111">컬렉션에서 가져올 키의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-111">The zero-based index of the key to get from the collection.</span></span></param>
        <summary><span data-ttu-id="3f547-112">컬렉션의 지정한 인덱스에서 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-112">Gets the key at the specified index of the collection.</span></span></summary>
        <returns><span data-ttu-id="3f547-113">컬렉션의 지정된 인덱스에 있는 키가 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-113">A <see cref="T:System.String" /> that contains the key at the specified index of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-114">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-114">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f547-115"><paramref name="index" />가 컬렉션의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-115"><paramref name="index" /> is outside the valid range of indexes for the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="keysCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f547-116"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />를 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-116">Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></summary>
        <returns><span data-ttu-id="3f547-117"><see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-117">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-118">이 열거자는 문자열로 컬렉션의 키를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-118">This enumerator returns the keys of the collection as strings.</span></span>  
  
 <span data-ttu-id="3f547-119">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-119">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="3f547-120">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-120">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="3f547-121">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-121">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="3f547-122">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-122">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="3f547-123"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-123"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="3f547-124">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-124">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3f547-125">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-125">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="3f547-126"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-126"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="3f547-127"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-127"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="3f547-128">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-128">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="3f547-129">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-129">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="3f547-130">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-130">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3f547-131"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-131">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="3f547-132">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-132">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3f547-133">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-133">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="3f547-134">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-134">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="3f547-135">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-135">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3f547-136">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-136">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3f547-137">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-137">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[int] { System::String ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f547-138">컬렉션에 있는 엔트리의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-138">The zero-based index of the entry to locate in the collection.</span></span></param>
        <summary><span data-ttu-id="3f547-139">컬렉션의 지정된 인덱스에 있는 엔트리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-139">Gets the entry at the specified index of the collection.</span></span></summary>
        <value><span data-ttu-id="3f547-140">컬렉션의 지정한 인덱스에 있는 엔트리의 <see cref="T:System.String" /> 키입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-140">The <see cref="T:System.String" /> key of the entry at the specified index of the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-141">이 속성 구문을 사용 하 여 컬렉션의 특정 요소에 액세스 하는 기능을 제공 합니다. `myCollection[index]` (Visual Basic에서는 `myCollection(index)`).</span><span class="sxs-lookup"><span data-stu-id="3f547-141">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]` (In Visual Basic, `myCollection(index)`).</span></span>  
  
 <span data-ttu-id="3f547-142">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-142">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A> property.</span></span> <span data-ttu-id="3f547-143">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-143">Visual Basic implements <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="3f547-144">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-144">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f547-145"><paramref name="index" />가 컬렉션의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-145"><paramref name="index" /> is outside the valid range of indexes for the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f547-146"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-146">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span> <span data-ttu-id="3f547-147"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-147">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="3f547-148"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-148">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="3f547-149">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-149">Copies the entire <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-150">지정된 된 배열의 호환 되는 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-150">The specified array must be of a compatible type.</span></span>  
  
 <span data-ttu-id="3f547-151">이 메서드는 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-151">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="3f547-152">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-152">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f547-153"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-153"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f547-154"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-154"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f547-155"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f547-155"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="3f547-156">또는</span><span class="sxs-lookup"><span data-stu-id="3f547-156">-or-</span></span> 
<span data-ttu-id="3f547-157">소스 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-157">The number of elements in the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f547-158">소스 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-158">The type of the source <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f547-159"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-159">Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="3f547-160"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-160"><see langword="true" /> if access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="3f547-161">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-161">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-162">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> 를 사용 하는 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-162">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="3f547-163">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.ICollection.SyncRoot%2A> 의 합니다 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>에서 직접는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-163">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>, not directly on the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>.</span></span> <span data-ttu-id="3f547-164">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-164">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="3f547-165">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-165">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> object.</span></span>  
  
 <span data-ttu-id="3f547-166">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-166">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3f547-167">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-167">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f547-168">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-168">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f547-169">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-169">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cpp/source.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cs/source.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/vb/source.vb#1)]  
  
 <span data-ttu-id="3f547-170">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-170">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f547-171"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-171">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></summary>
        <value><span data-ttu-id="3f547-172"><see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-172">An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f547-173">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> 를 사용 하는 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-173">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="3f547-174">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.ICollection.SyncRoot%2A> 의 합니다 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>에서 직접는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-174">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>, not directly on the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>.</span></span> <span data-ttu-id="3f547-175">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-175">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="3f547-176">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-176">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> object.</span></span>  
  
 <span data-ttu-id="3f547-177">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-177">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3f547-178">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-178">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f547-179">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-179">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f547-180">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-180">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cpp/source.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cs/source.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/vb/source.vb#1)]  
  
 <span data-ttu-id="3f547-181">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f547-181">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
  </Members>
</Type>