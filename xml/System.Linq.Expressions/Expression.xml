<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4eb4fa9a23f0bfc7fe7ab1a5830e3b650a30eb61" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56407989" /></Metadata><TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <TypeSignature Language="F#" Value="type Expression = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="10d7e-101">식 트리 노드를 나타내는 클래스가 파생되는 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span></span> <span data-ttu-id="10d7e-102">또한 다양한 노드 형식을 만드는 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 팩터리 메서드가 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span></span> <span data-ttu-id="10d7e-103">이 클래스는 <see langword="abstract" /> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-103">This is an <see langword="abstract" /> class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-104">다음 코드 예제에는 블록 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="10d7e-105">Block 식 두 이루어져 <xref:System.Linq.Expressions.MethodCallExpression> 개체와 하나의 <xref:System.Linq.Expressions.ConstantExpression> 개체.</span><span class="sxs-lookup"><span data-stu-id="10d7e-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-106"><see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-107"><see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Linq.Expressions.Expression : System.Linq.Expressions.ExpressionType * Type -&gt; System.Linq.Expressions.Expression" Usage="new System.Linq.Expressions.Expression (nodeType, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType"><span data-ttu-id="10d7e-108">노드 형식으로 설정할 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-109">이 <see cref="P:System.Linq.Expressions.Expression.Type" />의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="10d7e-110"><see cref="T:System.Linq.Expressions.Expression" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-111">이 생성자는 파생된 클래스의 생성자에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="10d7e-112">이 노드를 열어 볼 방문자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-112">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="10d7e-113">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-113">Dispatches to the specific visit method for this node type.</span></span> <span data-ttu-id="10d7e-114">예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-115">이 노드를 열어 본 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-115">The result of visiting this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-116">이 기본 구현 <xref:System.Linq.Expressions.ExpressionType.Extension> 노드의 호출 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="10d7e-117">파생된 방문자 클래스에 대해 좀 더 구체적인 메서드를 호출 하려면이 메서드를 재정의 합니다 <xref:System.Linq.Expressions.ExpressionVisitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="10d7e-118">하지만 호출 하 여 알 수 없는 방문자가 계속 지원 해야 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-119">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-120"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-121"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-122">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-123"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-124">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-125"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-126">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-127">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-128"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-129">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-130">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-130">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-131">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-132">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-133">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-134">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-135">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-136">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-137">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-138">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-139">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-140">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-141">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-142">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-143">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="10d7e-144">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-145">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-146">다음 코드 예제에는 두 개의 정수를 추가 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-147"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-147"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-148"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-149"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-150"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-151"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-152">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span> <span data-ttu-id="10d7e-153">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-153">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-154"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-155">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-156"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-157">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-158">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-159"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-160">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-161">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-161">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-162">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-163">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-164">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-165">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-166">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-167">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-168">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-169">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-170">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-171">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-172">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-173">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-174">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-175">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="10d7e-176">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-177">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-178"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-178"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-179"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-179"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-180"><paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-180"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-181">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-182"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-183"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-184">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-185"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-186">다음 코드 예제에는 정수 변수에 값을 추가 하 고 다음 작업의 결과 변수에 할당 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-187"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-188"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-189"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-190">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-191"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-192"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-193"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-194"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-195"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-196">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-197"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-198">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-199"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-200"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-201">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-202"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-203"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-204"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-205"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-206">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-207"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-208"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-209"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-210"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-211"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-212">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-213"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-214">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-215"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-216"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-217">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-218"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-219">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-220"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-221">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-222">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-223"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-224">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-225">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-225">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-226">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-227">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-228">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-229">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-230">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-231">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-232">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-233">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-234">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-235">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-236">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-237">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-238">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="10d7e-239">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-240">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-241"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-241"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-242"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-243"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-244"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-245"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-246">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span> <span data-ttu-id="10d7e-247">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-247">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-248"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-249">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-250"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-251">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-252">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-254">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-255">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-255">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-256">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="10d7e-257">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-258">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-259">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-260">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-261">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-262">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-263">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-264">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-265">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-266">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-267">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-268">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-269">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="10d7e-270">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-271">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-272"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-272"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-273"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-273"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-274"><paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-274"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-275">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-276"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-277"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-278">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-279"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-280">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-281"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-282">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-283">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-284"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-285">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-286">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-286">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-287">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-288">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-289">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-290">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-291">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-292">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-293">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-294">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-295">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-296">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-297">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-298">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-299">노드 형식은의 결과 형식은 미리 정의 된 비트 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-300">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-301">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-302">다음 코드 예제에는 두 부울 값의 논리적 AND 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-303"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-303"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-304"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-305"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-306"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-307"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-308">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span> <span data-ttu-id="10d7e-309">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-309">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-310"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-311">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-312"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-313">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-314">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-315"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-316">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-317">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-317">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-318">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="10d7e-319">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-320">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-321">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-322">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-323">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-324">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-325">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-326">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-327">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-328">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-329">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-330">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-331">노드 형식은의 결과 형식은 미리 정의 된 비트 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-332">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-333">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-334"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-334"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-335"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-335"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-336"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-336"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-337">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-338"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-339"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-340">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-341"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-342">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-343"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-344">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-345">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-346"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-347">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-348">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-348">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-349">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-350">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="10d7e-351">조건부 `AND` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-351">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="10d7e-352">그러나 조건부 `AND` 연산자는 비트를 사용 하 여 계산 됩니다 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="10d7e-353">따라서 사용자 정의의 오버 로드를 비트 `AND` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="10d7e-354">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-355">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-356">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-357">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-358">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-359">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-360">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-361">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-362">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-363">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="10d7e-364">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-365">노드 형식은 미리 정의 된 조건부의 결과 형식은 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-366">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-367">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-368">다음 코드 예제에서는 식을 만들려면 수행 하는 논리적 방법과 작업 경우에만 해당 두 피연산자의 첫 번째 피연산자를 보여 줍니다. `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-369"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-369"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-370"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-371">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-371">-or-</span></span> 
 <span data-ttu-id="10d7e-372"><paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-372"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-373"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-374"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-375"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-376">첫 번째 피연산자가 true로 확인되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span></span> <span data-ttu-id="10d7e-377">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-377">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-378"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-379">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-380"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-381">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-382">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-383"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-384">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-385">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-385">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-386">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="10d7e-387">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-388">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="10d7e-389">조건부 `AND` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-389">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="10d7e-390">그러나 조건부 `AND` 연산자는 비트를 사용 하 여 계산 됩니다 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="10d7e-391">따라서 사용자 정의의 오버 로드를 비트 `AND` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="10d7e-392">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-393">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-394">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-395">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-396">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-397">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-398">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-399">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-400">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-401">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="10d7e-402">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-403">노드 형식은 미리 정의 된 조건부의 결과 형식은 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-404">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-405">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-406"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-406"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-407"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-407"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-408"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-408"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-409">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-409">-or-</span></span> 
 <span data-ttu-id="10d7e-410"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-410"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-411">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-412"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-413"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-414">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-415"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-416"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-417"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-418"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-419">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-420"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-421"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-422"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-423"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-424"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-425">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-426"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-427">배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-428">다차원 배열을 나타내는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-428">An expression that represents the multidimensional array.</span></span></param>
        <param name="indexes"><span data-ttu-id="10d7e-429">배열을 인덱싱하는 데 사용되는 식이 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="10d7e-430">다차원 배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="10d7e-431">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-432">배열을 나타내는 식을 사용 하 여 얻을 수는 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> 메서드를 통해 또는 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 또는 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-433">다음 코드 예제에 사용 하 여 다차원 배열의 요소 값을 변경 하는 방법을 보여 줍니다는 `ArrayAccess` 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-434">인덱싱할 배열을 나타내는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-434">An expression representing the array to index.</span></span></param>
        <param name="indexes"><span data-ttu-id="10d7e-435">배열을 인덱싱하는 데 사용되는 식이 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-435">An array that contains expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="10d7e-436">배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
        <returns><span data-ttu-id="10d7e-437">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-438">배열을 나타내는 식을 사용 하 여 얻을 수는 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> 메서드를 통해 또는 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 또는 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="10d7e-439">다차원 배열에 대 한 사용을 <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-440">다음 코드 예제를 사용 하 여 배열 요소 값을 변경 하는 방법을 보여 줍니다는 `ArrayAccess` 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-441">배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-442"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span></span></param>
        <param name="indexes"><span data-ttu-id="10d7e-443"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-444">차수가 1보다 큰 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span></span></summary>
        <returns><span data-ttu-id="10d7e-445"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-446">각 요소의 `indexes` 있어야 <xref:System.Linq.Expressions.Expression.Type%2A> 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="10d7e-447">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `array` 차수가의 요소 수와 일치 하는 배열 형식을 나타내야 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="10d7e-448">경우 순위 `array`합니다. 이 메서드는 반환 형식이 1 이면는 <xref:System.Linq.Expressions.BinaryExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="10d7e-449"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> 속성이로 설정 되어 `array` 하며 <xref:System.Linq.Expressions.BinaryExpression.Right%2A> 의 단일 요소 속성 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="10d7e-450"><xref:System.Linq.Expressions.Expression.Type%2A> 의 속성을 <xref:System.Linq.Expressions.BinaryExpression> 의 요소 형식을 나타내는 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="10d7e-451">경우 순위 `array`합니다. 이 메서드는 반환 형식이 둘 이상의 면을 <xref:System.Linq.Expressions.MethodCallExpression>입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="10d7e-452"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> 속성을 <xref:System.Reflection.MethodInfo> 공용 인스턴스 메서드를 설명 하는 `Get` 나타내는 형식에는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성 `array`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-453">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MethodCallExpression> 2 차원 배열에 대 한 인덱싱을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-454"><paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-454"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-455"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-455"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="10d7e-456">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-456">-or-</span></span> 
<span data-ttu-id="10d7e-457"><paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="10d7e-458">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-458">-or-</span></span> 
<span data-ttu-id="10d7e-459"><paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-460"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="index"><span data-ttu-id="10d7e-461"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-462">차수가 1인 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span></span></summary>
        <returns><span data-ttu-id="10d7e-463"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-464">`index` 형식의 인덱스를 나타내야 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="10d7e-465"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null`, 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="10d7e-466">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성은 요소 형식의 같음 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="10d7e-467"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-468"><paramref name="array" /> 또는 <paramref name="index" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-468"><paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-469"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-469"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="10d7e-470">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-470">-or-</span></span> 
 <span data-ttu-id="10d7e-471"><paramref name="array" />.Type이 나타내는 배열 형식의 차수가 1이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-471"><paramref name="array" />.Type represents an array type whose rank is not 1.</span></span>  
  
<span data-ttu-id="10d7e-472">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-472">-or-</span></span> 
 <span data-ttu-id="10d7e-473"><paramref name="index" />.Type이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-473"><paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-474">배열 인덱스 작업에 대한 <see cref="T:System.Linq.Expressions.Expression" /> 인스턴스 - 인덱스의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="10d7e-475"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-476">다차원 배열에 대한 배열 인덱스 연산자를 적용하는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="10d7e-477"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-478">각 요소의 `indexes` 있어야 <xref:System.Linq.Expressions.Expression.Type%2A> 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="10d7e-479">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `array` 차수가의 요소 수와 일치 하는 배열 형식을 나타내야 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="10d7e-480">경우 순위 `array`합니다. 이 메서드는 반환 형식이 1 이면는 <xref:System.Linq.Expressions.BinaryExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="10d7e-481"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> 속성이로 설정 되어 `array` 하며 <xref:System.Linq.Expressions.BinaryExpression.Right%2A> 의 단일 요소 속성 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="10d7e-482"><xref:System.Linq.Expressions.Expression.Type%2A> 의 속성을 <xref:System.Linq.Expressions.BinaryExpression> 의 요소 형식을 나타내는 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="10d7e-483">경우 순위 `array`합니다. 이 메서드는 반환 형식이 둘 이상의 면을 <xref:System.Linq.Expressions.MethodCallExpression>입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="10d7e-484"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> 속성을 <xref:System.Reflection.MethodInfo> 공용 인스턴스 메서드를 설명 하는 `Get` 나타내는 형식에는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성 `array`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-485">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MethodCallExpression> 2 차원 배열에 대 한 인덱싱을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-486"><paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-486"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-487"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-487"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="10d7e-488">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-488">-or-</span></span> 
<span data-ttu-id="10d7e-489"><paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="10d7e-490">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-490">-or-</span></span> 
<span data-ttu-id="10d7e-491"><paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberSignature Language="F#" Value="static member ArrayLength : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ArrayLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="10d7e-492"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-493">1차원 배열 길이를 가져오는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="10d7e-494"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 속성이 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />인 <paramref name="array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-495">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 `array` 배열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="10d7e-496">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 값과 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="10d7e-497"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> 속성은 `null`, 모두 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-498"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-498"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-499"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-499"><paramref name="array" />.Type does not represent an array type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Assign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-500"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-501"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-502">할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-503"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-504">`Assign` 값 형식에 대 한 값을 복사 하는 식 및 참조 형식에 대 한 참조를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-505">다음 코드 예제에는 할당 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-506">멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MemberInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (member, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="10d7e-507"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="expression"><span data-ttu-id="10d7e-508"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-509">필드 또는 속성 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-510"><see cref="T:System.Linq.Expressions.MemberAssignment" />이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-511"><xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `expression` 나타내는 형식에 할당할 수 있어야 합니다 <xref:System.Reflection.FieldInfo.FieldType%2A> 또는 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 속성 `member`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-512"><paramref name="member" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-512"><paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-513"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-513"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="10d7e-514">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-514">-or-</span></span> 
<span data-ttu-id="10d7e-515"><paramref name="member" />가 나타내는 속성에 <see langword="set" /> 접근자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="10d7e-516">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-516">-or-</span></span> 
 <span data-ttu-id="10d7e-517"><paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-517"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (propertyAccessor, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-518">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="expression"><span data-ttu-id="10d7e-519"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-520">속성 접근자 메서드를 사용한 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-521"><see cref="T:System.Linq.Expressions.MemberAssignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />으로 설정된 <paramref name="expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-522"><xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `expression` 가 나타내는 형식에 할당할 수 있어야 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 액세스 되는 속성의 속성 `propertyAccessor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-523"><paramref name="propertyAccessor" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-523"><paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-524"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-524"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="10d7e-525">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-525">-or-</span></span> 
<span data-ttu-id="10d7e-526"><paramref name="propertyAccessor" />에서 액세스되는 속성에 <see langword="set" /> 접근자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="10d7e-527">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-527">-or-</span></span> 
 <span data-ttu-id="10d7e-528"><paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-528"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-529"><see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="10d7e-530">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-530">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-531">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-532">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-533">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="10d7e-534">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-534">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-535">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-536">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-537">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-538">다음 코드 예제에는 블록 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="10d7e-539">Block 식 두 이루어져 <xref:System.Linq.Expressions.MethodCallExpression> 개체와 하나의 <xref:System.Linq.Expressions.ConstantExpression> 개체.</span><span class="sxs-lookup"><span data-stu-id="10d7e-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="10d7e-540">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-540">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-541">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-541">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-542">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-543">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-544">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-545">다음 코드 예제에서는 블록 식에 매개 변수를 전달 하 여 블록 내에서이 매개 변수를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="10d7e-546">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-546">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-547">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-547">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-548">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-549">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-550">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="10d7e-551">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-551">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-552">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-552">The second expression in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-553">2개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-554">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-555">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-556">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-556">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-557">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-557">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-558">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-559">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-560">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-560">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-561">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-561">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-562">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-563">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="10d7e-564">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-564">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-565">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-565">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-566">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-566">The third expression in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-567">3개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-568">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-569">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-570">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-570">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="10d7e-571">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-571">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-572">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-572">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-573">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-574">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-575">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-575">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="10d7e-576">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-576">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="10d7e-577">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-577">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-578">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-579">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="10d7e-580">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-580">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-581">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-581">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-582">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-582">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-583">블록의 네 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-583">The fourth expression in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-584">4개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-585">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-586">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="10d7e-587">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-587">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-588">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-588">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-589">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-589">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-590">블록의 네 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-590">The fourth expression in the block.</span></span></param>
        <param name="arg4"><span data-ttu-id="10d7e-591">블록의 다섯 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-591">The fifth expression in the block.</span></span></param>
        <summary><span data-ttu-id="10d7e-592">5개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="10d7e-593">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-594">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-595">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-596"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="10d7e-597">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-598"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-599">다음 예제에서는 포함 하는 식을 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.LoopExpression> 사용 하는 개체는 <xref:System.Linq.Expressions.Expression.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-600"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-601">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-601">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="10d7e-602">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span> <span data-ttu-id="10d7e-603">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-603">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-604"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-605"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-606"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-607">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-608"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정된 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-609"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-610">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-610">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-611"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-612">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span> <span data-ttu-id="10d7e-613">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-613">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-614"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-615"><see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-616">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-617"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-618">인수를 받지 않는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-619"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-620">에 대 한 호출을 나타내는 `static` (`Shared` Visual basic에서) 메서드를 `null` 에 대 한는 `instance` 이 메서드를 호출할 때 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="10d7e-621">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="10d7e-622">합니다 <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="10d7e-623">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성이 나타내는 메서드의 반환 형식에 같음 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-624">다음 코드 예제에는 인수 없이 메서드를 호출 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-625"><paramref name="method" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-625"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-626">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-626">-or-</span></span> 
 <span data-ttu-id="10d7e-627"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-627"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-628"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-628"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-629">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-630">호출 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span></span></param>
        <summary><span data-ttu-id="10d7e-631">static(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-632"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-633"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-634">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-635">1개 인수를 받는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span></span></summary>
        <returns><span data-ttu-id="10d7e-636"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-637">다음 예제에서는 호출 하는 식을 만드는 방법을 보여 줍니다.는 `static` (`Shared` Visual Basic의) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-638"><paramref name="method" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-638"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-639"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-640"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-641">인수가 있는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-642"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-643">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="10d7e-644">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-645">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-646">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-647">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="10d7e-648"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="10d7e-649">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="10d7e-650">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="10d7e-651"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-652"><paramref name="method" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-652"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-653"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-654">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-654">-or-</span></span> 
<span data-ttu-id="10d7e-655"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-656"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다. <see langword="null" />(Visual Basic에서는 <see langword="static" />) 메서드의 경우 <see langword="Shared" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-657"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-658"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-659">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-660"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-661">에 대 한 호출을 나타내는 `static` (`Shared` Visual Basic에서) 메서드를 `null` 에 대 한 합니다 `instance` 이 메서드를 호출할 때 매개 변수 호출 또는 <xref:System.Linq.Expressions.Expression.Call%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="10d7e-662">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="10d7e-663">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="10d7e-664">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-665">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-666">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-667">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="10d7e-668"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="10d7e-669">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="10d7e-670">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-671"><paramref name="method" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-671"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-672">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-672">-or-</span></span> 
 <span data-ttu-id="10d7e-673"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-673"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-674"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-674"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-675">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-675">-or-</span></span> 
<span data-ttu-id="10d7e-676"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-677">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-677">-or-</span></span> 
<span data-ttu-id="10d7e-678"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-679">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-680"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-681"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-682">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-683"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-684">에 대 한 호출을 나타내는 `static` (`Shared` Visual Basic에서) 메서드를 `null` 에 대 한 합니다 `instance` 이 메서드를 호출할 때 매개 변수 호출 또는 <xref:System.Linq.Expressions.Expression.Call%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="10d7e-685">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="10d7e-686">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="10d7e-687">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-688">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-689">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-690">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="10d7e-691"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="10d7e-692">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="10d7e-693">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-694"><paramref name="method" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-694"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-695">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-695">-or-</span></span> 
 <span data-ttu-id="10d7e-696"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-696"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span>  
  
<span data-ttu-id="10d7e-697">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-697">-or-</span></span> 
 <span data-ttu-id="10d7e-698"><paramref name="arguments" />가 <see langword="null" />이 아니고 하나 이상의 해당 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-698"><paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-699"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-699"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-700">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-700">-or-</span></span> 
<span data-ttu-id="10d7e-701"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-702">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-702">-or-</span></span> 
<span data-ttu-id="10d7e-703"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-704"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-705">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-706">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-707">2개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-708"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-709"><paramref name="method" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-709"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-710">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="10d7e-711">static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-711">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-712">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-713">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-714">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-715">2개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-716"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-717">다음 코드 예제에는 두 개의 인수를 포함 하는 인스턴스 메서드를 호출 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-718">특정 메서드에 대해 <see cref="T:System.Linq.Expressions.Expression" /> 속성 값을 검색할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span></span></param>
        <param name="methodName"><span data-ttu-id="10d7e-719">메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-719">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="10d7e-720">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="10d7e-721">methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-721">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-722">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="10d7e-723">적합한 팩터리 메서드를 호출하여 메서드를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-724"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고, <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />이고, <paramref name="instance" />가 지정된 인스턴스 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />로 설정되고 <see cref="T:System.Reflection.MethodInfo" />가 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-725">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 가리키는 메서드의 반환 형식 같은지 `methodName`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-726"><paramref name="instance" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-726"><paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-727"><paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span>  
  
<span data-ttu-id="10d7e-728">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-728">-or-</span></span> 
<span data-ttu-id="10d7e-729"><paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-730"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-731">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-732">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-733">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-734">3개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-735"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-736"><paramref name="method" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-736"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (type, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-737">지정된 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-737">The type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span></span></param>
        <param name="methodName"><span data-ttu-id="10d7e-738">메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-738">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="10d7e-739">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="10d7e-740">methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-740">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-741">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="10d7e-742">적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드를 호출하는 동작을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-743"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 지정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />(Visual Basic에서는 <see cref="T:System.Reflection.MethodInfo" />) 메서드를 나타내는 <see langword="static" />로 설정되고 <see langword="Shared" /> 속성이 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-744">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 가리키는 메서드의 반환 형식 같은지 `methodName`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="10d7e-745"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-746"><paramref name="type" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-746"><paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-747"><paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span>  
  
<span data-ttu-id="10d7e-748">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-748">-or-</span></span> 
<span data-ttu-id="10d7e-749"><paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-750">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="10d7e-751">static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-751">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-752">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-753">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-754">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-755">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-756">3개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-757"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-758"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-759">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-760">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-761">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-762">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-763">4개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-764"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-765"><paramref name="method" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-765"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="10d7e-766"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-767">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-768">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-769">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-770">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <param name="arg4"><span data-ttu-id="10d7e-771">다섯 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span></span></param>
        <summary><span data-ttu-id="10d7e-772">5개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-773"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-774"><paramref name="method" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-774"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d7e-775">노드를 더 단순한 노드로 줄일 수 있는지 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-775">Indicates that the node can be reduced to a simpler node.</span></span> <span data-ttu-id="10d7e-776">true를 반환하면 Reduce()를 호출하여 축소된 형식을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-776">If this returns true, Reduce() can be called to produce the reduced form.</span></span></summary>
        <value><span data-ttu-id="10d7e-777"><see langword="true" /> 경우 노드를 줄일 수 있습니다. 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-777"><see langword="true" /> if the node can be reduced; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-778">catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="10d7e-779">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-780">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-780">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="10d7e-781">처리기 본문에 사용하기 위해 catch된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span></span></summary>
        <returns><span data-ttu-id="10d7e-782">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-783">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-784">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-784">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="10d7e-785">catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-786">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-787"><xref:System.Linq.Expressions.Expression.Type%2A> 의 <xref:System.Exception> 를 찾아낼 수에 대 한 참조 하지만 지정할 수 있습니다 합니다 <xref:System.Exception> 개체에서 사용 하기 위해 제공 됩니다는 <xref:System.Linq.Expressions.CatchBlock>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="10d7e-788">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-789">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-789">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="10d7e-790"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-790">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="10d7e-791"><see cref="T:System.Linq.Expressions.CatchBlock" /> 필터와 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="10d7e-792">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-793">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-794">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-794">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="10d7e-795"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-795">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="10d7e-796"><see cref="T:System.Linq.Expressions.CatchBlock" /> 필터는 있지만 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조는 없는 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="10d7e-797">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberSignature Language="F#" Value="static member ClearDebugInfo : System.Linq.Expressions.SymbolDocumentInfo -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.ClearDebugInfo document" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="10d7e-798">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <summary><span data-ttu-id="10d7e-799">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span></span></summary>
        <returns><span data-ttu-id="10d7e-800">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-801">결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-802"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-803"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-804">결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-805"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-806"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과의 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null` 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="10d7e-807"><xref:System.Linq.Expressions.Expression.Type%2A> 속성이 병합 작업의 결과 형식과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="10d7e-808"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="10d7e-809">결과 유형</span><span class="sxs-lookup"><span data-stu-id="10d7e-809">Result Type</span></span>  
 <span data-ttu-id="10d7e-810">다음 규칙에는 결과 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="10d7e-811">경우 `left`합니다. 형식이 nullable 형식을 나타내는지 및 `right`합니다. 형식이 nullable이 아닌 해당 형식으로 암시적으로 변환할 수는 결과 형식은 nullable이 아닌 해당 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="10d7e-812">그렇지 않은 경우, `right`합니다. 형식으로 암시적으로 변환할 `left`합니다. 결과 형식은 형식이 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="10d7e-813">그렇지 않은 경우, 해당 하는 nullable이 아닌 `left`합니다. 형식으로 암시적으로 변환할 `right`합니다. 결과 형식은 형식이 `right`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-814"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-814"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-815"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-816"><paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-816"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/088b1f0d-c1af-4fe1-b4b8-196fd5ea9132"><span data-ttu-id="10d7e-817">??</span><span class="sxs-lookup"><span data-stu-id="10d7e-817">??</span></span> <span data-ttu-id="10d7e-818">연산자(C# 참조)</span><span class="sxs-lookup"><span data-stu-id="10d7e-818">Operator (C# Reference)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-819"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-819">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-820"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-820">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-821"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-821">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-822">지정된 변환 함수를 사용한 병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-822">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span></span></summary>
        <returns><span data-ttu-id="10d7e-823"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-823">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-824"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과의 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null` 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-824">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="10d7e-825">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.BinaryExpression> 병합 작업의 결과 형식과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="10d7e-826">다음 규칙에는 결과 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-826">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="10d7e-827">경우 `left`합니다. 형식이 nullable 형식을 나타내는지 및 `right`합니다. 형식이 nullable이 아닌 해당 형식으로 암시적으로 변환할 수는 결과 형식은 nullable이 아닌 해당 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-827">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="10d7e-828">그렇지 않은 경우, `right`합니다. 형식으로 암시적으로 변환할 `left`합니다. 결과 형식은 형식이 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-828">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="10d7e-829">그렇지 않은 경우, 해당 하는 nullable이 아닌 `left`합니다. 형식으로 암시적으로 변환할 `right`합니다. 결과 형식은 형식이 `right`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-829">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-830"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-830"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-831"><paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-831"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span>  
  
<span data-ttu-id="10d7e-832">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-832">-or-</span></span> 
 <span data-ttu-id="10d7e-833"><paramref name="conversion" />이 <see langword="null" />이 아니고 <paramref name="conversion" />.Type이 정확히 하나의 인수를 받지 않는 대리자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-833"><paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-834"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span>  
  
<span data-ttu-id="10d7e-835">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-835">-or-</span></span> 
<span data-ttu-id="10d7e-836"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 대리자 형식 <paramref name="conversion" />.Type의 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-837">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-837">-or-</span></span> 
<span data-ttu-id="10d7e-838"><paramref name="right" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 대리자 형식 <paramref name="conversion" />.Type의 반환 형식과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-838">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-839">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-839">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="10d7e-840"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="10d7e-841"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-841">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="10d7e-842"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-842">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-843">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-843">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-844"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-844">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-845"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.ConditionalExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `ifTrue`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-845">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-846">다음 코드 예제에는 조건문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-846">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="10d7e-847">첫 번째 인수를 평가 하는 경우 `true`, 두 번째 인수가 고 그렇지 않으면 실행 되 고, 세 번째 인수 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-847">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-848"><paramref name="test" />, <paramref name="ifTrue" /> 또는 <paramref name="ifFalse" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-848"><paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-849"><paramref name="test" />.Type이 <see cref="T:System.Boolean" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-849"><paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span></span>  
  
<span data-ttu-id="10d7e-850">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-850">-or-</span></span> 
 <span data-ttu-id="10d7e-851"><paramref name="ifTrue" />.Type이 <paramref name="ifFalse" />.Type과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-851"><paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span></span></exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="10d7e-852"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="10d7e-853"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-853">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="10d7e-854"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-854">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-855"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-855">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-856">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-856">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-857"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-857">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-858">이 메서드를 사용 하면 조건 식의 경우에서의 결과 형식은 명시적으로 통합는 유형의 `ifTrue` 및 `ifFalse` 식이 같지.</span><span class="sxs-lookup"><span data-stu-id="10d7e-858">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="10d7e-859">두 유형의 `ifTrue` 및 `ifFalse` 암시적으로 참조 여야 결과 형식에 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-859">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="10d7e-860">합니다 `type` 일 수 <xref:System.Void>입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-860">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-861"><see cref="T:System.Linq.Expressions.ConstantExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="10d7e-862"><see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-862">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-863"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-863">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></summary>
        <returns><span data-ttu-id="10d7e-864"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-864">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-865">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ConstantExpression> 유형과 같은지 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-865">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="10d7e-866">하는 경우 `value` 됩니다 `null`를 <xref:System.Linq.Expressions.Expression.Type%2A> 값과 같음 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-866">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="10d7e-867">나타내는 `null`를 사용할 수도 있습니다는 <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> 메서드는 명시적으로 형식을 지정할 수 있습니다는.</span><span class="sxs-lookup"><span data-stu-id="10d7e-867">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-868">다음 코드 예제에는 상수 값을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-868">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Constant : obj * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="10d7e-869"><see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-869">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-870"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-870">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-871"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-871">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></summary>
        <returns><span data-ttu-id="10d7e-872"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-872">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-873">이 메서드는 nullable 형식의 값을 나타내는 데 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-873">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-874">다음 코드 예제에서는 nullable 형식의 상수를 나타내는 식을 만들고 해당 값을 설정 하는 방법을 보여 줍니다. `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-874">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-875"><paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-875"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-876"><paramref name="value" />가 <see langword="null" />이 아니고 <paramref name="type" />의 동적 형식에서 <paramref name="value" />을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-876"><paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-877">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-878"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-878">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="10d7e-879">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-879">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-880"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-880">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-881">다음 예제에서는 사용 하는 루프 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.Expression.Continue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-881">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-882"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-882">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-883"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-883">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-884">지정된 형식을 사용하여 continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-884">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-885"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-885">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-886">형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-886">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-887"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-887">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-888"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-888">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-889">형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-889">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-890"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-890">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-891">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-891">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-892"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-892">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="10d7e-893">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-893">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="10d7e-894">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-894">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-895">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-895">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-896">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-896">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-897">경우 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-897">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-898">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-898">Otherwise:</span></span>  
  
    -   <span data-ttu-id="10d7e-899">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-899">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="10d7e-900">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-900">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-901">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-901">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-902">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-902">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-903">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-903">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-904">하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 며 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-904">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="10d7e-905">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-905">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-906">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-906">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-907">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-907">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-908">다음 코드 예제에는 형식 변환 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-908">The following code example shows how to create an expression that represents a type conversion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-909"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-909"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-910"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-910">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-911"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-912"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-912">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-913"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-914">구현 메서드가 지정된 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-914">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-915"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-915">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-916">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-916">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-917"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-917">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="10d7e-918">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-918">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="10d7e-919">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-919">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-920">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-920">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-921">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-921">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-922">메서드가 아닌 경우 `null`, 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-922">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="10d7e-923">Void가 아닌를 나타내야 `static` (`Shared` Visual basic에서) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-923">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="10d7e-924">경우에 그렇지 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-924">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-925">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-925">Otherwise:</span></span>  
  
    -   <span data-ttu-id="10d7e-926">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-926">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="10d7e-927">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-927">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-928">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-928">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-929">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-929">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-930">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-930">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-931">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-931">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="10d7e-932">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-932">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-933">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-933">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-934">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-934">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-935"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-935"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-936"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-936"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-937"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-937">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="10d7e-938">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-938">-or-</span></span> 
 <span data-ttu-id="10d7e-939"><paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-939"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-940">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-940">-or-</span></span> 
<span data-ttu-id="10d7e-941"><paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-941">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="10d7e-942">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-942">-or-</span></span> 
 <span data-ttu-id="10d7e-943"><paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-943"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="10d7e-944"><paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-944">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-945">대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-945">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-946"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-946">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-947"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-947">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-948">대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-948">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
        <returns><span data-ttu-id="10d7e-949"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-949">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-950">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-950">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-951"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-951">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="10d7e-952">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-952">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="10d7e-953">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-953">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-954">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-954">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-955">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-956">경우 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-956">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-957">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-957">Otherwise:</span></span>  
  
    -   <span data-ttu-id="10d7e-958">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-958">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="10d7e-959">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-959">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-960">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-960">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-961">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-962">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-962">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-963">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-963">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="10d7e-964">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-964">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-965">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-965">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-966">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-966">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-967"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-967"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-968"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-968">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-969"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-969">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-970"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-970">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-971"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-971">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-972">구현 메서드가 지정된 대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-972">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-973"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-973">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-974">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-974">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-975"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-975">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="10d7e-976">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-976">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="10d7e-977">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-977">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-978">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-978">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-979">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-979">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-980">메서드가 아닌 경우 `null`, 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-980">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="10d7e-981">Void가 아닌를 나타내야 `static` (`Shared` Visual basic에서) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-981">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="10d7e-982">경우에 그렇지 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-982">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-983">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-983">Otherwise:</span></span>  
  
    -   <span data-ttu-id="10d7e-984">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-984">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="10d7e-985">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-985">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-986">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-986">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-987">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-987">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-988">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-988">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-989">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-989">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="10d7e-990">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-990">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-991">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-991">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="10d7e-992">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-992">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-993"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-993"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-994"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-994"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-995"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-995">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="10d7e-996">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-996">-or-</span></span> 
 <span data-ttu-id="10d7e-997"><paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-997"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="10d7e-998">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-998">-or-</span></span> 
<span data-ttu-id="10d7e-999"><paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-999">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="10d7e-1000">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1000">-or-</span></span> 
 <span data-ttu-id="10d7e-1001"><paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1001"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="10d7e-1002"><paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1002">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="F#" Value="static member DebugInfo : System.Linq.Expressions.SymbolDocumentInfo * int * int * int * int -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.DebugInfo (document, startLine, startColumn, endLine, endColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="10d7e-1003">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1003">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <param name="startLine"><span data-ttu-id="10d7e-1004">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1004">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="10d7e-1005">0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1005">Must be greater than 0.</span></span></param>
        <param name="startColumn"><span data-ttu-id="10d7e-1006">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1006">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="10d7e-1007">0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1007">Must be greater than 0.</span></span></param>
        <param name="endLine"><span data-ttu-id="10d7e-1008">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1008">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="10d7e-1009">시작 줄보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1009">Must be greater or equal than the start line.</span></span></param>
        <param name="endColumn"><span data-ttu-id="10d7e-1010">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1010">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="10d7e-1011">끝 줄이 시작 줄과 같을 경우 끝 열은 시작 열보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1011">If the end line is the same as the start line, it must be greater or equal than the start column.</span></span> <span data-ttu-id="10d7e-1012">어떤 경우에도 0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1012">In any case, must be greater than 0.</span></span></param>
        <summary><span data-ttu-id="10d7e-1013">지정된 범위를 사용하여 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1013">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1014"><see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1014">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1015">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1016">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1016">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <summary><span data-ttu-id="10d7e-1017">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1017">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1018">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1018">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1019">이 식은 작동 하며 전달 된 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1019">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1020">다음 코드 예제에서는 지정된 된 값에서 1을 빼는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1020">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1021">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1021">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1022">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1022">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-1023">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1023">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1024">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1024">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1025">이 식은 작동 하며 전달 된 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1025">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Default : Type -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Default type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-1026"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1026">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1027"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1027">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1028"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1028">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1029">다음 코드 예제에는 지정된 된 형식에 대 한 기본 값을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1029">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1030">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1030">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1031"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1031">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1032"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1032">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1033">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1033">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1034"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1034">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1035">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1035">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1036"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1036">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1037">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1037">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1038">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1038">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1039"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1039">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1040">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1040">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1041">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1041">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1042">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1042">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1043">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 나누기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1043">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1044">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1044">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1045">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1045">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1046">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1046">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1047">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1047">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1048">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1048">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1049">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1049">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1050">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1050">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1051">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1051">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1052">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1052">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1053">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1053">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1054">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1054">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1055">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1055">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1056">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1056">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1057">다음 코드 예제는의 첫 번째 인수가 두 번째 인수로 나누는 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1057">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1058"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1058"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1059"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1059">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1060"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1060">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1061"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1061">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1062"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1062">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1063">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1063">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span> <span data-ttu-id="10d7e-1064">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1064">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1065"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1065">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1066">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1066">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1067"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1067">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1068">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1068">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1069">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1069">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1070"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1070">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1071">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1071">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1072">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1072">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1073">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1073">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1074">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1074">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-1075">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 나누기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1075">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1076">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1076">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1077">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1077">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1078">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1078">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1079">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1079">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1080">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1080">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1081">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1081">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1082">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1082">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1083">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1083">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1084">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1084">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1085">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1085">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1086">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1086">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1087">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1087">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1088">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1088">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1089"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1089"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1090"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1090"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1091"><paramref name="method" />가 <see langword="null" />이고 나누기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1091"><paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1092">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1092">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1093"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1093">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1094"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1094">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1095">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1095">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1096"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1096">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1097"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1097">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1098"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1098">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1099"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1099">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1100">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1100">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1101"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1101">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1102"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1102">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1103"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1103">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1104"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1104">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-1105"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1105">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1106">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1106">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1107"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1107">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1108">동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1108">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1109">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1109">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1110">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1110">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1111">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1111">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1112">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1112">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1113"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1113">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1114"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1114">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1115">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1115">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1116">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1116">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-1117">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1117">The first argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1118">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1118">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1119"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1119">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1120"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1120">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1121">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1121">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1122">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1122">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1123">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1123">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1124">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1124">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1125"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1125">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1126"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1126">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1127">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1127">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1128">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1128">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-1129">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1129">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-1130">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1130">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1131">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1131">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1132"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1132">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1133"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1133">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1134">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1134">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1135">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1135">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-1136">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1136">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-1137">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1137">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-1138">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1138">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1139">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1139">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1140"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1140">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1141"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1141">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="10d7e-1142">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1142">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="10d7e-1143">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1143">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-1144">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1144">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-1145">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1145">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-1146">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1146">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-1147">동적 작업의 네 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1147">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-1148">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1148">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1149"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1149">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1150"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1150">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1151"><see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1151">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="10d7e-1152"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1152">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1153"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1153">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1154">지정된 <see cref="T:System.Linq.Expressions.ElementInit" />을 두 번째 인수로 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1154">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1155"><see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1155">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1156">`addMethod` 매개 변수는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1156">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="10d7e-1157">Add 메서드의 요소 수로 매개 변수 수가 같은 있어야 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1157">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="10d7e-1158">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소에 `arguments` add 메서드의 해당 매개 변수의 형식에 할당할 수 있어야 후 가능한 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1158">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-1159">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1159">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-1160">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1160">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-1161">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1161">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1162">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를를 <xref:System.Linq.Expressions.ElementInit> 호출을 나타내는 <xref:System.Collections.Generic.Dictionary%602.Add%2A> 사전 컬렉션의 요소를 초기화 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1162">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1163"><paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1163"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1164"><paramref name="addMethod" />를 나타내는 메서드 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1164">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="10d7e-1165">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1165">-or-</span></span> 
<span data-ttu-id="10d7e-1166"><paramref name="addMethod" />를 나타내는 메서드가 인스턴스 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1166">The method that <paramref name="addMethod" /> represents is not an instance method.</span></span>  
  
<span data-ttu-id="10d7e-1167">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1167">-or-</span></span> 
 <span data-ttu-id="10d7e-1168"><paramref name="arguments" />의 요소 수가 <paramref name="addMethod" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1168"><paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-1169">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1169">-or-</span></span> 
<span data-ttu-id="10d7e-1170"><paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1170">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="10d7e-1171"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1171">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1172"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1172">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1173">지정된 값 배열을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1173">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1174"><see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1174">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1175">`addMethod` 매개 변수는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1175">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="10d7e-1176">Add 메서드의 요소 수로 매개 변수 수가 같은 있어야 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1176">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="10d7e-1177">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소에 `arguments` add 메서드의 해당 매개 변수의 형식에 할당할 수 있어야 후 가능한 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1177">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-1178">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1178">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-1179">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1179">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-1180">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1180">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1181">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를를 <xref:System.Linq.Expressions.ElementInit> 호출을 나타내는 <xref:System.Collections.Generic.Dictionary%602.Add%2A> 사전 컬렉션의 요소를 초기화 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1181">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1182"><paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1182"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1183">addMethod가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1183">The method that addMethod represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="10d7e-1184">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1184">-or-</span></span> 
<span data-ttu-id="10d7e-1185">addMethod가 나타내는 메서드가 인스턴스 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1185">The method that addMethod represents is not an instance method.</span></span>  
  
<span data-ttu-id="10d7e-1186">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1186">-or-</span></span> 
<span data-ttu-id="10d7e-1187">인수에 들어 있는 요소 수가 addMethod가 나타내는 메서드의 매개 변수 개수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1187">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span></span>  
  
<span data-ttu-id="10d7e-1188">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1188">-or-</span></span> 
<span data-ttu-id="10d7e-1189"><paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1189">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-1190"><see cref="T:System.Void" /> 형식을 가진 빈 식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1190">Creates an empty expression that has <see cref="T:System.Void" /> type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1191"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />로 설정된 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1191">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1192">여기서는 식이 필요 하지만 조치가 필요한 빈 식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1192">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="10d7e-1193">예를 들어, 빈 식 블록 식의 마지막 식으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1193">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="10d7e-1194">이 경우 블록 식의 반환 값은 void입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1194">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1195">다음 코드 예제에서는 빈 식을 만들고 블록 식에 추가 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1195">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1196">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1197"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1197">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1198"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1198">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1199">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1199">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1200"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1200">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1201">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1201">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1202"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1202">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1203">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1203">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-1204">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1204">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-1205"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1205">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-1206">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1206">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1207">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1207">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1208">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1208">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1209">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1209">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1210">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1210">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1211">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1211">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1212">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1212">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1213">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1213">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1214">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1214">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1215">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1215">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-1216">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1216">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1217">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1217">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1218">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1218">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1219">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1219">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1220">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1221">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1221">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1222">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1222">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1223">다음 코드 예제에는 두 인수의 값이 같은지 여부를 확인 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1223">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1224"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1224"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1225"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1225">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1226"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1226">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1227"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1227">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-1228"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1228"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1229"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1229">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1230">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1230">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span> <span data-ttu-id="10d7e-1231">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1231">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1232"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1232">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1233">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1233">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1234"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1234">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1235">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1235">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-1236">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1236">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-1237">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1237">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1238">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1238">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1239">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1239">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1240">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1240">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1241">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1241">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1242">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1242">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1243">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1243">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1244">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1244">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1245">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1245">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1246">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1246">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1247">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1247">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-1248">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1248">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1249">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1249">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1250">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1250">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1251">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1251">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1252">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1252">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1253">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1253">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1254">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1254">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1255"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1255"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1256"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1256"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1257"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1257"><paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1258">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="XOR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1258">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1259"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1259">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1260"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1260">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1261">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1261">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1262"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1262">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1263">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1263">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1264"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1264">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1265">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1265">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1266">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1266">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1267"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1267">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1268">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1268">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1269">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1269">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1270">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1270">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1271">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오버 로드 하는 사용자 정의 유형을 나타냅니다는 `XOR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1271">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1272">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1272">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1273">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1273">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1274">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1274">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1275">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1275">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1276">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1276">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1277">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1277">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1278">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1278">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1279">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1279">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1280">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1280">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1281">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1281">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1282">노드 형식은 미리 정의 된 결과 형식 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1282">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1283">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1283">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1284">노드 형식은 미리 정의 된 결과 형식에 해당 하는 nullable 형식을 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1284">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1285">다음 코드 예제에는 논리적 XOR 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1285">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1286"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1286"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1287"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 <see langword="XOR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1287">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1288"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1288">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1289"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1289">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1290"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1290">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1291">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1291">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span> <span data-ttu-id="10d7e-1292">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1292">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1293"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1293">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1294">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1294">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1295"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1295">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1296">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1296">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1297">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1297">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1298"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1298">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1299">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1299">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1300">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1300">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1301">다음 규칙 작업에 대 한 메서드를 구현 하는 선택한을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1301">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1302">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1302">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1303">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오버 로드 하는 사용자 정의 유형을 나타냅니다는 `XOR` 연산자를 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1303">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1304">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1304">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1305">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1305">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1306">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1306">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1307">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1307">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1308">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1308">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1309">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1309">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1310">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1310">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1311">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1311">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1312">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1312">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1313">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1313">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1314">노드 형식은 미리 정의 된 결과 형식 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1314">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1315">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1315">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1316">노드 형식은 미리 정의 된 결과 형식에 해당 하는 nullable 형식을 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1316">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1317"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1317"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1318"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1318"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1319"><paramref name="method" />가 <see langword="null" />이고 <see langword="XOR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1319"><paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1320">비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1320">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1321"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1321">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1322"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1322">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1323">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1323">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1324"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1324">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1325"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1326"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1327"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1327">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1328">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1328">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1329"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1329">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1330"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1331"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1332"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1332">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-1333"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1333">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1334">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1334">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1335"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1335">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1336">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1336">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * System.Reflection.FieldInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1337"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1337">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="10d7e-1338"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />)의 경우 <paramref name="expression" />이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1338">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <paramref name="expression" /> must be <see langword="null" />.</span></span></param>
        <param name="field"><span data-ttu-id="10d7e-1339"><see cref="T:System.Reflection.FieldInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1339">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1340">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1340">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1341"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1341">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1342"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성 `field`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1342">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1343"><paramref name="field" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1343"><paramref name="field" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1344">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1344">-or-</span></span> 
<span data-ttu-id="10d7e-1345"><paramref name="field" />가 나타내는 필드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1345">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1346"><paramref name="expression" />.Type을 <paramref name="field" />가 나타내는 필드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1346"><paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1347"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 필드가 포함된 <paramref name="fieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1347">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />.</span></span> <span data-ttu-id="10d7e-1348">이 값은 정적 필드의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1348">This can be null for static fields.</span></span></param>
        <param name="fieldName"><span data-ttu-id="10d7e-1349">액세스할 필드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1349">The name of a field to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-1350">필드 이름을 통한 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1350">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1351"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="fieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1351">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1352"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음는 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성을 <xref:System.Reflection.FieldInfo> 가리키는 필드를 나타내는 `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1352">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="10d7e-1353">이 메서드는 검색 `expression`합니다. 형식 및 이름이 있는 필드에 대 한 기본 형식 `fieldName`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1353">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="10d7e-1354">Public 필드는 public이 아닌 필드를 통해 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1354">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="10d7e-1355">이 메서드를 전달 하는 경우 일치 하는 필드를 찾으면 `expression` 하며 <xref:System.Reflection.FieldInfo> 에 해당 필드를 나타내는 <xref:System.Linq.Expressions.Expression.Field%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1355">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1356">다음 코드 예제에는 필드 액세스를 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1356">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1357"><paramref name="expression" /> 또는 <paramref name="fieldName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1357"><paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1358"><paramref name="fieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 필드가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1358">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, type, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1359">필드의 포함 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1359">The containing object of the field.</span></span> <span data-ttu-id="10d7e-1360">이 값은 정적 필드의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1360">This can be null for static fields.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-1361">필드를 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1361">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span></span></param>
        <param name="fieldName"><span data-ttu-id="10d7e-1362">액세스할 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1362">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-1363">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1363">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1364">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1364">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetActionType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetActionType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="10d7e-1365"><see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 16개의 <see langword="System.Action" /> 개체가 들어있는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1365">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="10d7e-1366">특정 형식 인수가 있는 제네릭 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="T:System.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1366">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1367">지정된 형식 인수가 있는 <c>System.Action</c> 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1367">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1368">예를 들어 경우 요소의 `typeArgs` 형식을 나타내는 `T1…Tn`, 결과 <xref:System.Type> 개체가 생성 된 대리자 형식을 나타내는 `System.Action<T1,…,Tn>` C# 또는 `System.Action(Of T1,…,Tn)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1368">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1369"><paramref name="typeArgs" />에 17개 이상의 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1369"><paramref name="typeArgs" /> contains more than sixteen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1370"><paramref name="typeArgs" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1370"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetDelegateType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetDelegateType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="10d7e-1371">대리자의 형식 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1371">The type arguments of the delegate.</span></span></param>
        <summary><span data-ttu-id="10d7e-1372">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 또는 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1372">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1373">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1373">The delegate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1374">마지막 형식 인수는 대리자의 반환 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1374">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="10d7e-1375">작업이 없거나 Func 충분히 큰 경우 사용자 지정 대리자 형식이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1375">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="10d7e-1376">Func와 마찬가지로 마지막 인수가 반환 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1376">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="10d7e-1377">작업을 생성 하려면 System.Void를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1377">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetFuncType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetFuncType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="10d7e-1378"><see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 17개의 <see langword="System.Func" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1378">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="10d7e-1379">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1379">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span></span> <span data-ttu-id="10d7e-1380">마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1380">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1381">지정된 형식 인수가 있는 <c>System.Func</c> 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1381">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1382">`typeArgs` 하나 이상 및 최대 17 요소를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1382">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="10d7e-1383">예를 들어 경우 요소의 `typeArgs` 형식을 나타내는 `T1…Tn`, 결과 <xref:System.Type> 개체가 생성 된 대리자 형식을 나타내는 `System.Func<T1,…,Tn>` C# 또는 `System.Func(Of T1,…,Tn)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1383">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1384"><paramref name="typeArgs" />에 1개 미만 또는 17개보다 많은 요소가 들어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1384"><paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1385"><paramref name="typeArgs" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1385"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1386">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1387"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1387">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1388">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1388">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1389"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1389">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1390">다음 예제에서는 포함 된 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.GotoExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1390">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1391"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1391">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-1392">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1392">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="10d7e-1393">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1393">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span> <span data-ttu-id="10d7e-1394">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1394">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1395"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1395">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1396"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1396">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-1397"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1397">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1398">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1398">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1399"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1399">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1400"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1400">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-1401">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1401">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-1402"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1402">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1403">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1403">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span> <span data-ttu-id="10d7e-1404">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1404">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1405"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1405">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1406">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1406">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1407"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1407">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1408"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1408">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1409">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1409">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1410"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1410">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1411">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1411">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1412"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1412">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1413">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1413">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-1414">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1414">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-1415"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1415">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-1416"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1416">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1417">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1417">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1418">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1418">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1419">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1419">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1420">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 큼" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1420">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1421">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1421">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1422">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1422">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1423">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1423">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1424">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1424">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1425">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1425">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1426">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1426">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-1427">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1427">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1428">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1428">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1429">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1429">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1430">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1430">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1431">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1432">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1432">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1433">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1433">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1434">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1434">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1435"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1435"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1436"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1436">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1437"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1438"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1438">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-1439"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1439"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1440"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1440">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1441">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1441">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span> <span data-ttu-id="10d7e-1442">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1442">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1443"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1443">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1444">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1444">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1445"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1445">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1446">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1446">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-1447">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1447">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-1448"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1448">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1449">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1449">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1450">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1450">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1451">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1451">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="10d7e-1452">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1452">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1453">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 큼" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1453">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1454">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1454">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1455">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1455">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1456">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1456">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1457">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1457">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1458">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1458">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1459">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1459">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-1460">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1460">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1461">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1461">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1462">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1462">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1463">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1463">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1464">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1464">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1465">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1465">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1466">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1466">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1467"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1467"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1468"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1468"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1469"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1469"><paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1470">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1470">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1471"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1471">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1472"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1472">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1473">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1473">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1474"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1474">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1475">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1475">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1476"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1476">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1477">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1477">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-1478">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1478">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-1479"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1479">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-1480"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1480">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1481">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1481">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1482">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1482">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1483">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1483">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1484">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "크거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1484">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1485">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1485">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1486">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1486">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1487">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1487">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1488">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1488">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1489">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1489">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1490">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1490">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-1491">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1491">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1492">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1492">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1493">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1493">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1494">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1494">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1495">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1496">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1496">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1497">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1497">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1498">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1498">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1499"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1499"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1500"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 크거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1500">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1501"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1502"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-1503"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1503"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1504"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1504">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1505">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1506"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1506">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1507">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1507">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1508"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1508">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1509">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1509">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-1510">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1510">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-1511"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1511">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1512">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1512">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1513">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1513">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1514">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1514">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1515">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1515">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1516">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "크거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1516">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1517">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1517">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1518">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1518">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1519">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1519">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1520">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1520">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1521">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1521">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1522">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1522">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-1523">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1523">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1524">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1524">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1525">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1525">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1526">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1526">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1527">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1527">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1528">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1528">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1529">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1529">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1530"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1530"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1531"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1531"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1532"><paramref name="method" />가 <see langword="null" />이고 “크거나 같음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1532"><paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberSignature Language="F#" Value="static member IfThen : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThen (test, ifTrue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="10d7e-1533"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1533">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="10d7e-1534"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1534">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1535"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="if" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1535">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1536"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1536">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span></span> <span data-ttu-id="10d7e-1537"><see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성은 기본 식으로 설정되고 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1537">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1538">다음 코드 예제에는 조건부 블록을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1538">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member IfThenElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThenElse (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="10d7e-1539"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="10d7e-1540"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1540">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="10d7e-1541"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1541">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1542"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 및 <see langword="if" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="else" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1542">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1543"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1543">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span> <span data-ttu-id="10d7e-1544">이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1544">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1545">다음 코드 예제에는 조건부 블록을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1545">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1546">값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1547">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1547">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <summary><span data-ttu-id="10d7e-1548">값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1548">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1549">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1549">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1550">이 식은 작동 하며으로 전달 되는 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1550">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1551">다음 코드 예제에는 증가 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1551">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1552">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1552">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1553">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1553">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-1554">1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1554">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1555">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1555">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1556">이 식은 작동 하며으로 전달 되는 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1556">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1557"><see cref="T:System.Linq.Expressions.InvocationExpression" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1557">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1558">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1558">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1559">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체가 포함된 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1559">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1560">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1560">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1561">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1561">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1562">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.InvocationExpression> 나타내는 대리자의 반환 형식을 나타내는 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1562">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="10d7e-1563"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.InvocationExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1563">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="10d7e-1564">동일한 요소를 포함 하는 고, 그렇지 `arguments` 그 중 일부를 제외 하 고 <xref:System.Linq.Expressions.Expression> 개체가 될 수 있습니다 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1564">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-1565">대리자의 해당 매개 변수를 나타내는 경우에 요소 인용 됩니다 `expression` 유형의 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1565">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-1566">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1566">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-1567">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1567">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1568">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.InvocationExpression> 지정 된 인수를 사용 하 여 람다 식의 호출을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1568">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1569"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1569"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1570"><paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1570"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="10d7e-1571">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1571">-or-</span></span> 
<span data-ttu-id="10d7e-1572"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1572">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1573"><paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1573"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1574">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1574">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-1575">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1575">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1576">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1576">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1577">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1577">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1578">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.InvocationExpression> 나타내는 대리자의 반환 형식을 나타내는 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1578">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="10d7e-1579"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.InvocationExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1579">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="10d7e-1580">동일한 요소를 포함 하는 고, 그렇지 `arguments` 그 중 일부를 제외 하 고 <xref:System.Linq.Expressions.Expression> 개체가 될 수 있습니다 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1580">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-1581">대리자의 해당 매개 변수를 나타내는 경우에 요소 인용 됩니다 `expression` 유형의 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1581">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-1582">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1582">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-1583">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1583">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1584">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.InvocationExpression> 지정 된 인수를 사용 하 여 람다 식의 호출을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1584">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1585"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1585"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1586"><paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1586"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="10d7e-1587">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1587">-or-</span></span> 
<span data-ttu-id="10d7e-1588"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1588">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1589"><paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1589"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1590">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1590">Returns whether the expression evaluates to false.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1591">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1591">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="10d7e-1592">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1592">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1593"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1593">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1594">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1594">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1595">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1595">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-1596">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1596">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1597"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1597">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1598">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1598">Returns whether the expression evaluates to true.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1599">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1599">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="10d7e-1600">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1600">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1601"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1601">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-1602">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1602">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1603">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1603">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-1604">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1604">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1605"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1605">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1606">레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1606">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberSignature Language="F#" Value="static member Label : unit -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-1607">이름이 없는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1607">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1608">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1608">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1609">다음 예제에서는 포함 된 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.LabelTarget> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1609">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1610">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1610">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <summary><span data-ttu-id="10d7e-1611">기본값이 없는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1611">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1612">기본값이 없는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1612">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="10d7e-1613">레이블의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1613">The name of the label.</span></span></param>
        <summary><span data-ttu-id="10d7e-1614">void 형식과 지정된 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1614">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1615">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1615">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Label : Type -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-1616">레이블로 이동할 때 전달되는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1616">The type of value that is passed when jumping to the label.</span></span></param>
        <summary><span data-ttu-id="10d7e-1617">지정된 유형을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1617">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1618">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1618">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-1619">다음 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.LabelTarget> 루프 식에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1619">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label (target, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-1620">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1620">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="10d7e-1621">일반 제어 흐름을 통해 레이블에 접근하는 경우 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1621">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span></span></param>
        <summary><span data-ttu-id="10d7e-1622">지정된 기본값을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1622">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1623">지정된 기본값이 있는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1623">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : Type * string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-1624">레이블로 이동할 때 전달되는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1624">The type of value that is passed when jumping to the label.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1625">레이블의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1625">The name of the label.</span></span></param>
        <summary><span data-ttu-id="10d7e-1626">지정된 형식과 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1626">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1627">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1627">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1628">람다 식을 나타내는 식 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1628">Creates an expression tree that represents a lambda expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1629"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1629">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1630"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1630">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1631">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1631">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1632"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1632">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1633"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1633">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1634"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1634">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1635">우선 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1635">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1636"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1636">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1637">`parameters` 매개 변수 16 개 이상의 요소가 없어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1637">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="10d7e-1638">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1638">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="10d7e-1639">이 메서드 중 하나를 사용 하 여 적절 한 대리자 형식을 생성 합니다 `System.Func` 제네릭 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1639">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="10d7e-1640">그런 다음 중 하나에 대리자 형식에 전달 합니다 <xref:System.Linq.Expressions.ExpressionType.Lambda> 를 만드는 팩터리 메서드가 <xref:System.Linq.Expressions.LambdaExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1640">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1641"><paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1641"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1642">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1642">-or-</span></span> 
<span data-ttu-id="10d7e-1643"><paramref name="parameters" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1643">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1644"><paramref name="parameters" />에 17개 이상의 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1644"><paramref name="parameters" /> contains more than sixteen elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1645"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1645">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1646">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1646">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1647"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1648">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1648">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1649"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1649">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1650"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1650">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1651">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1651">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1652"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1652">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1653">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1653">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1654"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1654">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1655"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1655">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1656">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1656">The name for the lambda.</span></span> <span data-ttu-id="10d7e-1657">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1657">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1658"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1659">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1659">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1660"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1660">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1661">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1661">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1662"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1662">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1663"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1663">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1664">우선 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1664">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span> <span data-ttu-id="10d7e-1665">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1665">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1666"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1666">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1667">이 함수에서 반환 되는 개체가 형식의 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1667">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="10d7e-1668"><xref:System.Linq.Expressions.LambdaExpression> 형식 람다 식의 구체적인 종류는 컴파일 시간에 알 수 없으므로 반환 되는 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1668">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="10d7e-1669">가 나타내는 대리자 형식에 대 한 매개 변수 개수`delegateType` 의 길이가 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1669">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="10d7e-1670">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1670">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="10d7e-1671">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성이 `delegateType`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1671">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="10d7e-1672">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1672">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1673">다음 예제에서는 전달된 된 인수에 1을 추가 하는 람다 식을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1673">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1674"><paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1674"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1675">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1675">-or-</span></span> 
<span data-ttu-id="10d7e-1676"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1676">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1677"><paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1677"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="10d7e-1678">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1678">-or-</span></span> 
 <span data-ttu-id="10d7e-1679"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1679"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="10d7e-1680">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1680">-or-</span></span> 
 <span data-ttu-id="10d7e-1681"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1681"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="10d7e-1682">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1682">-or-</span></span> 
<span data-ttu-id="10d7e-1683"><paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1683">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1684">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1684">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1685"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1685">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1686"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1686">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1687">우선 대리자 형식을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1687">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span> <span data-ttu-id="10d7e-1688">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1688">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1689"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1689">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1690">이 함수에서 반환 되는 개체가 형식의 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1690">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="10d7e-1691"><xref:System.Linq.Expressions.LambdaExpression> 형식 람다 식의 구체적인 종류는 컴파일 시간에 알 수 없으므로 반환 되는 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1691">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="10d7e-1692">가 나타내는 대리자 형식에 대 한 매개 변수 개수 `delegateType` 의 길이가 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1692">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="10d7e-1693">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1693">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="10d7e-1694">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성이 `delegateType`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1694">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="10d7e-1695">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1695">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1696"><paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1696"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1697">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1697">-or-</span></span> 
<span data-ttu-id="10d7e-1698"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1698">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1699"><paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1699"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="10d7e-1700">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1700">-or-</span></span> 
 <span data-ttu-id="10d7e-1701"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1701"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="10d7e-1702">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1702">-or-</span></span> 
 <span data-ttu-id="10d7e-1703"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1703"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="10d7e-1704">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1704">-or-</span></span> 
<span data-ttu-id="10d7e-1705"><paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1705">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-1706"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1706">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1707">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1707">The name for the lambda.</span></span> <span data-ttu-id="10d7e-1708">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1708">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1709">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1709">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1710"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1710">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1711">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1711">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1712"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1712">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1713">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1713">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1714"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1714">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1715">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1715">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1716"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1716">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1717">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1717">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1718"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1718">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1719">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1719">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1720"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1720">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1721">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1721">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1722"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1722">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1723">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1723">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1724"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1724">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1725">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1725">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1726"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1726">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1727">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1727">The name for the lambda.</span></span> <span data-ttu-id="10d7e-1728">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1728">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1729"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1729">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1730">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1730">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1731"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1731">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-1732">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1732">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-1733"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1733">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1734">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1734">The name for the lambda.</span></span> <span data-ttu-id="10d7e-1735">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1735">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1736">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1736">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1737"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1737">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1738">먼저 대리자 형식을 생성하여 LambdaExpression을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1738">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1739"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1739">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1740">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1740">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1741"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1741">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1742"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1743">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1743">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1744"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1744">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1745">대리자 형식에 대 한 매개 변수 개수 `TDelegate` 의 요소 수와 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1745">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="10d7e-1746">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1746">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="10d7e-1747">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성 형식을 나타내는 `TDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1747">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="10d7e-1748">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1748">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1749"><paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1749"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1750">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1750">-or-</span></span> 
<span data-ttu-id="10d7e-1751"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1751">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1752"><paramref name="TDelegate" />가 대리자 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1752"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="10d7e-1753">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1753">-or-</span></span> 
 <span data-ttu-id="10d7e-1754"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1754"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="10d7e-1755">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1755">-or-</span></span> 
 <span data-ttu-id="10d7e-1756"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1756"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="10d7e-1757">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1757">-or-</span></span> 
<span data-ttu-id="10d7e-1758"><paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1758">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1759">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1759">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1760"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1760">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1761"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1761">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1762">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1762">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1763"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1763">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1764">대리자 형식에 대 한 매개 변수 개수 `TDelegate` 의 요소 수와 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1764">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="10d7e-1765">요소의 `parameters` 같아야 참조 매개 변수 식에`body`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1765">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="10d7e-1766">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성 형식을 나타내는 `TDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1766">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="10d7e-1767">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1767">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1768"><paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1768"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-1769">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1769">-or-</span></span> 
<span data-ttu-id="10d7e-1770"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1770">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1771"><paramref name="TDelegate" />가 대리자 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1771"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="10d7e-1772">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1772">-or-</span></span> 
 <span data-ttu-id="10d7e-1773"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1773"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="10d7e-1774">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1774">-or-</span></span> 
 <span data-ttu-id="10d7e-1775"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1775"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="10d7e-1776">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-1776">-or-</span></span> 
<span data-ttu-id="10d7e-1777"><paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1777">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1778">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1778">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1779"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1779">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1780">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1780">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1781"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1781">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1782">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1782">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1783"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1783">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1784">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1784">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1785"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1785">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1786">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1786">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1787"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1787">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1788">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1788">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1789"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1789">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1790">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1790">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1791"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1791">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1792">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1792">The name of the lambda.</span></span> <span data-ttu-id="10d7e-1793">디버깅 정보를 생성하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1793">Used for generating debugging information.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1794"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1794">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1795">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1795">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1796"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1796">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="10d7e-1797">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1797">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="10d7e-1798"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1798">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-1799">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1799">The name of the lambda.</span></span> <span data-ttu-id="10d7e-1800">디버깅 정보를 생성하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1800">Used for generating debugging info.</span></span></param>
        <param name="tailCall"><span data-ttu-id="10d7e-1801">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1801">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="10d7e-1802"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1802">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-1803">컴파일 타임에 대리자 형식이 알려진 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1803">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1804"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1804">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1805">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1805">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1806"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1806">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1807"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1807">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1808">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1808">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1809"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1809">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1810">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1810">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1811"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1811">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1812">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1812">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1813">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1813">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1814"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1814">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1815">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1815">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1816">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1816">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1817">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1817">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1818">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 왼쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1818">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1819">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1819">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1820">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1820">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1821">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1821">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1822">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1822">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1823">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1823">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1824">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1824">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1825">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1825">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1826">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1826">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1827">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1827">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1828">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1828">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1829">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1829">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1830">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1830">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1831">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1831">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1832"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1832"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1833"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1833">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1834"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1834">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1835"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1835">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1836"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1836">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1837">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1837">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1838"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1838">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1839">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1839">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1840"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1840">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1841">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1841">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-1842">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1842">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-1843"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1843">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1844">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1844">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1845">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1845">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1846">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1846">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1847">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1847">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-1848">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 왼쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1848">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1849">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1849">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1850">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1850">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1851">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1851">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1852">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1852">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1853">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1853">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1854">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1854">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-1855">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1855">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1856">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1856">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-1857">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1857">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1858">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1858">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1859">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1859">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="10d7e-1860">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1860">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1861">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1861">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1862"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1862"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1863"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1863"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1864"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1864"><paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1865">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1865">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1866"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1866">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1867"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1867">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1868">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1868">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1869"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1869">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1870"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1870">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1871"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1871">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1872"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1872">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1873">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1873">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1874"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1874">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1875"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1875">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1876"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1876">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1877"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1877">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-1878"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1878">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1879">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1879">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1880"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1880">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1881">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1881">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1882"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1882">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1883"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1883">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1884">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1884">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1885"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1885">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1886">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1886">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1887"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1887">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1888">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1888">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-1889">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1889">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-1890"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1890">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-1891"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1891">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1892">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1892">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1893">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1893">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1894">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1894">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="10d7e-1895">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1895">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1896">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1896">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1897">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1897">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1898">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1898">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1899">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1899">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1900">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1900">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1901">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1901">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-1902">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1902">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1903">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1903">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1904">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1904">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1905">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1905">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1906">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1906">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1907">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1907">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1908">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1908">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1909">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1909">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1910"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1910"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1911"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1911">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1912"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1912">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1913"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1913">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-1914"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1914"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1915"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1915">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1916">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1916">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1917"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1917">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1918">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1918">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1919"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1919">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1920">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1920">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-1921">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1921">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-1922"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1922">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1923">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1923">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1924">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1924">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1925">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1925">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1926">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1926">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1927">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1927">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1928">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1928">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1929">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1929">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1930">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1930">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1931">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1931">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1932">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1932">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1933">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1933">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-1934">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1934">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1935">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1935">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1936">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1936">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1937">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1937">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1938">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1938">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1939">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1939">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1940">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1940">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1941"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1941"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-1942"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1942"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1943"><paramref name="method" />가 <see langword="null" />이고 "보다 작음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1943"><paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-1944">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1944">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1945"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1945">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1946"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1946">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1947">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1947">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1948"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1948">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1949">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1949">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1950"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1950">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1951">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1951">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-1952">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1952">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-1953"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1953">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-1954"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1954">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1955">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1955">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1956">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1956">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1957">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1957">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1958">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1958">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1959">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1959">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1960">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1960">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1961">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1962">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1962">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1963">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1963">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1964">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1964">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-1965">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1965">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1966">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1966">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1967">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1967">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1968">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1968">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1969">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1969">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-1970">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1970">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-1971">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1971">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-1972">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1972">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-1973"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1973"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-1974"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-1974">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-1975"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1975">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-1976"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1976">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-1977"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1977"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-1978"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1978">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-1979">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1979">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-1980"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1980">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-1981">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1981">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-1982"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1982">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-1983">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1983">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-1984">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1984">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-1985"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1985">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-1986">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1986">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-1987">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-1987">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-1988">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1988">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-1989">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1989">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1990">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1990">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1991">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1991">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-1992">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-1992">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-1993">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1993">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-1994">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1994">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-1995">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1995">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-1996">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1996">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-1997">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1997">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-1998">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-1998">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-1999">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-1999">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2000">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2000">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2001">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2001">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-2002">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2002">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2003">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2003">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2004"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2004"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2005"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2005"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2006"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2006"><paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2007"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2007">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="10d7e-2008"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2008">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2009"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2009">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2010">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2010">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2011"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2011">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2012"><paramref name="member" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2012"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2013">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2013">-or-</span></span> 
<span data-ttu-id="10d7e-2014"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2014">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2015"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2015"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="10d7e-2016">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2016">-or-</span></span> 
<span data-ttu-id="10d7e-2017"><paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2017">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="10d7e-2018"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2018">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2019"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2019">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2020">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2020">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2021"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2021">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2022"><paramref name="member" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2022"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2023">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2023">-or-</span></span> 
<span data-ttu-id="10d7e-2024"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2024">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2025"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2025"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="10d7e-2026">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2026">-or-</span></span> 
<span data-ttu-id="10d7e-2027"><paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2027">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-2028">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2028">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2029"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2029">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2030">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2030">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2031"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2031">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2032"><paramref name="propertyAccessor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2032"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2033">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2033">-or-</span></span> 
<span data-ttu-id="10d7e-2034"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2034">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2035"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2035"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="10d7e-2036">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2036">-or-</span></span> 
<span data-ttu-id="10d7e-2037"><paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2037">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-2038">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2038">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2039"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2039">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2040">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2040">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2041"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2041">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2042"><paramref name="propertyAccessor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2042"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2043">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2043">-or-</span></span> 
<span data-ttu-id="10d7e-2044"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2044">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2045"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2045"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="10d7e-2046">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2046">-or-</span></span> 
<span data-ttu-id="10d7e-2047"><paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2047">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2048"><see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2048">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2049"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2049">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2050"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2050">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2051">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2051">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2052"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2052">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2053">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2053">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2054">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2054">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2055">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.ListInitExpression> 두 키-값 쌍이 포함 된 새 사전 인스턴스 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2055">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2056"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2056"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2057">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2057">-or-</span></span> 
<span data-ttu-id="10d7e-2058"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2058">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2059"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2059"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2060"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2060">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2061"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2061">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2062">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2062">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2063"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2063">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2064">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2064">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2065">이 오버 로드를 사용 하려면 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2065">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="10d7e-2066">인수의 형식을 나타내는 형식에서 할당할 수 있어야 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 첫 번째 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2066">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="10d7e-2067">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2067">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="10d7e-2068">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2068">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="10d7e-2069">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 에서 검색 된 추가 메서드를 나타내는 `newExpression`합니다. 형식 또는 해당 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2069">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="10d7e-2070">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2070">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2071"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2071"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2072">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2072">-or-</span></span> 
<span data-ttu-id="10d7e-2073"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2073">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2074"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2074"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2075"><paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2075">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="10d7e-2076">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2076">-or-</span></span> 
<span data-ttu-id="10d7e-2077"><paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2077">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="10d7e-2078">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2078">-or-</span></span> 
<span data-ttu-id="10d7e-2079"><paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2079">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="10d7e-2080">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2080">-or-</span></span> 
<span data-ttu-id="10d7e-2081">"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2081">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2082"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2082">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2083"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2083">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2084">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2084">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2085"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2085">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2086">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2086">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2087">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2087">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2088">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.ListInitExpression> 두 키-값 쌍이 포함 된 새 사전 인스턴스 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2088">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2089"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2089"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2090">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2090">-or-</span></span> 
<span data-ttu-id="10d7e-2091"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2091">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2092"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2092"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2093"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2093">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2094"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2094">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2095">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2095">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2096"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2096">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2097">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2097">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2098">이 오버 로드를 사용 하려면 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2098">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="10d7e-2099">인수의 형식을 나타내는 형식에서 할당할 수 있어야 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 첫 번째 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2099">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="10d7e-2100">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2100">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="10d7e-2101">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2101">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="10d7e-2102">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 에서 검색 된 추가 메서드를 나타내는 `newExpression`합니다. 형식 또는 해당 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2102">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="10d7e-2103">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2103">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2104"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2104"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2105">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2105">-or-</span></span> 
<span data-ttu-id="10d7e-2106"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2106">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2107"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2107"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2108"><paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2108">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="10d7e-2109">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2109">-or-</span></span> 
<span data-ttu-id="10d7e-2110"><paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2110">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="10d7e-2111">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2111">-or-</span></span> 
<span data-ttu-id="10d7e-2112"><paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2112">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="10d7e-2113">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2113">-or-</span></span> 
<span data-ttu-id="10d7e-2114">"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2114">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2115"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2115">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="10d7e-2116">컬렉션에 요소를 추가하는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2116">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2117"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2117">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2118">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2118">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2119"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2119">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2120">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2120">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2121">하는 경우 `addMethod` 됩니다 `null`, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2121">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="10d7e-2122">하는 경우 `addMethod` 아닙니다 `null`, 정확히 하나의 매개 변수가 있는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2122">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="10d7e-2123">가 나타내는 형식 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` add 메서드의 인수 형식에 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2123">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="10d7e-2124">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2124">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="10d7e-2125">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2125">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="10d7e-2126">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 값과 같음 `addMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2126">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="10d7e-2127">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2127">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2128"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2128"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2129">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2129">-or-</span></span> 
<span data-ttu-id="10d7e-2130"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2130">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2131"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2131"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="10d7e-2132">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2132">-or-</span></span> 
 <span data-ttu-id="10d7e-2133"><paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2133"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="10d7e-2134">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2134">-or-</span></span> 
 <span data-ttu-id="10d7e-2135"><paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2135"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2136"><paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2136"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2137"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2137">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="10d7e-2138">하나의 인수를 받으며 컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2138">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2139"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2139">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2140">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2140">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2141"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2141">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2142">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2142">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="10d7e-2143">하는 경우 `addMethod` 됩니다 `null`, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2143">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="10d7e-2144">하는 경우 `addMethod` 아닙니다 `null`, 정확히 하나의 매개 변수가 있는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2144">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="10d7e-2145">가 나타내는 형식 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` add 메서드의 인수 형식에 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2145">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="10d7e-2146">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2146">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="10d7e-2147">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2147">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="10d7e-2148">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 값과 같음 `addMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2148">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="10d7e-2149">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2149">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2150"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2150"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2151">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2151">-or-</span></span> 
<span data-ttu-id="10d7e-2152"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2152">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2153"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2153"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="10d7e-2154">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2154">-or-</span></span> 
 <span data-ttu-id="10d7e-2155"><paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2155"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="10d7e-2156">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2156">-or-</span></span> 
 <span data-ttu-id="10d7e-2157"><paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2157"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2158"><paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2158"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2159"><see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2159">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-2160">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2160">The body of the loop.</span></span></param>
        <summary><span data-ttu-id="10d7e-2161">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2161">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2162">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2162">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-2163">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2163">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="10d7e-2164">루프 본문에서 사용하는 break 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2164">The break target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="10d7e-2165">지정된 본문과 break 대상을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2165">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2166">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2166">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-2167">다음 예제에서는 포함 된 블록 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.LoopExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2167">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break, continue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-2168">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2168">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="10d7e-2169">루프 본문에서 사용하는 break 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2169">The break target used by the loop body.</span></span></param>
        <param name="continue"><span data-ttu-id="10d7e-2170">루프 본문에서 사용하는 continue 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2170">The continue target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="10d7e-2171">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2171">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2172">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2172">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2173">적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2173">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="10d7e-2174">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2174">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="10d7e-2175">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2175">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2176">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2176">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <summary><span data-ttu-id="10d7e-2177">지정된 왼쪽 및 오른쪽 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2178">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2178">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2179">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2179">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="10d7e-2180">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2180">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2181">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> 메서드를를 <xref:System.Linq.Expressions.BinaryExpression> 다른 빼기 1 개의 숫자를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2181">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2182"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2182"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2183"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2183"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="10d7e-2184">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2184">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="10d7e-2185">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2185">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2186">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2186">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-2187"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2187"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2188">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2188">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-2189">지정된 왼쪽 피연산자, 오른쪽 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2189">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2190">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2190">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2191">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드입니다.이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2191">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="10d7e-2192">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2192">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="10d7e-2193">합니다 `liftToNull` 고 `method` 적합 한 팩터리 메서드는 해당 매개 변수가 없는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2193">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2194"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2194"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2195"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2195"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="10d7e-2196">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2196">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="10d7e-2197">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2197">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2198">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2198">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-2199"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2199"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2200">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2200">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-2201">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2201">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span></span> <span data-ttu-id="10d7e-2202">이 매개 변수는 <paramref name="binaryType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 또는 복합 할당으로 설정되어 있는 경우에만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2202">This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment.</span></span></param>
        <summary><span data-ttu-id="10d7e-2203">지정된 왼쪽 피연산자, 오른쪽 피연산자, 구현 메서드 및 형식 변환 함수를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2203">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2204">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2204">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2205">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드입니다.이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2205">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="10d7e-2206">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2206">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="10d7e-2207">`liftToNull`하십시오 `method` 및 `conversion` 적합 한 팩터리 메서드는 해당 매개 변수가 없는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2207">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2208"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2208"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2209"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2209"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member MakeCatchBlock : Type * System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.MakeCatchBlock (type, variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2210">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2210">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="variable"><span data-ttu-id="10d7e-2211">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2211">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-2212">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2212">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="10d7e-2213"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2213">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="10d7e-2214">지정된 요소를 사용하여 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2214">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2215">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2215">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2216">`type` null이 아니어야 하며 유형에 `variable` (제공 된 경우).</span><span class="sxs-lookup"><span data-stu-id="10d7e-2216">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2217">동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2217">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2218"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2218">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2219">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2219">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2220">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2220">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2221">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2221">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2222"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2222">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2223"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2223">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2224">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2224">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-2225">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2225">The argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2226">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2226">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2227"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2227">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2228"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2228">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2229">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2229">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2230">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2230">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2231">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2231">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2232"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2232">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2233"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2233">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2234">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2234">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-2235">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2235">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-2236">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2236">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2237">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2237">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2238"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2238">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2239"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2239">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2240">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2240">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-2241">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2241">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-2242">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2242">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-2243">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2243">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2244">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2244">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2245"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2245">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="10d7e-2246"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2246">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="10d7e-2247">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2247">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="10d7e-2248">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2248">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="10d7e-2249">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2249">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="10d7e-2250">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2250">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="10d7e-2251">동적 작업의 네 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2251">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="10d7e-2252">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2252">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2253"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2253">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeGoto : System.Linq.Expressions.GotoExpressionKind * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.MakeGoto (kind, target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind"><span data-ttu-id="10d7e-2254"><see cref="T:System.Linq.Expressions.GotoExpressionKind" />의 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2254">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span></span></param>
        <param name="target"><span data-ttu-id="10d7e-2255"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2255">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-2256">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2256">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-2257"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2257">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2258">지정된 <see cref="T:System.Linq.Expressions.GotoExpression" />의 이동을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2258">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span></span> <span data-ttu-id="10d7e-2259">이동 시 레이블에 전달되는 값도 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2259">The value passed to the label upon jumping can also be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2260"><see cref="T:System.Linq.Expressions.GotoExpression" />가 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />이고, <paramref name="kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2260">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeIndex : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.MakeIndex (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-2261">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2261">The object to which the property belongs.</span></span> <span data-ttu-id="10d7e-2262">속성이 <see langword="static" />(Visual Basic에서는 <see langword="shared" />)인 경우 null입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2262">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span></span></param>
        <param name="indexer"><span data-ttu-id="10d7e-2263">인덱싱할 속성을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2263">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2264">속성을 인덱싱하는 데 사용할 인수가 포함된 <c>IEnumerable&lt;Expression&gt;</c>(Visual Basic에서는 <c>IEnumerable (Of Expression)</c>)입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2264">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span></span></param>
        <summary><span data-ttu-id="10d7e-2265">개체의 인덱싱된 속성에 액세스하는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2265">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2266">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2266">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2267">멤버가 속하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2267">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span></span> <span data-ttu-id="10d7e-2268">이 값은 정적 멤버의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2268">This can be null for static members.</span></span></param>
        <param name="member"><span data-ttu-id="10d7e-2269">액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2269">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-2270">필드 또는 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2270">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2271">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2271">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2272">이 메서드는 만드는 데 사용할 수는 <xref:System.Linq.Expressions.MemberExpression> 필드 또는 속성의 형식에 따라 액세스를 나타내는 `member`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2272">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="10d7e-2273">경우 `member` 유형의 <xref:System.Reflection.FieldInfo>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Field%2A> 만들려는 <xref:System.Linq.Expressions.MemberExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2273">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="10d7e-2274">경우 `member` 유형의 <xref:System.Reflection.PropertyInfo>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Property%2A> 만들려는 <xref:System.Linq.Expressions.MemberExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2274">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2275"><paramref name="member" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2275"><paramref name="member" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2276"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2276"><paramref name="member" /> does not represent a field or property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member MakeTry : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.CatchBlock&gt; -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.MakeTry (type, body, finally, fault, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2277">try 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2277">The result type of the try expression.</span></span> <span data-ttu-id="10d7e-2278">null일 경우 본문 및 모든 처리기에 같은 형식이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2278">If null, bodh and all handlers must have identical type.</span></span></param>
        <param name="body"><span data-ttu-id="10d7e-2279">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2279">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="10d7e-2280">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2280">The body of the finally block.</span></span> <span data-ttu-id="10d7e-2281">try 블록에 연결된 finally 블록이 없을 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2281">Pass null if the try block has no finally block associated with it.</span></span></param>
        <param name="fault"><span data-ttu-id="10d7e-2282">fault 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2282">The body of the fault block.</span></span> <span data-ttu-id="10d7e-2283">try 블록에 연결된 fault 블록이 없을 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2283">Pass null if the try block has no fault block associated with it.</span></span></param>
        <param name="handlers"><span data-ttu-id="10d7e-2284">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2284">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="10d7e-2285">지정된 요소를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2285">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2286">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2286">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2287">적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2287">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="10d7e-2288">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2288">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="10d7e-2289">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2289">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-2290">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2290">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <summary><span data-ttu-id="10d7e-2291">지정된 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2291">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2292">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2292">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2293">합니다 `unaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.UnaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2293">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="10d7e-2294">예를 들어 경우 `unaryType` 값과 같음 <xref:System.Linq.Expressions.ExpressionType.Convert>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2294">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="10d7e-2295">`type`이라고 하는 팩터리 메서드에 적용 되지 않는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2295">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2296"><paramref name="operand" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2296"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2297"><paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2297"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="10d7e-2298">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2298">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="10d7e-2299">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2299">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-2300">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2300">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2301">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2301">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-2302">지정된 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2302">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2303">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2303">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2304">합니다 `unaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.UnaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2304">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="10d7e-2305">예를 들어 경우 `unaryType` 값과 같음 <xref:System.Linq.Expressions.ExpressionType.Convert>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2305">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="10d7e-2306">합니다 `type` 고 `method` 이라고 하는 팩터리 메서드에 적용 되지 않은 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2306">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2307"><paramref name="operand" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2307"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2308"><paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2308"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2309">멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2309">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="10d7e-2310"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2310">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2311"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2311">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2312">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2312">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2313"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2313">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2314">`member` 매개 변수를 필드 또는 속성을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2314">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2315"><paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2315"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2316"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2316"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="10d7e-2317">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2317">-or-</span></span> 
<span data-ttu-id="10d7e-2318"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2318">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="10d7e-2319"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2319">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2320"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2320">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2321">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2321">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2322"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2322">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2323">`member` 매개 변수를 필드 또는 속성을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2323">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2324"><paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2324"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2325"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2325"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="10d7e-2326">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2326">-or-</span></span> 
<span data-ttu-id="10d7e-2327"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2327">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-2328">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2328">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2329"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2329">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2330">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2330">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2331"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2331">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2332"><paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2332"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2333"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2333"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="10d7e-2334">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2334">-or-</span></span> 
<span data-ttu-id="10d7e-2335"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2335">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-2336">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2336">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2337"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2337">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2338">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2338">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2339"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2339">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2340"><paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2340"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2341"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2341"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="10d7e-2342">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2342">-or-</span></span> 
<span data-ttu-id="10d7e-2343"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2343">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2344">새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2344">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2345"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2345">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2346"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2346">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2347">새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2347">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2348"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2348">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2349"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberInitExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `newExpression`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2349">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2350">다음 예제에서는 새 개체를 만들고 개체의 속성을 초기화 하는 식을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2350">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2351"><paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2351"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2352"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2352">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="10d7e-2353"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2353">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="10d7e-2354"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2354">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2355"><see cref="T:System.Linq.Expressions.MemberInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2355">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2356"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2356">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2357"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberInitExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `newExpression`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2357">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2358">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MemberInitExpression> 새 개체의 두 가지 멤버의 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2358">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2359"><paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2359"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2360"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2360">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2361">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2361">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2362"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2362">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2363"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2363">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2364">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2364">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2365"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2365">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2366">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2366">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2367"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2367">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2368">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2368">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2369">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2369">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2370"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2370">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2371">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2371">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2372">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2372">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2373">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2373">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2374">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 모듈러스 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2374">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2375">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2375">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2376">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2376">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2377">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2377">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2378">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2378">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2379">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2379">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2380">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2380">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2381">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2381">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2382">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2382">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2383">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2383">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2384">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2384">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2385">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2385">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2386">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2386">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2387">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2387">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2388"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2388"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2389"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2389">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2390"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2390">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2391"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2391">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2392"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2392">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2393">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2393">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2394"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2394">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2395">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2395">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2396"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2396">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2397">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2397">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2398">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2398">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2399"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2399">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2400">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2400">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2401">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2401">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2402">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2402">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="10d7e-2403">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2403">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2404">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 모듈러스 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2404">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2405">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2405">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2406">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2406">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2407">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2407">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2408">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2408">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2409">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2409">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2410">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2410">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2411">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2411">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2412">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2412">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2413">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2413">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2414">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2414">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2415">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2415">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2416">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2416">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2417">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2417">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2418"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2418"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2419"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2419"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2420"><paramref name="method" />가 <see langword="null" />이고 나머지 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2420"><paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2421">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2421">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2422"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2423"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2423">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2424">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2424">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2425"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2425">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2426"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2427"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2428"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2428">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2429">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2429">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2430"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2430">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2431"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2432"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2432">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2433"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2433">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-2434"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2434">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2435">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2436"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2436">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2437">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2437">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2438"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2438">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2439"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2439">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2440">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2440">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2441"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2441">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2442">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2442">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2443"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2443">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2444">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2444">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2445">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2445">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2446"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2446">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2447">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2447">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2448">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2448">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2449">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2449">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2450">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2450">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2451">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2451">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2452">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2452">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2453">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2453">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2454">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2454">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2455">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2455">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2456">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2456">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2457">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2457">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2458">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2458">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2459">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2459">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2460">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2460">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2461">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2461">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2462">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2462">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2463">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2463">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2464">다음 코드 예제에는 두 값을 곱합니다 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2464">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2465"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2465"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2466"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2466">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2467"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2467">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2468"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2468">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2469"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2469">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2470">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2470">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2471"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2471">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2472">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2472">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2473"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2473">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2474">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2474">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2475">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2475">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2476"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2476">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2477">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2477">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2478">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2478">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2479">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2479">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2480">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2480">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2481">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2481">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2482">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2482">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2483">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2483">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2484">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2484">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2485">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2485">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2486">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2486">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2487">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2487">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2488">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2488">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2489">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2489">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2490">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2490">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2491">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2491">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2492">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2492">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2493">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2493">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2494">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2494">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2495"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2495"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2496"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2496"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2497"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2497"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2498">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2498">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2499"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2500"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2501">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2501">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2502"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2502">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2503"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2503">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2504"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2505"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2505">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2506">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2506">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2507"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2507">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2508"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2509"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2510"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2510">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-2511"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2511">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2512">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2513"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2513">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2514">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2514">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2515"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2515">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2516"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2516">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2517">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2518"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2519"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2520"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2521"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2521">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2522">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2522">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2523"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2523">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2524"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2525"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2525">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2526"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2526">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-2527"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2527">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2528">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2529"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2529">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2530">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2530">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2531"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2532"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2533">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2534"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2535">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2535">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2536"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2536">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2537">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2537">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2538">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2538">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2539"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2539">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2540">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2540">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2541">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2541">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2542">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2542">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2543">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2543">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2544">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2544">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2545">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2545">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2546">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2546">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2547">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2547">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2548">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2548">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2549">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2549">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2550">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2550">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2551">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2551">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2552">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2552">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2553">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2553">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2554">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2554">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2555">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2555">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2556">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2556">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2557"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2557"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2558"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2558">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2559"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2559">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2560"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2560">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2561"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2561">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2562">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2562">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2563"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2563">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2564">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2564">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2565"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2565">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2566">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2566">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2567">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2567">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2568"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2568">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2569">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2569">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2570">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2570">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2571">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2571">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2572">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2572">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2573">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2573">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2574">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2574">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2575">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2575">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2576">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2576">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2577">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2577">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2578">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2578">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2579">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2579">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2580">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2580">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2581">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2581">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2582">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2582">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2583">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2583">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2584">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2584">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="10d7e-2585">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2585">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2586">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2586">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2587"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2587"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2588"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2588"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2589"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2589"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2590">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2590">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2591"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2591">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2592">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2592">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2593"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2593">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2594">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2594">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2595"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2595">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2596">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2596">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2597">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2597">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2598">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2598">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2599">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2599">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2600">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2600">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2601">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2601">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2602">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2602">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2603">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2603">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2604">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2604">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2605">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2605">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2606">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2606">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2607">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2607">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2608">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2608">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2609">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2609">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2610">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2610">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2611">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2611">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2612">다음 예제에는 산술 부정 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2612">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2613"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2613"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2614"><paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2614">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2615"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2615">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2616"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2616">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2617">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2617">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2618"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2618">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2619">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2619">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2620"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2620">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2621">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2621">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2622">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2622">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2623">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2623">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2624">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2624">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2625">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2625">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2626">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2626">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2627">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2627">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2628">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2628">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2629">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2629">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2630">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2630">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2631">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2631">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2632">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2632">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2633">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2633">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2634">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2634">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2635">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2635">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2636">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2636">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2637">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2637">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2638"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2638"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2639"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2639"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2640"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2640"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-2641">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2641">-or-</span></span> 
 <span data-ttu-id="10d7e-2642"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2642"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2643">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2643">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2644"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2644">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2645">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2645">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2646"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2646">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2647">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2647">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2648"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2648">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2649">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2649">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2650">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2650">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2651">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2651">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2652">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2652">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2653">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2653">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2654">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2654">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2655">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2655">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2656">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2656">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2657">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2657">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2658">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2658">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2659">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2659">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2660">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2660">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2661">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2661">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2662">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2662">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2663">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2663">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2664">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2664">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2665"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2665"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2666"><paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2666">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2667"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2667">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2668"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2668">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2669">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2669">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span> <span data-ttu-id="10d7e-2670">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2670">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2671"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2671">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2672">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2672">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2673"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2673">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2674">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2674">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2675">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2675">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2676">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2676">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2677">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2677">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2678">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2678">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2679">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2679">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2680">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2680">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2681">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2681">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2682">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2682">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2683">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2683">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2684">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2684">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2685">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2685">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2686">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2686">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2687">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2687">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2688">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2688">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2689">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2689">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2690">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2690">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2691"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2691"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2692"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2692"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2693"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2693"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-2694">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2694">-or-</span></span> 
 <span data-ttu-id="10d7e-2695"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2695"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2696"><see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2696">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New constructor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="10d7e-2697"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2697">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2698">인수를 받지 않는 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2698">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2699"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2699">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2700"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> 하 고 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2700">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="10d7e-2701">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 나타내는 생성자의 선언 형식과 나타냅니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2701">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2702"><paramref name="constructor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2702"><paramref name="constructor" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2703"><paramref name="constructor" />가 나타내는 생성자에 매개 변수가 하나 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2703">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member New : Type -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2704">인수를 받지 않는 생성자가 있는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2704">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span></span></param>
        <summary><span data-ttu-id="10d7e-2705">지정된 형식의 매개 변수가 없는 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2705">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2706"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 형식에 대한 매개 변수 없이 생성자를 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />로 설정된 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2706">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2707">`type` 매개 변수는 매개 변수가 없는 생성자가 있는 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2707">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="10d7e-2708"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> 하 고 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2708">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="10d7e-2709">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2709">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2710">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.New%28System.Type%29> 메서드를를 <xref:System.Linq.Expressions.NewExpression> 매개 변수가 없는 생성자를 호출 하 여 사전 개체의 새 인스턴스를 생성 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2710">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2711"><paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2711"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2712"><paramref name="type" />이 나타내는 형식에 매개 변수가 없는 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2712">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="10d7e-2713"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2713">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2714"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2715">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2715">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2716"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2716">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2717">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2717">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2718">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2718">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="10d7e-2719">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 가 나타내는 생성자의 선언 형식을 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2719">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2720"><xref:System.Linq.Expressions.NewExpression.Members%2A> 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2720">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2721"><paramref name="constructor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2721"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2722">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2722">-or-</span></span> 
<span data-ttu-id="10d7e-2723"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2723">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2724"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2724">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2725">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2725">-or-</span></span> 
<span data-ttu-id="10d7e-2726"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2726">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="10d7e-2727"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2727">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2728"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2728">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2729">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2729">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2730"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2730">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2731">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2731">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2732">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2732">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="10d7e-2733">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 가 나타내는 생성자의 선언 형식을 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2733">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2734"><xref:System.Linq.Expressions.NewExpression.Members%2A> 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2734">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2735"><paramref name="constructor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2735"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2736">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2736">-or-</span></span> 
<span data-ttu-id="10d7e-2737"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2737">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2738"><paramref name="arguments" />의 길이가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 일치하는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2738">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2739">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2739">-or-</span></span> 
<span data-ttu-id="10d7e-2740"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2740">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * seq&lt;System.Reflection.MemberInfo&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="10d7e-2741"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2741">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2742"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="10d7e-2743"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2743">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2744">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2744">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="10d7e-2745">생성자에서 초기화되는 필드에 액세스하는 멤버가 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2745">The members that access the constructor initialized fields are specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2746"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2746">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2747">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2747">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2748">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2748">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="10d7e-2749">경우 `members` 됩니다 `null`의 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2749">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="10d7e-2750">경우 `members` 아닙니다 `null`, 요소 수가 있어야 `arguments` 요소당 아니어야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2750">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="10d7e-2751">각 요소 `members` 이어야 합니다는 <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> 하거나 <xref:System.Reflection.MethodInfo> 가 나타내는 생성자의 선언 형식에 인스턴스 멤버를 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2751">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2752">속성이 가져야 속성을 나타내는 경우는 `get` 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2752">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="10d7e-2753">해당 요소 `arguments` 의 각 요소에 대해 `members` 있어야를 <xref:System.Linq.Expressions.Expression.Type%2A> 멤버의 형식에 할당할 수 있는 형식을 나타내는 속성은는 `members` 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2753">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="10d7e-2754">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 생성자 선언 형식을 나타내는 `constructor` 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2754">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2755"><paramref name="constructor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2755"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2756">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2756">-or-</span></span> 
<span data-ttu-id="10d7e-2757"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2757">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2758">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2758">-or-</span></span> 
<span data-ttu-id="10d7e-2759"><paramref name="members" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2759">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2760"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2760">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2761">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2761">-or-</span></span> 
<span data-ttu-id="10d7e-2762"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2762">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2763">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2763">-or-</span></span> 
<span data-ttu-id="10d7e-2764"><paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2764">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="10d7e-2765">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2765">-or-</span></span> 
<span data-ttu-id="10d7e-2766"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2766">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * System.Reflection.MemberInfo[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="10d7e-2767"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2767">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-2768"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2768">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="10d7e-2769"><see cref="T:System.Reflection.MemberInfo" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2769">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2770">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2770">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="10d7e-2771">생성자에서 초기화되는 필드에 액세스하는 멤버가 배열로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2771">The members that access the constructor initialized fields are specified as an array.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2772"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2772">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2773">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2773">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2774">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2774">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="10d7e-2775">경우 `members` 됩니다 `null`의 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2775">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="10d7e-2776">경우 `members` 아닙니다 `null`, 요소 수가 있어야 `arguments` 요소당 아니어야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2776">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="10d7e-2777">각 요소 `members` 이어야 합니다는 <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> 하거나 <xref:System.Reflection.MethodInfo> 가 나타내는 생성자의 선언 형식에 인스턴스 멤버를 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2777">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="10d7e-2778">속성을 나타내는 경우 속성은 연결 된 필드의 값을 검색할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2778">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="10d7e-2779">해당 요소 `arguments` 의 각 요소에 대해 `members` 있어야를 <xref:System.Linq.Expressions.Expression.Type%2A> 멤버의 형식에 할당할 수 있는 형식을 나타내는 속성은는 `members` 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2779">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="10d7e-2780">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 생성자 선언 형식을 나타내는 `constructor` 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2780">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2781"><paramref name="constructor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2781"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2782">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2782">-or-</span></span> 
<span data-ttu-id="10d7e-2783"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2783">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2784">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2784">-or-</span></span> 
<span data-ttu-id="10d7e-2785"><paramref name="members" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2785">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2786"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2786">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2787">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2787">-or-</span></span> 
<span data-ttu-id="10d7e-2788"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2788">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="10d7e-2789">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2789">-or-</span></span> 
<span data-ttu-id="10d7e-2790"><paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2790">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="10d7e-2791">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2791">-or-</span></span> 
<span data-ttu-id="10d7e-2792"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2792">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2793">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2793">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2794">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2794">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="10d7e-2795"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2795">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2796">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2796">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2797"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2797">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2798">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 차수가의 길이 같으면 배열 형식을 나타냅니다 `bounds` 가지 며 요소 형식이 고 `type`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2798">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="10d7e-2799">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `bounds` 정수 계열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2799">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2800">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 하는 문자열 배열을 작성을 나타내는 식 트리를 만드는 메서드가 순위가 2입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2800">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2801"><paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2801"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2802">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2802">-or-</span></span> 
<span data-ttu-id="10d7e-2803"><paramref name="bounds" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2803">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2804"><paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2804">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2805">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2805">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="10d7e-2806"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2806">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2807">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2807">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2808"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2808">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2809">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 차수가의 길이 같으면 배열 형식을 나타냅니다 `bounds` 가지 며 요소 형식이 고 `type`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2809">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="10d7e-2810">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `bounds` 정수 계열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2810">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2811">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 하는 문자열 배열을 작성을 나타내는 식 트리를 만드는 메서드가 순위가 2입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2811">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2812"><paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2812"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2813">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2813">-or-</span></span> 
<span data-ttu-id="10d7e-2814"><paramref name="bounds" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2814">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2815"><paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2816">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2816">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2817">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2817">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2818"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2818">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2819">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2819">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2820"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2820">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2821"><xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` 가 나타내는 형식에 할당할 수 있는 형식을 나타내야 `type`도 되 면 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2821">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-2822">경우에 요소 인용 됩니다 `type` 는 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2822">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-2823">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2823">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-2824">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2824">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="10d7e-2825">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 나타내는 형식의 배열 차수가 1이 고 요소 형식이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2826">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 메서드는 1 차원 문자열 배열을 작성을 나타내는 식 트리를 만드는 문자열 식의 목록으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2826">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2827"><paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2827"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2828">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2828">-or-</span></span> 
<span data-ttu-id="10d7e-2829"><paramref name="initializers" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2829">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2830"><paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" />이 나타내는 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2830">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-2831">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2831">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="10d7e-2832"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2832">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-2833">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2833">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2834"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2834">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2835"><xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` 가 나타내는 형식에 할당할 수 있는 형식을 나타내야 `type`도 되 면 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2835">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10d7e-2836">경우에 요소 인용 됩니다 `type` 는 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2836">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="10d7e-2837">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2837">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="10d7e-2838">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2838">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="10d7e-2839">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 나타내는 형식의 배열 차수가 1이 고 요소 형식이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2839">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2840">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 메서드는 1 차원 문자열 배열을 작성을 나타내는 식 트리를 만드는 문자열 식의 목록으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2840">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2841"><paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2841"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-2842">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2842">-or-</span></span> 
<span data-ttu-id="10d7e-2843"><paramref name="initializers" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2843">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2844"><paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2844">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d7e-2845">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2845">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <value><span data-ttu-id="10d7e-2846"><see cref="T:System.Linq.Expressions.ExpressionType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2846">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2847"><xref:System.Linq.Expressions.Expression.NodeType%2A> 속성의 보다 특수 한 설명이 <xref:System.Linq.Expressions.Expression> 보다 해당 파생된 유형 뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2847">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="10d7e-2848">예를 들어, 한 <xref:System.Linq.Expressions.BinaryExpression> 나누기 연산 또는 "보다 큼" 작업을 같은 이진 식의 다양 한 종류를 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2848">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="10d7e-2849">합니다 <xref:System.Linq.Expressions.Expression.NodeType%2A> 속성으로 이러한 이진 식 설명 <xref:System.Linq.Expressions.ExpressionType.Divide> 고 <xref:System.Linq.Expressions.ExpressionType.GreaterThan>각각.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2849">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="10d7e-2850">식의 정적 CLR 형식을 하는 <xref:System.Linq.Expressions.Expression> 개체가 표시 됩니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2850">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2851">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2851">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2852"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2853">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2853">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2854"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2854">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2855">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2855">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2856"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2856">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2857">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2857">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2858">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2858">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2859">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2859">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2860">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2860">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2861">경우 `expression`합니다. 형식이 단항 not 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2861">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2862">그렇지 않은 경우, `expression`합니다. 형식은 숫자 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2862">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2863">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2863">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2864">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2864">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2865">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2865">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2866">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2866">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2867">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2867">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2868">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2868">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2869">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2869">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2870">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2870">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2871">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2871">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2872">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2872">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-2873">다음 예제에서는 논리를 나타내는 식을 만들려면 작업 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2873">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2874"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2874"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2875"><paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2875">The unary not operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2876"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2876">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2877"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2877">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2878">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2878">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span> <span data-ttu-id="10d7e-2879">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2879">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2880"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2880">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2881">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2881">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-2882"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2882">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2883">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2883">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2884">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2884">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2885">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2885">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2886">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2886">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2887">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2887">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-2888">경우 `expression`합니다. 형식이 단항 not 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2888">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2889">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2889">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2890">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2890">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2891">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2891">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2892">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2892">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2893">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2893">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2894">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2894">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2895">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2895">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2896">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2896">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2897">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2897">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-2898">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2898">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2899">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2899">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2900"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2900"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2901"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2901"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2902"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2902"><paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-2903">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-2903">-or-</span></span> 
 <span data-ttu-id="10d7e-2904"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2904"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2905">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2905">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2906"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2906">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2907"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2907">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2908">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2908">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2909"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2909">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2910">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2910">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2911"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2911">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2912">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2912">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="10d7e-2913">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2913">Otherwise, it is `false`.</span></span> <span data-ttu-id="10d7e-2914"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2914">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="10d7e-2915"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2915">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2916">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2916">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2917">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2917">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2918">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2918">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2919">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같지 않음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2919">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2920">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2920">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2921">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2921">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2922">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2922">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2923">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2923">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2924">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2924">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2925">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2925">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="10d7e-2926">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2926">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2927">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2927">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-2928">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2928">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2929">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2929">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2930">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2930">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-2931">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2931">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2932">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2932">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2933"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2933"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2934"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2934">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2935"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2935">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2936"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2936">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="10d7e-2937"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2937"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2938"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2938">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2939">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2939">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2940"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2940">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2941">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2941">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2942"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2942">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2943">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2943">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="10d7e-2944">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2944">Otherwise, they are both `false`.</span></span> <span data-ttu-id="10d7e-2945"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2945">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2946">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2946">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2947">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2947">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2948">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2948">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2949">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2949">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2950">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같지 않음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2950">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2951">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2951">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2952">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2952">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2953">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2953">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2954">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2954">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2955">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2955">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2956">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2956">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="10d7e-2957">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2957">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2958">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2958">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="10d7e-2959">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2959">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2960">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2960">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2961">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2961">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="10d7e-2962">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2962">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-2963">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2963">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-2964"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2964"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-2965"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2965"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-2966"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-2966"><paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2967">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2967">Returns the expression representing the ones complement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2968"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2968">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="10d7e-2969">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2969">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2970"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2970">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-2971"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2971">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-2972">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2972">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-2973">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2973">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2974"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2974">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-2975">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2975">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-2976"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2976">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-2977"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2977">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-2978">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2978">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-2979"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2979">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-2980">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2980">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-2981"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2981">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-2982">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2982">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-2983">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2983">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-2984"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2984">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-2985">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2985">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-2986">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-2986">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-2987">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2987">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-2988">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2988">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2989">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2989">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-2990">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-2990">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-2991">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2991">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2992">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2992">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2993">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2993">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-2994">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2994">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-2995">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2995">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-2996">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2996">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-2997">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-2997">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-2998">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2998">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-2999">노드 형식은의 결과 형식은 미리 정의 된 비트 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-2999">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3000">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3000">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3001">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3001">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3002">다음 코드 예제에는 논리적 OR 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3002">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3003"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3003"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3004"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3004">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3005"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3005">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3006"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3006">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3007"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3007">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3008">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3008">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3009"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3009">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3010">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3010">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3011"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3011">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3012">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3012">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3013">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3013">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3014"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3014">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3015">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3015">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3016">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3016">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3017">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3017">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3018">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3018">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3019">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3019">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3020">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3020">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3021">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3021">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3022">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3022">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3023">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3023">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3024">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3024">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3025">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3025">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3026">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3026">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3027">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3027">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3028">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3028">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3029">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3029">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3030">노드 형식은의 결과 형식은 미리 정의 된 비트 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3030">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3031">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3031">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3032">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3032">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3033"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3033"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3034"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3034"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3035"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3035"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3036">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3036">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3037"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3037">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3038"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3038">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3039">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3039">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3040"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3040">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3041"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3041">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3042"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3042">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3043"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3043">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3044">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3044">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3045"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3045">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3046"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3046">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3047"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3047">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3048"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3048">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-3049"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3049">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3050">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3050">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3051"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3051">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3052">첫 번째 연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3052">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3053"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3053">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3054"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3054">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3055">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3055">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3056"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3056">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3057">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3057">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3058"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3058">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3059">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3059">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3060">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3060">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3061"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3061">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3062">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3062">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3063">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3063">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3064">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3064">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3065">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3065">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="10d7e-3066">조건부 `OR` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3066">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="10d7e-3067">그러나 조건부 `OR` 연산자는 비트를 사용 하 여 계산 됩니다 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3067">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="10d7e-3068">따라서 사용자 정의의 오버 로드를 비트 `OR` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3068">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="10d7e-3069">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3069">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3070">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3070">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3071">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3071">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3072">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3072">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3073">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3073">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3074">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3074">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3075">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3075">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3076">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3076">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3077">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3077">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3078">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3078">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="10d7e-3079">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3079">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3080">노드 형식은 미리 정의 된 조건부의 결과 형식은 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3080">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3081">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3081">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3082">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3082">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3083">다음 코드 예제에는 논리를 나타내는 식을 만드는 방법을 보여 줍니다 `OR` 첫 번째 피연산자가 하는 경우에 두 번째 피연산자를 계산 하는 작업 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3083">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3084"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3084"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3085"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3085">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-3086">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3086">-or-</span></span> 
 <span data-ttu-id="10d7e-3087"><paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3087"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3088"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3088">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3089"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3089">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3090"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3090">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3091">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3091">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3092"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3092">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3093">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3093">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3094"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3094">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3095">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3095">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3096">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3096">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3097"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3097">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3098">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3098">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3099">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3099">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3100">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3100">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3101">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3101">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-3102">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3102">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="10d7e-3103">조건부 `OR` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3103">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="10d7e-3104">그러나 조건부 `OR` 연산자는 비트를 사용 하 여 계산 됩니다 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3104">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="10d7e-3105">따라서 사용자 정의의 오버 로드를 비트 `OR` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3105">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="10d7e-3106">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3106">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3107">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3107">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3108">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3108">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3109">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3109">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3110">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3110">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3111">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3111">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3112">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3112">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3113">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3113">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3114">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3114">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3115">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3115">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="10d7e-3116">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3116">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3117">노드 형식은 미리 정의 된 조건부의 결과 형식은 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3117">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3118">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3118">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3119">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3119">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3120"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3120"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3121"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3121"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3122"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3122"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-3123">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3123">-or-</span></span> 
 <span data-ttu-id="10d7e-3124"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3124"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3125">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3125">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3126">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3126">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="10d7e-3127">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3127">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3128">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3128">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-3129">다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.MethodCallExpression> 값을 인쇄 하는 개체를 <xref:System.Linq.Expressions.ParameterExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3129">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3130">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3130">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-3131">디버깅 또는 인쇄용으로만 사용되는 매개 변수 또는 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3131">The name of the parameter or variable, used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="10d7e-3132">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3132">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3133"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3133">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3134"><paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3134"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3135">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3135">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3136">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3136">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="10d7e-3137">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3137">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3138">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3138">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3139">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3139">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3140">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3140">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-3141">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3142">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3142">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3143">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3143">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3144">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3144">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="10d7e-3145">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3145">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3146">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3146">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3147">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3147">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3148">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3148">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-3149">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3149">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3150">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3150">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3151">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3151">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3152"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3152">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3153"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3153">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3154">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3154">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3155"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3155">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3156">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3156">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3157"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3157">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3158">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3158">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3159">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3159">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3160"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3160">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3161">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3161">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3162">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3162">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3163">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3163">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3164">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 지 수 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3164">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3165">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 둘 다 <xref:System.Double>의 메서드 구현은 <xref:System.Math.Pow%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3165">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3166">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3166">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="10d7e-3167">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3167">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3168">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3168">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3169">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3169">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3170">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3170">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3171">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3171">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3172"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3172"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3173"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3173">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-3174">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3174">-or-</span></span> 
 <span data-ttu-id="10d7e-3175"><paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3175"><paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3176"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3176">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3177"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3177">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3178"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3178">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3179">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3179">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3180"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3180">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3181">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3181">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3182"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3182">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3183">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3183">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3184">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3184">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3185"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3185">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3186">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3186">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3187">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3187">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3188">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3188">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3189">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3189">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3190">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 지 수 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3190">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3191">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 둘 다 <xref:System.Double>의 메서드 구현은 <xref:System.Math.Pow%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3191">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3192">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3192">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="10d7e-3193">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3193">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3194">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3194">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3195">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3195">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3196">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3196">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3197">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3197">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3198"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3198"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3199"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3199"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3200"><paramref name="method" />가 <see langword="null" />이고 지수 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3200"><paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-3201">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3201">-or-</span></span> 
 <span data-ttu-id="10d7e-3202"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3202"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3203">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3203">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3204"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3205"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3205">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3206">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3207"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3208"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3209"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3210"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3211">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3211">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3212"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3212">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3213"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3213">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3214"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3214">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3215"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3215">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-3216"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3216">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3217">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3218"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3219">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3220">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3220">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="10d7e-3221">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3221">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3222">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3222">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3223">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3223">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3224">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3224">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-3225">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3226">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3226">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3227">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3227">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3228">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3228">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="10d7e-3229">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3229">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3230">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3230">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3231">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3231">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3232">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3232">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="10d7e-3233">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3233">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3234">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3234">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3235">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3235">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3236"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3236">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="10d7e-3237">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3237">This can be null for static properties.</span></span></param>
        <param name="propertyAccessor"><span data-ttu-id="10d7e-3238">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3238">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <summary><span data-ttu-id="10d7e-3239">속성 접근자 메서드를 통한 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3239">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3240"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyAccessor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3240">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3241"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성 <xref:System.Linq.Expressions.MemberExpression.Member%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3241">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="10d7e-3242">표시 되는 메서드 `propertyAccessor` 는 `static` (`Shared` Visual basic에서), `expression` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3242">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3243"><paramref name="propertyAccessor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3243"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-3244">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3244">-or-</span></span> 
<span data-ttu-id="10d7e-3245"><paramref name="propertyAccessor" />가 나타내는 메서드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3245">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3246"><paramref name="expression" />.Type을 <paramref name="propertyAccessor" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3246"><paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span></span>  
  
<span data-ttu-id="10d7e-3247">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3247">-or-</span></span> 
<span data-ttu-id="10d7e-3248"><paramref name="propertyAccessor" />가 나타내는 메서드가 속성 접근자 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3248">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3249"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3249">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="10d7e-3250">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3250">This can be null for static properties.</span></span></param>
        <param name="property"><span data-ttu-id="10d7e-3251"><see cref="T:System.Reflection.PropertyInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3251">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3252">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3252">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3253"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3253">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3254"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성 <xref:System.Linq.Expressions.MemberExpression.Member%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3254">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="10d7e-3255">표시 되는 속성 `property` 은 `static` (`Shared` Visual basic에서), `expression` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3255">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3256"><paramref name="property" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3256"><paramref name="property" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="10d7e-3257">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3257">-or-</span></span> 
<span data-ttu-id="10d7e-3258"><paramref name="property" />가 나타내는 속성이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3258">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3259"><paramref name="expression" />.Type을 <paramref name="property" />가 나타내는 속성의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3259"><paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3260"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성이 포함된 <paramref name="propertyName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3260">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />.</span></span> <span data-ttu-id="10d7e-3261">정적 속성의 경우 이 값은 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3261">This can be <see langword="null" /> for static properties.</span></span></param>
        <param name="propertyName"><span data-ttu-id="10d7e-3262">액세스할 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3262">The name of a property to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-3263">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3263">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3264"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3264">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3265"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음는 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성을 <xref:System.Reflection.PropertyInfo> 가리키는 속성을 나타내는 `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3265">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="10d7e-3266">이 메서드는 검색 `expression`합니다. 형식 및 이름을 가진 속성에 대 한 기본 형식 `propertyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3266">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="10d7e-3267">공용 속성에는 public이 아닌 속성 보다 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3267">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="10d7e-3268">이 메서드를 전달 하는 일치 하는 속성이 없으면 `expression` 하며 <xref:System.Reflection.PropertyInfo> 해당 속성을 나타내는 <xref:System.Linq.Expressions.Expression.Property%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3268">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3269">다음 예제에서는 속성에 액세스 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3269">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3270"><paramref name="expression" /> 또는 <paramref name="propertyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3270"><paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3271"><paramref name="propertyName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성이 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3271">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-3272">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3272">The object to which the property belongs.</span></span> <span data-ttu-id="10d7e-3273">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3273">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="10d7e-3274">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3274">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-3275">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3275">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="10d7e-3276">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3276">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3277">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3277">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-3278">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3278">The object to which the property belongs.</span></span> <span data-ttu-id="10d7e-3279">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3279">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="10d7e-3280">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3280">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-3281">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3281">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="10d7e-3282">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3282">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3283">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3283">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, propertyName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="10d7e-3284">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3284">The object to which the property belongs.</span></span> <span data-ttu-id="10d7e-3285">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3285">If the property is static/shared, it must be null.</span></span></param>
        <param name="propertyName"><span data-ttu-id="10d7e-3286">인덱서의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3286">The name of the indexer.</span></span></param>
        <param name="arguments"><span data-ttu-id="10d7e-3287">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3287">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="10d7e-3288">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3288">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3289">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3289">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, type, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3290">속성의 포함 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3290">The containing object of the property.</span></span> <span data-ttu-id="10d7e-3291">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3291">This can be null for static properties.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3292">속성이 포함된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3292">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span></span></param>
        <param name="propertyName"><span data-ttu-id="10d7e-3293">액세스할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3293">The property to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-3294">속성에 액세스하는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3294">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3295">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3295">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberSignature Language="F#" Value="static member PropertyOrField : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.PropertyOrField (expression, propertyOrFieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3296"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성 또는 필드가 포함된 <paramref name="propertyOrFieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3296">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />.</span></span> <span data-ttu-id="10d7e-3297">이 값은 정적 멤버의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3297">This can be null for static members.</span></span></param>
        <param name="propertyOrFieldName"><span data-ttu-id="10d7e-3298">액세스할 속성 또는 필드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3298">The name of a property or field to be accessed.</span></span></param>
        <summary><span data-ttu-id="10d7e-3299">속성 또는 필드에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3299">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3300"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성 또는 필드를 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="propertyOrFieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3300">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3301"><xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음를 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 또는 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성을 <xref:System.Reflection.PropertyInfo> 또는 <xref:System.Reflection.FieldInfo>각각 가리키는 필드나 속성을 나타내는 `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3301">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="10d7e-3302">이 메서드는 검색 `expression`합니다. 형식 및 해당 기본 형식 속성 또는 필드 이름을 가진 `propertyOrFieldName`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3302">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="10d7e-3303">Public 속성 및 필드는 public이 아닌 속성 및 필드 보다 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3303">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="10d7e-3304">또한 속성 필드를 통해 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3304">Also, properties are given preference over fields.</span></span> <span data-ttu-id="10d7e-3305">이 메서드를 전달 하는 일치 하는 속성 또는 필드가 없으면 `expression` 하며 <xref:System.Reflection.PropertyInfo> 또는 <xref:System.Reflection.FieldInfo> 해당 속성이 나 필드를 나타내는 <xref:System.Linq.Expressions.Expression.Property%2A> 또는 <xref:System.Linq.Expressions.Expression.Field%2A>각각.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3305">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3306">다음 예제에서는 속성 또는 필드에 액세스 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3306">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3307"><paramref name="expression" /> 또는 <paramref name="propertyOrFieldName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3307"><paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3308"><paramref name="propertyOrFieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성 또는 필드가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3308">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Quote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Quote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3309"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3309">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3310"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 형식의 상수 값이 있는 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3310">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3311"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3311">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3312">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 생성 된 형식을 나타내는 <xref:System.Linq.Expressions.Expression%601>형식 인수가 나타내는 형식, `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3312">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="10d7e-3313"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3313">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="10d7e-3314">둘 다 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3314">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3315"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3315"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="abstract member Reduce : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-3316">이 노드를 더 단순한 식으로 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3316">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="10d7e-3317">CanReduce가 true를 반환하면 유효한 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3317">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="10d7e-3318">이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3318">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3319">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3319">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberSignature Language="F#" Value="member this.ReduceAndCheck : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceAndCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-3320">이 노드를 더 단순한 식으로 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3320">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="10d7e-3321">CanReduce가 true를 반환하면 유효한 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3321">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="10d7e-3322">이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3322">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3323">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3323">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3324">Reduce 달리이 메서드는 축소 된 노드는 특정 고정 충족 함을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3324">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberSignature Language="F#" Value="member this.ReduceExtensions : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-3325">알려진 노드 형식(확장명 노드가 아님)으로 식을 줄이거나 이미 알려진 형식인 경우 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3325">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3326">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3326">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3327"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3327">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3328"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3329">참조 같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3329">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3330"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3330">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceNotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceNotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3331"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3332"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3332">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3333">참조 다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3333">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3334"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3334">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3335">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3335">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberSignature Language="F#" Value="static member Rethrow : unit -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-3336">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3336">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3337">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3337">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Rethrow : Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3338">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3338">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3339">지정된 형식을 사용하여 예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3339">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3340">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3340">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3341">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3341">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-3342"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3342">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3343">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3343">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3344"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3344">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-3345"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3345">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-3346">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3346">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="10d7e-3347">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3347">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span> <span data-ttu-id="10d7e-3348">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3348">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3349"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3349">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-3350">다음 예제에서는 포함 하는 식을 생성 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Return%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3350">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-3351"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3351">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3352"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3352">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3353">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3353">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3354"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3354">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="10d7e-3355"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3355">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="10d7e-3356">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3356">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3357"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3357">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3358">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3358">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span> <span data-ttu-id="10d7e-3359">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3359">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3360"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3360">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3361">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3361">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3362"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3362">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3363"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3363">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3364">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3364">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3365"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3365">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3366">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3366">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3367"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3367">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3368">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3368">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3369">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3369">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3370"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3370">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3371">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3371">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3372">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3372">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3373">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3373">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3374">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오른쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3374">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3375">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3375">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3376">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3376">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3377">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3377">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3378">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3378">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3379">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3379">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3380">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3380">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3381">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3381">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3382">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3382">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3383">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3383">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3384">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3384">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3385">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3385">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3386">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3386">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3387">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3387">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3388"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3388"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3389"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3389">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3390"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3390">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3391"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3391">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3392"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3392">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3393">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3393">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3394"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3394">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3395">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3395">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3396"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3396">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3397">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3397">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3398">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3398">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3399"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3399">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3400">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3400">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3401">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3401">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3402">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3402">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3403">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3403">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-3404">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오른쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3404">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3405">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3405">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3406">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3406">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3407">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3407">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3408">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3408">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3409">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3409">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3410">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3410">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3411">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3411">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3412">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3412">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3413">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3413">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3414">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3414">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3415">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3415">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3416">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3416">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3417">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3417">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3418"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3418"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3419"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3419"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3420"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3420"><paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3421">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3421">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3422"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3423"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3423">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3424">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3424">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3425"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3425">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3426"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3427"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3428"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3428">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3429">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3429">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3430"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3430">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3431"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3432"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3432">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3433"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3433">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-3434"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3434">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3435">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3436"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3436">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3437"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3437">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="10d7e-3438"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3438">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-3439"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3439">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3440"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3440">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="10d7e-3441"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3441">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="10d7e-3442"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3442">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3443"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3443">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3444">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3444">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3445"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3445">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3446"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3446">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3447">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3447">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3448"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3448">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3449">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3449">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3450"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3450">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3451">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3451">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3452">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3452">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3453"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3453">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3454">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3454">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3455">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3455">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3456">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3456">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3457">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3457">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3458">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3458">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3459">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3459">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3460">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3460">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3461">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3461">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3462">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3462">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3463">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3463">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3464">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3464">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3465">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3465">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3466">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3466">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3467">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3467">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3468">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3468">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3469">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3469">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3470">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3470">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3471">다음 코드 예제에는 첫 번째 인수에서 인수를 빼는 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3471">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3472"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3472"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3473"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3473">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3474"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3474">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3475"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3475">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3476"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3476">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3477">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3477">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3478"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3478">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3479">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3479">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3480"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3480">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3481">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3481">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3482">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3482">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3483"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3483">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3484">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3484">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3485">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3485">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3486">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3486">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3487">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3487">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-3488">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3488">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3489">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3489">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3490">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3490">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3491">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3491">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3492">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3492">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3493">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3493">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3494">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3494">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3495">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3495">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3496">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3496">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3497">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3497">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3498">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3498">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3499">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3499">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3500">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3500">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3501">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3501">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3502"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3502"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3503"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3503"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3504"><paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3504"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3505">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3506"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3506">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3507"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3508">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3508">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3509"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3509">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3510"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3510">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3511"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3511">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3512"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3512">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3513">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3513">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3514"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3514">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3515"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3515">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3516"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3516">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3517"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3517">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-3518"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3518">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3519">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3519">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3520"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3520">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3521">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3521">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3522"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3522">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3523"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3524">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3524">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3525"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3525">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3526"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3526">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3527"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3527">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3528"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3528">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3529">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3529">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3530"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3530">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3531"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3532"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3533"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3533">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="10d7e-3534"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3534">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3535">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3535">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3536"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3536">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3537">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3537">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3538"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3538">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3539"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3539">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3540">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3540">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3541"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3541">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3542">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3542">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3543"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3543">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3544">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3544">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3545">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3545">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3546"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3546">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3547">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3547">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3548">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3548">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3549">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3549">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3550">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3550">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3551">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3551">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3552">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3552">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3553">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3553">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3554">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3554">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3555">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3555">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3556">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3556">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3557">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3557">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3558">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3558">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3559">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3559">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3560">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3560">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3561">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3561">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3562">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3562">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3563">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3563">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3564"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3564"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3565"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3565">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="10d7e-3566"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3566">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="10d7e-3567"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3567">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3568"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3568">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3569">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3569">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3570"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3570">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3571">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3571">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="10d7e-3572"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3572">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3573">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3573">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3574">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3574">Otherwise, they are `false`.</span></span> <span data-ttu-id="10d7e-3575"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3575">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="10d7e-3576">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3576">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3577">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3577">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3578">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3578">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="10d7e-3579">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3579">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-3580">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3580">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3581">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3581">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3582">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3582">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3583">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3583">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3584">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3584">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3585">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3585">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3586">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3586">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3587">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3587">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3588">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3588">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3589">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3589">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3590">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3590">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3591">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3591">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="10d7e-3592">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3592">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="10d7e-3593">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3593">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3594"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3594"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3595"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3595"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3596"><paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3596"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3597"><see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3597">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="10d7e-3598">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3598">The value to be tested against each case.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3599">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3599">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3600">기본 사례가 없는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3600">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3601">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3601">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3602">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3602">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="10d7e-3603">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3603">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="10d7e-3604">경우 `switchValue` 일치 하지 않습니다의 경우 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3604">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3605">다음 예제에서는 기본 사례가 없는 스위치 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3605">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="10d7e-3606">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3606">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="10d7e-3607"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3607">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3608">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3608">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3609">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3609">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3610">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3610">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3611">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3611">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="10d7e-3612">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3612">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="10d7e-3613">하는 경우 `switchValue` 사례를 나타내는 기본 대/소문자와 일치 하지 않습니다 `defaultBody` 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3613">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3614">다음 예제에서는 기본 사례에는 스위치 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3614">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="10d7e-3615">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3615">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="10d7e-3616"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3616">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="10d7e-3617">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3617">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3618">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3618">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3619">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3619">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3620">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3620">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="10d7e-3621">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3621">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="10d7e-3622"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3622">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="10d7e-3623">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3623">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3624">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3624">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3625">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3625">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3626">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3626">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3627">switch의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3627">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="10d7e-3628">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3628">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="10d7e-3629"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3629">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="10d7e-3630">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3630">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3631">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3631">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3632">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3632">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3633">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3633">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3634">switch의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3634">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="10d7e-3635">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3635">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="10d7e-3636"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3636">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="10d7e-3637">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3637">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="10d7e-3638">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3638">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3639">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3639">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3640">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3640">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3641"><see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3641">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3642">case의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3642">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="10d7e-3643">case의 테스트 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3643">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="10d7e-3644"><see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3644">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3645">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3645">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3646">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3646">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="10d7e-3647">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3647">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3648">다음 예제에서는 기본 사례에는 스위치 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3648">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3649">case의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3649">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="10d7e-3650">case의 테스트 값입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3650">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="10d7e-3651"><see cref="T:System.Linq.Expressions.SwitchCase" />에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3651">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3652">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3652">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3653"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3653">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="10d7e-3654"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3654">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3655"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3655">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3656"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3656">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="10d7e-3657"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3657">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="10d7e-3658"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3658">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3659"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3659">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3660"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3660">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="10d7e-3661"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3661">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="10d7e-3662"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3662">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="10d7e-3663"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3663">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3664"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3664">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3665"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3665">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor, documentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="10d7e-3666"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3666">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="10d7e-3667"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="10d7e-3668"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3668">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <param name="documentType"><span data-ttu-id="10d7e-3669"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3669">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3670"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3670">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3671"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3671">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3672">예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="10d7e-3673"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3673">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="10d7e-3674">예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3674">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3675">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3675">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-3676">다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.TryExpression> 사용 하는 개체는 <xref:System.Linq.Expressions.Expression.Throw%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3676">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="10d7e-3677"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3677">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3678">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3678">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3679">지정된 형식을 사용하여 예외를 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3679">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3680">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3680">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10d7e-3681"><see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3681">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3682"><see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3682">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatch : System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatch (body, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3683">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3683">The body of the try block.</span></span></param>
        <param name="handlers"><span data-ttu-id="10d7e-3684">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3684">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="10d7e-3685">원하는 수의 catch 문을 사용하고 fault 또는 finally 블록은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3685">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3686">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3686">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-3687">다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.TryExpression> catch 문이 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3687">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatchFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatchFinally (body, finally, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3688">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3688">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="10d7e-3689">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3689">The body of the finally block.</span></span></param>
        <param name="handlers"><span data-ttu-id="10d7e-3690">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3690">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="10d7e-3691">원하는 수의 catch 문과 finally 블록 하나를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3691">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3692">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3692">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10d7e-3693">다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.TryExpression> catch 문이 포함 된 개체 및 finally 문을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3693">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberSignature Language="F#" Value="static member TryFault : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFault (body, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3694">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3694">The body of the try block.</span></span></param>
        <param name="fault"><span data-ttu-id="10d7e-3695">fault 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3695">The body of the fault block.</span></span></param>
        <summary><span data-ttu-id="10d7e-3696">catch 문은 사용하지 않고 fault 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3696">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3697">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3697">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberSignature Language="F#" Value="static member TryFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFinally (body, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="10d7e-3698">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3698">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="10d7e-3699">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3699">The body of the finally block.</span></span></param>
        <summary><span data-ttu-id="10d7e-3700">catch 문은 사용하지 않고 finally 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3700">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3701">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3701">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberSignature Language="F#" Value="static member TryGetActionType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetActionType (typeArgs, actionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="10d7e-3702">System.Action 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3702">An array of Type objects that specify the type arguments for the System.Action delegate type.</span></span></param>
        <param name="actionType"><span data-ttu-id="10d7e-3703">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Action 대리자 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3703">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span></span> <span data-ttu-id="10d7e-3704"><paramref name="typeArgs" />와 일치하는 제네릭 System.Action 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3704">Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="10d7e-3705">특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3705">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3706">제네릭 System.Action 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3706"><see langword="true" /> if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberSignature Language="F#" Value="static member TryGetFuncType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetFuncType (typeArgs, funcType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="10d7e-3707">System.Func 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3707">An array of Type objects that specify the type arguments for the System.Func delegate type.</span></span></param>
        <param name="funcType"><span data-ttu-id="10d7e-3708">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Func 대리자 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3708">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="10d7e-3709"><paramref name="typeArgs" />와 일치하는 제네릭 System.Func 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3709">Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="10d7e-3710">특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3710">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="10d7e-3711">마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3711">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3712">제네릭 System.Func 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3712"><see langword="true" /> if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10d7e-3713">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3713">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span></span></summary>
        <value><span data-ttu-id="10d7e-3714">식의 정적 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3714">The <see cref="T:System.Type" /> that represents the static type of the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3715">합니다 <xref:System.Linq.Expressions.Expression.NodeType%2A> 식 트리 노드를의 형식인 반면를 <xref:System.Linq.Expressions.Expression.Type%2A> 노드에서 나타내는 식의 정적 공용 언어 런타임 (CLR) 형식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3715">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="10d7e-3716">예를 들어, 다양 한 노드 형식 사용 하 여 두 개의 노드가 있습니다 동일한 <xref:System.Linq.Expressions.Expression.Type%2A>다음 코드 예제에 나와 있는 것 처럼 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3716">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeAs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.TypeAs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3717"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3717">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3718"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3718">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3719">변환에 실패하면 <see cref="T:System.Linq.Expressions.UnaryExpression" />이 제공되는 boxing 변환이나 명시적 참조를 나타내는 <see langword="null" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3719">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3720"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3720">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3721">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3721">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="10d7e-3722">합니다 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 모두 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3722">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3723">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> 메서드를를 <xref:System.Linq.Expressions.UnaryExpression> 나타내는 nullable 정수 형식이 nullable이 아닌 정수 식의 참조 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3723">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3724"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3724"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeEqual : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeEqual (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3725"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3725">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3726"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3726">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3727">런타임 형식 ID를 비교하는 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3727">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3728"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성은 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 및 <see cref="T:System.Linq.Expressions.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3728">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeIs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeIs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3729"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3729">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3730"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3731"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3731">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3732"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성은 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3732">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3733">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 나타냅니다 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3733">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10d7e-3734">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> 메서드를를 <xref:System.Linq.Expressions.TypeBinaryExpression> 에 대 한 문자열 값의 형식 테스트를 나타내는 <xref:System.Int32> 형식.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3734">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3735"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3735"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3736">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3736">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3737"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3737">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3738">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3738">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3739"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3739">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3740">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3740">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-3741"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3741">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3742">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3742">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3743">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3743">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3744">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3744">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3745">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3745">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3746">경우 `expression`합니다. 형식은 단항 더하기 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3746">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3747">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3747">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3748">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3748">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3749">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3749">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3750">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3750">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3751">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3751">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3752">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3752">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3753">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3753">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3754">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3754">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3755">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3755">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-3756">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3756">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3757">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3757">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3758"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3758"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3759"><paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3759">The unary plus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3760"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3760">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="10d7e-3761"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3761">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="10d7e-3762">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3762">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3763"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3763">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3764">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3764">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="10d7e-3765"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3765">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="10d7e-3766">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3766">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="10d7e-3767">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3767">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="10d7e-3768">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="10d7e-3768">Implementing Method</span></span>  
 <span data-ttu-id="10d7e-3769">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3769">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="10d7e-3770">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3770">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="10d7e-3771">경우 `expression`합니다. 형식은 단항 더하기 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3771">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3772">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3772">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="10d7e-3773">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="10d7e-3773">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="10d7e-3774">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3774">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="10d7e-3775">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3775">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3776">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3776">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="10d7e-3777">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="10d7e-3777">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="10d7e-3778">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3778">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="10d7e-3779">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3779">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="10d7e-3780">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3780">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="10d7e-3781">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3781">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="10d7e-3782">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3782">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="10d7e-3783"><paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3783"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10d7e-3784"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3784"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="10d7e-3785"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3785"><paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="10d7e-3786">또는</span><span class="sxs-lookup"><span data-stu-id="10d7e-3786">-or-</span></span> 
 <span data-ttu-id="10d7e-3787"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="10d7e-3787"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Unbox : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Unbox (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="10d7e-3788">unboxing할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3788">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span></span></param>
        <param name="type"><span data-ttu-id="10d7e-3789">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3789">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="10d7e-3790">명시적 unboxing을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3790">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3791"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3791">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="10d7e-3792">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3792">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Variable : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3793">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3793">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="10d7e-3794">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3794">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3795">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3795">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Variable : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="10d7e-3796">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3796">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="10d7e-3797">매개 변수나 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3797">The name of the parameter or variable.</span></span> <span data-ttu-id="10d7e-3798">이 이름은 디버깅 또는 인쇄용으로만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3798">This name is used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="10d7e-3799">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3799">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3800">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3800">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="10d7e-3801"><see cref="T:System.Func`2" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3801">An instance of <see cref="T:System.Func`2" />.</span></span></param>
        <summary><span data-ttu-id="10d7e-3802">노드를 줄인 다음 줄인 식에서 방문자 대리자를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3802">Reduces the node and then calls the visitor delegate on the reduced expression.</span></span> <span data-ttu-id="10d7e-3803">이 메서드는 노드를 줄일 수 없으면 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3803">The method throws an exception if the node is not reducible.</span></span></summary>
        <returns><span data-ttu-id="10d7e-3804">방문하는 식 또는 트리에서 해당 식을 바꿀 식입니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3804">The expression being visited, or an expression which should replace it in the tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10d7e-3805">노드의 자식을 탐색 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3805">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="10d7e-3806">일반적인 구현에서는 방문자를 호출 합니다. 각 자식에 방문 하 고 있으면 해당 변경, 수정 된 자식 사용 하 여 자체의 새 복사본을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="10d7e-3806">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>